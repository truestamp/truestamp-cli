import { Commitment, CommitmentVerification, SignedKey } from './types.d.ts';
/**
 * A function to check if a commitment is valid. If there are any errors,
 * the appropriate 'ok' property will be set to 'false' but no error will be
 * thrown.
 *
 * You can provide a list of signed keys from https://keys.truestamp.com that were
 * previously saved.
 *
 * @param commitment A commitment object to verify.
 * @param options.keys Force use of a set of keys.
 * @returns A promise that resolves to an Object. The top-level `ok` property will be 'true' if the entire proof is verified.
 *
 * @example Sample output:
 * *
 * * ```typescript
 * {
 *   ok: true,
 *   id: 'T11_01G63P5WPW0CWJ7N6WGAXEXGJH_1655833818400000_A6D3501894C9D27D3A626B6E1ACFCD1B',
 *   offline: false,
 *   testEnv: true,
 *   itemData: {
 *     hash: 'c15fbfedf73881e7264ccefbabdcb679d247348e35dea14eba1d906c174c3e8e',
 *     signaturesCount: 1,
 *     signaturesVerified: true,
 *   },
 *   item: {
 *     hash: '7901019d4f28788058e5e661e756d33049ad40f69dbf3057c8260f1dde8dfeb8',
 *   },
 *   commitmentData: {
 *     hash: 'bf58d1780fe8a5fb30be1599781e96857bc21e3eb0a530f1c3d75b72d51833c9',
 *     signaturesCount: 1,
 *     signaturesVerified: true,
 *     signaturesPublicKeyVerified: true,
 *   },
 *   proofs: [
 *     {
 *       ok: true,
 *       inputHash: '7901019d4f28788058e5e661e756d33049ad40f69dbf3057c8260f1dde8dfeb8',
 *       merkleRoot: '7d371488a002714c9d2efb7f86da7c289bd865d0b359a1dadd13966078f7abce',
 *     },
 *   ],
 *   transactions: [
 *     {
 *       ok: true,
 *       offline: false,
 *       intent: 'xlm',
 *       inputHash: '7d371488a002714c9d2efb7f86da7c289bd865d0b359a1dadd13966078f7abce',
 *       transactionId: '09f0c766b0d393f27a7eddfceea46167106cd8fd4f21756196117876d5880503',
 *       blockId: '1600114',
 *       timestamp: '2022-06-21T17:52:06Z',
 *       urlApi: 'https://horizon-testnet.stellar.org/transactions/09f0c766b0d393f27a7eddfceea46167106cd8fd4f21756196117876d5880503',
 *       urlWeb: 'https://stellar.expert/explorer/testnet/tx/09f0c766b0d393f27a7eddfceea46167106cd8fd4f21756196117876d5880503',
 *     },
 *   ],
 * }
 * ```
 */
export declare function verify(commitment: Commitment, options?: {
    keys?: SignedKey[];
}): Promise<CommitmentVerification>;
/**
 * Offline version of `verify()`.
 *
 * In offline mode, if no keys are provided, the library will attempt to
 * use a backup copy of the keys stored in this library. These backup keys
 * are not guaranteed to be current, but they are the best available option.
 *
 * In offline mode, the library will **not** attempt to verify transactions
 * against the actual on-chain state. It will only verify that the commitment
 * is internally cryptographically sound. Since it does not have access to the
 * on-chain state, it cannot verify or display a timestamp attested to by
 * any transactions in this commitment. You can still use the transaction
 * information provided to manually (with your eyes) verify the transaction
 * against the on-chain state using, for example, a block explorer.

 * @param commitment A commitment object to verify offline.
 * @param options.keys Force use of a set of keys offline.
 * @returns A promise that resolves to an Object. The top-level `ok` property will be 'true' if the entire proof is verified offline.
 *
 */
export declare function verifyUnsafelyOffline(commitment: Commitment, options?: {
    keys?: SignedKey[];
}): Promise<CommitmentVerification>;
/**
 * Predicate function to check if a commitment is valid and returning true|false. Throws no Errors.
 * @param commitment A commitment object to verify.
 * @param options.keys Force use of a set of keys.
 * @returns A promise that resolves to a boolean indicating if the commitment is valid.
 */
export declare function isVerified(commitment: Commitment, options?: {
    keys?: SignedKey[];
}): Promise<boolean>;
/**
 * Predicate function to check if a commitment is valid and returning true|false offline. Throws no Errors.
 * @param commitment A commitment object to verify offline.
 * @param options.keys Force use of a set of keys offline.
 * @returns A promise that resolves to a boolean indicating if the commitment is valid.
 */
export declare function isVerifiedUnsafelyOffline(commitment: Commitment, options?: {
    keys?: SignedKey[];
}): Promise<boolean>;
/**
 * Assert that the commitment is valid. If not, throw an Error.
 * @param commitment A commitment object to verify.
 * @param options.keys Force use of a set of keys.
 * @returns A promise that resolves to void when the commitment is valid.
 */
export declare function assertVerified(commitment: Commitment, options?: {
    keys?: SignedKey[];
}): Promise<void>;
/**
 * Assert that the commitment is valid offline. If not, throw an Error.
 * @param commitment A commitment object to verify offline.
 * @param options.keys Force use of a set of keys offline.
 * @returns A promise that resolves to void when the commitment is valid.
 */
export declare function assertVerifiedUnsafelyOffline(commitment: Commitment, options?: {
    keys?: SignedKey[];
}): Promise<void>;
