import { Commitment, CommitmentVerification, SignedKey } from './types.d.ts';
/**
 * A function to check if a commitment is valid. If there are any errors,
 * the appropriate 'ok' property will be set to 'false' but no error will be
 * thrown.
 *
 * You can provide a list of signed keys from https://keys.truestamp.com that were
 * previously saved.
 *
 * @param commitment A commitment object to verify.
 * @param options.keys Force use of a set of keys.
 * @returns A promise that resolves to an Object. The top-level `ok` property will be 'true' if the entire proof is verified.
 *
 * @example Sample output:
 * *
 * * ```typescript
 *{
 *  type: 'commitment-verification',
 *  ok: true,
 *  offline: false,
 *  testEnv: true,
 *  signature: { hash: true, publicKey: true, verified: true },
 *  proofs: [
 *    {
 *      ok: true,
 *      inputHash: 'b1fc469deae708277eb87b089800731a57f61ddbddf0c71332288397daffa8fa',
 *      merkleRoot: 'ebbe387c731b1fdcee412b4fc7c82d966cd0276e79c6a9c319e304dd78dedac4'
 *    },
 *    {
 *      ok: true,
 *      inputHash: 'ebbe387c731b1fdcee412b4fc7c82d966cd0276e79c6a9c319e304dd78dedac4',
 *      merkleRoot: '93c5277c0135e85b61a9798345e8c3ea21b17c0f85defe45e390b4758cf1b16b'
 *    },
 *    {
 *      ok: true,
 *      inputHash: '93c5277c0135e85b61a9798345e8c3ea21b17c0f85defe45e390b4758cf1b16b',
 *      merkleRoot: '333e65c8b3ee8c4a095dfb97890d295a0d36097cf03e391118f4a214e8c171a2'
 *    },
 *    {
 *      ok: true,
 *      inputHash: '333e65c8b3ee8c4a095dfb97890d295a0d36097cf03e391118f4a214e8c171a2',
 *      merkleRoot: '37aea4f6c62d1fb647fca9e13f90a474033fdd0102df00c80623ab8e6dd9aefe'
 *    }
 *  ],
 *  transactions: [
 *    {
 *      ok: true,
 *      offline: false,
 *      intent: 'xlm',
 *      inputHash: 'ebbe387c731b1fdcee412b4fc7c82d966cd0276e79c6a9c319e304dd78dedac4',
 *      transactionId: '3c702c91598c7ae69d80d6cebe4faf329680ddadb6c2621ad8235f0f999e37a9',
 *      blockId: '1071745',
 *      timestamp: '2022-05-20T14:33:03Z',
 *      urlApi: 'https://horizon-testnet.stellar.org/transactions/3c702c91598c7ae69d80d6cebe4faf329680ddadb6c2621ad8235f0f999e37a9',
 *      urlWeb: 'https://stellar.expert/explorer/testnet/tx/3c702c91598c7ae69d80d6cebe4faf329680ddadb6c2621ad8235f0f999e37a9'
 *    }
 *  ]
 *}
 * ```
 */
export declare function verify(commitment: Commitment, options?: {
    keys?: SignedKey[];
}): Promise<CommitmentVerification>;
/**
 * Offline version of `verify()`.
 *
 * In offline mode, if no keys are provided, the library will attempt to
 * use a backup copy of the keys stored in this library. These backup keys
 * are not guaranteed to be current, but they are the best available option.
 *
 * In offline mode, the library will **not** attempt to verify transactions
 * against the actual on-chain state. It will only verify that the commitment
 * is internally cryptographically sound. Since it does not have access to the
 * on-chain state, it cannot verify or display a timestamp attested to by
 * any transactions in this commitment. You can still use the transaction
 * information provided to manually (with your eyes) verify the transaction
 * against the on-chain state using, for example, a block explorer.

 * @param commitment A commitment object to verify offline.
 * @param options.keys Force use of a set of keys offline.
 * @returns A promise that resolves to an Object. The top-level `ok` property will be 'true' if the entire proof is verified offline.
 *
 */
export declare function verifyUnsafelyOffline(commitment: Commitment, options?: {
    keys?: SignedKey[];
}): Promise<CommitmentVerification>;
/**
 * Predicate function to check if a commitment is valid and returning true|false. Throws no Errors.
 * @param commitment A commitment object to verify.
 * @param options.keys Force use of a set of keys.
 * @returns A promise that resolves to a boolean indicating if the commitment is valid.
 */
export declare function isVerified(commitment: Commitment, options?: {
    keys?: SignedKey[];
}): Promise<boolean>;
/**
 * Predicate function to check if a commitment is valid and returning true|false offline. Throws no Errors.
 * @param commitment A commitment object to verify offline.
 * @param options.keys Force use of a set of keys offline.
 * @returns A promise that resolves to a boolean indicating if the commitment is valid.
 */
export declare function isVerifiedUnsafelyOffline(commitment: Commitment, options?: {
    keys?: SignedKey[];
}): Promise<boolean>;
/**
 * Assert that the commitment is valid. If not, throw an Error.
 * @param commitment A commitment object to verify.
 * @param options.keys Force use of a set of keys.
 * @returns A promise that resolves to void when the commitment is valid.
 */
export declare function assertVerified(commitment: Commitment, options?: {
    keys?: SignedKey[];
}): Promise<void>;
/**
 * Assert that the commitment is valid offline. If not, throw an Error.
 * @param commitment A commitment object to verify offline.
 * @param options.keys Force use of a set of keys offline.
 * @returns A promise that resolves to void when the commitment is valid.
 */
export declare function assertVerifiedUnsafelyOffline(commitment: Commitment, options?: {
    keys?: SignedKey[];
}): Promise<void>;
