var createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
var rotr = (word, shift) => word << 32 - shift | word >>> shift;
var isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!isLE)
  throw new Error("Non little-endian hardware is not supported");
var hexes = Array.from({length: 256}, (v, i) => i.toString(16).padStart(2, "0"));
function bytesToHex(uint8a) {
  let hex = "";
  for (let i = 0; i < uint8a.length; i++) {
    hex += hexes[uint8a[i]];
  }
  return hex;
}
var nextTick = (() => {
  const nodeRequire = typeof module !== "undefined" && typeof module.require === "function" && module.require.bind(module);
  try {
    if (nodeRequire) {
      const {setImmediate} = nodeRequire("timers");
      return () => new Promise((resolve) => setImmediate(resolve));
    }
  } catch (e) {
  }
  return () => new Promise((resolve) => setTimeout(resolve, 0));
})();
function utf8ToBytes(str) {
  if (typeof str !== "string") {
    throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);
  }
  return new TextEncoder().encode(str);
}
function toBytes(data) {
  if (typeof data === "string")
    data = utf8ToBytes(data);
  if (!(data instanceof Uint8Array))
    throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);
  return data;
}
function assertNumber(n) {
  if (!Number.isSafeInteger(n) || n < 0)
    throw new Error(`Wrong positive integer: ${n}`);
}
function assertHash(hash) {
  if (typeof hash !== "function" || typeof hash.create !== "function")
    throw new Error("Hash should be wrapped by utils.wrapConstructor");
  assertNumber(hash.outputLen);
  assertNumber(hash.blockLen);
}
var Hash = class {
  clone() {
    return this._cloneInto();
  }
};
function wrapConstructor(hashConstructor) {
  const hashC = (message) => hashConstructor().update(toBytes(message)).digest();
  const tmp = hashConstructor();
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = () => hashConstructor();
  return hashC;
}
var HMAC = class extends Hash {
  constructor(hash, _key) {
    super();
    this.finished = false;
    this.destroyed = false;
    assertHash(hash);
    const key = toBytes(_key);
    this.iHash = hash.create();
    if (!(this.iHash instanceof Hash))
      throw new TypeError("Expected instance of class which extends utils.Hash");
    const blockLen = this.blockLen = this.iHash.blockLen;
    this.outputLen = this.iHash.outputLen;
    const pad = new Uint8Array(blockLen);
    pad.set(key.length > this.iHash.blockLen ? hash.create().update(key).digest() : key);
    for (let i = 0; i < pad.length; i++)
      pad[i] ^= 54;
    this.iHash.update(pad);
    this.oHash = hash.create();
    for (let i = 0; i < pad.length; i++)
      pad[i] ^= 54 ^ 92;
    this.oHash.update(pad);
    pad.fill(0);
  }
  update(buf) {
    if (this.destroyed)
      throw new Error("instance is destroyed");
    this.iHash.update(buf);
    return this;
  }
  digestInto(out) {
    if (this.destroyed)
      throw new Error("instance is destroyed");
    if (!(out instanceof Uint8Array) || out.length !== this.outputLen)
      throw new Error("HMAC: Invalid output buffer");
    if (this.finished)
      throw new Error("digest() was already called");
    this.finished = true;
    this.iHash.digestInto(out);
    this.oHash.update(out);
    this.oHash.digestInto(out);
    this.destroy();
  }
  digest() {
    const out = new Uint8Array(this.oHash.outputLen);
    this.digestInto(out);
    return out;
  }
  _cloneInto(to) {
    to || (to = Object.create(Object.getPrototypeOf(this), {}));
    const {oHash, iHash, finished, destroyed, blockLen, outputLen} = this;
    to = to;
    to.finished = finished;
    to.destroyed = destroyed;
    to.blockLen = blockLen;
    to.outputLen = outputLen;
    to.oHash = oHash._cloneInto(to.oHash);
    to.iHash = iHash._cloneInto(to.iHash);
    return to;
  }
  destroy() {
    this.destroyed = true;
    this.oHash.destroy();
    this.iHash.destroy();
  }
};
var hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();
hmac.create = (hash, key) => new HMAC(hash, key);
function setBigUint64(view, byteOffset, value, isLE2) {
  if (typeof view.setBigUint64 === "function")
    return view.setBigUint64(byteOffset, value, isLE2);
  const _32n = BigInt(32);
  const _u32_max = BigInt(4294967295);
  const wh = Number(value >> _32n & _u32_max);
  const wl = Number(value & _u32_max);
  const h = isLE2 ? 4 : 0;
  const l = isLE2 ? 0 : 4;
  view.setUint32(byteOffset + h, wh, isLE2);
  view.setUint32(byteOffset + l, wl, isLE2);
}
var SHA2 = class extends Hash {
  constructor(blockLen, outputLen, padOffset, isLE2) {
    super();
    this.blockLen = blockLen;
    this.outputLen = outputLen;
    this.padOffset = padOffset;
    this.isLE = isLE2;
    this.finished = false;
    this.length = 0;
    this.pos = 0;
    this.destroyed = false;
    this.buffer = new Uint8Array(blockLen);
    this.view = createView(this.buffer);
  }
  update(data) {
    if (this.destroyed)
      throw new Error("instance is destroyed");
    const {view, buffer, blockLen, finished} = this;
    if (finished)
      throw new Error("digest() was already called");
    data = toBytes(data);
    const len = data.length;
    for (let pos = 0; pos < len; ) {
      const take = Math.min(blockLen - this.pos, len - pos);
      if (take === blockLen) {
        const dataView = createView(data);
        for (; blockLen <= len - pos; pos += blockLen)
          this.process(dataView, pos);
        continue;
      }
      buffer.set(data.subarray(pos, pos + take), this.pos);
      this.pos += take;
      pos += take;
      if (this.pos === blockLen) {
        this.process(view, 0);
        this.pos = 0;
      }
    }
    this.length += data.length;
    this.roundClean();
    return this;
  }
  digestInto(out) {
    if (this.destroyed)
      throw new Error("instance is destroyed");
    if (!(out instanceof Uint8Array) || out.length < this.outputLen)
      throw new Error("_Sha2: Invalid output buffer");
    if (this.finished)
      throw new Error("digest() was already called");
    this.finished = true;
    const {buffer, view, blockLen, isLE: isLE2} = this;
    let {pos} = this;
    buffer[pos++] = 128;
    this.buffer.subarray(pos).fill(0);
    if (this.padOffset > blockLen - pos) {
      this.process(view, 0);
      pos = 0;
    }
    for (let i = pos; i < blockLen; i++)
      buffer[i] = 0;
    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE2);
    this.process(view, 0);
    const oview = createView(out);
    this.get().forEach((v, i) => oview.setUint32(4 * i, v, isLE2));
  }
  digest() {
    const {buffer, outputLen} = this;
    this.digestInto(buffer);
    const res = buffer.slice(0, outputLen);
    this.destroy();
    return res;
  }
  _cloneInto(to) {
    to || (to = new this.constructor());
    to.set(...this.get());
    const {blockLen, buffer, length, finished, destroyed, pos} = this;
    to.length = length;
    to.pos = pos;
    to.finished = finished;
    to.destroyed = destroyed;
    if (length % blockLen)
      to.buffer.set(buffer);
    return to;
  }
};
var Chi = (a, b, c) => a & b ^ ~a & c;
var Maj = (a, b, c) => a & b ^ a & c ^ b & c;
var SHA256_K = new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]);
var IV = new Uint32Array([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]);
var SHA256_W = new Uint32Array(64);
var SHA256 = class extends SHA2 {
  constructor() {
    super(64, 32, 8, false);
    this.A = IV[0] | 0;
    this.B = IV[1] | 0;
    this.C = IV[2] | 0;
    this.D = IV[3] | 0;
    this.E = IV[4] | 0;
    this.F = IV[5] | 0;
    this.G = IV[6] | 0;
    this.H = IV[7] | 0;
  }
  get() {
    const {A, B, C, D, E, F, G, H} = this;
    return [A, B, C, D, E, F, G, H];
  }
  set(A, B, C, D, E, F, G, H) {
    this.A = A | 0;
    this.B = B | 0;
    this.C = C | 0;
    this.D = D | 0;
    this.E = E | 0;
    this.F = F | 0;
    this.G = G | 0;
    this.H = H | 0;
  }
  process(view, offset) {
    for (let i = 0; i < 16; i++, offset += 4)
      SHA256_W[i] = view.getUint32(offset, false);
    for (let i = 16; i < 64; i++) {
      const W15 = SHA256_W[i - 15];
      const W2 = SHA256_W[i - 2];
      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ W15 >>> 3;
      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ W2 >>> 10;
      SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;
    }
    let {A, B, C, D, E, F, G, H} = this;
    for (let i = 0; i < 64; i++) {
      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);
      const T1 = H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i] | 0;
      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);
      const T2 = sigma0 + Maj(A, B, C) | 0;
      H = G;
      G = F;
      F = E;
      E = D + T1 | 0;
      D = C;
      C = B;
      B = A;
      A = T1 + T2 | 0;
    }
    A = A + this.A | 0;
    B = B + this.B | 0;
    C = C + this.C | 0;
    D = D + this.D | 0;
    E = E + this.E | 0;
    F = F + this.F | 0;
    G = G + this.G | 0;
    H = H + this.H | 0;
    this.set(A, B, C, D, E, F, G, H);
  }
  roundClean() {
    SHA256_W.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0);
    this.buffer.fill(0);
  }
};
var sha256 = wrapConstructor(() => new SHA256());
var StructError = class extends TypeError {
  constructor(failure, failures) {
    let cached;
    const {
      message,
      ...rest
    } = failure;
    const {
      path
    } = failure;
    const msg = path.length === 0 ? message : "At path: " + path.join(".") + " -- " + message;
    super(msg);
    this.value = void 0;
    this.key = void 0;
    this.type = void 0;
    this.refinement = void 0;
    this.path = void 0;
    this.branch = void 0;
    this.failures = void 0;
    Object.assign(this, rest);
    this.name = this.constructor.name;
    this.failures = () => {
      var _cached;
      return (_cached = cached) != null ? _cached : cached = [failure, ...failures()];
    };
  }
};
function isIterable(x) {
  return isObject(x) && typeof x[Symbol.iterator] === "function";
}
function isObject(x) {
  return typeof x === "object" && x != null;
}
function isPlainObject(x) {
  if (Object.prototype.toString.call(x) !== "[object Object]") {
    return false;
  }
  const prototype = Object.getPrototypeOf(x);
  return prototype === null || prototype === Object.prototype;
}
function print(value) {
  return typeof value === "string" ? JSON.stringify(value) : "" + value;
}
function shiftIterator(input) {
  const {
    done,
    value
  } = input.next();
  return done ? void 0 : value;
}
function toFailure(result, context, struct, value) {
  if (result === true) {
    return;
  } else if (result === false) {
    result = {};
  } else if (typeof result === "string") {
    result = {
      message: result
    };
  }
  const {
    path,
    branch
  } = context;
  const {
    type
  } = struct;
  const {
    refinement,
    message = "Expected a value of type `" + type + "`" + (refinement ? " with refinement `" + refinement + "`" : "") + ", but received: `" + print(value) + "`"
  } = result;
  return {
    value,
    type,
    refinement,
    key: path[path.length - 1],
    path,
    branch,
    ...result,
    message
  };
}
function* toFailures(result, context, struct, value) {
  if (!isIterable(result)) {
    result = [result];
  }
  for (const r of result) {
    const failure = toFailure(r, context, struct, value);
    if (failure) {
      yield failure;
    }
  }
}
function* run(value, struct, options = {}) {
  const {
    path = [],
    branch = [value],
    coerce: coerce2 = false,
    mask: mask2 = false
  } = options;
  const ctx = {
    path,
    branch
  };
  if (coerce2) {
    value = struct.coercer(value, ctx);
    if (mask2 && struct.type !== "type" && isObject(struct.schema) && isObject(value) && !Array.isArray(value)) {
      for (const key in value) {
        if (struct.schema[key] === void 0) {
          delete value[key];
        }
      }
    }
  }
  let valid = true;
  for (const failure of struct.validator(value, ctx)) {
    valid = false;
    yield [failure, void 0];
  }
  for (let [k, v, s] of struct.entries(value, ctx)) {
    const ts = run(v, s, {
      path: k === void 0 ? path : [...path, k],
      branch: k === void 0 ? branch : [...branch, v],
      coerce: coerce2,
      mask: mask2
    });
    for (const t of ts) {
      if (t[0]) {
        valid = false;
        yield [t[0], void 0];
      } else if (coerce2) {
        v = t[1];
        if (k === void 0) {
          value = v;
        } else if (value instanceof Map) {
          value.set(k, v);
        } else if (value instanceof Set) {
          value.add(v);
        } else if (isObject(value)) {
          value[k] = v;
        }
      }
    }
  }
  if (valid) {
    for (const failure of struct.refiner(value, ctx)) {
      valid = false;
      yield [failure, void 0];
    }
  }
  if (valid) {
    yield [void 0, value];
  }
}
var Struct = class {
  constructor(props) {
    this.TYPE = void 0;
    this.type = void 0;
    this.schema = void 0;
    this.coercer = void 0;
    this.validator = void 0;
    this.refiner = void 0;
    this.entries = void 0;
    const {
      type,
      schema,
      validator,
      refiner,
      coercer = (value) => value,
      entries = function* () {
      }
    } = props;
    this.type = type;
    this.schema = schema;
    this.entries = entries;
    this.coercer = coercer;
    if (validator) {
      this.validator = (value, context) => {
        const result = validator(value, context);
        return toFailures(result, context, this, value);
      };
    } else {
      this.validator = () => [];
    }
    if (refiner) {
      this.refiner = (value, context) => {
        const result = refiner(value, context);
        return toFailures(result, context, this, value);
      };
    } else {
      this.refiner = () => [];
    }
  }
  assert(value) {
    return assert(value, this);
  }
  create(value) {
    return create(value, this);
  }
  is(value) {
    return is(value, this);
  }
  mask(value) {
    return mask(value, this);
  }
  validate(value, options = {}) {
    return validate(value, this, options);
  }
};
function assert(value, struct) {
  const result = validate(value, struct);
  if (result[0]) {
    throw result[0];
  }
}
function create(value, struct) {
  const result = validate(value, struct, {
    coerce: true
  });
  if (result[0]) {
    throw result[0];
  } else {
    return result[1];
  }
}
function mask(value, struct) {
  const result = validate(value, struct, {
    coerce: true,
    mask: true
  });
  if (result[0]) {
    throw result[0];
  } else {
    return result[1];
  }
}
function is(value, struct) {
  const result = validate(value, struct);
  return !result[0];
}
function validate(value, struct, options = {}) {
  const tuples = run(value, struct, options);
  const tuple = shiftIterator(tuples);
  if (tuple[0]) {
    const error = new StructError(tuple[0], function* () {
      for (const t of tuples) {
        if (t[0]) {
          yield t[0];
        }
      }
    });
    return [error, void 0];
  } else {
    const v = tuple[1];
    return [void 0, v];
  }
}
function define(name, validator) {
  return new Struct({
    type: name,
    schema: null,
    validator
  });
}
function pick(struct, keys) {
  const {
    schema
  } = struct;
  const subschema = {};
  for (const key of keys) {
    subschema[key] = schema[key];
  }
  return object(subschema);
}
function boolean() {
  return define("boolean", (value) => {
    return typeof value === "boolean";
  });
}
function enums(values) {
  const schema = {};
  const description = values.map((v) => print(v)).join();
  for (const key of values) {
    schema[key] = key;
  }
  return new Struct({
    type: "enums",
    schema,
    validator(value) {
      return values.includes(value) || "Expected one of `" + description + "`, but received: " + print(value);
    }
  });
}
function integer() {
  return define("integer", (value) => {
    return typeof value === "number" && !isNaN(value) && Number.isInteger(value) || "Expected an integer, but received: " + print(value);
  });
}
function never() {
  return define("never", () => false);
}
function object(schema) {
  const knowns = schema ? Object.keys(schema) : [];
  const Never = never();
  return new Struct({
    type: "object",
    schema: schema ? schema : null,
    *entries(value) {
      if (schema && isObject(value)) {
        const unknowns = new Set(Object.keys(value));
        for (const key of knowns) {
          unknowns.delete(key);
          yield [key, value[key], schema[key]];
        }
        for (const key of unknowns) {
          yield [key, value[key], Never];
        }
      }
    },
    validator(value) {
      return isObject(value) || "Expected an object, but received: " + print(value);
    },
    coercer(value) {
      return isObject(value) ? {
        ...value
      } : value;
    }
  });
}
function string() {
  return define("string", (value) => {
    return typeof value === "string" || "Expected a string, but received: " + print(value);
  });
}
function unknown() {
  return define("unknown", () => true);
}
function coerce(struct, condition, coercer) {
  return new Struct({
    ...struct,
    coercer: (value, ctx) => {
      return is(value, condition) ? struct.coercer(coercer(value, ctx), ctx) : struct.coercer(value, ctx);
    }
  });
}
function defaulted(struct, fallback, options = {}) {
  return coerce(struct, unknown(), (x) => {
    const f = typeof fallback === "function" ? fallback() : fallback;
    if (x === void 0) {
      return f;
    }
    if (!options.strict && isPlainObject(x) && isPlainObject(f)) {
      const ret = {
        ...x
      };
      let changed = false;
      for (const key in f) {
        if (ret[key] === void 0) {
          ret[key] = f[key];
          changed = true;
        }
      }
      if (changed) {
        return ret;
      }
    }
    return x;
  });
}
function min(struct, threshold, options = {}) {
  const {
    exclusive
  } = options;
  return refine(struct, "min", (value) => {
    return exclusive ? value > threshold : value >= threshold || "Expected a " + struct.type + " greater than " + (exclusive ? "" : "or equal to ") + threshold + " but received `" + value + "`";
  });
}
function pattern(struct, regexp) {
  return refine(struct, "pattern", (value) => {
    return regexp.test(value) || "Expected a " + struct.type + " matching `/" + regexp.source + '/` but received "' + value + '"';
  });
}
function size(struct, min2, max = min2) {
  const expected = "Expected a " + struct.type;
  const of = min2 === max ? "of `" + min2 + "`" : "between `" + min2 + "` and `" + max + "`";
  return refine(struct, "size", (value) => {
    if (typeof value === "number" || value instanceof Date) {
      return min2 <= value && value <= max || expected + " " + of + " but received `" + value + "`";
    } else if (value instanceof Map || value instanceof Set) {
      const {
        size: size2
      } = value;
      return min2 <= size2 && size2 <= max || expected + " with a size " + of + " but received one with a size of `" + size2 + "`";
    } else {
      const {
        length
      } = value;
      return min2 <= length && length <= max || expected + " with a length " + of + " but received one with a length of `" + length + "`";
    }
  });
}
function refine(struct, name, refiner) {
  return new Struct({
    ...struct,
    *refiner(value, ctx) {
      yield* struct.refiner(value, ctx);
      const result = refiner(value, ctx);
      const failures = toFailures(result, ctx, struct, value);
      for (const failure of failures) {
        yield {
          ...failure,
          refinement: name
        };
      }
    }
  });
}
var HMAC_LENGTH = 16;
var ID_PREFIX = "T";
var ID_SEPARATOR = "_";
var REGEX_ULID = /^[0123456789ABCDEFGHJKMNPQRSTVWXYZ]{26}$/;
var REGEX_HASH_HEX_20_64 = /^(([a-f0-9]{2}){20,64})$/i;
var REGEX_HMAC_KEY = /^(([a-f0-9]{2}){32,64})$/i;
var REGEX_HMAC_TRUNC = /^(([A-F0-9]{2}){16})$/i;
var REGEX_ID = /^T(1)(0|1)_[0123456789ABCDEFGHJKMNPQRSTVWXYZ]{26}_[0-9]{16}_[0-9A-F]{32}$/;
var IdV1Struct = object({
  prefix: defaulted(enums(["T"]), ID_PREFIX),
  version: size(integer(), 1, 1),
  test: defaulted(boolean(), false),
  ulid: pattern(string(), REGEX_ULID),
  timestamp: min(integer(), 16409952e8),
  envelopeHash: pattern(string(), REGEX_HASH_HEX_20_64),
  hmacKey: pattern(string(), REGEX_HMAC_KEY),
  hmac: pattern(string(), REGEX_HMAC_TRUNC),
  id: pattern(string(), REGEX_ID)
});
var IdV1ParseArgsStruct = pick(IdV1Struct, ["id"]);
var IdV1ParsedStruct = pick(IdV1Struct, [
  "prefix",
  "version",
  "test",
  "ulid",
  "timestamp",
  "hmac"
]);
var IdV1EncodeArgsStruct = pick(IdV1Struct, [
  "version",
  "test",
  "ulid",
  "timestamp",
  "envelopeHash",
  "hmacKey"
]);
var IdV1DecodeArgsStruct = pick(IdV1Struct, [
  "id",
  "envelopeHash",
  "hmacKey"
]);
var IdV1DecodeStruct = pick(IdV1Struct, [
  "version",
  "test",
  "ulid",
  "timestamp",
  "envelopeHash"
]);
var IdV1DecodeUnsafelyStruct = pick(IdV1Struct, [
  "version",
  "test",
  "ulid",
  "timestamp"
]);
var parseId = (args) => {
  try {
    const validArgs = create(args, IdV1ParseArgsStruct);
    const [prefixVerTest, ulid, timestamp, hmac2] = validArgs.id.split(ID_SEPARATOR);
    const [prefix, version, test] = prefixVerTest.split("");
    const parsed = {
      prefix,
      version: parseInt(version, 10),
      test: parseInt(test, 10) == 1 ? true : false,
      ulid,
      timestamp: parseInt(timestamp, 10),
      hmac: hmac2
    };
    assert(parsed, IdV1ParsedStruct);
    return parsed;
  } catch (error) {
    if (error instanceof StructError) {
      throw new Error(`Invalid Id structure: ${error.message}`);
    } else if (error instanceof Error) {
      throw new Error(`Invalid Id: ${error.message}`);
    } else {
      throw error;
    }
  }
};
var encode = (args) => {
  const validArgs = create(args, IdV1EncodeArgsStruct);
  const idBase = `${ID_PREFIX}${validArgs.version}${validArgs.test ? 1 : 0}_${validArgs.ulid}_${validArgs.timestamp}`;
  const hmacMessage = `${idBase}${ID_SEPARATOR}${validArgs.envelopeHash}`;
  const idHmac = hmac(sha256, validArgs.hmacKey, hmacMessage);
  const idHmacSliced = bytesToHex(idHmac.slice(0, HMAC_LENGTH));
  const idHmacSlicedUpper = idHmacSliced.toUpperCase();
  return `${idBase}${ID_SEPARATOR}${idHmacSlicedUpper}`;
};
var decode = (args) => {
  try {
    const validArgs = create(args, IdV1DecodeArgsStruct);
    const {prefix, version, test, ulid, timestamp, hmac: hmac2} = parseId({
      id: validArgs.id
    });
    const idBase = `${prefix}${version}${test ? 1 : 0}_${ulid}_${timestamp}`;
    const hmacMessage = `${idBase}${ID_SEPARATOR}${validArgs.envelopeHash}`;
    const idHmac = hmac(sha256, validArgs.hmacKey, hmacMessage);
    const truncatedHmac = bytesToHex(idHmac).slice(0, 32).toUpperCase();
    if (truncatedHmac !== hmac2) {
      throw new Error(`Invalid HMAC for Id: ${validArgs.id}`);
    }
    const createdId = create({
      version,
      test,
      ulid,
      timestamp,
      envelopeHash: validArgs.envelopeHash
    }, IdV1DecodeStruct);
    return createdId;
  } catch (error) {
    if (error instanceof StructError) {
      throw new Error(`Invalid Id structure: ${error.message}`);
    } else if (error instanceof Error) {
      throw new Error(`Invalid Id: ${error.message}`);
    } else {
      throw error;
    }
  }
};
var decodeUnsafely = ({id}) => {
  const {version, test, ulid, timestamp} = parseId({id});
  try {
    const createdId = create({
      version,
      test,
      ulid,
      timestamp
    }, IdV1DecodeUnsafelyStruct);
    return createdId;
  } catch (error) {
    if (error instanceof StructError) {
      throw new Error(`Invalid Id structure: ${error.message}`);
    } else if (error instanceof Error) {
      throw new Error(`Invalid Id: ${error.message}`);
    } else {
      throw error;
    }
  }
};
var isValid = (args) => {
  try {
    const validArgs = create(args, IdV1DecodeArgsStruct);
    decode({
      id: validArgs.id,
      envelopeHash: validArgs.envelopeHash,
      hmacKey: validArgs.hmacKey
    });
    return true;
  } catch (error) {
    return false;
  }
};
var isValidUnsafely = ({id}) => {
  try {
    decodeUnsafely({id});
    return true;
  } catch (error) {
    return false;
  }
};
/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
export {IdV1DecodeArgsStruct, IdV1DecodeStruct, IdV1DecodeUnsafelyStruct, IdV1EncodeArgsStruct, IdV1ParseArgsStruct, IdV1ParsedStruct, IdV1Struct, decode, decodeUnsafely, encode, isValid, isValidUnsafely};
export default null;
