import { Commitment, CommitmentVerification, EntropyResponse, SignedKey } from './types.d.ts';
declare type OptionsType = {
    keys?: SignedKey[];
    entropyFromHashFunction?: ((hash: string) => Promise<EntropyResponse | undefined>) | undefined;
    skipItemSignatureVerification?: boolean;
    skipCommitmentSignatureVerification?: boolean;
};
/**
 * A function to check if a commitment is valid. If there are any errors,
 * the appropriate 'success' property will be set to 'false' but no error will be
 * thrown.
 *
 * You can provide a list of signed keys from https://keys.truestamp.com that were
 * previously saved.
 *
 * @param commitment A commitment object to verify.
 * @param options.keys Force use of a set of keys.
 * @param options.entropyFromHashFunction A function that returns the entropy for a given hash. Useful to pass when using Cloudflare workers service bindings.
 * @param options.skipItemSignatureVerification Skip verification of the item signature.
 * @param options.skipCommitmentSignatureVerification Skip verification of the commitment signature.
 * @returns A promise that resolves to an Object. The top-level `success` property will be 'true' if the entire proof is verified.
 */
export declare function verify(commitment: Commitment, options?: OptionsType): Promise<CommitmentVerification>;
/**
 * Predicate function to check if a commitment is valid and returning true|false. Throws no Errors.
 * @param commitment A commitment object to verify.
 * @param options.keys Force use of a set of keys.
 * @param options.entropyFromHashFunction A function that returns the entropy for a given hash. Useful to pass when using Cloudflare workers service bindings.
 * @param options.skipItemSignatureVerification Skip verification of the item signature.
 * @param options.skipCommitmentSignatureVerification Skip verification of the commitment signature.
 * @returns A promise that resolves to a boolean indicating if the commitment is valid.
 */
export declare function isVerified(commitment: Commitment, options?: OptionsType): Promise<boolean>;
/**
 * Assert that the commitment is valid. If not, throw an Error.
 * @param commitment A commitment object to verify.
 * @param options.keys Force use of a set of keys.
 * @param options.entropyFromHashFunction A function that returns the entropy for a given hash. Useful to pass when using Cloudflare workers service bindings.
 * @param options.skipItemSignatureVerification Skip verification of the item signature.
 * @param options.skipCommitmentSignatureVerification Skip verification of the commitment signature.
 * @returns A promise that resolves to void when the commitment is valid.
 */
export declare function assertVerified(commitment: Commitment, options?: OptionsType): Promise<void>;
export {};
