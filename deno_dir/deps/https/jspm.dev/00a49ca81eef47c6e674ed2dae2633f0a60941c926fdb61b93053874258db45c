import * as _isArrayBuffer2 from './is-array-buffer@3.23.0!cjs';
import * as _buffer2 from '../npm:@jspm/core@2/nodelibs/buffer';

var _isArrayBuffer = "default" in _isArrayBuffer2 ? _isArrayBuffer2.default : _isArrayBuffer2;

var _buffer = "default" in _buffer2 ? _buffer2.default : _buffer2;

var exports = {};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fromString = exports.fromArrayBuffer = void 0;
const is_array_buffer_1 = _isArrayBuffer;
const buffer_1 = _buffer;

const fromArrayBuffer = (input, offset = 0, length = input.byteLength - offset) => {
  if (!is_array_buffer_1.isArrayBuffer(input)) {
    throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);
  }

  return buffer_1.Buffer.from(input, offset, length);
};

exports.fromArrayBuffer = fromArrayBuffer;

const fromString = (input, encoding) => {
  if (typeof input !== "string") {
    throw new TypeError(`The "input" argument must be of type string. Received type ${typeof input} (${input})`);
  }

  return encoding ? buffer_1.Buffer.from(input, encoding) : buffer_1.Buffer.from(input);
};

exports.fromString = fromString; 
const __esModule = exports.__esModule;
const _fromString = exports.fromString,
      _fromArrayBuffer = exports.fromArrayBuffer;

export default exports;
export { __esModule, _fromArrayBuffer as fromArrayBuffer, _fromString as fromString };

//# sourceMappingURL=util-buffer-from@3.23.0!cjs.map