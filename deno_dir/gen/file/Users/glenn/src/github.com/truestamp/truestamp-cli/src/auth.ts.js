import { colors, decode, sleep, validate } from "./deps.ts";
import { deleteConfigKeyForEnv, getConfigKeyForEnv, setConfigKeyForEnv, } from "./config.ts";
const AUTH0_SCOPES = "openid profile email offline_access";
const AUTH0_DOMAIN_DEVELOPMENT = "truestamp-dev.auth0.com";
const AUTH0_AUDIENCE_DEVELOPMENT = "https://db.fauna.com/db/ytijhfregydfy";
const AUTH0_CLIENT_ID_DEVELOPMENT = "8djbT1Ys078OZImR1uRr4jhu2Wb6d05B";
const AUTH0_DOMAIN_STAGING = "truestamp-staging.auth0.com";
const AUTH0_AUDIENCE_STAGING = "https://db.fauna.com/db/ytijhdrceybfy";
const AUTH0_CLIENT_ID_STAGING = "T0dzxGnnIj3TU0HpzCQRTZ5fx9N5Hb5m";
const AUTH0_DOMAIN_PRODUCTION = "login.truestamp.com";
const AUTH0_AUDIENCE_PRODUCTION = "https://db.fauna.com/db/ytij595b6yffy";
const AUTH0_CLIENT_ID_PRODUCTION = "pS5kRvqeuz4XLoxNPd6VX2LlUyNyU7Xj";
function getAuth0DomainForEnv(env) {
    switch (env) {
        case "development":
            return AUTH0_DOMAIN_DEVELOPMENT;
        case "staging":
            return AUTH0_DOMAIN_STAGING;
        case "production":
            return AUTH0_DOMAIN_PRODUCTION;
        default:
            throw new Error(`invalid environment : '${env}'`);
    }
}
function getAuth0AudienceForEnv(env) {
    switch (env) {
        case "development":
            return AUTH0_AUDIENCE_DEVELOPMENT;
        case "staging":
            return AUTH0_AUDIENCE_STAGING;
        case "production":
            return AUTH0_AUDIENCE_PRODUCTION;
        default:
            throw new Error(`invalid environment : '${env}'`);
    }
}
function getAuth0ClientIdForEnv(env) {
    switch (env) {
        case "development":
            return AUTH0_CLIENT_ID_DEVELOPMENT;
        case "staging":
            return AUTH0_CLIENT_ID_STAGING;
        case "production":
            return AUTH0_CLIENT_ID_PRODUCTION;
        default:
            throw new Error(`invalid environment : '${env}'`);
    }
}
async function getDeviceCode(env) {
    const resp = await fetch(`https://${getAuth0DomainForEnv(env)}/oauth/device/code`, {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify({
            client_id: getAuth0ClientIdForEnv(env),
            audience: getAuth0AudienceForEnv(env),
            scope: AUTH0_SCOPES,
        }),
    });
    return resp.json();
}
async function callTokenEndpoint(env, deviceCode) {
    const resp = await fetch(`https://${getAuth0DomainForEnv(env)}/oauth/token`, {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify({
            client_id: getAuth0ClientIdForEnv(env),
            device_code: deviceCode,
            grant_type: "urn:ietf:params:oauth:grant-type:device_code",
        }),
    });
    return resp;
}
async function getTokens(env, deviceCode, interval) {
    let adjustedInterval = interval;
    while (true) {
        await sleep(adjustedInterval);
        const resp = await callTokenEndpoint(env, deviceCode);
        if (resp.ok) {
            return await resp.json();
        }
        if (!resp.ok) {
            const respJson = await resp.json();
            switch (respJson.error) {
                case "authorization_pending":
                    break;
                case "slow_down":
                    adjustedInterval += 1;
                    break;
                case "expired_token":
                    throw new Error(`expired token`);
                case "access_denied":
                    throw new Error(`access denied`);
                default:
                    throw new Error(`unknown error response : ${JSON.stringify(respJson)}`);
            }
        }
    }
}
async function getNewTokensWithRefreshToken(env) {
    const refreshToken = getConfigRefreshToken(env);
    if (refreshToken) {
        const resp = await fetch(`https://${getAuth0DomainForEnv(env)}/oauth/token`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                grant_type: "refresh_token",
                client_id: getAuth0ClientIdForEnv(env),
                refresh_token: refreshToken,
            }),
        });
        return await resp.json();
    }
}
export function getConfigAccessToken(env) {
    const t = getConfigKeyForEnv(env, "auth0_access_token");
    return t ? t : undefined;
}
export function getConfigRefreshToken(env) {
    const t = getConfigKeyForEnv(env, "auth0_refresh_token");
    return t ? t : undefined;
}
export function getConfigIdTokenPayload(env) {
    let idToken;
    try {
        idToken = getConfigKeyForEnv(env, "auth0_id_token");
    }
    catch (error) {
        throw new Error(`no id token found in config : ${error.message}`);
    }
    if (!idToken) {
        throw new Error(`missing id token`);
    }
    try {
        const { payload } = validate(decode(idToken));
        return payload;
    }
    catch (error) {
        throw new Error(`invalid id token : ${error.message}`);
    }
}
function setTokensInConfig(env, tokens) {
    try {
        if (tokens.refresh_token)
            setConfigKeyForEnv(env, "auth0_refresh_token", tokens.refresh_token);
        setConfigKeyForEnv(env, "auth0_access_token", tokens.access_token);
        setConfigKeyForEnv(env, "auth0_expires_in", tokens.expires_in);
        setConfigKeyForEnv(env, "auth0_scope", tokens.scope);
        setConfigKeyForEnv(env, "auth0_token_type", tokens.token_type);
        if (tokens.id_token) {
            setConfigKeyForEnv(env, "auth0_id_token", tokens.id_token);
        }
    }
    catch (error) {
        throw new Error(`unable to write tokens to config : ${error.message}`);
    }
}
export function deleteTokensInConfig(env) {
    deleteConfigKeyForEnv(env, "auth0_refresh_token");
    deleteConfigKeyForEnv(env, "auth0_access_token");
    deleteConfigKeyForEnv(env, "auth0_expires_in");
    deleteConfigKeyForEnv(env, "auth0_scope");
    deleteConfigKeyForEnv(env, "auth0_token_type");
    deleteConfigKeyForEnv(env, "auth0_id_token");
}
export async function getAccessTokenWithPrompts(env) {
    let deviceCodeResp;
    try {
        const accessToken = getConfigAccessToken(env);
        if (accessToken) {
            try {
                const { header, payload, signature } = validate(decode(accessToken));
                if (header && payload && signature) {
                    return new Promise((resolve) => {
                        resolve(accessToken);
                    });
                }
            }
            catch {
                const tokens = await getNewTokensWithRefreshToken(env);
                if (tokens) {
                    setTokensInConfig(env, tokens);
                    if (tokens.access_token) {
                        return new Promise((resolve) => {
                            resolve(tokens.access_token);
                        });
                    }
                }
                else {
                    deleteTokensInConfig(env);
                }
            }
        }
    }
    catch (error) {
        console.error(colors.bold.red(`${error.message} error : exiting`));
        Deno.exit(1);
    }
    try {
        deviceCodeResp = await getDeviceCode(env);
    }
    catch (error) {
        console.error(colors.bold.red(`${error.message} error : exiting`));
        Deno.exit(1);
    }
    if (deviceCodeResp && deviceCodeResp.verification_uri_complete) {
        console.log(colors.bold.yellow.underline(`\nAUTHENTICATION\n`));
        console.log(colors.bold.yellow(`Please authenticate yourself by visiting\nthe following URL in a browser:\n`));
        console.log(colors.bold.underline.blue(deviceCodeResp.verification_uri_complete));
        console.log("");
    }
    else {
        console.error(colors.bold.red(`no verification URI error : exiting`));
        Deno.exit(1);
    }
    try {
        const tokens = await getTokens(env, deviceCodeResp.device_code, deviceCodeResp.interval);
        if (!tokens || !tokens.access_token) {
            throw new Error("retrieval of access tokens failed");
        }
        setTokensInConfig(env, tokens);
        return new Promise((resolve) => {
            resolve(tokens.access_token);
        });
    }
    catch (error) {
        console.error(colors.bold.red(`${error.message} error : exiting`));
        Deno.exit(1);
    }
}
//# sourceMappingURL=data:application/json;base64,