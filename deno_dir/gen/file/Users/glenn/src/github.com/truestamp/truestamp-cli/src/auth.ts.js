import { colors, decode, sleep, validate } from "./deps.ts";
import { deleteConfigKeyForEnv, getConfigKeyForEnv, setConfigKeyForEnv, } from "./config.ts";
const AUTH0_SCOPES = "openid profile email offline_access";
const AUTH0_DOMAIN_DEVELOPMENT = "truestamp-dev.auth0.com";
const AUTH0_AUDIENCE_DEVELOPMENT = "https://dev-api.truestamp.com/";
const AUTH0_CLIENT_ID_DEVELOPMENT = "8djbT1Ys078OZImR1uRr4jhu2Wb6d05B";
const AUTH0_DOMAIN_STAGING = "truestamp-staging.auth0.com";
const AUTH0_AUDIENCE_STAGING = "https://staging-api.truestamp.com/";
const AUTH0_CLIENT_ID_STAGING = "T0dzxGnnIj3TU0HpzCQRTZ5fx9N5Hb5m";
const AUTH0_DOMAIN_PRODUCTION = "login.truestamp.com";
const AUTH0_AUDIENCE_PRODUCTION = "https://api.truestamp.com/";
const AUTH0_CLIENT_ID_PRODUCTION = "pS5kRvqeuz4XLoxNPd6VX2LlUyNyU7Xj";
function getAuth0DomainForEnv(env) {
    switch (env) {
        case "development":
            return AUTH0_DOMAIN_DEVELOPMENT;
        case "staging":
            return AUTH0_DOMAIN_STAGING;
        case "production":
            return AUTH0_DOMAIN_PRODUCTION;
        default:
            throw new Error(`invalid environment : '${env}'`);
    }
}
function getAuth0AudienceForEnv(env) {
    switch (env) {
        case "development":
            return AUTH0_AUDIENCE_DEVELOPMENT;
        case "staging":
            return AUTH0_AUDIENCE_STAGING;
        case "production":
            return AUTH0_AUDIENCE_PRODUCTION;
        default:
            throw new Error(`invalid environment : '${env}'`);
    }
}
function getAuth0ClientIdForEnv(env) {
    switch (env) {
        case "development":
            return AUTH0_CLIENT_ID_DEVELOPMENT;
        case "staging":
            return AUTH0_CLIENT_ID_STAGING;
        case "production":
            return AUTH0_CLIENT_ID_PRODUCTION;
        default:
            throw new Error(`invalid environment : '${env}'`);
    }
}
async function getDeviceCode(env) {
    const resp = await fetch(`https://${getAuth0DomainForEnv(env)}/oauth/device/code`, {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify({
            client_id: getAuth0ClientIdForEnv(env),
            audience: getAuth0AudienceForEnv(env),
            scope: AUTH0_SCOPES,
        }),
    });
    return resp.json();
}
async function callTokenEndpoint(env, deviceCode) {
    const resp = await fetch(`https://${getAuth0DomainForEnv(env)}/oauth/token`, {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify({
            client_id: getAuth0ClientIdForEnv(env),
            device_code: deviceCode,
            grant_type: "urn:ietf:params:oauth:grant-type:device_code",
        }),
    });
    return resp;
}
async function getTokens(env, deviceCode, interval) {
    let adjustedInterval = interval;
    while (true) {
        await sleep(adjustedInterval);
        const resp = await callTokenEndpoint(env, deviceCode);
        if (resp.ok) {
            return await resp.json();
        }
        if (!resp.ok) {
            const respJson = await resp.json();
            switch (respJson.error) {
                case "authorization_pending":
                    break;
                case "slow_down":
                    adjustedInterval += 1;
                    break;
                case "expired_token":
                    throw new Error(`expired token`);
                case "access_denied":
                    throw new Error(`access denied`);
                default:
                    throw new Error(`unknown error response : ${JSON.stringify(respJson)}`);
            }
        }
    }
}
async function getNewTokensWithRefreshToken(env) {
    const refreshToken = getConfigRefreshToken(env);
    if (refreshToken) {
        const resp = await fetch(`https://${getAuth0DomainForEnv(env)}/oauth/token`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                grant_type: "refresh_token",
                client_id: getAuth0ClientIdForEnv(env),
                refresh_token: refreshToken,
            }),
        });
        return await resp.json();
    }
}
export function getConfigAccessToken(env) {
    const t = getConfigKeyForEnv(env, "auth0_access_token");
    return t ? t : undefined;
}
export function getConfigRefreshToken(env) {
    const t = getConfigKeyForEnv(env, "auth0_refresh_token");
    return t ? t : undefined;
}
export function getConfigIdTokenPayload(env) {
    const t = getConfigKeyForEnv(env, "auth0_id_token");
    if (t) {
        const { payload } = validate(decode(t));
        return payload;
    }
    else {
        return undefined;
    }
}
function setTokensInConfig(env, tokens) {
    try {
        if (tokens.refresh_token)
            setConfigKeyForEnv(env, "auth0_refresh_token", tokens.refresh_token);
        setConfigKeyForEnv(env, "auth0_access_token", tokens.access_token);
        setConfigKeyForEnv(env, "auth0_expires_in", tokens.expires_in);
        setConfigKeyForEnv(env, "auth0_scope", tokens.scope);
        setConfigKeyForEnv(env, "auth0_token_type", tokens.token_type);
        if (tokens.id_token) {
            setConfigKeyForEnv(env, "auth0_id_token", tokens.id_token);
        }
    }
    catch (error) {
        throw new Error(`unable to write tokens to config : ${error.message}`);
    }
}
export function deleteTokensInConfig(env) {
    deleteConfigKeyForEnv(env, "auth0_refresh_token");
    deleteConfigKeyForEnv(env, "auth0_access_token");
    deleteConfigKeyForEnv(env, "auth0_expires_in");
    deleteConfigKeyForEnv(env, "auth0_scope");
    deleteConfigKeyForEnv(env, "auth0_token_type");
    deleteConfigKeyForEnv(env, "auth0_id_token");
}
export async function getAccessTokenWithPrompts(env) {
    var deviceCodeResp;
    try {
        const accessToken = getConfigAccessToken(env);
        if (accessToken) {
            try {
                const { header, payload, signature } = validate(decode(accessToken));
                if (header && payload && signature) {
                    return new Promise((resolve) => {
                        resolve(accessToken);
                    });
                }
            }
            catch {
                const tokens = await getNewTokensWithRefreshToken(env);
                if (tokens) {
                    setTokensInConfig(env, tokens);
                    if (tokens.access_token) {
                        return new Promise((resolve) => {
                            resolve(tokens.access_token);
                        });
                    }
                }
                else {
                    deleteTokensInConfig(env);
                }
            }
        }
    }
    catch (error) {
        console.error(colors.bold.red(`${error.message} error : exiting`));
        Deno.exit(1);
    }
    try {
        deviceCodeResp = await getDeviceCode(env);
    }
    catch (error) {
        console.error(colors.bold.red(`${error.message} error : exiting`));
        Deno.exit(1);
    }
    if (deviceCodeResp && deviceCodeResp.verification_uri_complete) {
        console.log(colors.bold.yellow.underline(`\nAUTHENTICATION\n`));
        console.log(colors.bold.yellow(`Please authenticate yourself by visiting\nthe following URL in a browser:\n`));
        console.log(colors.bold.underline.blue(deviceCodeResp.verification_uri_complete));
        console.log("");
    }
    else {
        console.error(colors.bold.red(`no verification URI error : exiting`));
        Deno.exit(1);
    }
    try {
        const tokens = await getTokens(env, deviceCodeResp.device_code, deviceCodeResp.interval);
        if (!tokens || !tokens.access_token) {
            throw new Error("retrieval of access tokens failed");
        }
        setTokensInConfig(env, tokens);
        return new Promise((resolve) => {
            resolve(tokens.access_token);
        });
    }
    catch (error) {
        console.error(colors.bold.red(`${error.message} error : exiting`));
        Deno.exit(1);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImF1dGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBUUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQVcsS0FBSyxFQUFFLFFBQVEsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVyRSxPQUFPLEVBQ0wscUJBQXFCLEVBQ3JCLGtCQUFrQixFQUNsQixrQkFBa0IsR0FDbkIsTUFBTSxhQUFhLENBQUM7QUFFckIsTUFBTSxZQUFZLEdBQUcscUNBQXFDLENBQUM7QUFFM0QsTUFBTSx3QkFBd0IsR0FBRyx5QkFBeUIsQ0FBQztBQUMzRCxNQUFNLDBCQUEwQixHQUFHLGdDQUFnQyxDQUFDO0FBQ3BFLE1BQU0sMkJBQTJCLEdBQUcsa0NBQWtDLENBQUM7QUFFdkUsTUFBTSxvQkFBb0IsR0FBRyw2QkFBNkIsQ0FBQztBQUMzRCxNQUFNLHNCQUFzQixHQUFHLG9DQUFvQyxDQUFDO0FBQ3BFLE1BQU0sdUJBQXVCLEdBQUcsa0NBQWtDLENBQUM7QUFFbkUsTUFBTSx1QkFBdUIsR0FBRyxxQkFBcUIsQ0FBQztBQUN0RCxNQUFNLHlCQUF5QixHQUFHLDRCQUE0QixDQUFDO0FBQy9ELE1BQU0sMEJBQTBCLEdBQUcsa0NBQWtDLENBQUM7QUFFdEUsU0FBUyxvQkFBb0IsQ0FBQyxHQUFXO0lBQ3ZDLFFBQVEsR0FBRyxFQUFFO1FBQ1gsS0FBSyxhQUFhO1lBQ2hCLE9BQU8sd0JBQXdCLENBQUM7UUFFbEMsS0FBSyxTQUFTO1lBQ1osT0FBTyxvQkFBb0IsQ0FBQztRQUU5QixLQUFLLFlBQVk7WUFDZixPQUFPLHVCQUF1QixDQUFDO1FBRWpDO1lBQ0UsTUFBTSxJQUFJLEtBQUssQ0FBQywwQkFBMEIsR0FBRyxHQUFHLENBQUMsQ0FBQztLQUNyRDtBQUNILENBQUM7QUFFRCxTQUFTLHNCQUFzQixDQUFDLEdBQVc7SUFDekMsUUFBUSxHQUFHLEVBQUU7UUFDWCxLQUFLLGFBQWE7WUFDaEIsT0FBTywwQkFBMEIsQ0FB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LE1BQU0sU0FBUyxDQUM1QixHQUFHLEVBQ0gsY0FBYyxDQUFDLFdBQVcsRUFDMUIsY0FBYyxDQUFDLFFBQVEsQ0FDeEIsQ0FBQztRQUVGLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFO1lBQ25DLE1BQU0sSUFBSSxLQUFLLENBQUMsbUNBQW1DLENBQUMsQ0FBQztTQUN0RDtRQUVELGlCQUFpQixDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUUvQixPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDN0IsT0FBTyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUMvQixDQUFDLENBQUMsQ0FBQztLQUNKO0lBQUMsT0FBTyxLQUFLLEVBQUU7UUFDZCxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDLE9BQU8sa0JBQWtCLENBQUMsQ0FBQyxDQUFDO1FBQ25FLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDZDtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgwqkgMjAyMC0yMDIxIFRydWVzdGFtcCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL3RydWVzdGFtcC9kZXZpY2VmbG93XG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9qYXRpbnZhaWR5YS9jbGktYXV0aHotZGV2aWNlLWZsb3cvYmxvYi9tYXN0ZXIvZGV2aWNlL2RldmljZS5qc1xuXG4vLyBPbiBNYWNPUyB0aGUgY29uZmlnIGZpbGVzIGNhbiBiZSBmb3VuZCBpbiBhIGxvY2F0aW9uIGxpa2U6XG4vLyBjYXQgfi9MaWJyYXJ5L1ByZWZlcmVuY2VzL2NvbS50cnVlc3RhbXAuY2xpLmRldmVsb3BtZW50L2NvbmZpZy5qc29uXG5cbmltcG9ydCB7IGNvbG9ycywgZGVjb2RlLCBQYXlsb2FkLCBzbGVlcCwgdmFsaWRhdGUgfSBmcm9tIFwiLi9kZXBzLnRzXCI7XG5cbmltcG9ydCB7XG4gIGRlbGV0ZUNvbmZpZ0tleUZvckVudixcbiAgZ2V0Q29uZmlnS2V5Rm9yRW52LFxuICBzZXRDb25maWdLZXlGb3JFbnYsXG59IGZyb20gXCIuL2NvbmZpZy50c1wiO1xuXG5jb25zdCBBVVRIMF9TQ09QRVMgPSBcIm9wZW5pZCBwcm9maWxlIGVtYWlsIG9mZmxpbmVfYWNjZXNzXCI7XG5cbmNvbnN0IEFVVEgwX0RPTUFJTl9ERVZFTE9QTUVOVCA9IFwidHJ1ZXN0YW1wLWRldi5hdXRoMC5jb21cIjtcbmNvbnN0IEFVVEgwX0FVRElFTkNFX0RFVkVMT1BNRU5UID0gXCJodHRwczovL2Rldi1hcGkudHJ1ZXN0YW1wLmNvbS9cIjtcbmNvbnN0IEFVVEgwX0NMSUVOVF9JRF9ERVZFTE9QTUVOVCA9IFwiOGRqYlQxWXMwNzhPWkltUjF1UnI0amh1MldiNmQwNUJcIjtcblxuY29uc3QgQVVUSDBfRE9NQUlOX1NUQUdJTkcgPSBcInRydWVzdGFtcC1zdGFnaW5nLmF1dGgwLmNvbVwiO1xuY29uc3QgQVVUSDBfQVVESUVOQ0VfU1RBR0lORyA9IFwiaHR0cHM6Ly9zdGFnaW5nLWFwaS50cnVlc3RhbXAuY29tL1wiO1xuY29uc3QgQVVUSDBfQ0xJRU5UX0lEX1NUQUdJTkcgPSBcIlQwZHp4R25uSWozVFUwSHB6Q1FSVFo1Zng5TjVIYjVtXCI7XG5cbmNvbnN0IEFVVEgwX0RPTUFJTl9QUk9EVUNUSU9OID0gXCJsb2dpbi50cnVlc3RhbXAuY29tXCI7XG5jb25zdCBBVVRIMF9BVURJRU5DRV9QUk9EVUNUSU9OID0gXCJodHRwczovL2FwaS50cnVlc3RhbXAuY29tL1wiO1xuY29uc3QgQVVUSDBfQ0xJRU5UX0lEX1BST0RVQ1RJT04gPSBcInBTNWtSdnFldXo0WExveE5QZDZWWDJMbFV5TnlVN1hqXCI7XG5cbmZ1bmN0aW9uIGdldEF1dGgwRG9tYWluRm9yRW52KGVudjogc3RyaW5nKTogc3RyaW5nIHtcbiAgc3dpdGNoIChlbnYpIHtcbiAgICBjYXNlIFwiZGV2ZWxvcG1lbnRcIjpcbiAgICAgIHJldHVybiBBVVRIMF9ET01BSU5fREVWRUxPUE1FTlQ7XG5cbiAgICBjYXNlIFwic3RhZ2luZ1wiOlxuICAgICAgcmV0dXJuIEFVVEgwX0RPTUFJTl9TVEFHSU5HO1xuXG4gICAgY2FzZSBcInByb2R1Y3Rpb25cIjpcbiAgICAgIHJldHVybiBBVVRIMF9ET01BSU5fUFJPRFVDVElPTjtcblxuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYGludmFsaWQgZW52aXJvbm1lbnQgOiAnJHtlbnZ9J2ApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldEF1dGgwQXVkaWVuY2VGb3JFbnYoZW52OiBzdHJpbmcpOiBzdHJpbmcge1xuICBzd2l0Y2ggKGVudikge1xuICAgIGNhc2UgXCJkZXZlbG9wbWVudFwiOlxuICAgICAgcmV0dXJuIEFVVEgwX0FVRElFTkNFX0RFVkVMT1BNRU5UO1xuXG4gICAgY2FzZSBcInN0YWdpbmdcIjpcbiAgICAgIHJldHVybiBBVVRIMF9BVURJRU5DRV9TVEFHSU5HO1xuXG4gICAgY2FzZSBcInByb2R1Y3Rpb25cIjpcbiAgICAgIHJldHVybiBBVVRIMF9BVURJRU5DRV9QUk9EVUNUSU9OO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihgaW52YWxpZCBlbnZpcm9ubWVudCA6ICcke2Vudn0nYCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0QXV0aDBDbGllbnRJZEZvckVudihlbnY6IHN0cmluZyk6IHN0cmluZyB7XG4gIHN3aXRjaCAoZW52KSB7XG4gICAgY2FzZSBcImRldmVsb3BtZW50XCI6XG4gICAgICByZXR1cm4gQVVUSDBfQ0xJRU5UX0lEX0RFVkVMT1BNRU5UO1xuXG4gICAgY2FzZSBcInN0YWdpbmdcIjpcbiAgICAgIHJldHVybiBBVVRIMF9DTElFTlRfSURfU1RBR0lORztcblxuICAgIGNhc2UgXCJwcm9kdWN0aW9uXCI6XG4gICAgICByZXR1cm4gQVVUSDBfQ0xJRU5UX0lEX1BST0RVQ1RJT047XG5cbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBpbnZhbGlkIGVudmlyb25tZW50IDogJyR7ZW52fSdgKTtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBnZXREZXZpY2VDb2RlKGVudjogc3RyaW5nKSB7XG4gIGNvbnN0IHJlc3AgPSBhd2FpdCBmZXRjaChcbiAgICBgaHR0cHM6Ly8ke2dldEF1dGgwRG9tYWluRm9yRW52KGVudil9L29hdXRoL2RldmljZS9jb2RlYCxcbiAgICB7XG4gICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgIH0sXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIGNsaWVudF9pZDogZ2V0QXV0aDBDbGllbnRJZEZvckVudihlbnYpLFxuICAgICAgICBhdWRpZW5jZTogZ2V0QXV0aDBBdWRpZW5jZUZvckVudihlbnYpLFxuICAgICAgICBzY29wZTogQVVUSDBfU0NPUEVTLFxuICAgICAgfSksXG4gICAgfSxcbiAgKTtcbiAgcmV0dXJuIHJlc3AuanNvbigpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBjYWxsVG9rZW5FbmRwb2ludChcbiAgZW52OiBzdHJpbmcsXG4gIGRldmljZUNvZGU6IHN0cmluZyxcbik6IFByb21pc2U8UmVzcG9uc2U+IHtcbiAgY29uc3QgcmVzcCA9IGF3YWl0IGZldGNoKGBodHRwczovLyR7Z2V0QXV0aDBEb21haW5Gb3JFbnYoZW52KX0vb2F1dGgvdG9rZW5gLCB7XG4gICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICBoZWFkZXJzOiB7XG4gICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICB9LFxuICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgIGNsaWVudF9pZDogZ2V0QXV0aDBDbGllbnRJZEZvckVudihlbnYpLFxuICAgICAgZGV2aWNlX2NvZGU6IGRldmljZUNvZGUsXG4gICAgICBncmFudF90eXBlOiBcInVybjppZXRmOnBhcmFtczpvYXV0aDpncmFudC10eXBlOmRldmljZV9jb2RlXCIsXG4gICAgfSksXG4gIH0pO1xuICByZXR1cm4gcmVzcDtcbn1cblxuLy8gR2V0IHRoZSB3aG9sZSB0b2tlbiByZXNwb25zZSBvYmplY3QgYnkgcG9sbGluZyB1bnRpbCB0aGVcbi8vIHVzZXIgYXV0aGVudGljYXRlcyBvciBmYWlscyBhdCBkb2luZyBzby5cbmFzeW5jIGZ1bmN0aW9uIGdldFRva2VucyhlbnY6IHN0cmluZywgZGV2aWNlQ29kZTogc3RyaW5nLCBpbnRlcnZhbDogbnVtYmVyKSB7XG4gIGxldCBhZGp1c3RlZEludGVydmFsID0gaW50ZXJ2YWw7XG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBhd2FpdCBzbGVlcChhZGp1c3RlZEludGVydmFsKTtcbiAgICBjb25zdCByZXNwID0gYXdhaXQgY2FsbFRva2VuRW5kcG9pbnQoZW52LCBkZXZpY2VDb2RlKTtcblxuICAgIGlmIChyZXNwLm9rKSB7XG4gICAgICByZXR1cm4gYXdhaXQgcmVzcC5qc29uKCk7XG4gICAgfVxuXG4gICAgaWYgKCFyZXNwLm9rKSB7XG4gICAgICBjb25zdCByZXNwSnNvbiA9IGF3YWl0IHJlc3AuanNvbigpO1xuXG4gICAgICBzd2l0Y2ggKHJlc3BKc29uLmVycm9yKSB7XG4gICAgICAgIGNhc2UgXCJhdXRob3JpemF0aW9uX3BlbmRpbmdcIjpcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZyhjb2xvcnMuYm9sZC5ncmF5KFwiYXV0aG9yaXphdGlvbiBwZW5kaW5nLi4uXCIpKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFwic2xvd19kb3duXCI6XG4gICAgICAgICAgLy8gYWRkIGEgc2Vjb25kIHRvIHRoZSBwb2xsaW5nIGludGVydmFsIGVhY2ggdGltZSByZWNlaXZlZFxuICAgICAgICAgIGFkanVzdGVkSW50ZXJ2YWwgKz0gMTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFwiZXhwaXJlZF90b2tlblwiOlxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgZXhwaXJlZCB0b2tlbmApO1xuXG4gICAgICAgIGNhc2UgXCJhY2Nlc3NfZGVuaWVkXCI6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBhY2Nlc3MgZGVuaWVkYCk7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICBgdW5rbm93biBlcnJvciByZXNwb25zZSA6ICR7SlNPTi5zdHJpbmdpZnkocmVzcEpzb24pfWAsXG4gICAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0TmV3VG9rZW5zV2l0aFJlZnJlc2hUb2tlbihlbnY6IHN0cmluZykge1xuICBjb25zdCByZWZyZXNoVG9rZW4gPSBnZXRDb25maWdSZWZyZXNoVG9rZW4oZW52KTtcbiAgaWYgKHJlZnJlc2hUb2tlbikge1xuICAgIGNvbnN0IHJlc3AgPSBhd2FpdCBmZXRjaChcbiAgICAgIGBodHRwczovLyR7Z2V0QXV0aDBEb21haW5Gb3JFbnYoZW52KX0vb2F1dGgvdG9rZW5gLFxuICAgICAge1xuICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgIH0sXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICBncmFudF90eXBlOiBcInJlZnJlc2hfdG9rZW5cIixcbiAgICAgICAgICBjbGllbnRfaWQ6IGdldEF1dGgwQ2xpZW50SWRGb3JFbnYoZW52KSxcbiAgICAgICAgICByZWZyZXNoX3Rva2VuOiByZWZyZXNoVG9rZW4sXG4gICAgICAgIH0pLFxuICAgICAgfSxcbiAgICApO1xuICAgIHJldHVybiBhd2FpdCByZXNwLmpzb24oKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29uZmlnQWNjZXNzVG9rZW4oZW52OiBzdHJpbmcpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICBjb25zdCB0ID0gZ2V0Q29uZmlnS2V5Rm9yRW52KGVudiwgXCJhdXRoMF9hY2Nlc3NfdG9rZW5cIikgYXMgc3RyaW5nO1xuICByZXR1cm4gdCA/IHQgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb25maWdSZWZyZXNoVG9rZW4oZW52OiBzdHJpbmcpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICBjb25zdCB0ID0gZ2V0Q29uZmlnS2V5Rm9yRW52KGVudiwgXCJhdXRoMF9yZWZyZXNoX3Rva2VuXCIpIGFzIHN0cmluZztcbiAgcmV0dXJuIHQgPyB0IDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29uZmlnSWRUb2tlblBheWxvYWQoZW52OiBzdHJpbmcpOiBQYXlsb2FkIHwgdW5kZWZpbmVkIHtcbiAgY29uc3QgdCA9IGdldENvbmZpZ0tleUZvckVudihlbnYsIFwiYXV0aDBfaWRfdG9rZW5cIikgYXMgc3RyaW5nO1xuXG4gIGlmICh0KSB7XG4gICAgY29uc3QgeyBwYXlsb2FkIH0gPSB2YWxpZGF0ZShkZWNvZGUodCkpO1xuICAgIHJldHVybiBwYXlsb2FkO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0VG9rZW5zSW5Db25maWcoXG4gIGVudjogc3RyaW5nLFxuICB0b2tlbnM6IHtcbiAgICBhY2Nlc3NfdG9rZW46IHN0cmluZztcbiAgICBpZF90b2tlbj86IHN0cmluZztcbiAgICByZWZyZXNoX3Rva2VuPzogc3RyaW5nO1xuICAgIHNjb3BlOiBzdHJpbmc7XG4gICAgZXhwaXJlc19pbjogbnVtYmVyO1xuICAgIHRva2VuX3R5cGU6IHN0cmluZztcbiAgfSxcbik6IHZvaWQge1xuICB0cnkge1xuICAgIGlmICh0b2tlbnMucmVmcmVzaF90b2tlbikgc2V0Q29uZmlnS2V5Rm9yRW52KGVudiwgXCJhdXRoMF9yZWZyZXNoX3Rva2VuXCIsIHRva2Vucy5yZWZyZXNoX3Rva2VuKTtcbiAgICBzZXRDb25maWdLZXlGb3JFbnYoZW52LCBcImF1dGgwX2FjY2Vzc190b2tlblwiLCB0b2tlbnMuYWNjZXNzX3Rva2VuKTtcbiAgICBzZXRDb25maWdLZXlGb3JFbnYoZW52LCBcImF1dGgwX2V4cGlyZXNfaW5cIiwgdG9rZW5zLmV4cGlyZXNfaW4pO1xuICAgIHNldENvbmZpZ0tleUZvckVudihlbnYsIFwiYXV0aDBfc2NvcGVcIiwgdG9rZW5zLnNjb3BlKTtcbiAgICBzZXRDb25maWdLZXlGb3JFbnYoZW52LCBcImF1dGgwX3Rva2VuX3R5cGVcIiwgdG9rZW5zLnRva2VuX3R5cGUpO1xuXG4gICAgaWYgKHRva2Vucy5pZF90b2tlbikge1xuICAgICAgc2V0Q29uZmlnS2V5Rm9yRW52KGVudiwgXCJhdXRoMF9pZF90b2tlblwiLCB0b2tlbnMuaWRfdG9rZW4pO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYHVuYWJsZSB0byB3cml0ZSB0b2tlbnMgdG8gY29uZmlnIDogJHtlcnJvci5tZXNzYWdlfWApO1xuICB9XG59XG5cbi8vIHRoaXMgaXMgaG93IHdlIFwibG9nb3V0XCJcbmV4cG9ydCBmdW5jdGlvbiBkZWxldGVUb2tlbnNJbkNvbmZpZyhlbnY6IHN0cmluZykge1xuICBkZWxldGVDb25maWdLZXlGb3JFbnYoZW52LCBcImF1dGgwX3JlZnJlc2hfdG9rZW5cIik7XG4gIGRlbGV0ZUNvbmZpZ0tleUZvckVudihlbnYsIFwiYXV0aDBfYWNjZXNzX3Rva2VuXCIpO1xuICBkZWxldGVDb25maWdLZXlGb3JFbnYoZW52LCBcImF1dGgwX2V4cGlyZXNfaW5cIik7XG4gIGRlbGV0ZUNvbmZpZ0tleUZvckVudihlbnYsIFwiYXV0aDBfc2NvcGVcIik7XG4gIGRlbGV0ZUNvbmZpZ0tleUZvckVudihlbnYsIFwiYXV0aDBfdG9rZW5fdHlwZVwiKTtcbiAgZGVsZXRlQ29uZmlnS2V5Rm9yRW52KGVudiwgXCJhdXRoMF9pZF90b2tlblwiKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEFjY2Vzc1Rva2VuV2l0aFByb21wdHMoZW52OiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICB2YXIgZGV2aWNlQ29kZVJlc3A7XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBhY2Nlc3NUb2tlbiA9IGdldENvbmZpZ0FjY2Vzc1Rva2VuKGVudik7XG4gICAgaWYgKGFjY2Vzc1Rva2VuKSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyB2YWxpZGF0ZSAoYnV0IG5vdCBzaWduYXR1cmUgY2hlY2shKSB0aGUgc2F2ZWQgSldUXG4gICAgICAgIC8vIHRoaXMgaXMgcHJpbWFyaWx5IHRvIGF2b2lkIHNlbmRpbmcgQVBJIHJlcSB3aXRoXG4gICAgICAgIC8vIGV4cGlyZWQgdG9rZW4uXG4gICAgICAgIGNvbnN0IHsgaGVhZGVyLCBwYXlsb2FkLCBzaWduYXR1cmUgfSA9IHZhbGlkYXRlKFxuICAgICAgICAgIGRlY29kZShhY2Nlc3NUb2tlbiksXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gY29uc29sZS5sb2coaGVhZGVyKVxuICAgICAgICAvLyBjb25zb2xlLmxvZyhwYXlsb2FkKVxuICAgICAgICAvLyBjb25zb2xlLmxvZyhzaWduYXR1cmUpXG4gICAgICAgIGlmIChoZWFkZXIgJiYgcGF5bG9hZCAmJiBzaWduYXR1cmUpIHtcbiAgICAgICAgICAvLyBzdHJ1Y3R1cmFsbHkgdmFsaWQgYW5kIHVuZXhwaXJlZCBKV1RcbiAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUoYWNjZXNzVG9rZW4pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIHtcbiAgICAgICAgY29uc3QgdG9rZW5zID0gYXdhaXQgZ2V0TmV3VG9rZW5zV2l0aFJlZnJlc2hUb2tlbihlbnYpO1xuICAgICAgICBpZiAodG9rZW5zKSB7XG4gICAgICAgICAgc2V0VG9rZW5zSW5Db25maWcoZW52LCB0b2tlbnMpO1xuICAgICAgICAgIGlmICh0b2tlbnMuYWNjZXNzX3Rva2VuKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgICAgcmVzb2x2ZSh0b2tlbnMuYWNjZXNzX3Rva2VuKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyB1bmFibGUgdG8gcmV0cmlldmUgbmV3IGFjY2VzcyB0b2tlbnMgdXNpbmcgcmVmcmVzaCB0b2tlbiwgY2xlYW51cCBzYXZlZCB0b2tlbnNcbiAgICAgICAgICBkZWxldGVUb2tlbnNJbkNvbmZpZyhlbnYpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoY29sb3JzLmJvbGQucmVkKGAke2Vycm9yLm1lc3NhZ2V9IGVycm9yIDogZXhpdGluZ2ApKTtcbiAgICBEZW5vLmV4aXQoMSk7XG4gIH1cblxuICAvLyBObyBzYXZlZCB0b2tlbnMgZm91bmQuIFByb21wdCB0aGUgdXNlciB0byBhdXRoLlxuICB0cnkge1xuICAgIGRldmljZUNvZGVSZXNwID0gYXdhaXQgZ2V0RGV2aWNlQ29kZShlbnYpO1xuICAgIC8vIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KGRldmljZUNvZGVSZXNwKSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihjb2xvcnMuYm9sZC5yZWQoYCR7ZXJyb3IubWVzc2FnZX0gZXJyb3IgOiBleGl0aW5nYCkpO1xuICAgIERlbm8uZXhpdCgxKTtcbiAgfVxuXG4gIGlmIChkZXZpY2VDb2RlUmVzcCAmJiBkZXZpY2VDb2RlUmVzcC52ZXJpZmljYXRpb25fdXJpX2NvbXBsZXRlKSB7XG4gICAgY29uc29sZS5sb2coY29sb3JzLmJvbGQueWVsbG93LnVuZGVybGluZShgXFxuQVVUSEVOVElDQVRJT05cXG5gKSk7XG4gICAgY29uc29sZS5sb2coXG4gICAgICBjb2xvcnMuYm9sZC55ZWxsb3coXG4gICAgICAgIGBQbGVhc2UgYXV0aGVudGljYXRlIHlvdXJzZWxmIGJ5IHZpc2l0aW5nXFxudGhlIGZvbGxvd2luZyBVUkwgaW4gYSBicm93c2VyOlxcbmAsXG4gICAgICApLFxuICAgICk7XG4gICAgY29uc29sZS5sb2coXG4gICAgICBjb2xvcnMuYm9sZC51bmRlcmxpbmUuYmx1ZShkZXZpY2VDb2RlUmVzcC52ZXJpZmljYXRpb25fdXJpX2NvbXBsZXRlKSxcbiAgICApO1xuICAgIGNvbnNvbGUubG9nKFwiXCIpO1xuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUuZXJyb3IoY29sb3JzLmJvbGQucmVkKGBubyB2ZXJpZmljYXRpb24gVVJJIGVycm9yIDogZXhpdGluZ2ApKTtcbiAgICBEZW5vLmV4aXQoMSk7XG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IHRva2VucyA9IGF3YWl0IGdldFRva2VucyhcbiAgICAgIGVudixcbiAgICAgIGRldmljZUNvZGVSZXNwLmRldmljZV9jb2RlLFxuICAgICAgZGV2aWNlQ29kZVJlc3AuaW50ZXJ2YWwsXG4gICAgKTtcblxuICAgIGlmICghdG9rZW5zIHx8ICF0b2tlbnMuYWNjZXNzX3Rva2VuKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJyZXRyaWV2YWwgb2YgYWNjZXNzIHRva2VucyBmYWlsZWRcIik7XG4gICAgfVxuXG4gICAgc2V0VG9rZW5zSW5Db25maWcoZW52LCB0b2tlbnMpO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICByZXNvbHZlKHRva2Vucy5hY2Nlc3NfdG9rZW4pO1xuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoY29sb3JzLmJvbGQucmVkKGAke2Vycm9yLm1lc3NhZ2V9IGVycm9yIDogZXhpdGluZ2ApKTtcbiAgICBEZW5vLmV4aXQoMSk7XG4gIH1cbn1cbiJdfQ==