import * as path from "https://deno.land/std@0.133.0/path/mod.ts";
const homeDir = Deno.env.get("HOME") || Deno.env.get("HOMEPATH");
const tempDir = Deno.env.get("TEMP") || Deno.env.get("TMP") ||
    Deno.env.get("TMPDIR") || Deno.env.get("RUNNER_TEMP");
function linux(homeDir, tempDir, appName) {
    return {
        cache: path.join(Deno.env.get("XDG_CACHE_HOME") || path.join(homeDir, ".cache"), appName),
        config: path.join(Deno.env.get("XDG_CONFIG_HOME") || path.join(homeDir, ".config"), appName),
        data: path.join(Deno.env.get("XDG_DATA_HOME") || path.join(homeDir, ".local", "share"), appName),
        log: path.join(Deno.env.get("XDG_STATE_HOME") || path.join(homeDir, ".local", "state"), appName),
        temp: path.join(tempDir, path.basename(homeDir), appName),
    };
}
function macos(homeDir, tempDir, appName) {
    const libDir = path.join(homeDir, "Library");
    return {
        cache: path.join(libDir, "Caches", appName),
        config: path.join(libDir, "Preferences", appName),
        data: path.join(libDir, "Application Support", appName),
        log: path.join(libDir, "Logs", appName),
        temp: path.join(tempDir, appName),
    };
}
function windows(homeDir, tempDir, appName) {
    const appData = Deno.env.get("APPDATA") ||
        path.join(homeDir, "AppData", "Roaming");
    const localAppData = Deno.env.get("LOCALAPPDATA") ||
        path.join(homeDir, "AppData", "Local");
    return {
        cache: path.join(localAppData, appName, "Cache"),
        config: path.join(appData, appName, "Config"),
        data: path.join(localAppData, appName, "Data"),
        log: path.join(localAppData, appName, "Log"),
        temp: path.join(tempDir, appName),
    };
}
export default function appPaths(appName) {
    if (!homeDir) {
        throw new Error("cannot find user home directory");
    }
    if (!tempDir) {
        throw new Error("cannot find temp directory");
    }
    switch (Deno.build.os) {
        case "linux":
            return linux(homeDir, tempDir, appName);
        case "darwin":
            return macos(homeDir, tempDir, appName);
        case "windows":
            return windows(homeDir, tempDir, appName);
        default:
            throw new Error("unknown os");
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibW9kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxJQUFJLE1BQU0sMkNBQTJDLENBQUM7QUFFbEUsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7QUFFakUsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDO0lBQ3pELElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBVXhELFNBQVMsS0FBSyxDQUFDLE9BQWUsRUFBRSxPQUFlLEVBQUUsT0FBZTtJQUM5RCxPQUFPO1FBQ0wsS0FBSyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQ2QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsRUFDOUQsT0FBTyxDQUNSO1FBQ0QsTUFBTSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQ2YsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsRUFDaEUsT0FBTyxDQUNSO1FBQ0QsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQ2IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FB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LEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDNUM7WUFDRSxNQUFNLElBQUksS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO0tBQ2pDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHBhdGggZnJvbSBcImh0dHBzOi8vZGVuby5sYW5kL3N0ZEAwLjEzMy4wL3BhdGgvbW9kLnRzXCI7XG5cbmNvbnN0IGhvbWVEaXIgPSBEZW5vLmVudi5nZXQoXCJIT01FXCIpIHx8IERlbm8uZW52LmdldChcIkhPTUVQQVRIXCIpO1xuXG5jb25zdCB0ZW1wRGlyID0gRGVuby5lbnYuZ2V0KFwiVEVNUFwiKSB8fCBEZW5vLmVudi5nZXQoXCJUTVBcIikgfHxcbiAgRGVuby5lbnYuZ2V0KFwiVE1QRElSXCIpIHx8IERlbm8uZW52LmdldChcIlJVTk5FUl9URU1QXCIpO1xuXG5leHBvcnQgaW50ZXJmYWNlIFBhdGhzIHtcbiAgY2FjaGU6IHN0cmluZztcbiAgY29uZmlnOiBzdHJpbmc7XG4gIGRhdGE6IHN0cmluZztcbiAgbG9nOiBzdHJpbmc7XG4gIHRlbXA6IHN0cmluZztcbn1cblxuZnVuY3Rpb24gbGludXgoaG9tZURpcjogc3RyaW5nLCB0ZW1wRGlyOiBzdHJpbmcsIGFwcE5hbWU6IHN0cmluZyk6IFBhdGhzIHtcbiAgcmV0dXJuIHtcbiAgICBjYWNoZTogcGF0aC5qb2luKFxuICAgICAgRGVuby5lbnYuZ2V0KFwiWERHX0NBQ0hFX0hPTUVcIikgfHwgcGF0aC5qb2luKGhvbWVEaXIsIFwiLmNhY2hlXCIpLFxuICAgICAgYXBwTmFtZSxcbiAgICApLFxuICAgIGNvbmZpZzogcGF0aC5qb2luKFxuICAgICAgRGVuby5lbnYuZ2V0KFwiWERHX0NPTkZJR19IT01FXCIpIHx8IHBhdGguam9pbihob21lRGlyLCBcIi5jb25maWdcIiksXG4gICAgICBhcHBOYW1lLFxuICAgICksXG4gICAgZGF0YTogcGF0aC5qb2luKFxuICAgICAgRGVuby5lbnYuZ2V0KFwiWERHX0RBVEFfSE9NRVwiKSB8fCBwYXRoLmpvaW4oaG9tZURpciwgXCIubG9jYWxcIiwgXCJzaGFyZVwiKSxcbiAgICAgIGFwcE5hbWUsXG4gICAgKSxcbiAgICBsb2c6IHBhdGguam9pbihcbiAgICAgIERlbm8uZW52LmdldChcIlhER19TVEFURV9IT01FXCIpIHx8IHBhdGguam9pbihob21lRGlyLCBcIi5sb2NhbFwiLCBcInN0YXRlXCIpLFxuICAgICAgYXBwTmFtZSxcbiAgICApLFxuICAgIHRlbXA6IHBhdGguam9pbih0ZW1wRGlyLCBwYXRoLmJhc2VuYW1lKGhvbWVEaXIpLCBhcHBOYW1lKSxcbiAgfTtcbn1cblxuZnVuY3Rpb24gbWFjb3MoaG9tZURpcjogc3RyaW5nLCB0ZW1wRGlyOiBzdHJpbmcsIGFwcE5hbWU6IHN0cmluZyk6IFBhdGhzIHtcbiAgY29uc3QgbGliRGlyID0gcGF0aC5qb2luKGhvbWVEaXIsIFwiTGlicmFyeVwiKTtcblxuICByZXR1cm4ge1xuICAgIGNhY2hlOiBwYXRoLmpvaW4obGliRGlyLCBcIkNhY2hlc1wiLCBhcHBOYW1lKSxcbiAgICBjb25maWc6IHBhdGguam9pbihsaWJEaXIsIFwiUHJlZmVyZW5jZXNcIiwgYXBwTmFtZSksXG4gICAgZGF0YTogcGF0aC5qb2luKGxpYkRpciwgXCJBcHBsaWNhdGlvbiBTdXBwb3J0XCIsIGFwcE5hbWUpLFxuICAgIGxvZzogcGF0aC5qb2luKGxpYkRpciwgXCJMb2dzXCIsIGFwcE5hbWUpLFxuICAgIHRlbXA6IHBhdGguam9pbih0ZW1wRGlyLCBhcHBOYW1lKSxcbiAgfTtcbn1cblxuZnVuY3Rpb24gd2luZG93cyhob21lRGlyOiBzdHJpbmcsIHRlbXBEaXI6IHN0cmluZywgYXBwTmFtZTogc3RyaW5nKTogUGF0aHMge1xuICBjb25zdCBhcHBEYXRhID0gRGVuby5lbnYuZ2V0KFwiQVBQREFUQVwiKSB8fFxuICAgIHBhdGguam9pbihob21lRGlyLCBcIkFwcERhdGFcIiwgXCJSb2FtaW5nXCIpO1xuICBjb25zdCBsb2NhbEFwcERhdGEgPSBEZW5vLmVudi5nZXQoXCJMT0NBTEFQUERBVEFcIikgfHxcbiAgICBwYXRoLmpvaW4oaG9tZURpciwgXCJBcHBEYXRhXCIsIFwiTG9jYWxcIik7XG5cbiAgcmV0dXJuIHtcbiAgICBjYWNoZTogcGF0aC5qb2luKGxvY2FsQXBwRGF0YSwgYXBwTmFtZSwgXCJDYWNoZVwiKSxcbiAgICBjb25maWc6IHBhdGguam9pbihhcHBEYXRhLCBhcHBOYW1lLCBcIkNvbmZpZ1wiKSxcbiAgICBkYXRhOiBwYXRoLmpvaW4obG9jYWxBcHBEYXRhLCBhcHBOYW1lLCBcIkRhdGFcIiksXG4gICAgbG9nOiBwYXRoLmpvaW4obG9jYWxBcHBEYXRhLCBhcHBOYW1lLCBcIkxvZ1wiKSxcbiAgICB0ZW1wOiBwYXRoLmpvaW4odGVtcERpciwgYXBwTmFtZSksXG4gIH07XG59XG5cbi8qKiBHZXQgcGF0aHMgZm9yIHN0b3JpbmcgdGhpbmdzIGxpa2UgZGF0YSwgY29uZmlnLCBjYWNoZSwgZXRjXG4gKlxuICogRG9lcyBub3QgY3JlYXRlIHRoZSBkaXJlY3RvcmllcyFcbiAqXG4gKiBAcGFyYW0gYXBwTmFtZSBuYW1lIG9mIHlvdXIgYXBwXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFwcFBhdGhzKGFwcE5hbWU6IHN0cmluZyk6IFBhdGhzIHtcbiAgaWYgKCFob21lRGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiY2Fubm90IGZpbmQgdXNlciBob21lIGRpcmVjdG9yeVwiKTtcbiAgfVxuXG4gIGlmICghdGVtcERpcikge1xuICAgIHRocm93IG5ldyBFcnJvcihcImNhbm5vdCBmaW5kIHRlbXAgZGlyZWN0b3J5XCIpO1xuICB9XG5cbiAgc3dpdGNoIChEZW5vLmJ1aWxkLm9zKSB7XG4gICAgY2FzZSBcImxpbnV4XCI6XG4gICAgICByZXR1cm4gbGludXgoaG9tZURpciwgdGVtcERpciwgYXBwTmFtZSk7XG4gICAgY2FzZSBcImRhcndpblwiOlxuICAgICAgcmV0dXJuIG1hY29zKGhvbWVEaXIsIHRlbXBEaXIsIGFwcE5hbWUpO1xuICAgIGNhc2UgXCJ3aW5kb3dzXCI6XG4gICAgICByZXR1cm4gd2luZG93cyhob21lRGlyLCB0ZW1wRGlyLCBhcHBOYW1lKTtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biBvc1wiKTtcbiAgfVxufVxuIl19