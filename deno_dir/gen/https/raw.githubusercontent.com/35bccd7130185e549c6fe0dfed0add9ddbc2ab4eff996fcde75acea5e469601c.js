import { dirname as pathDirname, resolve as pathResolve, } from "https://deno.land/std@0.97.0/path/mod.ts";
import { existsSync } from "https://deno.land/std@0.97.0/fs/exists.ts";
import envPaths from "https://raw.githubusercontent.com/truestamp/deno-app-paths/main/mod.ts";
const plainObject = () => Object.create(null);
export default class Config {
    _options = {
        projectName: "",
        configName: "config",
        resetInvalidConfig: false,
        defaults: null,
    };
    defaultValues = plainObject();
    path;
    constructor(options) {
        this._options = {
            ...this._options,
            ...options,
        };
        this.defaultValues = this._options.defaults
            ? this._options.defaults
            : plainObject();
        if (!this._options.projectName || this._options.projectName.trim() === "") {
            throw new Error("the projectName option must be provided and non-empty");
        }
        this._options.projectName = this._options.projectName.trim();
        this.path = pathResolve(envPaths(this._options.projectName).config, `${this._options.configName}.json`);
    }
    get size() {
        return Object.keys(this.store).length;
    }
    get dir() {
        return pathDirname(this.path);
    }
    get store() {
        try {
            return {
                ...this.defaultValues,
                ...JSON.parse(Deno.readTextFileSync(this.path)),
            };
        }
        catch (error) {
            switch (error.name) {
                case "SyntaxError":
                    if (this._options.resetInvalidConfig) {
                        this.reset();
                        return { ...this.defaultValues };
                    }
                    break;
                case "NotFound":
                    return { ...this.defaultValues, ...plainObject() };
            }
            throw error;
        }
    }
    set store(data) {
        if (!existsSync(pathDirname(this.path))) {
            Deno.mkdirSync(pathDirname(this.path), { recursive: true });
        }
        Deno.writeTextFileSync(this.path, JSON.stringify(data, null, 2));
    }
    get options() {
        return this._options;
    }
    has(key) {
        return key in this.store;
    }
    reset() {
        if (this.path && existsSync(this.path)) {
            Deno.removeSync(this.path, { recursive: true });
        }
        if (Object.keys(this.defaultValues).length === 0) {
            return;
        }
        Object.entries(this.defaultValues).forEach(([key, value]) => {
            this.set(key, value);
        });
        return;
    }
    resetKeys(keys) {
        if (Object.keys(this.defaultValues).length === 0) {
            return;
        }
        for (const key of keys) {
            if (this.defaultValues && key in this.defaultValues) {
                this.set(key, this.defaultValues[key]);
            }
        }
    }
    delete(key) {
        const { store } = this;
        if (store && key in store) {
            delete store[key];
            this.store = store;
        }
    }
    get(key) {
        if (this.store && key in this.store) {
            return this.store[key];
        }
        else if (this.defaultValues && key in this.defaultValues) {
            return this.defaultValues[key];
        }
        else {
            return null;
        }
    }
    set(key, value) {
        const { store } = this;
        const innerSet = (key, value) => {
            store[key] = value;
        };
        innerSet(key, value);
        this.store = store;
    }
    setObject(data) {
        for (const [key, value] of Object.entries(data)) {
            this.set(key, value);
        }
    }
    *[Symbol.iterator]() {
        for (const [key, value] of Object.entries(this.store)) {
            yield [key, value];
        }
    }
}
//# sourceMappingURL=data:application/json;base64,