import { dirname, resolve, } from "https://deno.land/std@0.133.0/path/mod.ts";
import appPaths from "https://raw.githubusercontent.com/truestamp/deno-app-paths/v1.0.1/mod.ts";
const plainObject = () => Object.create(null);
export default class Config {
    _options = {
        projectName: "",
        configName: "config",
        resetInvalidConfig: false,
        defaults: null,
    };
    defaultValues = plainObject();
    path;
    constructor(options) {
        this._options = {
            ...this._options,
            ...options,
        };
        this.defaultValues = this._options.defaults
            ? this._options.defaults
            : plainObject();
        if (!this._options.projectName || this._options.projectName.trim() === "") {
            throw new Error("the projectName option must be provided and non-empty");
        }
        this._options.projectName = this._options.projectName.trim();
        this.path = resolve(appPaths(this._options.projectName).config, `${this._options.configName}.json`);
    }
    get size() {
        return Object.keys(this.store).length;
    }
    get dir() {
        return dirname(this.path);
    }
    get store() {
        try {
            return {
                ...this.defaultValues,
                ...JSON.parse(Deno.readTextFileSync(this.path)),
            };
        }
        catch (error) {
            switch (error.name) {
                case "SyntaxError":
                    if (this._options.resetInvalidConfig) {
                        this.reset();
                        return { ...this.defaultValues };
                    }
                    break;
                case "NotFound":
                    return { ...this.defaultValues, ...plainObject() };
            }
            throw error;
        }
    }
    set store(data) {
        Deno.mkdirSync(dirname(this.path), { recursive: true });
        Deno.writeTextFileSync(this.path, JSON.stringify(data, null, 2));
    }
    get options() {
        return this._options;
    }
    has(key) {
        return key in this.store;
    }
    reset() {
        Deno.removeSync(this.path, { recursive: true });
        if (Object.keys(this.defaultValues).length === 0) {
            return;
        }
        Object.entries(this.defaultValues).forEach(([key, value]) => {
            this.set(key, value);
        });
        return;
    }
    resetKeys(keys) {
        if (Object.keys(this.defaultValues).length === 0) {
            return;
        }
        for (const key of keys) {
            if (this.defaultValues && key in this.defaultValues) {
                this.set(key, this.defaultValues[key]);
            }
        }
    }
    delete(key) {
        const { store } = this;
        if (store && key in store) {
            delete store[key];
            this.store = store;
        }
    }
    get(key) {
        if (this.store && key in this.store) {
            return this.store[key];
        }
        else if (this.defaultValues && key in this.defaultValues) {
            return this.defaultValues[key];
        }
        else {
            return null;
        }
    }
    set(key, value) {
        const { store } = this;
        const innerSet = (key, value) => {
            store[key] = value;
        };
        innerSet(key, value);
        this.store = store;
    }
    setObject(data) {
        for (const [key, value] of Object.entries(data)) {
            this.set(key, value);
        }
    }
    *[Symbol.iterator]() {
        for (const [key, value] of Object.entries(this.store)) {
            yield [key, value];
        }
    }
}
//# sourceMappingURL=data:application/json;base64,