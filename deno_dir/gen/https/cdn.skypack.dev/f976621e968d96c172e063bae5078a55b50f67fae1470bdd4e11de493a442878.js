var __defProp = Object.defineProperty;
var __publicField = (obj, key, value)=>{
    if (typeof key !== "symbol") key += "";
    if (key in obj) return __defProp(obj, key, {
        enumerable: true,
        configurable: true,
        writable: true,
        value
    });
    return obj[key] = value;
};
var __create = Object.create;
var __defProp2 = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __require = /* @__PURE__ */ ((x)=>typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
        get: (a, b)=>(typeof require !== "undefined" ? require : a)[b]
    }) : x)(function(x) {
    if (typeof require !== "undefined") return require.apply(this, arguments);
    throw new Error('Dynamic require of "' + x + '" is not supported');
});
var __commonJS = (cb, mod4)=>function __require2() {
        return mod4 || (0, cb[__getOwnPropNames(cb)[0]])((mod4 = {
            exports: {}
        }).exports, mod4), mod4.exports;
    };
var __copyProps = (to, from, except, desc)=>{
    if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp2(to, key, {
            get: ()=>from[key],
            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
        });
    }
    return to;
};
var __toESM = (mod4, isNodeMode, target)=>(target = mod4 != null ? __create(__getProtoOf(mod4)) : {}, __copyProps(isNodeMode || !mod4 || !mod4.__esModule ? __defProp2(target, "default", {
        value: mod4,
        enumerable: true
    }) : target, mod4));
var require_base64 = __commonJS({
    "node_modules/@stablelib/base64/lib/base64.js" (exports) {
        var __extends = exports && exports.__extends || function() {
            var extendStatics = function(d, b) {
                extendStatics = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d2, b2) {
                    d2.__proto__ = b2;
                } || function(d2, b2) {
                    for(var p in b2)if (b2.hasOwnProperty(p)) d2[p] = b2[p];
                };
                return extendStatics(d, b);
            };
            return function(d, b) {
                extendStatics(d, b);
                function __() {
                    this.constructor = d;
                }
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
        }();
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var INVALID_BYTE = 256;
        var Coder = function() {
            function Coder2(_paddingCharacter) {
                if (_paddingCharacter === void 0) {
                    _paddingCharacter = "=";
                }
                this._paddingCharacter = _paddingCharacter;
            }
            Coder2.prototype.encodedLength = function(length) {
                if (!this._paddingCharacter) {
                    return (length * 8 + 5) / 6 | 0;
                }
                return (length + 2) / 3 * 4 | 0;
            };
            Coder2.prototype.encode = function(data) {
                var out = "";
                var i = 0;
                for(; i < data.length - 2; i += 3){
                    var c = data[i] << 16 | data[i + 1] << 8 | data[i + 2];
                    out += this._encodeByte(c >>> 3 * 6 & 63);
                    out += this._encodeByte(c >>> 2 * 6 & 63);
                    out += this._encodeByte(c >>> 1 * 6 & 63);
                    out += this._encodeByte(c >>> 0 * 6 & 63);
                }
                var left = data.length - i;
                if (left > 0) {
                    var c = data[i] << 16 | (left === 2 ? data[i + 1] << 8 : 0);
                    out += this._encodeByte(c >>> 3 * 6 & 63);
                    out += this._encodeByte(c >>> 2 * 6 & 63);
                    if (left === 2) {
                        out += this._encodeByte(c >>> 1 * 6 & 63);
                    } else {
                        out += this._paddingCharacter || "";
                    }
                    out += this._paddingCharacter || "";
                }
                return out;
            };
            Coder2.prototype.maxDecodedLength = function(length) {
                if (!this._paddingCharacter) {
                    return (length * 6 + 7) / 8 | 0;
                }
                return length / 4 * 3 | 0;
            };
            Coder2.prototype.decodedLength = function(s2) {
                return this.maxDecodedLength(s2.length - this._getPaddingLength(s2));
            };
            Coder2.prototype.decode = function(s2) {
                if (s2.length === 0) {
                    return new Uint8Array(0);
                }
                var paddingLength = this._getPaddingLength(s2);
                var length = s2.length - paddingLength;
                var out = new Uint8Array(this.maxDecodedLength(length));
                var op = 0;
                var i = 0;
                var haveBad = 0;
                var v0 = 0, v1 = 0, v2 = 0, v3 = 0;
                for(; i < length - 4; i += 4){
                    v0 = this._decodeChar(s2.charCodeAt(i + 0));
                    v1 = this._decodeChar(s2.charCodeAt(i + 1));
                    v2 = this._decodeChar(s2.charCodeAt(i + 2));
                    v3 = this._decodeChar(s2.charCodeAt(i + 3));
                    out[op++] = v0 << 2 | v1 >>> 4;
                    out[op++] = v1 << 4 | v2 >>> 2;
                    out[op++] = v2 << 6 | v3;
                    haveBad |= v0 & INVALID_BYTE;
                    haveBad |= v1 & INVALID_BYTE;
                    haveBad |= v2 & INVALID_BYTE;
                    haveBad |= v3 & INVALID_BYTE;
                }
                if (i < length - 1) {
                    v0 = this._decodeChar(s2.charCodeAt(i));
                    v1 = this._decodeChar(s2.charCodeAt(i + 1));
                    out[op++] = v0 << 2 | v1 >>> 4;
                    haveBad |= v0 & INVALID_BYTE;
                    haveBad |= v1 & INVALID_BYTE;
                }
                if (i < length - 2) {
                    v2 = this._decodeChar(s2.charCodeAt(i + 2));
                    out[op++] = v1 << 4 | v2 >>> 2;
                    haveBad |= v2 & INVALID_BYTE;
                }
                if (i < length - 3) {
                    v3 = this._decodeChar(s2.charCodeAt(i + 3));
                    out[op++] = v2 << 6 | v3;
                    haveBad |= v3 & INVALID_BYTE;
                }
                if (haveBad !== 0) {
                    throw new Error("Base64Coder: incorrect characters for decoding");
                }
                return out;
            };
            Coder2.prototype._encodeByte = function(b) {
                var result = b;
                result += 65;
                result += 25 - b >>> 8 & 0 - 65 - 26 + 97;
                result += 51 - b >>> 8 & 26 - 97 - 52 + 48;
                result += 61 - b >>> 8 & 52 - 48 - 62 + 43;
                result += 62 - b >>> 8 & 62 - 43 - 63 + 47;
                return String.fromCharCode(result);
            };
            Coder2.prototype._decodeChar = function(c) {
                var result = INVALID_BYTE;
                result += (42 - c & c - 44) >>> 8 & -INVALID_BYTE + c - 43 + 62;
                result += (46 - c & c - 48) >>> 8 & -INVALID_BYTE + c - 47 + 63;
                result += (47 - c & c - 58) >>> 8 & -INVALID_BYTE + c - 48 + 52;
                result += (64 - c & c - 91) >>> 8 & -INVALID_BYTE + c - 65 + 0;
                result += (96 - c & c - 123) >>> 8 & -INVALID_BYTE + c - 97 + 26;
                return result;
            };
            Coder2.prototype._getPaddingLength = function(s2) {
                var paddingLength = 0;
                if (this._paddingCharacter) {
                    for(var i = s2.length - 1; i >= 0; i--){
                        if (s2[i] !== this._paddingCharacter) {
                            break;
                        }
                        paddingLength++;
                    }
                    if (s2.length < 4 || paddingLength > 2) {
                        throw new Error("Base64Coder: incorrect padding");
                    }
                }
                return paddingLength;
            };
            return Coder2;
        }();
        exports.Coder = Coder;
        var stdCoder = new Coder();
        function encode(data) {
            return stdCoder.encode(data);
        }
        exports.encode = encode;
        function decode(s2) {
            return stdCoder.decode(s2);
        }
        exports.decode = decode;
        var URLSafeCoder = function(_super) {
            __extends(URLSafeCoder2, _super);
            function URLSafeCoder2() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            URLSafeCoder2.prototype._encodeByte = function(b) {
                var result = b;
                result += 65;
                result += 25 - b >>> 8 & 0 - 65 - 26 + 97;
                result += 51 - b >>> 8 & 26 - 97 - 52 + 48;
                result += 61 - b >>> 8 & 52 - 48 - 62 + 45;
                result += 62 - b >>> 8 & 62 - 45 - 63 + 95;
                return String.fromCharCode(result);
            };
            URLSafeCoder2.prototype._decodeChar = function(c) {
                var result = INVALID_BYTE;
                result += (44 - c & c - 46) >>> 8 & -INVALID_BYTE + c - 45 + 62;
                result += (94 - c & c - 96) >>> 8 & -INVALID_BYTE + c - 95 + 63;
                result += (47 - c & c - 58) >>> 8 & -INVALID_BYTE + c - 48 + 52;
                result += (64 - c & c - 91) >>> 8 & -INVALID_BYTE + c - 65 + 0;
                result += (96 - c & c - 123) >>> 8 & -INVALID_BYTE + c - 97 + 26;
                return result;
            };
            return URLSafeCoder2;
        }(Coder);
        exports.URLSafeCoder = URLSafeCoder;
        var urlSafeCoder = new URLSafeCoder();
        function encodeURLSafe(data) {
            return urlSafeCoder.encode(data);
        }
        exports.encodeURLSafe = encodeURLSafe;
        function decodeURLSafe(s2) {
            return urlSafeCoder.decode(s2);
        }
        exports.decodeURLSafe = decodeURLSafe;
        exports.encodedLength = function(length) {
            return stdCoder.encodedLength(length);
        };
        exports.maxDecodedLength = function(length) {
            return stdCoder.maxDecodedLength(length);
        };
        exports.decodedLength = function(s2) {
            return stdCoder.decodedLength(s2);
        };
    }
});
var require_dist = __commonJS({
    "node_modules/iso-3166-ts/dist/index.js" (exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.getIso3166CountryName = exports.isIso3166Alpha2Code = exports.ISO_3166_ALPHA_2 = exports.ISO_3166_ALPHA_2_MAPPINGS = void 0;
        exports.ISO_3166_ALPHA_2_MAPPINGS = {
            AD: "Andorra",
            AE: "United Arab Emirates",
            AF: "Afghanistan",
            AG: "Antigua and Barbuda",
            AI: "Anguilla",
            AL: "Albania",
            AM: "Armenia",
            AO: "Angola",
            AQ: "Antarctica",
            AR: "Argentina",
            AS: "American Samoa",
            AT: "Austria",
            AU: "Australia",
            AW: "Aruba",
            AX: "\xC5land Islands",
            AZ: "Azerbaijan",
            BA: "Bosnia and Herzegovina",
            BB: "Barbados",
            BD: "Bangladesh",
            BE: "Belgium",
            BF: "Burkina Faso",
            BG: "Bulgaria",
            BH: "Bahrain",
            BI: "Burundi",
            BJ: "Benin",
            BL: "Saint Barth\xC3\xA9lemy",
            BM: "Bermuda",
            BN: "Brunei Darussalam",
            BO: "Bolivia (Plurinational State of)",
            BQ: "Bonaire, Sint Eustatius and Saba",
            BR: "Brazil",
            BS: "Bahamas",
            BT: "Bhutan",
            BV: "Bouvet Island",
            BW: "Botswana",
            BY: "Belarus",
            BZ: "Belize",
            CA: "Canada",
            CC: "Cocos (Keeling) Islands",
            CD: "Congo, Democratic Republic of the",
            CF: "Central African Republic",
            CG: "Congo",
            CH: "Switzerland",
            CI: "C\xF3te d'Ivoire",
            CK: "Cook Islands",
            CL: "Chile",
            CM: "Cameroon",
            CN: "China",
            CO: "Colombia",
            CR: "Costa Rica",
            CU: "Cuba",
            CV: "Cabo Verde",
            CW: "Cura\xC3\xA7ao",
            CX: "Christmas Island",
            CY: "Cyprus",
            CZ: "Czechia",
            DE: "Germany",
            DJ: "Djibouti",
            DK: "Denmark",
            DM: "Dominica",
            DO: "Dominican Republic",
            DZ: "Algeria",
            EC: "Ecuador",
            EE: "Estonia",
            EG: "Egypt",
            EH: "Western Sahara",
            ER: "Eritrea",
            ES: "Spain",
            ET: "Ethiopia",
            FI: "Finland",
            FJ: "Fiji",
            FK: "Falkland Islands (Malvinas)",
            FM: "Micronesia (Federated States of)",
            FO: "Faroe Islands",
            FR: "France",
            GA: "Gabon",
            GB: "United Kingdom of Great Britain and Northern Ireland",
            GD: "Grenada",
            GE: "Georgia",
            GF: "French Guiana",
            GG: "Guernsey",
            GH: "Ghana",
            GI: "Gibraltar",
            GL: "Greenland",
            GM: "Gambia",
            GN: "Guinea",
            GP: "Guadeloupe",
            GQ: "Equatorial Guinea",
            GR: "Greece",
            GS: "South Georgia and the South Sandwich Islands",
            GT: "Guatemala",
            GU: "Guam",
            GW: "Guinea-Bissau",
            GY: "Guyana",
            HK: "Hong Kong",
            HM: "Heard Island and McDonald Islands",
            HN: "Honduras",
            HR: "Croatia",
            HT: "Haiti",
            HU: "Hungary",
            ID: "Indonesia",
            IE: "Ireland",
            IL: "Israel",
            IM: "Isle of Man",
            IN: "India",
            IO: "British Indian Ocean Territory",
            IQ: "Iraq",
            IR: "Iran (Islamic Republic of)",
            IS: "Iceland",
            IT: "Italy",
            JE: "Jersey",
            JM: "Jamaica",
            JO: "Jordan",
            JP: "Japan",
            KE: "Kenya",
            KG: "Kyrgyzstan",
            KH: "Cambodia",
            KI: "Kiribati",
            KM: "Comoros",
            KN: "Saint Kitts and Nevis",
            KP: "Korea (Democratic People's Republic of) ",
            KR: "Korea, Republic of",
            KW: "Kuwait",
            KY: "Cayman Islands",
            KZ: "Kazakhstan",
            LA: "Lao People's Democratic Republic",
            LB: "Lebanon",
            LC: "Saint Lucia",
            LI: "Liechtenstein",
            LK: "Sri Lanka",
            LR: "Liberia",
            LS: "Lesotho",
            LT: "Lithuania",
            LU: "Luxembourg",
            LV: "Latvia",
            LY: "Libya",
            MA: "Morocco",
            MC: "Monaco",
            MD: "Moldova, Republic of",
            ME: "Montenegro",
            MF: "Saint Martin (French part)",
            MG: "Madagascar",
            MH: "Marshall Islands",
            MK: "North Macedonia",
            ML: "Mali",
            MM: "Myanmar",
            MN: "Mongolia",
            MO: "Macao",
            MP: "Northern Mariana Islands",
            MQ: "Martinique",
            MR: "Mauritania",
            MS: "Montserrat",
            MT: "Malta",
            MU: "Mauritius",
            MV: "Maldives",
            MW: "Malawi",
            MX: "Mexico",
            MY: "Malaysia",
            MZ: "Mozambique",
            NA: "Namibia",
            NC: "New Caledonia",
            NE: "Niger",
            NF: "Norfolk Island",
            NG: "Nigeria",
            NI: "Nicaragua",
            NL: "Netherlands",
            NO: "Norway",
            NP: "Nepal",
            NR: "Nauru",
            NU: "Niue",
            NZ: "New Zealand",
            OM: "Oman",
            PA: "Panama",
            PE: "Peru",
            PF: "French Polynesia",
            PG: "Papua New Guinea",
            PH: "Philippines",
            PK: "Pakistan",
            PL: "Poland",
            PM: "Saint Pierre and Miquelon",
            PN: "Pitcairn",
            PR: "Puerto Rico",
            PS: "Palestine, State of",
            PT: "Portugal",
            PW: "Palau",
            PY: "Paraguay",
            QA: "Qatar",
            RE: "R\xE9union",
            RO: "Romania",
            RS: "Serbia",
            RU: "Russian Federation",
            RW: "Rwanda",
            SA: "Saudi Arabia",
            SB: "Solomon Islands",
            SC: "Seychelles",
            SD: "Sudan",
            SE: "Sweden",
            SG: "Singapore",
            SH: "Saint Helena, Ascension and Tristan da Cunha",
            SI: "Slovenia",
            SJ: "Svalbard and Jan Mayen",
            SK: "Slovakia",
            SL: "Sierra Leone",
            SM: "San Marino",
            SN: "Senegal",
            SO: "Somalia",
            SR: "Suriname",
            SS: "South Sudan",
            ST: "Sao Tome and Principe",
            SV: "El Salvador",
            SX: "Sint Maarten (Dutch part)",
            SY: "Syrian Arab Republic",
            SZ: "Eswatini",
            TC: "Turks and Caicos Islands",
            TD: "Chad",
            TF: "French Southern Territories",
            TG: "Togo",
            TH: "Thailand",
            TJ: "Tajikistan",
            TK: "Tokelau",
            TL: "Timor-Leste",
            TM: "Turkmenistan",
            TN: "Tunisia",
            TO: "Tonga",
            TR: "Turkey",
            TT: "Trinidad and Tobago",
            TV: "Tuvalu",
            TW: "Taiwan, Province of China",
            TZ: "Tanzania, United Republic of",
            UA: "Ukraine",
            UG: "Uganda",
            UM: "United States Minor Outlying Islands",
            US: "United States of America",
            UY: "Uruguay",
            UZ: "Uzbekistan",
            VA: "Holy See",
            VC: "Saint Vincent and the Grenadines",
            VE: "Venezuela (Bolivarian Republic of)",
            VG: "Virgin Islands (British)",
            VI: "Virgin Islands (U.S.)",
            VN: "Viet Nam",
            VU: "Vanuatu",
            WF: "Wallis and Futuna",
            WS: "Samoa",
            XK: "Kosovo",
            YE: "Yemen",
            YT: "Mayotte",
            ZA: "South Africa",
            ZM: "Zambia",
            ZW: "Zimbabwe"
        };
        exports.ISO_3166_ALPHA_2 = Object.keys(exports.ISO_3166_ALPHA_2_MAPPINGS);
        function isIso3166Alpha2Code2(iso3166Alpha2CountryCode) {
            return exports.ISO_3166_ALPHA_2.indexOf(iso3166Alpha2CountryCode) != -1;
        }
        exports.isIso3166Alpha2Code = isIso3166Alpha2Code2;
        function getIso3166CountryName(iso3166Alpha2CountryCode) {
            if (isIso3166Alpha2Code2(iso3166Alpha2CountryCode)) {
                return exports.ISO_3166_ALPHA_2_MAPPINGS[iso3166Alpha2CountryCode];
            }
            return void 0;
        }
        exports.getIso3166CountryName = getIso3166CountryName;
    }
});
var require_hex2 = __commonJS({
    "node_modules/@stablelib/hex/lib/hex.js" (exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function encodeNibble(b) {
            var result = b + 48;
            result += 9 - b >>> 8 & -48 + 65 - 10;
            return String.fromCharCode(result);
        }
        function encodeNibbleLower(b) {
            var result = b + 48;
            result += 9 - b >>> 8 & -48 + 97 - 10;
            return String.fromCharCode(result);
        }
        var INVALID_HEX_NIBBLE = 256;
        function decodeNibble(c) {
            var result = INVALID_HEX_NIBBLE;
            result += (47 - c & c - 58) >> 8 & -INVALID_HEX_NIBBLE + c - 48;
            result += (64 - c & c - 71) >> 8 & -INVALID_HEX_NIBBLE + c - 65 + 10;
            result += (96 - c & c - 103) >> 8 & -INVALID_HEX_NIBBLE + c - 97 + 10;
            return result;
        }
        function encode(data, lowerCase) {
            if (lowerCase === void 0) {
                lowerCase = false;
            }
            var enc = lowerCase ? encodeNibbleLower : encodeNibble;
            var s2 = "";
            for(var i = 0; i < data.length; i++){
                s2 += enc(data[i] >>> 4);
                s2 += enc(data[i] & 15);
            }
            return s2;
        }
        exports.encode = encode;
        function decode(hex) {
            if (hex.length === 0) {
                return new Uint8Array(0);
            }
            if (hex.length % 2 !== 0) {
                throw new Error("hex: input string must be divisible by two");
            }
            var result = new Uint8Array(hex.length / 2);
            var haveBad = 0;
            for(var i = 0; i < hex.length; i += 2){
                var v0 = decodeNibble(hex.charCodeAt(i));
                var v1 = decodeNibble(hex.charCodeAt(i + 1));
                result[i / 2] = v0 << 4 | v1;
                haveBad |= v0 & INVALID_HEX_NIBBLE;
                haveBad |= v1 & INVALID_HEX_NIBBLE;
            }
            if (haveBad !== 0) {
                throw new Error("hex: incorrect characters for decoding");
            }
            return result;
        }
        exports.decode = decode;
    }
});
var require_browser = __commonJS({
    "node_modules/@stablelib/random/lib/source/browser.js" (exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var QUOTA = 65536;
        var BrowserRandomSource = function() {
            function BrowserRandomSource2() {
                this.isAvailable = false;
                this.isInstantiated = false;
                var browserCrypto = typeof self !== "undefined" ? self.crypto || self.msCrypto : null;
                if (browserCrypto && browserCrypto.getRandomValues) {
                    this._crypto = browserCrypto;
                    this.isAvailable = true;
                    this.isInstantiated = true;
                }
            }
            BrowserRandomSource2.prototype.randomBytes = function(length) {
                if (!this.isAvailable || !this._crypto) {
                    throw new Error("Browser random byte generator is not available.");
                }
                var out = new Uint8Array(length);
                for(var i = 0; i < out.length; i += QUOTA){
                    this._crypto.getRandomValues(out.subarray(i, i + Math.min(out.length - i, QUOTA)));
                }
                return out;
            };
            return BrowserRandomSource2;
        }();
        exports.BrowserRandomSource = BrowserRandomSource;
    }
});
var require_wipe3 = __commonJS({
    "node_modules/@stablelib/wipe/lib/wipe.js" (exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function wipe(array) {
            for(var i = 0; i < array.length; i++){
                array[i] = 0;
            }
            return array;
        }
        exports.wipe = wipe;
    }
});
var require_crypto = __commonJS({
    "(disabled):crypto" () {}
});
var require_node = __commonJS({
    "node_modules/@stablelib/random/lib/source/node.js" (exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var wipe_1 = require_wipe3();
        var NodeRandomSource = function() {
            function NodeRandomSource2() {
                this.isAvailable = false;
                this.isInstantiated = false;
                if (typeof __require !== "undefined") {
                    var nodeCrypto = require_crypto();
                    if (nodeCrypto && nodeCrypto.randomBytes) {
                        this._crypto = nodeCrypto;
                        this.isAvailable = true;
                        this.isInstantiated = true;
                    }
                }
            }
            NodeRandomSource2.prototype.randomBytes = function(length) {
                if (!this.isAvailable || !this._crypto) {
                    throw new Error("Node.js random byte generator is not available.");
                }
                var buffer = this._crypto.randomBytes(length);
                if (buffer.length !== length) {
                    throw new Error("NodeRandomSource: got fewer bytes than requested");
                }
                var out = new Uint8Array(length);
                for(var i = 0; i < out.length; i++){
                    out[i] = buffer[i];
                }
                wipe_1.wipe(buffer);
                return out;
            };
            return NodeRandomSource2;
        }();
        exports.NodeRandomSource = NodeRandomSource;
    }
});
var require_system = __commonJS({
    "node_modules/@stablelib/random/lib/source/system.js" (exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var browser_1 = require_browser();
        var node_1 = require_node();
        var SystemRandomSource = function() {
            function SystemRandomSource2() {
                this.isAvailable = false;
                this.name = "";
                this._source = new browser_1.BrowserRandomSource();
                if (this._source.isAvailable) {
                    this.isAvailable = true;
                    this.name = "Browser";
                    return;
                }
                this._source = new node_1.NodeRandomSource();
                if (this._source.isAvailable) {
                    this.isAvailable = true;
                    this.name = "Node";
                    return;
                }
            }
            SystemRandomSource2.prototype.randomBytes = function(length) {
                if (!this.isAvailable) {
                    throw new Error("System random byte generator is not available.");
                }
                return this._source.randomBytes(length);
            };
            return SystemRandomSource2;
        }();
        exports.SystemRandomSource = SystemRandomSource;
    }
});
var require_int3 = __commonJS({
    "node_modules/@stablelib/int/lib/int.js" (exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function imulShim(a, b) {
            var ah = a >>> 16 & 65535, al = a & 65535;
            var bh = b >>> 16 & 65535, bl = b & 65535;
            return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
        }
        exports.mul = Math.imul || imulShim;
        function add(a, b) {
            return a + b | 0;
        }
        exports.add = add;
        function sub(a, b) {
            return a - b | 0;
        }
        exports.sub = sub;
        function rotl(x, n2) {
            return x << n2 | x >>> 32 - n2;
        }
        exports.rotl = rotl;
        function rotr(x, n2) {
            return x << 32 - n2 | x >>> n2;
        }
        exports.rotr = rotr;
        function isIntegerShim(n2) {
            return typeof n2 === "number" && isFinite(n2) && Math.floor(n2) === n2;
        }
        exports.isInteger = Number.isInteger || isIntegerShim;
        exports.MAX_SAFE_INTEGER = 9007199254740991;
        exports.isSafeInteger = function(n2) {
            return exports.isInteger(n2) && n2 >= -exports.MAX_SAFE_INTEGER && n2 <= exports.MAX_SAFE_INTEGER;
        };
    }
});
var require_binary3 = __commonJS({
    "node_modules/@stablelib/binary/lib/binary.js" (exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var int_1 = require_int3();
        function readInt16BE(array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            return (array[offset2 + 0] << 8 | array[offset2 + 1]) << 16 >> 16;
        }
        exports.readInt16BE = readInt16BE;
        function readUint16BE(array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            return (array[offset2 + 0] << 8 | array[offset2 + 1]) >>> 0;
        }
        exports.readUint16BE = readUint16BE;
        function readInt16LE(array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            return (array[offset2 + 1] << 8 | array[offset2]) << 16 >> 16;
        }
        exports.readInt16LE = readInt16LE;
        function readUint16LE(array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            return (array[offset2 + 1] << 8 | array[offset2]) >>> 0;
        }
        exports.readUint16LE = readUint16LE;
        function writeUint16BE(value, out, offset2) {
            if (out === void 0) {
                out = new Uint8Array(2);
            }
            if (offset2 === void 0) {
                offset2 = 0;
            }
            out[offset2 + 0] = value >>> 8;
            out[offset2 + 1] = value >>> 0;
            return out;
        }
        exports.writeUint16BE = writeUint16BE;
        exports.writeInt16BE = writeUint16BE;
        function writeUint16LE(value, out, offset2) {
            if (out === void 0) {
                out = new Uint8Array(2);
            }
            if (offset2 === void 0) {
                offset2 = 0;
            }
            out[offset2 + 0] = value >>> 0;
            out[offset2 + 1] = value >>> 8;
            return out;
        }
        exports.writeUint16LE = writeUint16LE;
        exports.writeInt16LE = writeUint16LE;
        function readInt32BE(array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            return array[offset2] << 24 | array[offset2 + 1] << 16 | array[offset2 + 2] << 8 | array[offset2 + 3];
        }
        exports.readInt32BE = readInt32BE;
        function readUint32BE(array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            return (array[offset2] << 24 | array[offset2 + 1] << 16 | array[offset2 + 2] << 8 | array[offset2 + 3]) >>> 0;
        }
        exports.readUint32BE = readUint32BE;
        function readInt32LE(array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            return array[offset2 + 3] << 24 | array[offset2 + 2] << 16 | array[offset2 + 1] << 8 | array[offset2];
        }
        exports.readInt32LE = readInt32LE;
        function readUint32LE(array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            return (array[offset2 + 3] << 24 | array[offset2 + 2] << 16 | array[offset2 + 1] << 8 | array[offset2]) >>> 0;
        }
        exports.readUint32LE = readUint32LE;
        function writeUint32BE(value, out, offset2) {
            if (out === void 0) {
                out = new Uint8Array(4);
            }
            if (offset2 === void 0) {
                offset2 = 0;
            }
            out[offset2 + 0] = value >>> 24;
            out[offset2 + 1] = value >>> 16;
            out[offset2 + 2] = value >>> 8;
            out[offset2 + 3] = value >>> 0;
            return out;
        }
        exports.writeUint32BE = writeUint32BE;
        exports.writeInt32BE = writeUint32BE;
        function writeUint32LE(value, out, offset2) {
            if (out === void 0) {
                out = new Uint8Array(4);
            }
            if (offset2 === void 0) {
                offset2 = 0;
            }
            out[offset2 + 0] = value >>> 0;
            out[offset2 + 1] = value >>> 8;
            out[offset2 + 2] = value >>> 16;
            out[offset2 + 3] = value >>> 24;
            return out;
        }
        exports.writeUint32LE = writeUint32LE;
        exports.writeInt32LE = writeUint32LE;
        function readInt64BE(array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            var hi = readInt32BE(array, offset2);
            var lo = readInt32BE(array, offset2 + 4);
            return hi * 4294967296 + lo - (lo >> 31) * 4294967296;
        }
        exports.readInt64BE = readInt64BE;
        function readUint64BE(array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            var hi = readUint32BE(array, offset2);
            var lo = readUint32BE(array, offset2 + 4);
            return hi * 4294967296 + lo;
        }
        exports.readUint64BE = readUint64BE;
        function readInt64LE(array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            var lo = readInt32LE(array, offset2);
            var hi = readInt32LE(array, offset2 + 4);
            return hi * 4294967296 + lo - (lo >> 31) * 4294967296;
        }
        exports.readInt64LE = readInt64LE;
        function readUint64LE(array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            var lo = readUint32LE(array, offset2);
            var hi = readUint32LE(array, offset2 + 4);
            return hi * 4294967296 + lo;
        }
        exports.readUint64LE = readUint64LE;
        function writeUint64BE(value, out, offset2) {
            if (out === void 0) {
                out = new Uint8Array(8);
            }
            if (offset2 === void 0) {
                offset2 = 0;
            }
            writeUint32BE(value / 4294967296 >>> 0, out, offset2);
            writeUint32BE(value >>> 0, out, offset2 + 4);
            return out;
        }
        exports.writeUint64BE = writeUint64BE;
        exports.writeInt64BE = writeUint64BE;
        function writeUint64LE(value, out, offset2) {
            if (out === void 0) {
                out = new Uint8Array(8);
            }
            if (offset2 === void 0) {
                offset2 = 0;
            }
            writeUint32LE(value >>> 0, out, offset2);
            writeUint32LE(value / 4294967296 >>> 0, out, offset2 + 4);
            return out;
        }
        exports.writeUint64LE = writeUint64LE;
        exports.writeInt64LE = writeUint64LE;
        function readUintBE(bitLength, array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            if (bitLength % 8 !== 0) {
                throw new Error("readUintBE supports only bitLengths divisible by 8");
            }
            if (bitLength / 8 > array.length - offset2) {
                throw new Error("readUintBE: array is too short for the given bitLength");
            }
            var result = 0;
            var mul = 1;
            for(var i = bitLength / 8 + offset2 - 1; i >= offset2; i--){
                result += array[i] * mul;
                mul *= 256;
            }
            return result;
        }
        exports.readUintBE = readUintBE;
        function readUintLE(bitLength, array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            if (bitLength % 8 !== 0) {
                throw new Error("readUintLE supports only bitLengths divisible by 8");
            }
            if (bitLength / 8 > array.length - offset2) {
                throw new Error("readUintLE: array is too short for the given bitLength");
            }
            var result = 0;
            var mul = 1;
            for(var i = offset2; i < offset2 + bitLength / 8; i++){
                result += array[i] * mul;
                mul *= 256;
            }
            return result;
        }
        exports.readUintLE = readUintLE;
        function writeUintBE(bitLength, value, out, offset2) {
            if (out === void 0) {
                out = new Uint8Array(bitLength / 8);
            }
            if (offset2 === void 0) {
                offset2 = 0;
            }
            if (bitLength % 8 !== 0) {
                throw new Error("writeUintBE supports only bitLengths divisible by 8");
            }
            if (!int_1.isSafeInteger(value)) {
                throw new Error("writeUintBE value must be an integer");
            }
            var div = 1;
            for(var i = bitLength / 8 + offset2 - 1; i >= offset2; i--){
                out[i] = value / div & 255;
                div *= 256;
            }
            return out;
        }
        exports.writeUintBE = writeUintBE;
        function writeUintLE(bitLength, value, out, offset2) {
            if (out === void 0) {
                out = new Uint8Array(bitLength / 8);
            }
            if (offset2 === void 0) {
                offset2 = 0;
            }
            if (bitLength % 8 !== 0) {
                throw new Error("writeUintLE supports only bitLengths divisible by 8");
            }
            if (!int_1.isSafeInteger(value)) {
                throw new Error("writeUintLE value must be an integer");
            }
            var div = 1;
            for(var i = offset2; i < offset2 + bitLength / 8; i++){
                out[i] = value / div & 255;
                div *= 256;
            }
            return out;
        }
        exports.writeUintLE = writeUintLE;
        function readFloat32BE(array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
            return view.getFloat32(offset2);
        }
        exports.readFloat32BE = readFloat32BE;
        function readFloat32LE(array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
            return view.getFloat32(offset2, true);
        }
        exports.readFloat32LE = readFloat32LE;
        function readFloat64BE(array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
            return view.getFloat64(offset2);
        }
        exports.readFloat64BE = readFloat64BE;
        function readFloat64LE(array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
            return view.getFloat64(offset2, true);
        }
        exports.readFloat64LE = readFloat64LE;
        function writeFloat32BE(value, out, offset2) {
            if (out === void 0) {
                out = new Uint8Array(4);
            }
            if (offset2 === void 0) {
                offset2 = 0;
            }
            var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
            view.setFloat32(offset2, value);
            return out;
        }
        exports.writeFloat32BE = writeFloat32BE;
        function writeFloat32LE(value, out, offset2) {
            if (out === void 0) {
                out = new Uint8Array(4);
            }
            if (offset2 === void 0) {
                offset2 = 0;
            }
            var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
            view.setFloat32(offset2, value, true);
            return out;
        }
        exports.writeFloat32LE = writeFloat32LE;
        function writeFloat64BE(value, out, offset2) {
            if (out === void 0) {
                out = new Uint8Array(8);
            }
            if (offset2 === void 0) {
                offset2 = 0;
            }
            var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
            view.setFloat64(offset2, value);
            return out;
        }
        exports.writeFloat64BE = writeFloat64BE;
        function writeFloat64LE(value, out, offset2) {
            if (out === void 0) {
                out = new Uint8Array(8);
            }
            if (offset2 === void 0) {
                offset2 = 0;
            }
            var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
            view.setFloat64(offset2, value, true);
            return out;
        }
        exports.writeFloat64LE = writeFloat64LE;
    }
});
var require_random = __commonJS({
    "node_modules/@stablelib/random/lib/random.js" (exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var system_1 = require_system();
        var binary_1 = require_binary3();
        var wipe_1 = require_wipe3();
        exports.defaultRandomSource = new system_1.SystemRandomSource();
        function randomBytes(length, prng) {
            if (prng === void 0) {
                prng = exports.defaultRandomSource;
            }
            return prng.randomBytes(length);
        }
        exports.randomBytes = randomBytes;
        function randomUint32(prng) {
            if (prng === void 0) {
                prng = exports.defaultRandomSource;
            }
            var buf = randomBytes(4, prng);
            var result = binary_1.readUint32LE(buf);
            wipe_1.wipe(buf);
            return result;
        }
        exports.randomUint32 = randomUint32;
        var ALPHANUMERIC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
        function randomString(length, charset, prng) {
            if (charset === void 0) {
                charset = ALPHANUMERIC;
            }
            if (prng === void 0) {
                prng = exports.defaultRandomSource;
            }
            if (charset.length < 2) {
                throw new Error("randomString charset is too short");
            }
            if (charset.length > 256) {
                throw new Error("randomString charset is too long");
            }
            var out = "";
            var charsLen = charset.length;
            var maxByte = 256 - 256 % charsLen;
            while(length > 0){
                var buf = randomBytes(Math.ceil(length * 256 / maxByte), prng);
                for(var i = 0; i < buf.length && length > 0; i++){
                    var randomByte = buf[i];
                    if (randomByte < maxByte) {
                        out += charset.charAt(randomByte % charsLen);
                        length--;
                    }
                }
                wipe_1.wipe(buf);
            }
            return out;
        }
        exports.randomString = randomString;
        function randomStringForEntropy(bits, charset, prng) {
            if (charset === void 0) {
                charset = ALPHANUMERIC;
            }
            if (prng === void 0) {
                prng = exports.defaultRandomSource;
            }
            var length = Math.ceil(bits / (Math.log(charset.length) / Math.LN2));
            return randomString(length, charset, prng);
        }
        exports.randomStringForEntropy = randomStringForEntropy;
    }
});
var require_sha5122 = __commonJS({
    "node_modules/@stablelib/sha512/lib/sha512.js" (exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var binary_1 = require_binary3();
        var wipe_1 = require_wipe3();
        exports.DIGEST_LENGTH = 64;
        exports.BLOCK_SIZE = 128;
        var SHA512 = function() {
            function SHA5122() {
                this.digestLength = exports.DIGEST_LENGTH;
                this.blockSize = exports.BLOCK_SIZE;
                this._stateHi = new Int32Array(8);
                this._stateLo = new Int32Array(8);
                this._tempHi = new Int32Array(16);
                this._tempLo = new Int32Array(16);
                this._buffer = new Uint8Array(256);
                this._bufferLength = 0;
                this._bytesHashed = 0;
                this._finished = false;
                this.reset();
            }
            SHA5122.prototype._initState = function() {
                this._stateHi[0] = 1779033703;
                this._stateHi[1] = 3144134277;
                this._stateHi[2] = 1013904242;
                this._stateHi[3] = 2773480762;
                this._stateHi[4] = 1359893119;
                this._stateHi[5] = 2600822924;
                this._stateHi[6] = 528734635;
                this._stateHi[7] = 1541459225;
                this._stateLo[0] = 4089235720;
                this._stateLo[1] = 2227873595;
                this._stateLo[2] = 4271175723;
                this._stateLo[3] = 1595750129;
                this._stateLo[4] = 2917565137;
                this._stateLo[5] = 725511199;
                this._stateLo[6] = 4215389547;
                this._stateLo[7] = 327033209;
            };
            SHA5122.prototype.reset = function() {
                this._initState();
                this._bufferLength = 0;
                this._bytesHashed = 0;
                this._finished = false;
                return this;
            };
            SHA5122.prototype.clean = function() {
                wipe_1.wipe(this._buffer);
                wipe_1.wipe(this._tempHi);
                wipe_1.wipe(this._tempLo);
                this.reset();
            };
            SHA5122.prototype.update = function(data, dataLength) {
                if (dataLength === void 0) {
                    dataLength = data.length;
                }
                if (this._finished) {
                    throw new Error("SHA512: can't update because hash was finished.");
                }
                var dataPos = 0;
                this._bytesHashed += dataLength;
                if (this._bufferLength > 0) {
                    while(this._bufferLength < exports.BLOCK_SIZE && dataLength > 0){
                        this._buffer[this._bufferLength++] = data[dataPos++];
                        dataLength--;
                    }
                    if (this._bufferLength === this.blockSize) {
                        hashBlocks(this._tempHi, this._tempLo, this._stateHi, this._stateLo, this._buffer, 0, this.blockSize);
                        this._bufferLength = 0;
                    }
                }
                if (dataLength >= this.blockSize) {
                    dataPos = hashBlocks(this._tempHi, this._tempLo, this._stateHi, this._stateLo, data, dataPos, dataLength);
                    dataLength %= this.blockSize;
                }
                while(dataLength > 0){
                    this._buffer[this._bufferLength++] = data[dataPos++];
                    dataLength--;
                }
                return this;
            };
            SHA5122.prototype.finish = function(out) {
                if (!this._finished) {
                    var bytesHashed = this._bytesHashed;
                    var left = this._bufferLength;
                    var bitLenHi = bytesHashed / 536870912 | 0;
                    var bitLenLo = bytesHashed << 3;
                    var padLength = bytesHashed % 128 < 112 ? 128 : 256;
                    this._buffer[left] = 128;
                    for(var i = left + 1; i < padLength - 8; i++){
                        this._buffer[i] = 0;
                    }
                    binary_1.writeUint32BE(bitLenHi, this._buffer, padLength - 8);
                    binary_1.writeUint32BE(bitLenLo, this._buffer, padLength - 4);
                    hashBlocks(this._tempHi, this._tempLo, this._stateHi, this._stateLo, this._buffer, 0, padLength);
                    this._finished = true;
                }
                for(var i = 0; i < this.digestLength / 8; i++){
                    binary_1.writeUint32BE(this._stateHi[i], out, i * 8);
                    binary_1.writeUint32BE(this._stateLo[i], out, i * 8 + 4);
                }
                return this;
            };
            SHA5122.prototype.digest = function() {
                var out = new Uint8Array(this.digestLength);
                this.finish(out);
                return out;
            };
            SHA5122.prototype.saveState = function() {
                if (this._finished) {
                    throw new Error("SHA256: cannot save finished state");
                }
                return {
                    stateHi: new Int32Array(this._stateHi),
                    stateLo: new Int32Array(this._stateLo),
                    buffer: this._bufferLength > 0 ? new Uint8Array(this._buffer) : void 0,
                    bufferLength: this._bufferLength,
                    bytesHashed: this._bytesHashed
                };
            };
            SHA5122.prototype.restoreState = function(savedState) {
                this._stateHi.set(savedState.stateHi);
                this._stateLo.set(savedState.stateLo);
                this._bufferLength = savedState.bufferLength;
                if (savedState.buffer) {
                    this._buffer.set(savedState.buffer);
                }
                this._bytesHashed = savedState.bytesHashed;
                this._finished = false;
                return this;
            };
            SHA5122.prototype.cleanSavedState = function(savedState) {
                wipe_1.wipe(savedState.stateHi);
                wipe_1.wipe(savedState.stateLo);
                if (savedState.buffer) {
                    wipe_1.wipe(savedState.buffer);
                }
                savedState.bufferLength = 0;
                savedState.bytesHashed = 0;
            };
            return SHA5122;
        }();
        exports.SHA512 = SHA512;
        var K = new Int32Array([
            1116352408,
            3609767458,
            1899447441,
            602891725,
            3049323471,
            3964484399,
            3921009573,
            2173295548,
            961987163,
            4081628472,
            1508970993,
            3053834265,
            2453635748,
            2937671579,
            2870763221,
            3664609560,
            3624381080,
            2734883394,
            310598401,
            1164996542,
            607225278,
            1323610764,
            1426881987,
            3590304994,
            1925078388,
            4068182383,
            2162078206,
            991336113,
            2614888103,
            633803317,
            3248222580,
            3479774868,
            3835390401,
            2666613458,
            4022224774,
            944711139,
            264347078,
            2341262773,
            604807628,
            2007800933,
            770255983,
            1495990901,
            1249150122,
            1856431235,
            1555081692,
            3175218132,
            1996064986,
            2198950837,
            2554220882,
            3999719339,
            2821834349,
            766784016,
            2952996808,
            2566594879,
            3210313671,
            3203337956,
            3336571891,
            1034457026,
            3584528711,
            2466948901,
            113926993,
            3758326383,
            338241895,
            168717936,
            666307205,
            1188179964,
            773529912,
            1546045734,
            1294757372,
            1522805485,
            1396182291,
            2643833823,
            1695183700,
            2343527390,
            1986661051,
            1014477480,
            2177026350,
            1206759142,
            2456956037,
            344077627,
            2730485921,
            1290863460,
            2820302411,
            3158454273,
            3259730800,
            3505952657,
            3345764771,
            106217008,
            3516065817,
            3606008344,
            3600352804,
            1432725776,
            4094571909,
            1467031594,
            275423344,
            851169720,
            430227734,
            3100823752,
            506948616,
            1363258195,
            659060556,
            3750685593,
            883997877,
            3785050280,
            958139571,
            3318307427,
            1322822218,
            3812723403,
            1537002063,
            2003034995,
            1747873779,
            3602036899,
            1955562222,
            1575990012,
            2024104815,
            1125592928,
            2227730452,
            2716904306,
            2361852424,
            442776044,
            2428436474,
            593698344,
            2756734187,
            3733110249,
            3204031479,
            2999351573,
            3329325298,
            3815920427,
            3391569614,
            3928383900,
            3515267271,
            566280711,
            3940187606,
            3454069534,
            4118630271,
            4000239992,
            116418474,
            1914138554,
            174292421,
            2731055270,
            289380356,
            3203993006,
            460393269,
            320620315,
            685471733,
            587496836,
            852142971,
            1086792851,
            1017036298,
            365543100,
            1126000580,
            2618297676,
            1288033470,
            3409855158,
            1501505948,
            4234509866,
            1607167915,
            987167468,
            1816402316,
            1246189591
        ]);
        function hashBlocks(wh, wl, hh, hl, m, pos, len) {
            var ah0 = hh[0], ah1 = hh[1], ah2 = hh[2], ah3 = hh[3], ah4 = hh[4], ah5 = hh[5], ah6 = hh[6], ah7 = hh[7], al0 = hl[0], al1 = hl[1], al2 = hl[2], al3 = hl[3], al4 = hl[4], al5 = hl[5], al6 = hl[6], al7 = hl[7];
            var h, l2;
            var th, tl;
            var a, b, c, d;
            while(len >= 128){
                for(var i = 0; i < 16; i++){
                    var j = 8 * i + pos;
                    wh[i] = binary_1.readUint32BE(m, j);
                    wl[i] = binary_1.readUint32BE(m, j + 4);
                }
                for(var i = 0; i < 80; i++){
                    var bh0 = ah0;
                    var bh1 = ah1;
                    var bh2 = ah2;
                    var bh3 = ah3;
                    var bh4 = ah4;
                    var bh5 = ah5;
                    var bh6 = ah6;
                    var bh7 = ah7;
                    var bl0 = al0;
                    var bl1 = al1;
                    var bl2 = al2;
                    var bl3 = al3;
                    var bl4 = al4;
                    var bl5 = al5;
                    var bl6 = al6;
                    var bl7 = al7;
                    h = ah7;
                    l2 = al7;
                    a = l2 & 65535;
                    b = l2 >>> 16;
                    c = h & 65535;
                    d = h >>> 16;
                    h = (ah4 >>> 14 | al4 << 32 - 14) ^ (ah4 >>> 18 | al4 << 32 - 18) ^ (al4 >>> 41 - 32 | ah4 << 32 - (41 - 32));
                    l2 = (al4 >>> 14 | ah4 << 32 - 14) ^ (al4 >>> 18 | ah4 << 32 - 18) ^ (ah4 >>> 41 - 32 | al4 << 32 - (41 - 32));
                    a += l2 & 65535;
                    b += l2 >>> 16;
                    c += h & 65535;
                    d += h >>> 16;
                    h = ah4 & ah5 ^ ~ah4 & ah6;
                    l2 = al4 & al5 ^ ~al4 & al6;
                    a += l2 & 65535;
                    b += l2 >>> 16;
                    c += h & 65535;
                    d += h >>> 16;
                    h = K[i * 2];
                    l2 = K[i * 2 + 1];
                    a += l2 & 65535;
                    b += l2 >>> 16;
                    c += h & 65535;
                    d += h >>> 16;
                    h = wh[i % 16];
                    l2 = wl[i % 16];
                    a += l2 & 65535;
                    b += l2 >>> 16;
                    c += h & 65535;
                    d += h >>> 16;
                    b += a >>> 16;
                    c += b >>> 16;
                    d += c >>> 16;
                    th = c & 65535 | d << 16;
                    tl = a & 65535 | b << 16;
                    h = th;
                    l2 = tl;
                    a = l2 & 65535;
                    b = l2 >>> 16;
                    c = h & 65535;
                    d = h >>> 16;
                    h = (ah0 >>> 28 | al0 << 32 - 28) ^ (al0 >>> 34 - 32 | ah0 << 32 - (34 - 32)) ^ (al0 >>> 39 - 32 | ah0 << 32 - (39 - 32));
                    l2 = (al0 >>> 28 | ah0 << 32 - 28) ^ (ah0 >>> 34 - 32 | al0 << 32 - (34 - 32)) ^ (ah0 >>> 39 - 32 | al0 << 32 - (39 - 32));
                    a += l2 & 65535;
                    b += l2 >>> 16;
                    c += h & 65535;
                    d += h >>> 16;
                    h = ah0 & ah1 ^ ah0 & ah2 ^ ah1 & ah2;
                    l2 = al0 & al1 ^ al0 & al2 ^ al1 & al2;
                    a += l2 & 65535;
                    b += l2 >>> 16;
                    c += h & 65535;
                    d += h >>> 16;
                    b += a >>> 16;
                    c += b >>> 16;
                    d += c >>> 16;
                    bh7 = c & 65535 | d << 16;
                    bl7 = a & 65535 | b << 16;
                    h = bh3;
                    l2 = bl3;
                    a = l2 & 65535;
                    b = l2 >>> 16;
                    c = h & 65535;
                    d = h >>> 16;
                    h = th;
                    l2 = tl;
                    a += l2 & 65535;
                    b += l2 >>> 16;
                    c += h & 65535;
                    d += h >>> 16;
                    b += a >>> 16;
                    c += b >>> 16;
                    d += c >>> 16;
                    bh3 = c & 65535 | d << 16;
                    bl3 = a & 65535 | b << 16;
                    ah1 = bh0;
                    ah2 = bh1;
                    ah3 = bh2;
                    ah4 = bh3;
                    ah5 = bh4;
                    ah6 = bh5;
                    ah7 = bh6;
                    ah0 = bh7;
                    al1 = bl0;
                    al2 = bl1;
                    al3 = bl2;
                    al4 = bl3;
                    al5 = bl4;
                    al6 = bl5;
                    al7 = bl6;
                    al0 = bl7;
                    if (i % 16 === 15) {
                        for(var j = 0; j < 16; j++){
                            h = wh[j];
                            l2 = wl[j];
                            a = l2 & 65535;
                            b = l2 >>> 16;
                            c = h & 65535;
                            d = h >>> 16;
                            h = wh[(j + 9) % 16];
                            l2 = wl[(j + 9) % 16];
                            a += l2 & 65535;
                            b += l2 >>> 16;
                            c += h & 65535;
                            d += h >>> 16;
                            th = wh[(j + 1) % 16];
                            tl = wl[(j + 1) % 16];
                            h = (th >>> 1 | tl << 32 - 1) ^ (th >>> 8 | tl << 32 - 8) ^ th >>> 7;
                            l2 = (tl >>> 1 | th << 32 - 1) ^ (tl >>> 8 | th << 32 - 8) ^ (tl >>> 7 | th << 32 - 7);
                            a += l2 & 65535;
                            b += l2 >>> 16;
                            c += h & 65535;
                            d += h >>> 16;
                            th = wh[(j + 14) % 16];
                            tl = wl[(j + 14) % 16];
                            h = (th >>> 19 | tl << 32 - 19) ^ (tl >>> 61 - 32 | th << 32 - (61 - 32)) ^ th >>> 6;
                            l2 = (tl >>> 19 | th << 32 - 19) ^ (th >>> 61 - 32 | tl << 32 - (61 - 32)) ^ (tl >>> 6 | th << 32 - 6);
                            a += l2 & 65535;
                            b += l2 >>> 16;
                            c += h & 65535;
                            d += h >>> 16;
                            b += a >>> 16;
                            c += b >>> 16;
                            d += c >>> 16;
                            wh[j] = c & 65535 | d << 16;
                            wl[j] = a & 65535 | b << 16;
                        }
                    }
                }
                h = ah0;
                l2 = al0;
                a = l2 & 65535;
                b = l2 >>> 16;
                c = h & 65535;
                d = h >>> 16;
                h = hh[0];
                l2 = hl[0];
                a += l2 & 65535;
                b += l2 >>> 16;
                c += h & 65535;
                d += h >>> 16;
                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;
                hh[0] = ah0 = c & 65535 | d << 16;
                hl[0] = al0 = a & 65535 | b << 16;
                h = ah1;
                l2 = al1;
                a = l2 & 65535;
                b = l2 >>> 16;
                c = h & 65535;
                d = h >>> 16;
                h = hh[1];
                l2 = hl[1];
                a += l2 & 65535;
                b += l2 >>> 16;
                c += h & 65535;
                d += h >>> 16;
                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;
                hh[1] = ah1 = c & 65535 | d << 16;
                hl[1] = al1 = a & 65535 | b << 16;
                h = ah2;
                l2 = al2;
                a = l2 & 65535;
                b = l2 >>> 16;
                c = h & 65535;
                d = h >>> 16;
                h = hh[2];
                l2 = hl[2];
                a += l2 & 65535;
                b += l2 >>> 16;
                c += h & 65535;
                d += h >>> 16;
                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;
                hh[2] = ah2 = c & 65535 | d << 16;
                hl[2] = al2 = a & 65535 | b << 16;
                h = ah3;
                l2 = al3;
                a = l2 & 65535;
                b = l2 >>> 16;
                c = h & 65535;
                d = h >>> 16;
                h = hh[3];
                l2 = hl[3];
                a += l2 & 65535;
                b += l2 >>> 16;
                c += h & 65535;
                d += h >>> 16;
                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;
                hh[3] = ah3 = c & 65535 | d << 16;
                hl[3] = al3 = a & 65535 | b << 16;
                h = ah4;
                l2 = al4;
                a = l2 & 65535;
                b = l2 >>> 16;
                c = h & 65535;
                d = h >>> 16;
                h = hh[4];
                l2 = hl[4];
                a += l2 & 65535;
                b += l2 >>> 16;
                c += h & 65535;
                d += h >>> 16;
                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;
                hh[4] = ah4 = c & 65535 | d << 16;
                hl[4] = al4 = a & 65535 | b << 16;
                h = ah5;
                l2 = al5;
                a = l2 & 65535;
                b = l2 >>> 16;
                c = h & 65535;
                d = h >>> 16;
                h = hh[5];
                l2 = hl[5];
                a += l2 & 65535;
                b += l2 >>> 16;
                c += h & 65535;
                d += h >>> 16;
                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;
                hh[5] = ah5 = c & 65535 | d << 16;
                hl[5] = al5 = a & 65535 | b << 16;
                h = ah6;
                l2 = al6;
                a = l2 & 65535;
                b = l2 >>> 16;
                c = h & 65535;
                d = h >>> 16;
                h = hh[6];
                l2 = hl[6];
                a += l2 & 65535;
                b += l2 >>> 16;
                c += h & 65535;
                d += h >>> 16;
                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;
                hh[6] = ah6 = c & 65535 | d << 16;
                hl[6] = al6 = a & 65535 | b << 16;
                h = ah7;
                l2 = al7;
                a = l2 & 65535;
                b = l2 >>> 16;
                c = h & 65535;
                d = h >>> 16;
                h = hh[7];
                l2 = hl[7];
                a += l2 & 65535;
                b += l2 >>> 16;
                c += h & 65535;
                d += h >>> 16;
                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;
                hh[7] = ah7 = c & 65535 | d << 16;
                hl[7] = al7 = a & 65535 | b << 16;
                pos += 128;
                len -= 128;
            }
            return pos;
        }
        function hash(data) {
            var h = new SHA512();
            h.update(data);
            var digest = h.digest();
            h.clean();
            return digest;
        }
        exports.hash = hash;
    }
});
var require_ed25519 = __commonJS({
    "node_modules/@stablelib/ed25519/lib/ed25519.js" (exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var random_1 = require_random();
        var sha512_1 = require_sha5122();
        var wipe_1 = require_wipe3();
        exports.SIGNATURE_LENGTH = 64;
        exports.PUBLIC_KEY_LENGTH = 32;
        exports.SECRET_KEY_LENGTH = 64;
        exports.SEED_LENGTH = 32;
        function gf(init) {
            var r = new Float64Array(16);
            if (init) {
                for(var i = 0; i < init.length; i++){
                    r[i] = init[i];
                }
            }
            return r;
        }
        var _9 = new Uint8Array(32);
        _9[0] = 9;
        var gf0 = gf();
        var gf1 = gf([
            1
        ]);
        var D = gf([
            30883,
            4953,
            19914,
            30187,
            55467,
            16705,
            2637,
            112,
            59544,
            30585,
            16505,
            36039,
            65139,
            11119,
            27886,
            20995
        ]);
        var D2 = gf([
            61785,
            9906,
            39828,
            60374,
            45398,
            33411,
            5274,
            224,
            53552,
            61171,
            33010,
            6542,
            64743,
            22239,
            55772,
            9222
        ]);
        var X = gf([
            54554,
            36645,
            11616,
            51542,
            42930,
            38181,
            51040,
            26924,
            56412,
            64982,
            57905,
            49316,
            21502,
            52590,
            14035,
            8553
        ]);
        var Y = gf([
            26200,
            26214,
            26214,
            26214,
            26214,
            26214,
            26214,
            26214,
            26214,
            26214,
            26214,
            26214,
            26214,
            26214,
            26214,
            26214
        ]);
        var I = gf([
            41136,
            18958,
            6951,
            50414,
            58488,
            44335,
            6150,
            12099,
            55207,
            15867,
            153,
            11085,
            57099,
            20417,
            9344,
            11139
        ]);
        function set25519(r, a) {
            for(var i = 0; i < 16; i++){
                r[i] = a[i] | 0;
            }
        }
        function car25519(o) {
            var c = 1;
            for(var i = 0; i < 16; i++){
                var v = o[i] + c + 65535;
                c = Math.floor(v / 65536);
                o[i] = v - c * 65536;
            }
            o[0] += c - 1 + 37 * (c - 1);
        }
        function sel25519(p, q, b) {
            var c = ~(b - 1);
            for(var i = 0; i < 16; i++){
                var t = c & (p[i] ^ q[i]);
                p[i] ^= t;
                q[i] ^= t;
            }
        }
        function pack25519(o, n2) {
            var m = gf();
            var t = gf();
            for(var i = 0; i < 16; i++){
                t[i] = n2[i];
            }
            car25519(t);
            car25519(t);
            car25519(t);
            for(var j = 0; j < 2; j++){
                m[0] = t[0] - 65517;
                for(var i = 1; i < 15; i++){
                    m[i] = t[i] - 65535 - (m[i - 1] >> 16 & 1);
                    m[i - 1] &= 65535;
                }
                m[15] = t[15] - 32767 - (m[14] >> 16 & 1);
                var b = m[15] >> 16 & 1;
                m[14] &= 65535;
                sel25519(t, m, 1 - b);
            }
            for(var i = 0; i < 16; i++){
                o[2 * i] = t[i] & 255;
                o[2 * i + 1] = t[i] >> 8;
            }
        }
        function verify32(x, y) {
            var d = 0;
            for(var i = 0; i < 32; i++){
                d |= x[i] ^ y[i];
            }
            return (1 & d - 1 >>> 8) - 1;
        }
        function neq25519(a, b) {
            var c = new Uint8Array(32);
            var d = new Uint8Array(32);
            pack25519(c, a);
            pack25519(d, b);
            return verify32(c, d);
        }
        function par25519(a) {
            var d = new Uint8Array(32);
            pack25519(d, a);
            return d[0] & 1;
        }
        function unpack25519(o, n2) {
            for(var i = 0; i < 16; i++){
                o[i] = n2[2 * i] + (n2[2 * i + 1] << 8);
            }
            o[15] &= 32767;
        }
        function add(o, a, b) {
            for(var i = 0; i < 16; i++){
                o[i] = a[i] + b[i];
            }
        }
        function sub(o, a, b) {
            for(var i = 0; i < 16; i++){
                o[i] = a[i] - b[i];
            }
        }
        function mul(o, a, b) {
            var v, c, t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0, t7 = 0, t8 = 0, t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0, t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0, t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0, b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11], b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];
            v = a[0];
            t0 += v * b0;
            t1 += v * b1;
            t2 += v * b2;
            t3 += v * b3;
            t4 += v * b4;
            t5 += v * b5;
            t6 += v * b6;
            t7 += v * b7;
            t8 += v * b8;
            t9 += v * b9;
            t10 += v * b10;
            t11 += v * b11;
            t12 += v * b12;
            t13 += v * b13;
            t14 += v * b14;
            t15 += v * b15;
            v = a[1];
            t1 += v * b0;
            t2 += v * b1;
            t3 += v * b2;
            t4 += v * b3;
            t5 += v * b4;
            t6 += v * b5;
            t7 += v * b6;
            t8 += v * b7;
            t9 += v * b8;
            t10 += v * b9;
            t11 += v * b10;
            t12 += v * b11;
            t13 += v * b12;
            t14 += v * b13;
            t15 += v * b14;
            t16 += v * b15;
            v = a[2];
            t2 += v * b0;
            t3 += v * b1;
            t4 += v * b2;
            t5 += v * b3;
            t6 += v * b4;
            t7 += v * b5;
            t8 += v * b6;
            t9 += v * b7;
            t10 += v * b8;
            t11 += v * b9;
            t12 += v * b10;
            t13 += v * b11;
            t14 += v * b12;
            t15 += v * b13;
            t16 += v * b14;
            t17 += v * b15;
            v = a[3];
            t3 += v * b0;
            t4 += v * b1;
            t5 += v * b2;
            t6 += v * b3;
            t7 += v * b4;
            t8 += v * b5;
            t9 += v * b6;
            t10 += v * b7;
            t11 += v * b8;
            t12 += v * b9;
            t13 += v * b10;
            t14 += v * b11;
            t15 += v * b12;
            t16 += v * b13;
            t17 += v * b14;
            t18 += v * b15;
            v = a[4];
            t4 += v * b0;
            t5 += v * b1;
            t6 += v * b2;
            t7 += v * b3;
            t8 += v * b4;
            t9 += v * b5;
            t10 += v * b6;
            t11 += v * b7;
            t12 += v * b8;
            t13 += v * b9;
            t14 += v * b10;
            t15 += v * b11;
            t16 += v * b12;
            t17 += v * b13;
            t18 += v * b14;
            t19 += v * b15;
            v = a[5];
            t5 += v * b0;
            t6 += v * b1;
            t7 += v * b2;
            t8 += v * b3;
            t9 += v * b4;
            t10 += v * b5;
            t11 += v * b6;
            t12 += v * b7;
            t13 += v * b8;
            t14 += v * b9;
            t15 += v * b10;
            t16 += v * b11;
            t17 += v * b12;
            t18 += v * b13;
            t19 += v * b14;
            t20 += v * b15;
            v = a[6];
            t6 += v * b0;
            t7 += v * b1;
            t8 += v * b2;
            t9 += v * b3;
            t10 += v * b4;
            t11 += v * b5;
            t12 += v * b6;
            t13 += v * b7;
            t14 += v * b8;
            t15 += v * b9;
            t16 += v * b10;
            t17 += v * b11;
            t18 += v * b12;
            t19 += v * b13;
            t20 += v * b14;
            t21 += v * b15;
            v = a[7];
            t7 += v * b0;
            t8 += v * b1;
            t9 += v * b2;
            t10 += v * b3;
            t11 += v * b4;
            t12 += v * b5;
            t13 += v * b6;
            t14 += v * b7;
            t15 += v * b8;
            t16 += v * b9;
            t17 += v * b10;
            t18 += v * b11;
            t19 += v * b12;
            t20 += v * b13;
            t21 += v * b14;
            t22 += v * b15;
            v = a[8];
            t8 += v * b0;
            t9 += v * b1;
            t10 += v * b2;
            t11 += v * b3;
            t12 += v * b4;
            t13 += v * b5;
            t14 += v * b6;
            t15 += v * b7;
            t16 += v * b8;
            t17 += v * b9;
            t18 += v * b10;
            t19 += v * b11;
            t20 += v * b12;
            t21 += v * b13;
            t22 += v * b14;
            t23 += v * b15;
            v = a[9];
            t9 += v * b0;
            t10 += v * b1;
            t11 += v * b2;
            t12 += v * b3;
            t13 += v * b4;
            t14 += v * b5;
            t15 += v * b6;
            t16 += v * b7;
            t17 += v * b8;
            t18 += v * b9;
            t19 += v * b10;
            t20 += v * b11;
            t21 += v * b12;
            t22 += v * b13;
            t23 += v * b14;
            t24 += v * b15;
            v = a[10];
            t10 += v * b0;
            t11 += v * b1;
            t12 += v * b2;
            t13 += v * b3;
            t14 += v * b4;
            t15 += v * b5;
            t16 += v * b6;
            t17 += v * b7;
            t18 += v * b8;
            t19 += v * b9;
            t20 += v * b10;
            t21 += v * b11;
            t22 += v * b12;
            t23 += v * b13;
            t24 += v * b14;
            t25 += v * b15;
            v = a[11];
            t11 += v * b0;
            t12 += v * b1;
            t13 += v * b2;
            t14 += v * b3;
            t15 += v * b4;
            t16 += v * b5;
            t17 += v * b6;
            t18 += v * b7;
            t19 += v * b8;
            t20 += v * b9;
            t21 += v * b10;
            t22 += v * b11;
            t23 += v * b12;
            t24 += v * b13;
            t25 += v * b14;
            t26 += v * b15;
            v = a[12];
            t12 += v * b0;
            t13 += v * b1;
            t14 += v * b2;
            t15 += v * b3;
            t16 += v * b4;
            t17 += v * b5;
            t18 += v * b6;
            t19 += v * b7;
            t20 += v * b8;
            t21 += v * b9;
            t22 += v * b10;
            t23 += v * b11;
            t24 += v * b12;
            t25 += v * b13;
            t26 += v * b14;
            t27 += v * b15;
            v = a[13];
            t13 += v * b0;
            t14 += v * b1;
            t15 += v * b2;
            t16 += v * b3;
            t17 += v * b4;
            t18 += v * b5;
            t19 += v * b6;
            t20 += v * b7;
            t21 += v * b8;
            t22 += v * b9;
            t23 += v * b10;
            t24 += v * b11;
            t25 += v * b12;
            t26 += v * b13;
            t27 += v * b14;
            t28 += v * b15;
            v = a[14];
            t14 += v * b0;
            t15 += v * b1;
            t16 += v * b2;
            t17 += v * b3;
            t18 += v * b4;
            t19 += v * b5;
            t20 += v * b6;
            t21 += v * b7;
            t22 += v * b8;
            t23 += v * b9;
            t24 += v * b10;
            t25 += v * b11;
            t26 += v * b12;
            t27 += v * b13;
            t28 += v * b14;
            t29 += v * b15;
            v = a[15];
            t15 += v * b0;
            t16 += v * b1;
            t17 += v * b2;
            t18 += v * b3;
            t19 += v * b4;
            t20 += v * b5;
            t21 += v * b6;
            t22 += v * b7;
            t23 += v * b8;
            t24 += v * b9;
            t25 += v * b10;
            t26 += v * b11;
            t27 += v * b12;
            t28 += v * b13;
            t29 += v * b14;
            t30 += v * b15;
            t0 += 38 * t16;
            t1 += 38 * t17;
            t2 += 38 * t18;
            t3 += 38 * t19;
            t4 += 38 * t20;
            t5 += 38 * t21;
            t6 += 38 * t22;
            t7 += 38 * t23;
            t8 += 38 * t24;
            t9 += 38 * t25;
            t10 += 38 * t26;
            t11 += 38 * t27;
            t12 += 38 * t28;
            t13 += 38 * t29;
            t14 += 38 * t30;
            c = 1;
            v = t0 + c + 65535;
            c = Math.floor(v / 65536);
            t0 = v - c * 65536;
            v = t1 + c + 65535;
            c = Math.floor(v / 65536);
            t1 = v - c * 65536;
            v = t2 + c + 65535;
            c = Math.floor(v / 65536);
            t2 = v - c * 65536;
            v = t3 + c + 65535;
            c = Math.floor(v / 65536);
            t3 = v - c * 65536;
            v = t4 + c + 65535;
            c = Math.floor(v / 65536);
            t4 = v - c * 65536;
            v = t5 + c + 65535;
            c = Math.floor(v / 65536);
            t5 = v - c * 65536;
            v = t6 + c + 65535;
            c = Math.floor(v / 65536);
            t6 = v - c * 65536;
            v = t7 + c + 65535;
            c = Math.floor(v / 65536);
            t7 = v - c * 65536;
            v = t8 + c + 65535;
            c = Math.floor(v / 65536);
            t8 = v - c * 65536;
            v = t9 + c + 65535;
            c = Math.floor(v / 65536);
            t9 = v - c * 65536;
            v = t10 + c + 65535;
            c = Math.floor(v / 65536);
            t10 = v - c * 65536;
            v = t11 + c + 65535;
            c = Math.floor(v / 65536);
            t11 = v - c * 65536;
            v = t12 + c + 65535;
            c = Math.floor(v / 65536);
            t12 = v - c * 65536;
            v = t13 + c + 65535;
            c = Math.floor(v / 65536);
            t13 = v - c * 65536;
            v = t14 + c + 65535;
            c = Math.floor(v / 65536);
            t14 = v - c * 65536;
            v = t15 + c + 65535;
            c = Math.floor(v / 65536);
            t15 = v - c * 65536;
            t0 += c - 1 + 37 * (c - 1);
            c = 1;
            v = t0 + c + 65535;
            c = Math.floor(v / 65536);
            t0 = v - c * 65536;
            v = t1 + c + 65535;
            c = Math.floor(v / 65536);
            t1 = v - c * 65536;
            v = t2 + c + 65535;
            c = Math.floor(v / 65536);
            t2 = v - c * 65536;
            v = t3 + c + 65535;
            c = Math.floor(v / 65536);
            t3 = v - c * 65536;
            v = t4 + c + 65535;
            c = Math.floor(v / 65536);
            t4 = v - c * 65536;
            v = t5 + c + 65535;
            c = Math.floor(v / 65536);
            t5 = v - c * 65536;
            v = t6 + c + 65535;
            c = Math.floor(v / 65536);
            t6 = v - c * 65536;
            v = t7 + c + 65535;
            c = Math.floor(v / 65536);
            t7 = v - c * 65536;
            v = t8 + c + 65535;
            c = Math.floor(v / 65536);
            t8 = v - c * 65536;
            v = t9 + c + 65535;
            c = Math.floor(v / 65536);
            t9 = v - c * 65536;
            v = t10 + c + 65535;
            c = Math.floor(v / 65536);
            t10 = v - c * 65536;
            v = t11 + c + 65535;
            c = Math.floor(v / 65536);
            t11 = v - c * 65536;
            v = t12 + c + 65535;
            c = Math.floor(v / 65536);
            t12 = v - c * 65536;
            v = t13 + c + 65535;
            c = Math.floor(v / 65536);
            t13 = v - c * 65536;
            v = t14 + c + 65535;
            c = Math.floor(v / 65536);
            t14 = v - c * 65536;
            v = t15 + c + 65535;
            c = Math.floor(v / 65536);
            t15 = v - c * 65536;
            t0 += c - 1 + 37 * (c - 1);
            o[0] = t0;
            o[1] = t1;
            o[2] = t2;
            o[3] = t3;
            o[4] = t4;
            o[5] = t5;
            o[6] = t6;
            o[7] = t7;
            o[8] = t8;
            o[9] = t9;
            o[10] = t10;
            o[11] = t11;
            o[12] = t12;
            o[13] = t13;
            o[14] = t14;
            o[15] = t15;
        }
        function square(o, a) {
            mul(o, a, a);
        }
        function inv25519(o, i) {
            var c = gf();
            var a;
            for(a = 0; a < 16; a++){
                c[a] = i[a];
            }
            for(a = 253; a >= 0; a--){
                square(c, c);
                if (a !== 2 && a !== 4) {
                    mul(c, c, i);
                }
            }
            for(a = 0; a < 16; a++){
                o[a] = c[a];
            }
        }
        function pow2523(o, i) {
            var c = gf();
            var a;
            for(a = 0; a < 16; a++){
                c[a] = i[a];
            }
            for(a = 250; a >= 0; a--){
                square(c, c);
                if (a !== 1) {
                    mul(c, c, i);
                }
            }
            for(a = 0; a < 16; a++){
                o[a] = c[a];
            }
        }
        function edadd(p, q) {
            var a = gf(), b = gf(), c = gf(), d = gf(), e = gf(), f = gf(), g = gf(), h = gf(), t = gf();
            sub(a, p[1], p[0]);
            sub(t, q[1], q[0]);
            mul(a, a, t);
            add(b, p[0], p[1]);
            add(t, q[0], q[1]);
            mul(b, b, t);
            mul(c, p[3], q[3]);
            mul(c, c, D2);
            mul(d, p[2], q[2]);
            add(d, d, d);
            sub(e, b, a);
            sub(f, d, c);
            add(g, d, c);
            add(h, b, a);
            mul(p[0], e, f);
            mul(p[1], h, g);
            mul(p[2], g, f);
            mul(p[3], e, h);
        }
        function cswap(p, q, b) {
            for(var i = 0; i < 4; i++){
                sel25519(p[i], q[i], b);
            }
        }
        function pack(r, p) {
            var tx = gf(), ty = gf(), zi = gf();
            inv25519(zi, p[2]);
            mul(tx, p[0], zi);
            mul(ty, p[1], zi);
            pack25519(r, ty);
            r[31] ^= par25519(tx) << 7;
        }
        function scalarmult(p, q, s2) {
            set25519(p[0], gf0);
            set25519(p[1], gf1);
            set25519(p[2], gf1);
            set25519(p[3], gf0);
            for(var i = 255; i >= 0; --i){
                var b = s2[i / 8 | 0] >> (i & 7) & 1;
                cswap(p, q, b);
                edadd(q, p);
                edadd(p, p);
                cswap(p, q, b);
            }
        }
        function scalarbase(p, s2) {
            var q = [
                gf(),
                gf(),
                gf(),
                gf()
            ];
            set25519(q[0], X);
            set25519(q[1], Y);
            set25519(q[2], gf1);
            mul(q[3], X, Y);
            scalarmult(p, q, s2);
        }
        function generateKeyPairFromSeed(seed) {
            if (seed.length !== exports.SEED_LENGTH) {
                throw new Error("ed25519: seed must be " + exports.SEED_LENGTH + " bytes");
            }
            var d = sha512_1.hash(seed);
            d[0] &= 248;
            d[31] &= 127;
            d[31] |= 64;
            var publicKey = new Uint8Array(32);
            var p = [
                gf(),
                gf(),
                gf(),
                gf()
            ];
            scalarbase(p, d);
            pack(publicKey, p);
            var secretKey = new Uint8Array(64);
            secretKey.set(seed);
            secretKey.set(publicKey, 32);
            return {
                publicKey,
                secretKey
            };
        }
        exports.generateKeyPairFromSeed = generateKeyPairFromSeed;
        function generateKeyPair(prng) {
            var seed = random_1.randomBytes(32, prng);
            var result = generateKeyPairFromSeed(seed);
            wipe_1.wipe(seed);
            return result;
        }
        exports.generateKeyPair = generateKeyPair;
        function extractPublicKeyFromSecretKey(secretKey) {
            if (secretKey.length !== exports.SECRET_KEY_LENGTH) {
                throw new Error("ed25519: secret key must be " + exports.SECRET_KEY_LENGTH + " bytes");
            }
            return new Uint8Array(secretKey.subarray(32));
        }
        exports.extractPublicKeyFromSecretKey = extractPublicKeyFromSecretKey;
        var L = new Float64Array([
            237,
            211,
            245,
            92,
            26,
            99,
            18,
            88,
            214,
            156,
            247,
            162,
            222,
            249,
            222,
            20,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            16
        ]);
        function modL(r, x) {
            var carry;
            var i;
            var j;
            var k;
            for(i = 63; i >= 32; --i){
                carry = 0;
                for(j = i - 32, k = i - 12; j < k; ++j){
                    x[j] += carry - 16 * x[i] * L[j - (i - 32)];
                    carry = Math.floor((x[j] + 128) / 256);
                    x[j] -= carry * 256;
                }
                x[j] += carry;
                x[i] = 0;
            }
            carry = 0;
            for(j = 0; j < 32; j++){
                x[j] += carry - (x[31] >> 4) * L[j];
                carry = x[j] >> 8;
                x[j] &= 255;
            }
            for(j = 0; j < 32; j++){
                x[j] -= carry * L[j];
            }
            for(i = 0; i < 32; i++){
                x[i + 1] += x[i] >> 8;
                r[i] = x[i] & 255;
            }
        }
        function reduce(r) {
            var x = new Float64Array(64);
            for(var i = 0; i < 64; i++){
                x[i] = r[i];
            }
            for(var i = 0; i < 64; i++){
                r[i] = 0;
            }
            modL(r, x);
        }
        function sign(secretKey, message) {
            var x = new Float64Array(64);
            var p = [
                gf(),
                gf(),
                gf(),
                gf()
            ];
            var d = sha512_1.hash(secretKey.subarray(0, 32));
            d[0] &= 248;
            d[31] &= 127;
            d[31] |= 64;
            var signature = new Uint8Array(64);
            signature.set(d.subarray(32), 32);
            var hs = new sha512_1.SHA512();
            hs.update(signature.subarray(32));
            hs.update(message);
            var r = hs.digest();
            hs.clean();
            reduce(r);
            scalarbase(p, r);
            pack(signature, p);
            hs.reset();
            hs.update(signature.subarray(0, 32));
            hs.update(secretKey.subarray(32));
            hs.update(message);
            var h = hs.digest();
            reduce(h);
            for(var i = 0; i < 32; i++){
                x[i] = r[i];
            }
            for(var i = 0; i < 32; i++){
                for(var j = 0; j < 32; j++){
                    x[i + j] += h[i] * d[j];
                }
            }
            modL(signature.subarray(32), x);
            return signature;
        }
        exports.sign = sign;
        function unpackneg(r, p) {
            var t = gf(), chk = gf(), num = gf(), den = gf(), den2 = gf(), den4 = gf(), den6 = gf();
            set25519(r[2], gf1);
            unpack25519(r[1], p);
            square(num, r[1]);
            mul(den, num, D);
            sub(num, num, r[2]);
            add(den, r[2], den);
            square(den2, den);
            square(den4, den2);
            mul(den6, den4, den2);
            mul(t, den6, num);
            mul(t, t, den);
            pow2523(t, t);
            mul(t, t, num);
            mul(t, t, den);
            mul(t, t, den);
            mul(r[0], t, den);
            square(chk, r[0]);
            mul(chk, chk, den);
            if (neq25519(chk, num)) {
                mul(r[0], r[0], I);
            }
            square(chk, r[0]);
            mul(chk, chk, den);
            if (neq25519(chk, num)) {
                return -1;
            }
            if (par25519(r[0]) === p[31] >> 7) {
                sub(r[0], gf0, r[0]);
            }
            mul(r[3], r[0], r[1]);
            return 0;
        }
        function verify3(publicKey, message, signature) {
            var t = new Uint8Array(32);
            var p = [
                gf(),
                gf(),
                gf(),
                gf()
            ];
            var q = [
                gf(),
                gf(),
                gf(),
                gf()
            ];
            if (signature.length !== exports.SIGNATURE_LENGTH) {
                throw new Error("ed25519: signature must be " + exports.SIGNATURE_LENGTH + " bytes");
            }
            if (unpackneg(q, publicKey)) {
                return false;
            }
            var hs = new sha512_1.SHA512();
            hs.update(signature.subarray(0, 32));
            hs.update(publicKey);
            hs.update(message);
            var h = hs.digest();
            reduce(h);
            scalarmult(p, q, h);
            scalarbase(q, signature.subarray(32));
            edadd(p, q);
            pack(t, p);
            if (verify32(signature, t)) {
                return false;
            }
            return true;
        }
        exports.verify = verify3;
        function convertPublicKeyToX25519(publicKey) {
            var q = [
                gf(),
                gf(),
                gf(),
                gf()
            ];
            if (unpackneg(q, publicKey)) {
                throw new Error("Ed25519: invalid public key");
            }
            var a = gf();
            var b = gf();
            var y = q[1];
            add(a, gf1, y);
            sub(b, gf1, y);
            inv25519(b, b);
            mul(a, a, b);
            var z = new Uint8Array(32);
            pack25519(z, a);
            return z;
        }
        exports.convertPublicKeyToX25519 = convertPublicKeyToX25519;
        function convertSecretKeyToX25519(secretKey) {
            var d = sha512_1.hash(secretKey.subarray(0, 32));
            d[0] &= 248;
            d[31] &= 127;
            d[31] |= 64;
            var o = new Uint8Array(d.subarray(0, 32));
            wipe_1.wipe(d);
            return o;
        }
        exports.convertSecretKeyToX25519 = convertSecretKeyToX25519;
    }
});
var require_sha2563 = __commonJS({
    "node_modules/@stablelib/sha256/lib/sha256.js" (exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var binary_1 = require_binary3();
        var wipe_1 = require_wipe3();
        exports.DIGEST_LENGTH = 32;
        exports.BLOCK_SIZE = 64;
        var SHA256 = function() {
            function SHA2562() {
                this.digestLength = exports.DIGEST_LENGTH;
                this.blockSize = exports.BLOCK_SIZE;
                this._state = new Int32Array(8);
                this._temp = new Int32Array(64);
                this._buffer = new Uint8Array(128);
                this._bufferLength = 0;
                this._bytesHashed = 0;
                this._finished = false;
                this.reset();
            }
            SHA2562.prototype._initState = function() {
                this._state[0] = 1779033703;
                this._state[1] = 3144134277;
                this._state[2] = 1013904242;
                this._state[3] = 2773480762;
                this._state[4] = 1359893119;
                this._state[5] = 2600822924;
                this._state[6] = 528734635;
                this._state[7] = 1541459225;
            };
            SHA2562.prototype.reset = function() {
                this._initState();
                this._bufferLength = 0;
                this._bytesHashed = 0;
                this._finished = false;
                return this;
            };
            SHA2562.prototype.clean = function() {
                wipe_1.wipe(this._buffer);
                wipe_1.wipe(this._temp);
                this.reset();
            };
            SHA2562.prototype.update = function(data, dataLength) {
                if (dataLength === void 0) {
                    dataLength = data.length;
                }
                if (this._finished) {
                    throw new Error("SHA256: can't update because hash was finished.");
                }
                var dataPos = 0;
                this._bytesHashed += dataLength;
                if (this._bufferLength > 0) {
                    while(this._bufferLength < this.blockSize && dataLength > 0){
                        this._buffer[this._bufferLength++] = data[dataPos++];
                        dataLength--;
                    }
                    if (this._bufferLength === this.blockSize) {
                        hashBlocks(this._temp, this._state, this._buffer, 0, this.blockSize);
                        this._bufferLength = 0;
                    }
                }
                if (dataLength >= this.blockSize) {
                    dataPos = hashBlocks(this._temp, this._state, data, dataPos, dataLength);
                    dataLength %= this.blockSize;
                }
                while(dataLength > 0){
                    this._buffer[this._bufferLength++] = data[dataPos++];
                    dataLength--;
                }
                return this;
            };
            SHA2562.prototype.finish = function(out) {
                if (!this._finished) {
                    var bytesHashed = this._bytesHashed;
                    var left = this._bufferLength;
                    var bitLenHi = bytesHashed / 536870912 | 0;
                    var bitLenLo = bytesHashed << 3;
                    var padLength = bytesHashed % 64 < 56 ? 64 : 128;
                    this._buffer[left] = 128;
                    for(var i = left + 1; i < padLength - 8; i++){
                        this._buffer[i] = 0;
                    }
                    binary_1.writeUint32BE(bitLenHi, this._buffer, padLength - 8);
                    binary_1.writeUint32BE(bitLenLo, this._buffer, padLength - 4);
                    hashBlocks(this._temp, this._state, this._buffer, 0, padLength);
                    this._finished = true;
                }
                for(var i = 0; i < this.digestLength / 4; i++){
                    binary_1.writeUint32BE(this._state[i], out, i * 4);
                }
                return this;
            };
            SHA2562.prototype.digest = function() {
                var out = new Uint8Array(this.digestLength);
                this.finish(out);
                return out;
            };
            SHA2562.prototype.saveState = function() {
                if (this._finished) {
                    throw new Error("SHA256: cannot save finished state");
                }
                return {
                    state: new Int32Array(this._state),
                    buffer: this._bufferLength > 0 ? new Uint8Array(this._buffer) : void 0,
                    bufferLength: this._bufferLength,
                    bytesHashed: this._bytesHashed
                };
            };
            SHA2562.prototype.restoreState = function(savedState) {
                this._state.set(savedState.state);
                this._bufferLength = savedState.bufferLength;
                if (savedState.buffer) {
                    this._buffer.set(savedState.buffer);
                }
                this._bytesHashed = savedState.bytesHashed;
                this._finished = false;
                return this;
            };
            SHA2562.prototype.cleanSavedState = function(savedState) {
                wipe_1.wipe(savedState.state);
                if (savedState.buffer) {
                    wipe_1.wipe(savedState.buffer);
                }
                savedState.bufferLength = 0;
                savedState.bytesHashed = 0;
            };
            return SHA2562;
        }();
        exports.SHA256 = SHA256;
        var K = new Int32Array([
            1116352408,
            1899447441,
            3049323471,
            3921009573,
            961987163,
            1508970993,
            2453635748,
            2870763221,
            3624381080,
            310598401,
            607225278,
            1426881987,
            1925078388,
            2162078206,
            2614888103,
            3248222580,
            3835390401,
            4022224774,
            264347078,
            604807628,
            770255983,
            1249150122,
            1555081692,
            1996064986,
            2554220882,
            2821834349,
            2952996808,
            3210313671,
            3336571891,
            3584528711,
            113926993,
            338241895,
            666307205,
            773529912,
            1294757372,
            1396182291,
            1695183700,
            1986661051,
            2177026350,
            2456956037,
            2730485921,
            2820302411,
            3259730800,
            3345764771,
            3516065817,
            3600352804,
            4094571909,
            275423344,
            430227734,
            506948616,
            659060556,
            883997877,
            958139571,
            1322822218,
            1537002063,
            1747873779,
            1955562222,
            2024104815,
            2227730452,
            2361852424,
            2428436474,
            2756734187,
            3204031479,
            3329325298
        ]);
        function hashBlocks(w, v, p, pos, len) {
            while(len >= 64){
                var a = v[0];
                var b = v[1];
                var c = v[2];
                var d = v[3];
                var e = v[4];
                var f = v[5];
                var g = v[6];
                var h = v[7];
                for(var i = 0; i < 16; i++){
                    var j = pos + i * 4;
                    w[i] = binary_1.readUint32BE(p, j);
                }
                for(var i = 16; i < 64; i++){
                    var u = w[i - 2];
                    var t1 = (u >>> 17 | u << 32 - 17) ^ (u >>> 19 | u << 32 - 19) ^ u >>> 10;
                    u = w[i - 15];
                    var t2 = (u >>> 7 | u << 32 - 7) ^ (u >>> 18 | u << 32 - 18) ^ u >>> 3;
                    w[i] = (t1 + w[i - 7] | 0) + (t2 + w[i - 16] | 0);
                }
                for(var i = 0; i < 64; i++){
                    var t1 = (((e >>> 6 | e << 32 - 6) ^ (e >>> 11 | e << 32 - 11) ^ (e >>> 25 | e << 32 - 25)) + (e & f ^ ~e & g) | 0) + (h + (K[i] + w[i] | 0) | 0) | 0;
                    var t2 = ((a >>> 2 | a << 32 - 2) ^ (a >>> 13 | a << 32 - 13) ^ (a >>> 22 | a << 32 - 22)) + (a & b ^ a & c ^ b & c) | 0;
                    h = g;
                    g = f;
                    f = e;
                    e = d + t1 | 0;
                    d = c;
                    c = b;
                    b = a;
                    a = t1 + t2 | 0;
                }
                v[0] += a;
                v[1] += b;
                v[2] += c;
                v[3] += d;
                v[4] += e;
                v[5] += f;
                v[6] += g;
                v[7] += h;
                pos += 64;
                len -= 64;
            }
            return pos;
        }
        function hash(data) {
            var h = new SHA256();
            h.update(data);
            var digest = h.digest();
            h.clean();
            return digest;
        }
        exports.hash = hash;
    }
});
var require_constant_time3 = __commonJS({
    "node_modules/@stablelib/constant-time/lib/constant-time.js" (exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function select(subject, resultIfOne, resultIfZero) {
            return ~(subject - 1) & resultIfOne | subject - 1 & resultIfZero;
        }
        exports.select = select;
        function lessOrEqual(a, b) {
            return (a | 0) - (b | 0) - 1 >>> 31 & 1;
        }
        exports.lessOrEqual = lessOrEqual;
        function compare2(a, b) {
            if (a.length !== b.length) {
                return 0;
            }
            var result = 0;
            for(var i = 0; i < a.length; i++){
                result |= a[i] ^ b[i];
            }
            return 1 & result - 1 >>> 8;
        }
        exports.compare = compare2;
        function equal3(a, b) {
            if (a.length === 0 || b.length === 0) {
                return false;
            }
            return compare2(a, b) !== 0;
        }
        exports.equal = equal3;
    }
});
var require_unfetch = __commonJS({
    "node_modules/unfetch/dist/unfetch.js" (exports, module) {
        module.exports = function(e, n2) {
            return n2 = n2 || {}, new Promise(function(t, r) {
                var s2 = new XMLHttpRequest(), o = [], u = [], i = {}, a = function() {
                    return {
                        ok: (s2.status / 100 | 0) == 2,
                        statusText: s2.statusText,
                        status: s2.status,
                        url: s2.responseURL,
                        text: function() {
                            return Promise.resolve(s2.responseText);
                        },
                        json: function() {
                            return Promise.resolve(s2.responseText).then(JSON.parse);
                        },
                        blob: function() {
                            return Promise.resolve(new Blob([
                                s2.response
                            ]));
                        },
                        clone: a,
                        headers: {
                            keys: function() {
                                return o;
                            },
                            entries: function() {
                                return u;
                            },
                            get: function(e2) {
                                return i[e2.toLowerCase()];
                            },
                            has: function(e2) {
                                return e2.toLowerCase() in i;
                            }
                        }
                    };
                };
                for(var l2 in s2.open(n2.method || "get", e, true), s2.onload = function() {
                    s2.getAllResponseHeaders().replace(/^(.*?):[^\S\n]*([\s\S]*?)$/gm, function(e2, n3, t2) {
                        o.push(n3 = n3.toLowerCase()), u.push([
                            n3,
                            t2
                        ]), i[n3] = i[n3] ? i[n3] + "," + t2 : t2;
                    }), t(a());
                }, s2.onerror = r, s2.withCredentials = n2.credentials == "include", n2.headers)s2.setRequestHeader(l2, n2.headers[l2]);
                s2.send(n2.body || null);
            });
        };
    }
});
var require_browser2 = __commonJS({
    "node_modules/isomorphic-unfetch/browser.js" (exports, module) {
        module.exports = self.fetch || (self.fetch = require_unfetch().default || require_unfetch());
    }
});
var util;
(function(util4) {
    util4.assertEqual = (val)=>val;
    function assertIs(_arg) {}
    util4.assertIs = assertIs;
    function assertNever(_x) {
        throw new Error();
    }
    util4.assertNever = assertNever;
    util4.arrayToEnum = (items)=>{
        const obj = {};
        for (const item of items){
            obj[item] = item;
        }
        return obj;
    };
    util4.getValidEnumValues = (obj)=>{
        const validKeys = util4.objectKeys(obj).filter((k)=>typeof obj[obj[k]] !== "number");
        const filtered = {};
        for (const k of validKeys){
            filtered[k] = obj[k];
        }
        return util4.objectValues(filtered);
    };
    util4.objectValues = (obj)=>{
        return util4.objectKeys(obj).map(function(e) {
            return obj[e];
        });
    };
    util4.objectKeys = typeof Object.keys === "function" ? (obj)=>Object.keys(obj) : (object)=>{
        const keys = [];
        for(const key in object){
            if (Object.prototype.hasOwnProperty.call(object, key)) {
                keys.push(key);
            }
        }
        return keys;
    };
    util4.find = (arr, checker)=>{
        for (const item of arr){
            if (checker(item)) return item;
        }
        return void 0;
    };
    util4.isInteger = typeof Number.isInteger === "function" ? (val)=>Number.isInteger(val) : (val)=>typeof val === "number" && isFinite(val) && Math.floor(val) === val;
    function joinValues(array, separator = " | ") {
        return array.map((val)=>typeof val === "string" ? `'${val}'` : val).join(separator);
    }
    util4.joinValues = joinValues;
})(util || (util = {}));
var ZodParsedType = util.arrayToEnum([
    "string",
    "nan",
    "number",
    "integer",
    "float",
    "boolean",
    "date",
    "bigint",
    "symbol",
    "function",
    "undefined",
    "null",
    "array",
    "object",
    "unknown",
    "promise",
    "void",
    "never",
    "map",
    "set"
]);
var getParsedType = (data)=>{
    const t = typeof data;
    switch(t){
        case "undefined":
            return ZodParsedType.undefined;
        case "string":
            return ZodParsedType.string;
        case "number":
            return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
        case "boolean":
            return ZodParsedType.boolean;
        case "function":
            return ZodParsedType.function;
        case "bigint":
            return ZodParsedType.bigint;
        case "object":
            if (Array.isArray(data)) {
                return ZodParsedType.array;
            }
            if (data === null) {
                return ZodParsedType.null;
            }
            if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
                return ZodParsedType.promise;
            }
            if (typeof Map !== "undefined" && data instanceof Map) {
                return ZodParsedType.map;
            }
            if (typeof Set !== "undefined" && data instanceof Set) {
                return ZodParsedType.set;
            }
            if (typeof Date !== "undefined" && data instanceof Date) {
                return ZodParsedType.date;
            }
            return ZodParsedType.object;
        default:
            return ZodParsedType.unknown;
    }
};
var ZodIssueCode = util.arrayToEnum([
    "invalid_type",
    "invalid_literal",
    "custom",
    "invalid_union",
    "invalid_union_discriminator",
    "invalid_enum_value",
    "unrecognized_keys",
    "invalid_arguments",
    "invalid_return_type",
    "invalid_date",
    "invalid_string",
    "too_small",
    "too_big",
    "invalid_intersection_types",
    "not_multiple_of"
]);
var quotelessJson = (obj)=>{
    const json = JSON.stringify(obj, null, 2);
    return json.replace(/"([^"]+)":/g, "$1:");
};
var ZodError = class extends Error {
    constructor(issues){
        super();
        this.issues = [];
        this.addIssue = (sub)=>{
            this.issues = [
                ...this.issues,
                sub
            ];
        };
        this.addIssues = (subs = [])=>{
            this.issues = [
                ...this.issues,
                ...subs
            ];
        };
        const actualProto = new.target.prototype;
        if (Object.setPrototypeOf) {
            Object.setPrototypeOf(this, actualProto);
        } else {
            this.__proto__ = actualProto;
        }
        this.name = "ZodError";
        this.issues = issues;
    }
    get errors() {
        return this.issues;
    }
    format(_mapper) {
        const mapper = _mapper || function(issue) {
            return issue.message;
        };
        const fieldErrors = {
            _errors: []
        };
        const processError = (error)=>{
            for (const issue of error.issues){
                if (issue.code === "invalid_union") {
                    issue.unionErrors.map(processError);
                } else if (issue.code === "invalid_return_type") {
                    processError(issue.returnTypeError);
                } else if (issue.code === "invalid_arguments") {
                    processError(issue.argumentsError);
                } else if (issue.path.length === 0) {
                    fieldErrors._errors.push(mapper(issue));
                } else {
                    let curr = fieldErrors;
                    let i = 0;
                    while(i < issue.path.length){
                        const el = issue.path[i];
                        const terminal = i === issue.path.length - 1;
                        if (!terminal) {
                            curr[el] = curr[el] || {
                                _errors: []
                            };
                        } else {
                            curr[el] = curr[el] || {
                                _errors: []
                            };
                            curr[el]._errors.push(mapper(issue));
                        }
                        curr = curr[el];
                        i++;
                    }
                }
            }
        };
        processError(this);
        return fieldErrors;
    }
    toString() {
        return this.message;
    }
    get message() {
        return JSON.stringify(this.issues, jsonStringifyReplacer, 2);
    }
    get isEmpty() {
        return this.issues.length === 0;
    }
    flatten(mapper = (issue)=>issue.message) {
        const fieldErrors = {};
        const formErrors = [];
        for (const sub of this.issues){
            if (sub.path.length > 0) {
                fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
                fieldErrors[sub.path[0]].push(mapper(sub));
            } else {
                formErrors.push(mapper(sub));
            }
        }
        return {
            formErrors,
            fieldErrors
        };
    }
    get formErrors() {
        return this.flatten();
    }
};
ZodError.create = (issues)=>{
    const error = new ZodError(issues);
    return error;
};
var defaultErrorMap = (issue, _ctx)=>{
    let message;
    switch(issue.code){
        case ZodIssueCode.invalid_type:
            if (issue.received === ZodParsedType.undefined) {
                message = "Required";
            } else {
                message = `Expected ${issue.expected}, received ${issue.received}`;
            }
            break;
        case ZodIssueCode.invalid_literal:
            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, jsonStringifyReplacer)}`;
            break;
        case ZodIssueCode.unrecognized_keys:
            message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, ", ")}`;
            break;
        case ZodIssueCode.invalid_union:
            message = `Invalid input`;
            break;
        case ZodIssueCode.invalid_union_discriminator:
            message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;
            break;
        case ZodIssueCode.invalid_enum_value:
            message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;
            break;
        case ZodIssueCode.invalid_arguments:
            message = `Invalid function arguments`;
            break;
        case ZodIssueCode.invalid_return_type:
            message = `Invalid function return type`;
            break;
        case ZodIssueCode.invalid_date:
            message = `Invalid date`;
            break;
        case ZodIssueCode.invalid_string:
            if (typeof issue.validation === "object") {
                if ("startsWith" in issue.validation) {
                    message = `Invalid input: must start with "${issue.validation.startsWith}"`;
                } else if ("endsWith" in issue.validation) {
                    message = `Invalid input: must end with "${issue.validation.endsWith}"`;
                } else {
                    util.assertNever(issue.validation);
                }
            } else if (issue.validation !== "regex") {
                message = `Invalid ${issue.validation}`;
            } else {
                message = "Invalid";
            }
            break;
        case ZodIssueCode.too_small:
            if (issue.type === "array") message = `Array must contain ${issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
            else if (issue.type === "string") message = `String must contain ${issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
            else if (issue.type === "number") message = `Number must be greater than ${issue.inclusive ? `or equal to ` : ``}${issue.minimum}`;
            else if (issue.type === "date") message = `Date must be greater than ${issue.inclusive ? `or equal to ` : ``}${new Date(issue.minimum)}`;
            else message = "Invalid input";
            break;
        case ZodIssueCode.too_big:
            if (issue.type === "array") message = `Array must contain ${issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
            else if (issue.type === "string") message = `String must contain ${issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
            else if (issue.type === "number") message = `Number must be less than ${issue.inclusive ? `or equal to ` : ``}${issue.maximum}`;
            else if (issue.type === "date") message = `Date must be smaller than ${issue.inclusive ? `or equal to ` : ``}${new Date(issue.maximum)}`;
            else message = "Invalid input";
            break;
        case ZodIssueCode.custom:
            message = `Invalid input`;
            break;
        case ZodIssueCode.invalid_intersection_types:
            message = `Intersection results could not be merged`;
            break;
        case ZodIssueCode.not_multiple_of:
            message = `Number must be a multiple of ${issue.multipleOf}`;
            break;
        default:
            message = _ctx.defaultError;
            util.assertNever(issue);
    }
    return {
        message
    };
};
var overrideErrorMap = defaultErrorMap;
function setErrorMap(map) {
    overrideErrorMap = map;
}
function getErrorMap() {
    return overrideErrorMap;
}
var makeIssue = (params)=>{
    const { data , path , errorMaps , issueData  } = params;
    const fullPath = [
        ...path,
        ...issueData.path || []
    ];
    const fullIssue = {
        ...issueData,
        path: fullPath
    };
    let errorMessage = "";
    const maps = errorMaps.filter((m)=>!!m).slice().reverse();
    for (const map of maps){
        errorMessage = map(fullIssue, {
            data,
            defaultError: errorMessage
        }).message;
    }
    return {
        ...issueData,
        path: fullPath,
        message: issueData.message || errorMessage
    };
};
var EMPTY_PATH = [];
function addIssueToContext(ctx, issueData) {
    const issue = makeIssue({
        issueData,
        data: ctx.data,
        path: ctx.path,
        errorMaps: [
            ctx.common.contextualErrorMap,
            ctx.schemaErrorMap,
            getErrorMap(),
            defaultErrorMap
        ].filter((x)=>!!x)
    });
    ctx.common.issues.push(issue);
}
var ParseStatus = class {
    constructor(){
        this.value = "valid";
    }
    dirty() {
        if (this.value === "valid") this.value = "dirty";
    }
    abort() {
        if (this.value !== "aborted") this.value = "aborted";
    }
    static mergeArray(status, results) {
        const arrayValue = [];
        for (const s2 of results){
            if (s2.status === "aborted") return INVALID;
            if (s2.status === "dirty") status.dirty();
            arrayValue.push(s2.value);
        }
        return {
            status: status.value,
            value: arrayValue
        };
    }
    static async mergeObjectAsync(status, pairs) {
        const syncPairs = [];
        for (const pair of pairs){
            syncPairs.push({
                key: await pair.key,
                value: await pair.value
            });
        }
        return ParseStatus.mergeObjectSync(status, syncPairs);
    }
    static mergeObjectSync(status, pairs) {
        const finalObject = {};
        for (const pair of pairs){
            const { key , value  } = pair;
            if (key.status === "aborted") return INVALID;
            if (value.status === "aborted") return INVALID;
            if (key.status === "dirty") status.dirty();
            if (value.status === "dirty") status.dirty();
            if (typeof value.value !== "undefined" || pair.alwaysSet) {
                finalObject[key.value] = value.value;
            }
        }
        return {
            status: status.value,
            value: finalObject
        };
    }
};
var INVALID = Object.freeze({
    status: "aborted"
});
var DIRTY = (value)=>({
        status: "dirty",
        value
    });
var OK = (value)=>({
        status: "valid",
        value
    });
var isAborted = (x)=>x.status === "aborted";
var isDirty = (x)=>x.status === "dirty";
var isValid = (x)=>x.status === "valid";
var isAsync = (x)=>typeof Promise !== void 0 && x instanceof Promise;
var jsonStringifyReplacer = (_, value)=>{
    if (typeof value === "bigint") {
        return value.toString();
    }
    return value;
};
var errorUtil;
(function(errorUtil4) {
    errorUtil4.errToObj = (message)=>typeof message === "string" ? {
            message
        } : message || {};
    errorUtil4.toString = (message)=>typeof message === "string" ? message : message === null || message === void 0 ? void 0 : message.message;
})(errorUtil || (errorUtil = {}));
var ParseInputLazyPath = class {
    constructor(parent, value, path, key){
        this.parent = parent;
        this.data = value;
        this._path = path;
        this._key = key;
    }
    get path() {
        return this._path.concat(this._key);
    }
};
var handleResult = (ctx, result)=>{
    if (isValid(result)) {
        return {
            success: true,
            data: result.value
        };
    } else {
        if (!ctx.common.issues.length) {
            throw new Error("Validation failed but no issues detected.");
        }
        const error = new ZodError(ctx.common.issues);
        return {
            success: false,
            error
        };
    }
};
function processCreateParams(params) {
    if (!params) return {};
    const { errorMap , invalid_type_error , required_error , description  } = params;
    if (errorMap && (invalid_type_error || required_error)) {
        throw new Error(`Can't use "invalid" or "required" in conjunction with custom error map.`);
    }
    if (errorMap) return {
        errorMap,
        description
    };
    const customMap = (iss, ctx)=>{
        if (iss.code !== "invalid_type") return {
            message: ctx.defaultError
        };
        if (typeof ctx.data === "undefined") {
            return {
                message: required_error !== null && required_error !== void 0 ? required_error : ctx.defaultError
            };
        }
        return {
            message: invalid_type_error !== null && invalid_type_error !== void 0 ? invalid_type_error : ctx.defaultError
        };
    };
    return {
        errorMap: customMap,
        description
    };
}
var ZodType = class {
    constructor(def){
        this.spa = this.safeParseAsync;
        this.superRefine = this._refinement;
        this._def = def;
        this.parse = this.parse.bind(this);
        this.safeParse = this.safeParse.bind(this);
        this.parseAsync = this.parseAsync.bind(this);
        this.safeParseAsync = this.safeParseAsync.bind(this);
        this.spa = this.spa.bind(this);
        this.refine = this.refine.bind(this);
        this.refinement = this.refinement.bind(this);
        this.superRefine = this.superRefine.bind(this);
        this.optional = this.optional.bind(this);
        this.nullable = this.nullable.bind(this);
        this.nullish = this.nullish.bind(this);
        this.array = this.array.bind(this);
        this.promise = this.promise.bind(this);
        this.or = this.or.bind(this);
        this.and = this.and.bind(this);
        this.transform = this.transform.bind(this);
        this.default = this.default.bind(this);
        this.describe = this.describe.bind(this);
        this.isNullable = this.isNullable.bind(this);
        this.isOptional = this.isOptional.bind(this);
    }
    get description() {
        return this._def.description;
    }
    _getType(input) {
        return getParsedType(input.data);
    }
    _getOrReturnCtx(input, ctx) {
        return ctx || {
            common: input.parent.common,
            data: input.data,
            parsedType: getParsedType(input.data),
            schemaErrorMap: this._def.errorMap,
            path: input.path,
            parent: input.parent
        };
    }
    _processInputParams(input) {
        return {
            status: new ParseStatus(),
            ctx: {
                common: input.parent.common,
                data: input.data,
                parsedType: getParsedType(input.data),
                schemaErrorMap: this._def.errorMap,
                path: input.path,
                parent: input.parent
            }
        };
    }
    _parseSync(input) {
        const result = this._parse(input);
        if (isAsync(result)) {
            throw new Error("Synchronous parse encountered promise.");
        }
        return result;
    }
    _parseAsync(input) {
        const result = this._parse(input);
        return Promise.resolve(result);
    }
    parse(data, params) {
        const result = this.safeParse(data, params);
        if (result.success) return result.data;
        throw result.error;
    }
    safeParse(data, params) {
        var _a;
        const ctx = {
            common: {
                issues: [],
                async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,
                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap
            },
            path: (params === null || params === void 0 ? void 0 : params.path) || [],
            schemaErrorMap: this._def.errorMap,
            parent: null,
            data,
            parsedType: getParsedType(data)
        };
        const result = this._parseSync({
            data,
            path: ctx.path,
            parent: ctx
        });
        return handleResult(ctx, result);
    }
    async parseAsync(data, params) {
        const result = await this.safeParseAsync(data, params);
        if (result.success) return result.data;
        throw result.error;
    }
    async safeParseAsync(data, params) {
        const ctx = {
            common: {
                issues: [],
                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
                async: true
            },
            path: (params === null || params === void 0 ? void 0 : params.path) || [],
            schemaErrorMap: this._def.errorMap,
            parent: null,
            data,
            parsedType: getParsedType(data)
        };
        const maybeAsyncResult = this._parse({
            data,
            path: [],
            parent: ctx
        });
        const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
        return handleResult(ctx, result);
    }
    refine(check, message) {
        const getIssueProperties = (val)=>{
            if (typeof message === "string" || typeof message === "undefined") {
                return {
                    message
                };
            } else if (typeof message === "function") {
                return message(val);
            } else {
                return message;
            }
        };
        return this._refinement((val, ctx)=>{
            const result = check(val);
            const setError = ()=>ctx.addIssue({
                    code: ZodIssueCode.custom,
                    ...getIssueProperties(val)
                });
            if (typeof Promise !== "undefined" && result instanceof Promise) {
                return result.then((data)=>{
                    if (!data) {
                        setError();
                        return false;
                    } else {
                        return true;
                    }
                });
            }
            if (!result) {
                setError();
                return false;
            } else {
                return true;
            }
        });
    }
    refinement(check, refinementData) {
        return this._refinement((val, ctx)=>{
            if (!check(val)) {
                ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
                return false;
            } else {
                return true;
            }
        });
    }
    _refinement(refinement) {
        return new ZodEffects({
            schema: this,
            typeName: ZodFirstPartyTypeKind.ZodEffects,
            effect: {
                type: "refinement",
                refinement
            }
        });
    }
    optional() {
        return ZodOptional.create(this);
    }
    nullable() {
        return ZodNullable.create(this);
    }
    nullish() {
        return this.optional().nullable();
    }
    array() {
        return ZodArray.create(this);
    }
    promise() {
        return ZodPromise.create(this);
    }
    or(option) {
        return ZodUnion.create([
            this,
            option
        ]);
    }
    and(incoming) {
        return ZodIntersection.create(this, incoming);
    }
    transform(transform) {
        return new ZodEffects({
            schema: this,
            typeName: ZodFirstPartyTypeKind.ZodEffects,
            effect: {
                type: "transform",
                transform
            }
        });
    }
    default(def) {
        const defaultValueFunc = typeof def === "function" ? def : ()=>def;
        return new ZodDefault({
            innerType: this,
            defaultValue: defaultValueFunc,
            typeName: ZodFirstPartyTypeKind.ZodDefault
        });
    }
    brand() {
        return new ZodBranded({
            typeName: ZodFirstPartyTypeKind.ZodBranded,
            type: this,
            ...processCreateParams(void 0)
        });
    }
    describe(description) {
        const This = this.constructor;
        return new This({
            ...this._def,
            description
        });
    }
    isOptional() {
        return this.safeParse(void 0).success;
    }
    isNullable() {
        return this.safeParse(null).success;
    }
};
var cuidRegex = /^c[^\s-]{8,}$/i;
var uuidRegex = /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;
var emailRegex = /^(([^<>()[\]\.,;:\s@\"]+(\.[^<>()[\]\.,;:\s@\"]+)*)|(\".+\"))@(([^<>()[\]\.,;:\s@\"]+\.)+[^<>()[\]\.,;:\s@\"]{2,})$/i;
var ZodString = class extends ZodType {
    constructor(){
        super(...arguments);
        this._regex = (regex, validation, message)=>this.refinement((data)=>regex.test(data), {
                validation,
                code: ZodIssueCode.invalid_string,
                ...errorUtil.errToObj(message)
            });
        this.nonempty = (message)=>this.min(1, errorUtil.errToObj(message));
        this.trim = ()=>new ZodString({
                ...this._def,
                checks: [
                    ...this._def.checks,
                    {
                        kind: "trim"
                    }
                ]
            });
    }
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.string) {
            const ctx2 = this._getOrReturnCtx(input);
            addIssueToContext(ctx2, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.string,
                received: ctx2.parsedType
            });
            return INVALID;
        }
        const status = new ParseStatus();
        let ctx = void 0;
        for (const check of this._def.checks){
            if (check.kind === "min") {
                if (input.data.length < check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_small,
                        minimum: check.value,
                        type: "string",
                        inclusive: true,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "max") {
                if (input.data.length > check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_big,
                        maximum: check.value,
                        type: "string",
                        inclusive: true,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "email") {
                if (!emailRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "email",
                        code: ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "uuid") {
                if (!uuidRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "uuid",
                        code: ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "cuid") {
                if (!cuidRegex.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "cuid",
                        code: ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "url") {
                try {
                    new URL(input.data);
                } catch (_a) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "url",
                        code: ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "regex") {
                check.regex.lastIndex = 0;
                const testResult = check.regex.test(input.data);
                if (!testResult) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        validation: "regex",
                        code: ZodIssueCode.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "trim") {
                input.data = input.data.trim();
            } else if (check.kind === "startsWith") {
                if (!input.data.startsWith(check.value)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_string,
                        validation: {
                            startsWith: check.value
                        },
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "endsWith") {
                if (!input.data.endsWith(check.value)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_string,
                        validation: {
                            endsWith: check.value
                        },
                        message: check.message
                    });
                    status.dirty();
                }
            } else {
                util.assertNever(check);
            }
        }
        return {
            status: status.value,
            value: input.data
        };
    }
    _addCheck(check) {
        return new ZodString({
            ...this._def,
            checks: [
                ...this._def.checks,
                check
            ]
        });
    }
    email(message) {
        return this._addCheck({
            kind: "email",
            ...errorUtil.errToObj(message)
        });
    }
    url(message) {
        return this._addCheck({
            kind: "url",
            ...errorUtil.errToObj(message)
        });
    }
    uuid(message) {
        return this._addCheck({
            kind: "uuid",
            ...errorUtil.errToObj(message)
        });
    }
    cuid(message) {
        return this._addCheck({
            kind: "cuid",
            ...errorUtil.errToObj(message)
        });
    }
    regex(regex, message) {
        return this._addCheck({
            kind: "regex",
            regex,
            ...errorUtil.errToObj(message)
        });
    }
    startsWith(value, message) {
        return this._addCheck({
            kind: "startsWith",
            value,
            ...errorUtil.errToObj(message)
        });
    }
    endsWith(value, message) {
        return this._addCheck({
            kind: "endsWith",
            value,
            ...errorUtil.errToObj(message)
        });
    }
    min(minLength, message) {
        return this._addCheck({
            kind: "min",
            value: minLength,
            ...errorUtil.errToObj(message)
        });
    }
    max(maxLength, message) {
        return this._addCheck({
            kind: "max",
            value: maxLength,
            ...errorUtil.errToObj(message)
        });
    }
    length(len, message) {
        return this.min(len, message).max(len, message);
    }
    get isEmail() {
        return !!this._def.checks.find((ch)=>ch.kind === "email");
    }
    get isURL() {
        return !!this._def.checks.find((ch)=>ch.kind === "url");
    }
    get isUUID() {
        return !!this._def.checks.find((ch)=>ch.kind === "uuid");
    }
    get isCUID() {
        return !!this._def.checks.find((ch)=>ch.kind === "cuid");
    }
    get minLength() {
        let min = null;
        for (const ch of this._def.checks){
            if (ch.kind === "min") {
                if (min === null || ch.value > min) min = ch.value;
            }
        }
        return min;
    }
    get maxLength() {
        let max = null;
        for (const ch of this._def.checks){
            if (ch.kind === "max") {
                if (max === null || ch.value < max) max = ch.value;
            }
        }
        return max;
    }
};
ZodString.create = (params)=>{
    return new ZodString({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodString,
        ...processCreateParams(params)
    });
};
function floatSafeRemainder(val, step) {
    const valDecCount = (val.toString().split(".")[1] || "").length;
    const stepDecCount = (step.toString().split(".")[1] || "").length;
    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
    const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
    const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
    return valInt % stepInt / Math.pow(10, decCount);
}
var ZodNumber = class extends ZodType {
    constructor(){
        super(...arguments);
        this.min = this.gte;
        this.max = this.lte;
        this.step = this.multipleOf;
    }
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.number) {
            const ctx2 = this._getOrReturnCtx(input);
            addIssueToContext(ctx2, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.number,
                received: ctx2.parsedType
            });
            return INVALID;
        }
        let ctx = void 0;
        const status = new ParseStatus();
        for (const check of this._def.checks){
            if (check.kind === "int") {
                if (!util.isInteger(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.invalid_type,
                        expected: "integer",
                        received: "float",
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "min") {
                const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
                if (tooSmall) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_small,
                        minimum: check.value,
                        type: "number",
                        inclusive: check.inclusive,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "max") {
                const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
                if (tooBig) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_big,
                        maximum: check.value,
                        type: "number",
                        inclusive: check.inclusive,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "multipleOf") {
                if (floatSafeRemainder(input.data, check.value) !== 0) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.not_multiple_of,
                        multipleOf: check.value,
                        message: check.message
                    });
                    status.dirty();
                }
            } else {
                util.assertNever(check);
            }
        }
        return {
            status: status.value,
            value: input.data
        };
    }
    gte(value, message) {
        return this.setLimit("min", value, true, errorUtil.toString(message));
    }
    gt(value, message) {
        return this.setLimit("min", value, false, errorUtil.toString(message));
    }
    lte(value, message) {
        return this.setLimit("max", value, true, errorUtil.toString(message));
    }
    lt(value, message) {
        return this.setLimit("max", value, false, errorUtil.toString(message));
    }
    setLimit(kind, value, inclusive, message) {
        return new ZodNumber({
            ...this._def,
            checks: [
                ...this._def.checks,
                {
                    kind,
                    value,
                    inclusive,
                    message: errorUtil.toString(message)
                }
            ]
        });
    }
    _addCheck(check) {
        return new ZodNumber({
            ...this._def,
            checks: [
                ...this._def.checks,
                check
            ]
        });
    }
    int(message) {
        return this._addCheck({
            kind: "int",
            message: errorUtil.toString(message)
        });
    }
    positive(message) {
        return this._addCheck({
            kind: "min",
            value: 0,
            inclusive: false,
            message: errorUtil.toString(message)
        });
    }
    negative(message) {
        return this._addCheck({
            kind: "max",
            value: 0,
            inclusive: false,
            message: errorUtil.toString(message)
        });
    }
    nonpositive(message) {
        return this._addCheck({
            kind: "max",
            value: 0,
            inclusive: true,
            message: errorUtil.toString(message)
        });
    }
    nonnegative(message) {
        return this._addCheck({
            kind: "min",
            value: 0,
            inclusive: true,
            message: errorUtil.toString(message)
        });
    }
    multipleOf(value, message) {
        return this._addCheck({
            kind: "multipleOf",
            value,
            message: errorUtil.toString(message)
        });
    }
    get minValue() {
        let min = null;
        for (const ch of this._def.checks){
            if (ch.kind === "min") {
                if (min === null || ch.value > min) min = ch.value;
            }
        }
        return min;
    }
    get maxValue() {
        let max = null;
        for (const ch of this._def.checks){
            if (ch.kind === "max") {
                if (max === null || ch.value < max) max = ch.value;
            }
        }
        return max;
    }
    get isInt() {
        return !!this._def.checks.find((ch)=>ch.kind === "int");
    }
};
ZodNumber.create = (params)=>{
    return new ZodNumber({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodNumber,
        ...processCreateParams(params)
    });
};
var ZodBigInt = class extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.bigint) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.bigint,
                received: ctx.parsedType
            });
            return INVALID;
        }
        return OK(input.data);
    }
};
ZodBigInt.create = (params)=>{
    return new ZodBigInt({
        typeName: ZodFirstPartyTypeKind.ZodBigInt,
        ...processCreateParams(params)
    });
};
var ZodBoolean = class extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.boolean) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.boolean,
                received: ctx.parsedType
            });
            return INVALID;
        }
        return OK(input.data);
    }
};
ZodBoolean.create = (params)=>{
    return new ZodBoolean({
        typeName: ZodFirstPartyTypeKind.ZodBoolean,
        ...processCreateParams(params)
    });
};
var ZodDate = class extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.date) {
            const ctx2 = this._getOrReturnCtx(input);
            addIssueToContext(ctx2, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.date,
                received: ctx2.parsedType
            });
            return INVALID;
        }
        if (isNaN(input.data.getTime())) {
            const ctx21 = this._getOrReturnCtx(input);
            addIssueToContext(ctx21, {
                code: ZodIssueCode.invalid_date
            });
            return INVALID;
        }
        const status = new ParseStatus();
        let ctx = void 0;
        for (const check of this._def.checks){
            if (check.kind === "min") {
                if (input.data.getTime() < check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_small,
                        message: check.message,
                        inclusive: true,
                        minimum: check.value,
                        type: "date"
                    });
                    status.dirty();
                }
            } else if (check.kind === "max") {
                if (input.data.getTime() > check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.too_big,
                        message: check.message,
                        inclusive: true,
                        maximum: check.value,
                        type: "date"
                    });
                    status.dirty();
                }
            } else {
                util.assertNever(check);
            }
        }
        return {
            status: status.value,
            value: new Date(input.data.getTime())
        };
    }
    _addCheck(check) {
        return new ZodDate({
            ...this._def,
            checks: [
                ...this._def.checks,
                check
            ]
        });
    }
    min(minDate, message) {
        return this._addCheck({
            kind: "min",
            value: minDate.getTime(),
            message: errorUtil.toString(message)
        });
    }
    max(maxDate, message) {
        return this._addCheck({
            kind: "max",
            value: maxDate.getTime(),
            message: errorUtil.toString(message)
        });
    }
    get minDate() {
        let min = null;
        for (const ch of this._def.checks){
            if (ch.kind === "min") {
                if (min === null || ch.value > min) min = ch.value;
            }
        }
        return min != null ? new Date(min) : null;
    }
    get maxDate() {
        let max = null;
        for (const ch of this._def.checks){
            if (ch.kind === "max") {
                if (max === null || ch.value < max) max = ch.value;
            }
        }
        return max != null ? new Date(max) : null;
    }
};
ZodDate.create = (params)=>{
    return new ZodDate({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodDate,
        ...processCreateParams(params)
    });
};
var ZodUndefined = class extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.undefined) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.undefined,
                received: ctx.parsedType
            });
            return INVALID;
        }
        return OK(input.data);
    }
};
ZodUndefined.create = (params)=>{
    return new ZodUndefined({
        typeName: ZodFirstPartyTypeKind.ZodUndefined,
        ...processCreateParams(params)
    });
};
var ZodNull = class extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.null) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.null,
                received: ctx.parsedType
            });
            return INVALID;
        }
        return OK(input.data);
    }
};
ZodNull.create = (params)=>{
    return new ZodNull({
        typeName: ZodFirstPartyTypeKind.ZodNull,
        ...processCreateParams(params)
    });
};
var ZodAny = class extends ZodType {
    constructor(){
        super(...arguments);
        this._any = true;
    }
    _parse(input) {
        return OK(input.data);
    }
};
ZodAny.create = (params)=>{
    return new ZodAny({
        typeName: ZodFirstPartyTypeKind.ZodAny,
        ...processCreateParams(params)
    });
};
var ZodUnknown = class extends ZodType {
    constructor(){
        super(...arguments);
        this._unknown = true;
    }
    _parse(input) {
        return OK(input.data);
    }
};
ZodUnknown.create = (params)=>{
    return new ZodUnknown({
        typeName: ZodFirstPartyTypeKind.ZodUnknown,
        ...processCreateParams(params)
    });
};
var ZodNever = class extends ZodType {
    _parse(input) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.never,
            received: ctx.parsedType
        });
        return INVALID;
    }
};
ZodNever.create = (params)=>{
    return new ZodNever({
        typeName: ZodFirstPartyTypeKind.ZodNever,
        ...processCreateParams(params)
    });
};
var ZodVoid = class extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.undefined) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.void,
                received: ctx.parsedType
            });
            return INVALID;
        }
        return OK(input.data);
    }
};
ZodVoid.create = (params)=>{
    return new ZodVoid({
        typeName: ZodFirstPartyTypeKind.ZodVoid,
        ...processCreateParams(params)
    });
};
var ZodArray = class extends ZodType {
    _parse(input) {
        const { ctx , status  } = this._processInputParams(input);
        const def = this._def;
        if (ctx.parsedType !== ZodParsedType.array) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.array,
                received: ctx.parsedType
            });
            return INVALID;
        }
        if (def.minLength !== null) {
            if (ctx.data.length < def.minLength.value) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.too_small,
                    minimum: def.minLength.value,
                    type: "array",
                    inclusive: true,
                    message: def.minLength.message
                });
                status.dirty();
            }
        }
        if (def.maxLength !== null) {
            if (ctx.data.length > def.maxLength.value) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.too_big,
                    maximum: def.maxLength.value,
                    type: "array",
                    inclusive: true,
                    message: def.maxLength.message
                });
                status.dirty();
            }
        }
        if (ctx.common.async) {
            return Promise.all(ctx.data.map((item, i)=>{
                return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));
            })).then((result2)=>{
                return ParseStatus.mergeArray(status, result2);
            });
        }
        const result = ctx.data.map((item, i)=>{
            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));
        });
        return ParseStatus.mergeArray(status, result);
    }
    get element() {
        return this._def.type;
    }
    min(minLength, message) {
        return new ZodArray({
            ...this._def,
            minLength: {
                value: minLength,
                message: errorUtil.toString(message)
            }
        });
    }
    max(maxLength, message) {
        return new ZodArray({
            ...this._def,
            maxLength: {
                value: maxLength,
                message: errorUtil.toString(message)
            }
        });
    }
    length(len, message) {
        return this.min(len, message).max(len, message);
    }
    nonempty(message) {
        return this.min(1, message);
    }
};
ZodArray.create = (schema, params)=>{
    return new ZodArray({
        type: schema,
        minLength: null,
        maxLength: null,
        typeName: ZodFirstPartyTypeKind.ZodArray,
        ...processCreateParams(params)
    });
};
var objectUtil;
(function(objectUtil4) {
    objectUtil4.mergeShapes = (first, second)=>{
        return {
            ...first,
            ...second
        };
    };
})(objectUtil || (objectUtil = {}));
var AugmentFactory = (def)=>(augmentation)=>{
        return new ZodObject({
            ...def,
            shape: ()=>({
                    ...def.shape(),
                    ...augmentation
                })
        });
    };
function deepPartialify(schema) {
    if (schema instanceof ZodObject) {
        const newShape = {};
        for(const key in schema.shape){
            const fieldSchema = schema.shape[key];
            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
        }
        return new ZodObject({
            ...schema._def,
            shape: ()=>newShape
        });
    } else if (schema instanceof ZodArray) {
        return ZodArray.create(deepPartialify(schema.element));
    } else if (schema instanceof ZodOptional) {
        return ZodOptional.create(deepPartialify(schema.unwrap()));
    } else if (schema instanceof ZodNullable) {
        return ZodNullable.create(deepPartialify(schema.unwrap()));
    } else if (schema instanceof ZodTuple) {
        return ZodTuple.create(schema.items.map((item)=>deepPartialify(item)));
    } else {
        return schema;
    }
}
var ZodObject = class extends ZodType {
    constructor(){
        super(...arguments);
        this._cached = null;
        this.nonstrict = this.passthrough;
        this.augment = AugmentFactory(this._def);
        this.extend = AugmentFactory(this._def);
    }
    _getCached() {
        if (this._cached !== null) return this._cached;
        const shape = this._def.shape();
        const keys = util.objectKeys(shape);
        return this._cached = {
            shape,
            keys
        };
    }
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.object) {
            const ctx2 = this._getOrReturnCtx(input);
            addIssueToContext(ctx2, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.object,
                received: ctx2.parsedType
            });
            return INVALID;
        }
        const { status , ctx  } = this._processInputParams(input);
        const { shape , keys: shapeKeys  } = this._getCached();
        const extraKeys = [];
        for(const key in ctx.data){
            if (!shapeKeys.includes(key)) {
                extraKeys.push(key);
            }
        }
        const pairs = [];
        for (const key1 of shapeKeys){
            const keyValidator = shape[key1];
            const value = ctx.data[key1];
            pairs.push({
                key: {
                    status: "valid",
                    value: key1
                },
                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key1)),
                alwaysSet: key1 in ctx.data
            });
        }
        if (this._def.catchall instanceof ZodNever) {
            const unknownKeys = this._def.unknownKeys;
            if (unknownKeys === "passthrough") {
                for (const key2 of extraKeys){
                    pairs.push({
                        key: {
                            status: "valid",
                            value: key2
                        },
                        value: {
                            status: "valid",
                            value: ctx.data[key2]
                        }
                    });
                }
            } else if (unknownKeys === "strict") {
                if (extraKeys.length > 0) {
                    addIssueToContext(ctx, {
                        code: ZodIssueCode.unrecognized_keys,
                        keys: extraKeys
                    });
                    status.dirty();
                }
            } else if (unknownKeys === "strip") ;
            else {
                throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
            }
        } else {
            const catchall = this._def.catchall;
            for (const key3 of extraKeys){
                const value1 = ctx.data[key3];
                pairs.push({
                    key: {
                        status: "valid",
                        value: key3
                    },
                    value: catchall._parse(new ParseInputLazyPath(ctx, value1, ctx.path, key3)),
                    alwaysSet: key3 in ctx.data
                });
            }
        }
        if (ctx.common.async) {
            return Promise.resolve().then(async ()=>{
                const syncPairs = [];
                for (const pair of pairs){
                    const key = await pair.key;
                    syncPairs.push({
                        key,
                        value: await pair.value,
                        alwaysSet: pair.alwaysSet
                    });
                }
                return syncPairs;
            }).then((syncPairs)=>{
                return ParseStatus.mergeObjectSync(status, syncPairs);
            });
        } else {
            return ParseStatus.mergeObjectSync(status, pairs);
        }
    }
    get shape() {
        return this._def.shape();
    }
    strict(message) {
        errorUtil.errToObj;
        return new ZodObject({
            ...this._def,
            unknownKeys: "strict",
            ...message !== void 0 ? {
                errorMap: (issue, ctx)=>{
                    var _a, _b, _c, _d;
                    const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;
                    if (issue.code === "unrecognized_keys") return {
                        message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError
                    };
                    return {
                        message: defaultError
                    };
                }
            } : {}
        });
    }
    strip() {
        return new ZodObject({
            ...this._def,
            unknownKeys: "strip"
        });
    }
    passthrough() {
        return new ZodObject({
            ...this._def,
            unknownKeys: "passthrough"
        });
    }
    setKey(key, schema) {
        return this.augment({
            [key]: schema
        });
    }
    merge(merging) {
        const merged = new ZodObject({
            unknownKeys: merging._def.unknownKeys,
            catchall: merging._def.catchall,
            shape: ()=>objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
            typeName: ZodFirstPartyTypeKind.ZodObject
        });
        return merged;
    }
    catchall(index) {
        return new ZodObject({
            ...this._def,
            catchall: index
        });
    }
    pick(mask) {
        const shape = {};
        util.objectKeys(mask).map((key)=>{
            if (this.shape[key]) shape[key] = this.shape[key];
        });
        return new ZodObject({
            ...this._def,
            shape: ()=>shape
        });
    }
    omit(mask) {
        const shape = {};
        util.objectKeys(this.shape).map((key)=>{
            if (util.objectKeys(mask).indexOf(key) === -1) {
                shape[key] = this.shape[key];
            }
        });
        return new ZodObject({
            ...this._def,
            shape: ()=>shape
        });
    }
    deepPartial() {
        return deepPartialify(this);
    }
    partial(mask) {
        const newShape = {};
        if (mask) {
            util.objectKeys(this.shape).map((key)=>{
                if (util.objectKeys(mask).indexOf(key) === -1) {
                    newShape[key] = this.shape[key];
                } else {
                    newShape[key] = this.shape[key].optional();
                }
            });
            return new ZodObject({
                ...this._def,
                shape: ()=>newShape
            });
        } else {
            for(const key in this.shape){
                const fieldSchema = this.shape[key];
                newShape[key] = fieldSchema.optional();
            }
        }
        return new ZodObject({
            ...this._def,
            shape: ()=>newShape
        });
    }
    required() {
        const newShape = {};
        for(const key in this.shape){
            const fieldSchema = this.shape[key];
            let newField = fieldSchema;
            while(newField instanceof ZodOptional){
                newField = newField._def.innerType;
            }
            newShape[key] = newField;
        }
        return new ZodObject({
            ...this._def,
            shape: ()=>newShape
        });
    }
    keyof() {
        return createZodEnum(util.objectKeys(this.shape));
    }
};
ZodObject.create = (shape, params)=>{
    return new ZodObject({
        shape: ()=>shape,
        unknownKeys: "strip",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params)
    });
};
ZodObject.strictCreate = (shape, params)=>{
    return new ZodObject({
        shape: ()=>shape,
        unknownKeys: "strict",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params)
    });
};
ZodObject.lazycreate = (shape, params)=>{
    return new ZodObject({
        shape,
        unknownKeys: "strip",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params)
    });
};
var ZodUnion = class extends ZodType {
    _parse(input) {
        const { ctx  } = this._processInputParams(input);
        const options = this._def.options;
        function handleResults(results) {
            for (const result of results){
                if (result.result.status === "valid") {
                    return result.result;
                }
            }
            for (const result1 of results){
                if (result1.result.status === "dirty") {
                    ctx.common.issues.push(...result1.ctx.common.issues);
                    return result1.result;
                }
            }
            const unionErrors = results.map((result)=>new ZodError(result.ctx.common.issues));
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_union,
                unionErrors
            });
            return INVALID;
        }
        if (ctx.common.async) {
            return Promise.all(options.map(async (option)=>{
                const childCtx = {
                    ...ctx,
                    common: {
                        ...ctx.common,
                        issues: []
                    },
                    parent: null
                };
                return {
                    result: await option._parseAsync({
                        data: ctx.data,
                        path: ctx.path,
                        parent: childCtx
                    }),
                    ctx: childCtx
                };
            })).then(handleResults);
        } else {
            let dirty = void 0;
            const issues = [];
            for (const option of options){
                const childCtx = {
                    ...ctx,
                    common: {
                        ...ctx.common,
                        issues: []
                    },
                    parent: null
                };
                const result = option._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: childCtx
                });
                if (result.status === "valid") {
                    return result;
                } else if (result.status === "dirty" && !dirty) {
                    dirty = {
                        result,
                        ctx: childCtx
                    };
                }
                if (childCtx.common.issues.length) {
                    issues.push(childCtx.common.issues);
                }
            }
            if (dirty) {
                ctx.common.issues.push(...dirty.ctx.common.issues);
                return dirty.result;
            }
            const unionErrors = issues.map((issues2)=>new ZodError(issues2));
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_union,
                unionErrors
            });
            return INVALID;
        }
    }
    get options() {
        return this._def.options;
    }
};
ZodUnion.create = (types, params)=>{
    return new ZodUnion({
        options: types,
        typeName: ZodFirstPartyTypeKind.ZodUnion,
        ...processCreateParams(params)
    });
};
var ZodDiscriminatedUnion = class extends ZodType {
    _parse(input) {
        const { ctx  } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.object) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.object,
                received: ctx.parsedType
            });
            return INVALID;
        }
        const discriminator = this.discriminator;
        const discriminatorValue = ctx.data[discriminator];
        const option = this.options.get(discriminatorValue);
        if (!option) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_union_discriminator,
                options: this.validDiscriminatorValues,
                path: [
                    discriminator
                ]
            });
            return INVALID;
        }
        if (ctx.common.async) {
            return option._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
            });
        } else {
            return option._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
            });
        }
    }
    get discriminator() {
        return this._def.discriminator;
    }
    get validDiscriminatorValues() {
        return Array.from(this.options.keys());
    }
    get options() {
        return this._def.options;
    }
    static create(discriminator, types, params) {
        const options = /* @__PURE__ */ new Map();
        try {
            types.forEach((type)=>{
                const discriminatorValue = type.shape[discriminator].value;
                options.set(discriminatorValue, type);
            });
        } catch (e) {
            throw new Error("The discriminator value could not be extracted from all the provided schemas");
        }
        if (options.size !== types.length) {
            throw new Error("Some of the discriminator values are not unique");
        }
        return new ZodDiscriminatedUnion({
            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
            discriminator,
            options,
            ...processCreateParams(params)
        });
    }
};
function mergeValues(a, b) {
    const aType = getParsedType(a);
    const bType = getParsedType(b);
    if (a === b) {
        return {
            valid: true,
            data: a
        };
    } else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
        const bKeys = util.objectKeys(b);
        const sharedKeys = util.objectKeys(a).filter((key)=>bKeys.indexOf(key) !== -1);
        const newObj = {
            ...a,
            ...b
        };
        for (const key of sharedKeys){
            const sharedValue = mergeValues(a[key], b[key]);
            if (!sharedValue.valid) {
                return {
                    valid: false
                };
            }
            newObj[key] = sharedValue.data;
        }
        return {
            valid: true,
            data: newObj
        };
    } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
        if (a.length !== b.length) {
            return {
                valid: false
            };
        }
        const newArray = [];
        for(let index = 0; index < a.length; index++){
            const itemA = a[index];
            const itemB = b[index];
            const sharedValue1 = mergeValues(itemA, itemB);
            if (!sharedValue1.valid) {
                return {
                    valid: false
                };
            }
            newArray.push(sharedValue1.data);
        }
        return {
            valid: true,
            data: newArray
        };
    } else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a === +b) {
        return {
            valid: true,
            data: a
        };
    } else {
        return {
            valid: false
        };
    }
}
var ZodIntersection = class extends ZodType {
    _parse(input) {
        const { status , ctx  } = this._processInputParams(input);
        const handleParsed = (parsedLeft, parsedRight)=>{
            if (isAborted(parsedLeft) || isAborted(parsedRight)) {
                return INVALID;
            }
            const merged = mergeValues(parsedLeft.value, parsedRight.value);
            if (!merged.valid) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.invalid_intersection_types
                });
                return INVALID;
            }
            if (isDirty(parsedLeft) || isDirty(parsedRight)) {
                status.dirty();
            }
            return {
                status: status.value,
                value: merged.data
            };
        };
        if (ctx.common.async) {
            return Promise.all([
                this._def.left._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx
                }),
                this._def.right._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx
                })
            ]).then(([left, right])=>handleParsed(left, right));
        } else {
            return handleParsed(this._def.left._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
            }), this._def.right._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
            }));
        }
    }
};
ZodIntersection.create = (left, right, params)=>{
    return new ZodIntersection({
        left,
        right,
        typeName: ZodFirstPartyTypeKind.ZodIntersection,
        ...processCreateParams(params)
    });
};
var ZodTuple = class extends ZodType {
    _parse(input) {
        const { status , ctx  } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.array) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.array,
                received: ctx.parsedType
            });
            return INVALID;
        }
        if (ctx.data.length < this._def.items.length) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.too_small,
                minimum: this._def.items.length,
                inclusive: true,
                type: "array"
            });
            return INVALID;
        }
        const rest = this._def.rest;
        if (!rest && ctx.data.length > this._def.items.length) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.too_big,
                maximum: this._def.items.length,
                inclusive: true,
                type: "array"
            });
            status.dirty();
        }
        const items = ctx.data.map((item, itemIndex)=>{
            const schema = this._def.items[itemIndex] || this._def.rest;
            if (!schema) return null;
            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
        }).filter((x)=>!!x);
        if (ctx.common.async) {
            return Promise.all(items).then((results)=>{
                return ParseStatus.mergeArray(status, results);
            });
        } else {
            return ParseStatus.mergeArray(status, items);
        }
    }
    get items() {
        return this._def.items;
    }
    rest(rest) {
        return new ZodTuple({
            ...this._def,
            rest
        });
    }
};
ZodTuple.create = (schemas, params)=>{
    return new ZodTuple({
        items: schemas,
        typeName: ZodFirstPartyTypeKind.ZodTuple,
        rest: null,
        ...processCreateParams(params)
    });
};
var ZodRecord = class extends ZodType {
    get keySchema() {
        return this._def.keyType;
    }
    get valueSchema() {
        return this._def.valueType;
    }
    _parse(input) {
        const { status , ctx  } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.object) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.object,
                received: ctx.parsedType
            });
            return INVALID;
        }
        const pairs = [];
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        for(const key in ctx.data){
            pairs.push({
                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
                value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key))
            });
        }
        if (ctx.common.async) {
            return ParseStatus.mergeObjectAsync(status, pairs);
        } else {
            return ParseStatus.mergeObjectSync(status, pairs);
        }
    }
    get element() {
        return this._def.valueType;
    }
    static create(first, second, third) {
        if (second instanceof ZodType) {
            return new ZodRecord({
                keyType: first,
                valueType: second,
                typeName: ZodFirstPartyTypeKind.ZodRecord,
                ...processCreateParams(third)
            });
        }
        return new ZodRecord({
            keyType: ZodString.create(),
            valueType: first,
            typeName: ZodFirstPartyTypeKind.ZodRecord,
            ...processCreateParams(second)
        });
    }
};
var ZodMap = class extends ZodType {
    _parse(input) {
        const { status , ctx  } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.map) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.map,
                received: ctx.parsedType
            });
            return INVALID;
        }
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        const pairs = [
            ...ctx.data.entries()
        ].map(([key, value], index)=>{
            return {
                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [
                    index,
                    "key"
                ])),
                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [
                    index,
                    "value"
                ]))
            };
        });
        if (ctx.common.async) {
            const finalMap = /* @__PURE__ */ new Map();
            return Promise.resolve().then(async ()=>{
                for (const pair of pairs){
                    const key = await pair.key;
                    const value = await pair.value;
                    if (key.status === "aborted" || value.status === "aborted") {
                        return INVALID;
                    }
                    if (key.status === "dirty" || value.status === "dirty") {
                        status.dirty();
                    }
                    finalMap.set(key.value, value.value);
                }
                return {
                    status: status.value,
                    value: finalMap
                };
            });
        } else {
            const finalMap1 = /* @__PURE__ */ new Map();
            for (const pair of pairs){
                const key = pair.key;
                const value = pair.value;
                if (key.status === "aborted" || value.status === "aborted") {
                    return INVALID;
                }
                if (key.status === "dirty" || value.status === "dirty") {
                    status.dirty();
                }
                finalMap1.set(key.value, value.value);
            }
            return {
                status: status.value,
                value: finalMap1
            };
        }
    }
};
ZodMap.create = (keyType, valueType, params)=>{
    return new ZodMap({
        valueType,
        keyType,
        typeName: ZodFirstPartyTypeKind.ZodMap,
        ...processCreateParams(params)
    });
};
var ZodSet = class extends ZodType {
    _parse(input) {
        const { status , ctx  } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.set) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.set,
                received: ctx.parsedType
            });
            return INVALID;
        }
        const def = this._def;
        if (def.minSize !== null) {
            if (ctx.data.size < def.minSize.value) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.too_small,
                    minimum: def.minSize.value,
                    type: "set",
                    inclusive: true,
                    message: def.minSize.message
                });
                status.dirty();
            }
        }
        if (def.maxSize !== null) {
            if (ctx.data.size > def.maxSize.value) {
                addIssueToContext(ctx, {
                    code: ZodIssueCode.too_big,
                    maximum: def.maxSize.value,
                    type: "set",
                    inclusive: true,
                    message: def.maxSize.message
                });
                status.dirty();
            }
        }
        const valueType = this._def.valueType;
        function finalizeSet(elements2) {
            const parsedSet = /* @__PURE__ */ new Set();
            for (const element of elements2){
                if (element.status === "aborted") return INVALID;
                if (element.status === "dirty") status.dirty();
                parsedSet.add(element.value);
            }
            return {
                status: status.value,
                value: parsedSet
            };
        }
        const elements = [
            ...ctx.data.values()
        ].map((item, i)=>valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));
        if (ctx.common.async) {
            return Promise.all(elements).then((elements2)=>finalizeSet(elements2));
        } else {
            return finalizeSet(elements);
        }
    }
    min(minSize, message) {
        return new ZodSet({
            ...this._def,
            minSize: {
                value: minSize,
                message: errorUtil.toString(message)
            }
        });
    }
    max(maxSize, message) {
        return new ZodSet({
            ...this._def,
            maxSize: {
                value: maxSize,
                message: errorUtil.toString(message)
            }
        });
    }
    size(size, message) {
        return this.min(size, message).max(size, message);
    }
    nonempty(message) {
        return this.min(1, message);
    }
};
ZodSet.create = (valueType, params)=>{
    return new ZodSet({
        valueType,
        minSize: null,
        maxSize: null,
        typeName: ZodFirstPartyTypeKind.ZodSet,
        ...processCreateParams(params)
    });
};
var ZodFunction = class extends ZodType {
    constructor(){
        super(...arguments);
        this.validate = this.implement;
    }
    _parse(input) {
        const { ctx  } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.function) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.function,
                received: ctx.parsedType
            });
            return INVALID;
        }
        function makeArgsIssue(args, error) {
            return makeIssue({
                data: args,
                path: ctx.path,
                errorMaps: [
                    ctx.common.contextualErrorMap,
                    ctx.schemaErrorMap,
                    getErrorMap(),
                    defaultErrorMap
                ].filter((x)=>!!x),
                issueData: {
                    code: ZodIssueCode.invalid_arguments,
                    argumentsError: error
                }
            });
        }
        function makeReturnsIssue(returns, error) {
            return makeIssue({
                data: returns,
                path: ctx.path,
                errorMaps: [
                    ctx.common.contextualErrorMap,
                    ctx.schemaErrorMap,
                    getErrorMap(),
                    defaultErrorMap
                ].filter((x)=>!!x),
                issueData: {
                    code: ZodIssueCode.invalid_return_type,
                    returnTypeError: error
                }
            });
        }
        const params = {
            errorMap: ctx.common.contextualErrorMap
        };
        const fn = ctx.data;
        if (this._def.returns instanceof ZodPromise) {
            return OK(async (...args)=>{
                const error = new ZodError([]);
                const parsedArgs = await this._def.args.parseAsync(args, params).catch((e)=>{
                    error.addIssue(makeArgsIssue(args, e));
                    throw error;
                });
                const result = await fn(...parsedArgs);
                const parsedReturns = await this._def.returns._def.type.parseAsync(result, params).catch((e)=>{
                    error.addIssue(makeReturnsIssue(result, e));
                    throw error;
                });
                return parsedReturns;
            });
        } else {
            return OK((...args)=>{
                const parsedArgs = this._def.args.safeParse(args, params);
                if (!parsedArgs.success) {
                    throw new ZodError([
                        makeArgsIssue(args, parsedArgs.error)
                    ]);
                }
                const result = fn(...parsedArgs.data);
                const parsedReturns = this._def.returns.safeParse(result, params);
                if (!parsedReturns.success) {
                    throw new ZodError([
                        makeReturnsIssue(result, parsedReturns.error)
                    ]);
                }
                return parsedReturns.data;
            });
        }
    }
    parameters() {
        return this._def.args;
    }
    returnType() {
        return this._def.returns;
    }
    args(...items) {
        return new ZodFunction({
            ...this._def,
            args: ZodTuple.create(items).rest(ZodUnknown.create())
        });
    }
    returns(returnType) {
        return new ZodFunction({
            ...this._def,
            returns: returnType
        });
    }
    implement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
    }
    strictImplement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
    }
};
ZodFunction.create = (args, returns, params)=>{
    return new ZodFunction({
        args: args ? args.rest(ZodUnknown.create()) : ZodTuple.create([]).rest(ZodUnknown.create()),
        returns: returns || ZodUnknown.create(),
        typeName: ZodFirstPartyTypeKind.ZodFunction,
        ...processCreateParams(params)
    });
};
var ZodLazy = class extends ZodType {
    get schema() {
        return this._def.getter();
    }
    _parse(input) {
        const { ctx  } = this._processInputParams(input);
        const lazySchema = this._def.getter();
        return lazySchema._parse({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
        });
    }
};
ZodLazy.create = (getter, params)=>{
    return new ZodLazy({
        getter,
        typeName: ZodFirstPartyTypeKind.ZodLazy,
        ...processCreateParams(params)
    });
};
var ZodLiteral = class extends ZodType {
    _parse(input) {
        if (input.data !== this._def.value) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_literal,
                expected: this._def.value
            });
            return INVALID;
        }
        return {
            status: "valid",
            value: input.data
        };
    }
    get value() {
        return this._def.value;
    }
};
ZodLiteral.create = (value, params)=>{
    return new ZodLiteral({
        value,
        typeName: ZodFirstPartyTypeKind.ZodLiteral,
        ...processCreateParams(params)
    });
};
function createZodEnum(values, params) {
    return new ZodEnum({
        values,
        typeName: ZodFirstPartyTypeKind.ZodEnum,
        ...processCreateParams(params)
    });
}
var ZodEnum = class extends ZodType {
    _parse(input) {
        if (typeof input.data !== "string") {
            const ctx = this._getOrReturnCtx(input);
            const expectedValues = this._def.values;
            addIssueToContext(ctx, {
                expected: util.joinValues(expectedValues),
                received: ctx.parsedType,
                code: ZodIssueCode.invalid_type
            });
            return INVALID;
        }
        if (this._def.values.indexOf(input.data) === -1) {
            const ctx1 = this._getOrReturnCtx(input);
            const expectedValues1 = this._def.values;
            addIssueToContext(ctx1, {
                received: ctx1.data,
                code: ZodIssueCode.invalid_enum_value,
                options: expectedValues1
            });
            return INVALID;
        }
        return OK(input.data);
    }
    get options() {
        return this._def.values;
    }
    get enum() {
        const enumValues = {};
        for (const val of this._def.values){
            enumValues[val] = val;
        }
        return enumValues;
    }
    get Values() {
        const enumValues = {};
        for (const val of this._def.values){
            enumValues[val] = val;
        }
        return enumValues;
    }
    get Enum() {
        const enumValues = {};
        for (const val of this._def.values){
            enumValues[val] = val;
        }
        return enumValues;
    }
};
ZodEnum.create = createZodEnum;
var ZodNativeEnum = class extends ZodType {
    _parse(input) {
        const nativeEnumValues = util.getValidEnumValues(this._def.values);
        const ctx = this._getOrReturnCtx(input);
        if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {
            const expectedValues = util.objectValues(nativeEnumValues);
            addIssueToContext(ctx, {
                expected: util.joinValues(expectedValues),
                received: ctx.parsedType,
                code: ZodIssueCode.invalid_type
            });
            return INVALID;
        }
        if (nativeEnumValues.indexOf(input.data) === -1) {
            const expectedValues1 = util.objectValues(nativeEnumValues);
            addIssueToContext(ctx, {
                received: ctx.data,
                code: ZodIssueCode.invalid_enum_value,
                options: expectedValues1
            });
            return INVALID;
        }
        return OK(input.data);
    }
    get enum() {
        return this._def.values;
    }
};
ZodNativeEnum.create = (values, params)=>{
    return new ZodNativeEnum({
        values,
        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
        ...processCreateParams(params)
    });
};
var ZodPromise = class extends ZodType {
    _parse(input) {
        const { ctx  } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.promise,
                received: ctx.parsedType
            });
            return INVALID;
        }
        const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
        return OK(promisified.then((data)=>{
            return this._def.type.parseAsync(data, {
                path: ctx.path,
                errorMap: ctx.common.contextualErrorMap
            });
        }));
    }
};
ZodPromise.create = (schema, params)=>{
    return new ZodPromise({
        type: schema,
        typeName: ZodFirstPartyTypeKind.ZodPromise,
        ...processCreateParams(params)
    });
};
var ZodEffects = class extends ZodType {
    innerType() {
        return this._def.schema;
    }
    _parse(input) {
        const { status , ctx  } = this._processInputParams(input);
        const effect = this._def.effect || null;
        if (effect.type === "preprocess") {
            const processed = effect.transform(ctx.data);
            if (ctx.common.async) {
                return Promise.resolve(processed).then((processed2)=>{
                    return this._def.schema._parseAsync({
                        data: processed2,
                        path: ctx.path,
                        parent: ctx
                    });
                });
            } else {
                return this._def.schema._parseSync({
                    data: processed,
                    path: ctx.path,
                    parent: ctx
                });
            }
        }
        const checkCtx = {
            addIssue: (arg)=>{
                addIssueToContext(ctx, arg);
                if (arg.fatal) {
                    status.abort();
                } else {
                    status.dirty();
                }
            },
            get path () {
                return ctx.path;
            }
        };
        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
        if (effect.type === "refinement") {
            const executeRefinement = (acc)=>{
                const result = effect.refinement(acc, checkCtx);
                if (ctx.common.async) {
                    return Promise.resolve(result);
                }
                if (result instanceof Promise) {
                    throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
                }
                return acc;
            };
            if (ctx.common.async === false) {
                const inner = this._def.schema._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx
                });
                if (inner.status === "aborted") return INVALID;
                if (inner.status === "dirty") status.dirty();
                executeRefinement(inner.value);
                return {
                    status: status.value,
                    value: inner.value
                };
            } else {
                return this._def.schema._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx
                }).then((inner)=>{
                    if (inner.status === "aborted") return INVALID;
                    if (inner.status === "dirty") status.dirty();
                    return executeRefinement(inner.value).then(()=>{
                        return {
                            status: status.value,
                            value: inner.value
                        };
                    });
                });
            }
        }
        if (effect.type === "transform") {
            if (ctx.common.async === false) {
                const base = this._def.schema._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx
                });
                if (!isValid(base)) return base;
                const result = effect.transform(base.value, checkCtx);
                if (result instanceof Promise) {
                    throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
                }
                return {
                    status: status.value,
                    value: result
                };
            } else {
                return this._def.schema._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx
                }).then((base)=>{
                    if (!isValid(base)) return base;
                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result)=>({
                            status: status.value,
                            value: result
                        }));
                });
            }
        }
        util.assertNever(effect);
    }
};
ZodEffects.create = (schema, effect, params)=>{
    return new ZodEffects({
        schema,
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        effect,
        ...processCreateParams(params)
    });
};
ZodEffects.createWithPreprocess = (preprocess, schema, params)=>{
    return new ZodEffects({
        schema,
        effect: {
            type: "preprocess",
            transform: preprocess
        },
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        ...processCreateParams(params)
    });
};
var ZodOptional = class extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === ZodParsedType.undefined) {
            return OK(void 0);
        }
        return this._def.innerType._parse(input);
    }
    unwrap() {
        return this._def.innerType;
    }
};
ZodOptional.create = (type, params)=>{
    return new ZodOptional({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodOptional,
        ...processCreateParams(params)
    });
};
var ZodNullable = class extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === ZodParsedType.null) {
            return OK(null);
        }
        return this._def.innerType._parse(input);
    }
    unwrap() {
        return this._def.innerType;
    }
};
ZodNullable.create = (type, params)=>{
    return new ZodNullable({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodNullable,
        ...processCreateParams(params)
    });
};
var ZodDefault = class extends ZodType {
    _parse(input) {
        const { ctx  } = this._processInputParams(input);
        let data = ctx.data;
        if (ctx.parsedType === ZodParsedType.undefined) {
            data = this._def.defaultValue();
        }
        return this._def.innerType._parse({
            data,
            path: ctx.path,
            parent: ctx
        });
    }
    removeDefault() {
        return this._def.innerType;
    }
};
ZodDefault.create = (type, params)=>{
    return new ZodOptional({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodOptional,
        ...processCreateParams(params)
    });
};
var ZodNaN = class extends ZodType {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.nan) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: ZodParsedType.nan,
                received: ctx.parsedType
            });
            return INVALID;
        }
        return {
            status: "valid",
            value: input.data
        };
    }
};
ZodNaN.create = (params)=>{
    return new ZodNaN({
        typeName: ZodFirstPartyTypeKind.ZodNaN,
        ...processCreateParams(params)
    });
};
var BRAND = Symbol("zod_brand");
var ZodBranded = class extends ZodType {
    _parse(input) {
        const { ctx  } = this._processInputParams(input);
        const data = ctx.data;
        return this._def.type._parse({
            data,
            path: ctx.path,
            parent: ctx
        });
    }
    unwrap() {
        return this._def.type;
    }
};
var custom = (check, params = {}, fatal)=>{
    if (check) return ZodAny.create().superRefine((data, ctx)=>{
        if (!check(data)) {
            const p = typeof params === "function" ? params(data) : params;
            const p2 = typeof p === "string" ? {
                message: p
            } : p;
            ctx.addIssue({
                code: "custom",
                ...p2,
                fatal
            });
        }
    });
    return ZodAny.create();
};
var late = {
    object: ZodObject.lazycreate
};
var ZodFirstPartyTypeKind;
(function(ZodFirstPartyTypeKind4) {
    ZodFirstPartyTypeKind4["ZodString"] = "ZodString";
    ZodFirstPartyTypeKind4["ZodNumber"] = "ZodNumber";
    ZodFirstPartyTypeKind4["ZodNaN"] = "ZodNaN";
    ZodFirstPartyTypeKind4["ZodBigInt"] = "ZodBigInt";
    ZodFirstPartyTypeKind4["ZodBoolean"] = "ZodBoolean";
    ZodFirstPartyTypeKind4["ZodDate"] = "ZodDate";
    ZodFirstPartyTypeKind4["ZodUndefined"] = "ZodUndefined";
    ZodFirstPartyTypeKind4["ZodNull"] = "ZodNull";
    ZodFirstPartyTypeKind4["ZodAny"] = "ZodAny";
    ZodFirstPartyTypeKind4["ZodUnknown"] = "ZodUnknown";
    ZodFirstPartyTypeKind4["ZodNever"] = "ZodNever";
    ZodFirstPartyTypeKind4["ZodVoid"] = "ZodVoid";
    ZodFirstPartyTypeKind4["ZodArray"] = "ZodArray";
    ZodFirstPartyTypeKind4["ZodObject"] = "ZodObject";
    ZodFirstPartyTypeKind4["ZodUnion"] = "ZodUnion";
    ZodFirstPartyTypeKind4["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
    ZodFirstPartyTypeKind4["ZodIntersection"] = "ZodIntersection";
    ZodFirstPartyTypeKind4["ZodTuple"] = "ZodTuple";
    ZodFirstPartyTypeKind4["ZodRecord"] = "ZodRecord";
    ZodFirstPartyTypeKind4["ZodMap"] = "ZodMap";
    ZodFirstPartyTypeKind4["ZodSet"] = "ZodSet";
    ZodFirstPartyTypeKind4["ZodFunction"] = "ZodFunction";
    ZodFirstPartyTypeKind4["ZodLazy"] = "ZodLazy";
    ZodFirstPartyTypeKind4["ZodLiteral"] = "ZodLiteral";
    ZodFirstPartyTypeKind4["ZodEnum"] = "ZodEnum";
    ZodFirstPartyTypeKind4["ZodEffects"] = "ZodEffects";
    ZodFirstPartyTypeKind4["ZodNativeEnum"] = "ZodNativeEnum";
    ZodFirstPartyTypeKind4["ZodOptional"] = "ZodOptional";
    ZodFirstPartyTypeKind4["ZodNullable"] = "ZodNullable";
    ZodFirstPartyTypeKind4["ZodDefault"] = "ZodDefault";
    ZodFirstPartyTypeKind4["ZodPromise"] = "ZodPromise";
    ZodFirstPartyTypeKind4["ZodBranded"] = "ZodBranded";
})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
var instanceOfType = (cls, params = {
    message: `Input not instance of ${cls.name}`
})=>custom((data)=>data instanceof cls, params, true);
var stringType = ZodString.create;
var numberType = ZodNumber.create;
var nanType = ZodNaN.create;
var bigIntType = ZodBigInt.create;
var booleanType = ZodBoolean.create;
var dateType = ZodDate.create;
var undefinedType = ZodUndefined.create;
var nullType = ZodNull.create;
var anyType = ZodAny.create;
var unknownType = ZodUnknown.create;
var neverType = ZodNever.create;
var voidType = ZodVoid.create;
var arrayType = ZodArray.create;
var objectType = ZodObject.create;
var strictObjectType = ZodObject.strictCreate;
var unionType = ZodUnion.create;
var discriminatedUnionType = ZodDiscriminatedUnion.create;
var intersectionType = ZodIntersection.create;
var tupleType = ZodTuple.create;
var recordType = ZodRecord.create;
var mapType = ZodMap.create;
var setType = ZodSet.create;
var functionType = ZodFunction.create;
var lazyType = ZodLazy.create;
var literalType = ZodLiteral.create;
var enumType = ZodEnum.create;
var nativeEnumType = ZodNativeEnum.create;
var promiseType = ZodPromise.create;
var effectsType = ZodEffects.create;
var optionalType = ZodOptional.create;
var nullableType = ZodNullable.create;
var preprocessType = ZodEffects.createWithPreprocess;
var ostring = ()=>stringType().optional();
var onumber = ()=>numberType().optional();
var oboolean = ()=>booleanType().optional();
var mod = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    getParsedType,
    ZodParsedType,
    makeIssue,
    EMPTY_PATH,
    addIssueToContext,
    ParseStatus,
    INVALID,
    DIRTY,
    OK,
    isAborted,
    isDirty,
    isValid,
    isAsync,
    jsonStringifyReplacer,
    ZodType,
    ZodString,
    ZodNumber,
    ZodBigInt,
    ZodBoolean,
    ZodDate,
    ZodUndefined,
    ZodNull,
    ZodAny,
    ZodUnknown,
    ZodNever,
    ZodVoid,
    ZodArray,
    get objectUtil () {
        return objectUtil;
    },
    ZodObject,
    ZodUnion,
    ZodDiscriminatedUnion,
    ZodIntersection,
    ZodTuple,
    ZodRecord,
    ZodMap,
    ZodSet,
    ZodFunction,
    ZodLazy,
    ZodLiteral,
    ZodEnum,
    ZodNativeEnum,
    ZodPromise,
    ZodEffects,
    ZodTransformer: ZodEffects,
    ZodOptional,
    ZodNullable,
    ZodDefault,
    ZodNaN,
    BRAND,
    ZodBranded,
    custom,
    Schema: ZodType,
    ZodSchema: ZodType,
    late,
    get ZodFirstPartyTypeKind () {
        return ZodFirstPartyTypeKind;
    },
    any: anyType,
    array: arrayType,
    bigint: bigIntType,
    boolean: booleanType,
    date: dateType,
    discriminatedUnion: discriminatedUnionType,
    effect: effectsType,
    enum: enumType,
    function: functionType,
    instanceof: instanceOfType,
    intersection: intersectionType,
    lazy: lazyType,
    literal: literalType,
    map: mapType,
    nan: nanType,
    nativeEnum: nativeEnumType,
    never: neverType,
    null: nullType,
    nullable: nullableType,
    number: numberType,
    object: objectType,
    oboolean,
    onumber,
    optional: optionalType,
    ostring,
    preprocess: preprocessType,
    promise: promiseType,
    record: recordType,
    set: setType,
    strictObject: strictObjectType,
    string: stringType,
    transformer: effectsType,
    tuple: tupleType,
    undefined: undefinedType,
    union: unionType,
    unknown: unknownType,
    void: voidType,
    ZodIssueCode,
    quotelessJson,
    ZodError,
    defaultErrorMap,
    setErrorMap,
    getErrorMap
});
var LuxonError = class extends Error {
};
var InvalidDateTimeError = class extends LuxonError {
    constructor(reason){
        super(`Invalid DateTime: ${reason.toMessage()}`);
    }
};
var InvalidIntervalError = class extends LuxonError {
    constructor(reason){
        super(`Invalid Interval: ${reason.toMessage()}`);
    }
};
var InvalidDurationError = class extends LuxonError {
    constructor(reason){
        super(`Invalid Duration: ${reason.toMessage()}`);
    }
};
var ConflictingSpecificationError = class extends LuxonError {
};
var InvalidUnitError = class extends LuxonError {
    constructor(unit){
        super(`Invalid unit ${unit}`);
    }
};
var InvalidArgumentError = class extends LuxonError {
};
var ZoneIsAbstractError = class extends LuxonError {
    constructor(){
        super("Zone is an abstract class");
    }
};
var n = "numeric";
var s = "short";
var l = "long";
var DATE_SHORT = {
    year: n,
    month: n,
    day: n
};
var DATE_MED = {
    year: n,
    month: s,
    day: n
};
var DATE_MED_WITH_WEEKDAY = {
    year: n,
    month: s,
    day: n,
    weekday: s
};
var DATE_FULL = {
    year: n,
    month: l,
    day: n
};
var DATE_HUGE = {
    year: n,
    month: l,
    day: n,
    weekday: l
};
var TIME_SIMPLE = {
    hour: n,
    minute: n
};
var TIME_WITH_SECONDS = {
    hour: n,
    minute: n,
    second: n
};
var TIME_WITH_SHORT_OFFSET = {
    hour: n,
    minute: n,
    second: n,
    timeZoneName: s
};
var TIME_WITH_LONG_OFFSET = {
    hour: n,
    minute: n,
    second: n,
    timeZoneName: l
};
var TIME_24_SIMPLE = {
    hour: n,
    minute: n,
    hourCycle: "h23"
};
var TIME_24_WITH_SECONDS = {
    hour: n,
    minute: n,
    second: n,
    hourCycle: "h23"
};
var TIME_24_WITH_SHORT_OFFSET = {
    hour: n,
    minute: n,
    second: n,
    hourCycle: "h23",
    timeZoneName: s
};
var TIME_24_WITH_LONG_OFFSET = {
    hour: n,
    minute: n,
    second: n,
    hourCycle: "h23",
    timeZoneName: l
};
var DATETIME_SHORT = {
    year: n,
    month: n,
    day: n,
    hour: n,
    minute: n
};
var DATETIME_SHORT_WITH_SECONDS = {
    year: n,
    month: n,
    day: n,
    hour: n,
    minute: n,
    second: n
};
var DATETIME_MED = {
    year: n,
    month: s,
    day: n,
    hour: n,
    minute: n
};
var DATETIME_MED_WITH_SECONDS = {
    year: n,
    month: s,
    day: n,
    hour: n,
    minute: n,
    second: n
};
var DATETIME_MED_WITH_WEEKDAY = {
    year: n,
    month: s,
    day: n,
    weekday: s,
    hour: n,
    minute: n
};
var DATETIME_FULL = {
    year: n,
    month: l,
    day: n,
    hour: n,
    minute: n,
    timeZoneName: s
};
var DATETIME_FULL_WITH_SECONDS = {
    year: n,
    month: l,
    day: n,
    hour: n,
    minute: n,
    second: n,
    timeZoneName: s
};
var DATETIME_HUGE = {
    year: n,
    month: l,
    day: n,
    weekday: l,
    hour: n,
    minute: n,
    timeZoneName: l
};
var DATETIME_HUGE_WITH_SECONDS = {
    year: n,
    month: l,
    day: n,
    weekday: l,
    hour: n,
    minute: n,
    second: n,
    timeZoneName: l
};
function isUndefined(o) {
    return typeof o === "undefined";
}
function isNumber(o) {
    return typeof o === "number";
}
function isInteger(o) {
    return typeof o === "number" && o % 1 === 0;
}
function isString(o) {
    return typeof o === "string";
}
function isDate(o) {
    return Object.prototype.toString.call(o) === "[object Date]";
}
function hasRelative() {
    try {
        return typeof Intl !== "undefined" && !!Intl.RelativeTimeFormat;
    } catch (e) {
        return false;
    }
}
function maybeArray(thing) {
    return Array.isArray(thing) ? thing : [
        thing
    ];
}
function bestBy(arr, by, compare2) {
    if (arr.length === 0) {
        return void 0;
    }
    return arr.reduce((best, next)=>{
        const pair = [
            by(next),
            next
        ];
        if (!best) {
            return pair;
        } else if (compare2(best[0], pair[0]) === best[0]) {
            return best;
        } else {
            return pair;
        }
    }, null)[1];
}
function pick(obj, keys) {
    return keys.reduce((a, k)=>{
        a[k] = obj[k];
        return a;
    }, {});
}
function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
}
function integerBetween(thing, bottom, top) {
    return isInteger(thing) && thing >= bottom && thing <= top;
}
function floorMod(x, n2) {
    return x - n2 * Math.floor(x / n2);
}
function padStart(input, n2 = 2) {
    const isNeg = input < 0;
    let padded;
    if (isNeg) {
        padded = "-" + ("" + -input).padStart(n2, "0");
    } else {
        padded = ("" + input).padStart(n2, "0");
    }
    return padded;
}
function parseInteger(string2) {
    if (isUndefined(string2) || string2 === null || string2 === "") {
        return void 0;
    } else {
        return parseInt(string2, 10);
    }
}
function parseFloating(string2) {
    if (isUndefined(string2) || string2 === null || string2 === "") {
        return void 0;
    } else {
        return parseFloat(string2);
    }
}
function parseMillis(fraction) {
    if (isUndefined(fraction) || fraction === null || fraction === "") {
        return void 0;
    } else {
        const f = parseFloat("0." + fraction) * 1e3;
        return Math.floor(f);
    }
}
function roundTo(number, digits, towardZero = false) {
    const factor = 10 ** digits, rounder = towardZero ? Math.trunc : Math.round;
    return rounder(number * factor) / factor;
}
function isLeapYear(year) {
    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
}
function daysInYear(year) {
    return isLeapYear(year) ? 366 : 365;
}
function daysInMonth(year, month) {
    const modMonth = floorMod(month - 1, 12) + 1, modYear = year + (month - modMonth) / 12;
    if (modMonth === 2) {
        return isLeapYear(modYear) ? 29 : 28;
    } else {
        return [
            31,
            null,
            31,
            30,
            31,
            30,
            31,
            31,
            30,
            31,
            30,
            31
        ][modMonth - 1];
    }
}
function objToLocalTS(obj) {
    let d = Date.UTC(obj.year, obj.month - 1, obj.day, obj.hour, obj.minute, obj.second, obj.millisecond);
    if (obj.year < 100 && obj.year >= 0) {
        d = new Date(d);
        d.setUTCFullYear(d.getUTCFullYear() - 1900);
    }
    return +d;
}
function weeksInWeekYear(weekYear) {
    const p1 = (weekYear + Math.floor(weekYear / 4) - Math.floor(weekYear / 100) + Math.floor(weekYear / 400)) % 7, last = weekYear - 1, p2 = (last + Math.floor(last / 4) - Math.floor(last / 100) + Math.floor(last / 400)) % 7;
    return p1 === 4 || p2 === 3 ? 53 : 52;
}
function untruncateYear(year) {
    if (year > 99) {
        return year;
    } else return year > 60 ? 1900 + year : 2e3 + year;
}
function parseZoneInfo(ts, offsetFormat, locale, timeZone = null) {
    const date = new Date(ts), intlOpts = {
        hourCycle: "h23",
        year: "numeric",
        month: "2-digit",
        day: "2-digit",
        hour: "2-digit",
        minute: "2-digit"
    };
    if (timeZone) {
        intlOpts.timeZone = timeZone;
    }
    const modified = {
        timeZoneName: offsetFormat,
        ...intlOpts
    };
    const parsed = new Intl.DateTimeFormat(locale, modified).formatToParts(date).find((m)=>m.type.toLowerCase() === "timezonename");
    return parsed ? parsed.value : null;
}
function signedOffset(offHourStr, offMinuteStr) {
    let offHour = parseInt(offHourStr, 10);
    if (Number.isNaN(offHour)) {
        offHour = 0;
    }
    const offMin = parseInt(offMinuteStr, 10) || 0, offMinSigned = offHour < 0 || Object.is(offHour, -0) ? -offMin : offMin;
    return offHour * 60 + offMinSigned;
}
function asNumber(value) {
    const numericValue = Number(value);
    if (typeof value === "boolean" || value === "" || Number.isNaN(numericValue)) throw new InvalidArgumentError(`Invalid unit value ${value}`);
    return numericValue;
}
function normalizeObject(obj, normalizer) {
    const normalized = {};
    for(const u in obj){
        if (hasOwnProperty(obj, u)) {
            const v = obj[u];
            if (v === void 0 || v === null) continue;
            normalized[normalizer(u)] = asNumber(v);
        }
    }
    return normalized;
}
function formatOffset(offset2, format) {
    const hours = Math.trunc(Math.abs(offset2 / 60)), minutes = Math.trunc(Math.abs(offset2 % 60)), sign = offset2 >= 0 ? "+" : "-";
    switch(format){
        case "short":
            return `${sign}${padStart(hours, 2)}:${padStart(minutes, 2)}`;
        case "narrow":
            return `${sign}${hours}${minutes > 0 ? `:${minutes}` : ""}`;
        case "techie":
            return `${sign}${padStart(hours, 2)}${padStart(minutes, 2)}`;
        default:
            throw new RangeError(`Value format ${format} is out of range for property format`);
    }
}
function timeObject(obj) {
    return pick(obj, [
        "hour",
        "minute",
        "second",
        "millisecond"
    ]);
}
var ianaRegex = /[A-Za-z_+-]{1,256}(?::?\/[A-Za-z0-9_+-]{1,256}(?:\/[A-Za-z0-9_+-]{1,256})?)?/;
var monthsLong = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
];
var monthsShort = [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec"
];
var monthsNarrow = [
    "J",
    "F",
    "M",
    "A",
    "M",
    "J",
    "J",
    "A",
    "S",
    "O",
    "N",
    "D"
];
function months(length) {
    switch(length){
        case "narrow":
            return [
                ...monthsNarrow
            ];
        case "short":
            return [
                ...monthsShort
            ];
        case "long":
            return [
                ...monthsLong
            ];
        case "numeric":
            return [
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "10",
                "11",
                "12"
            ];
        case "2-digit":
            return [
                "01",
                "02",
                "03",
                "04",
                "05",
                "06",
                "07",
                "08",
                "09",
                "10",
                "11",
                "12"
            ];
        default:
            return null;
    }
}
var weekdaysLong = [
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday",
    "Sunday"
];
var weekdaysShort = [
    "Mon",
    "Tue",
    "Wed",
    "Thu",
    "Fri",
    "Sat",
    "Sun"
];
var weekdaysNarrow = [
    "M",
    "T",
    "W",
    "T",
    "F",
    "S",
    "S"
];
function weekdays(length) {
    switch(length){
        case "narrow":
            return [
                ...weekdaysNarrow
            ];
        case "short":
            return [
                ...weekdaysShort
            ];
        case "long":
            return [
                ...weekdaysLong
            ];
        case "numeric":
            return [
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7"
            ];
        default:
            return null;
    }
}
var meridiems = [
    "AM",
    "PM"
];
var erasLong = [
    "Before Christ",
    "Anno Domini"
];
var erasShort = [
    "BC",
    "AD"
];
var erasNarrow = [
    "B",
    "A"
];
function eras(length) {
    switch(length){
        case "narrow":
            return [
                ...erasNarrow
            ];
        case "short":
            return [
                ...erasShort
            ];
        case "long":
            return [
                ...erasLong
            ];
        default:
            return null;
    }
}
function meridiemForDateTime(dt) {
    return meridiems[dt.hour < 12 ? 0 : 1];
}
function weekdayForDateTime(dt, length) {
    return weekdays(length)[dt.weekday - 1];
}
function monthForDateTime(dt, length) {
    return months(length)[dt.month - 1];
}
function eraForDateTime(dt, length) {
    return eras(length)[dt.year < 0 ? 0 : 1];
}
function formatRelativeTime(unit, count, numeric = "always", narrow = false) {
    const units = {
        years: [
            "year",
            "yr."
        ],
        quarters: [
            "quarter",
            "qtr."
        ],
        months: [
            "month",
            "mo."
        ],
        weeks: [
            "week",
            "wk."
        ],
        days: [
            "day",
            "day",
            "days"
        ],
        hours: [
            "hour",
            "hr."
        ],
        minutes: [
            "minute",
            "min."
        ],
        seconds: [
            "second",
            "sec."
        ]
    };
    const lastable = [
        "hours",
        "minutes",
        "seconds"
    ].indexOf(unit) === -1;
    if (numeric === "auto" && lastable) {
        const isDay = unit === "days";
        switch(count){
            case 1:
                return isDay ? "tomorrow" : `next ${units[unit][0]}`;
            case -1:
                return isDay ? "yesterday" : `last ${units[unit][0]}`;
            case 0:
                return isDay ? "today" : `this ${units[unit][0]}`;
        }
    }
    const isInPast = Object.is(count, -0) || count < 0, fmtValue = Math.abs(count), singular = fmtValue === 1, lilUnits = units[unit], fmtUnit = narrow ? singular ? lilUnits[1] : lilUnits[2] || lilUnits[1] : singular ? units[unit][0] : unit;
    return isInPast ? `${fmtValue} ${fmtUnit} ago` : `in ${fmtValue} ${fmtUnit}`;
}
function stringifyTokens(splits, tokenToString) {
    let s2 = "";
    for (const token of splits){
        if (token.literal) {
            s2 += token.val;
        } else {
            s2 += tokenToString(token.val);
        }
    }
    return s2;
}
var macroTokenToFormatOpts = {
    D: DATE_SHORT,
    DD: DATE_MED,
    DDD: DATE_FULL,
    DDDD: DATE_HUGE,
    t: TIME_SIMPLE,
    tt: TIME_WITH_SECONDS,
    ttt: TIME_WITH_SHORT_OFFSET,
    tttt: TIME_WITH_LONG_OFFSET,
    T: TIME_24_SIMPLE,
    TT: TIME_24_WITH_SECONDS,
    TTT: TIME_24_WITH_SHORT_OFFSET,
    TTTT: TIME_24_WITH_LONG_OFFSET,
    f: DATETIME_SHORT,
    ff: DATETIME_MED,
    fff: DATETIME_FULL,
    ffff: DATETIME_HUGE,
    F: DATETIME_SHORT_WITH_SECONDS,
    FF: DATETIME_MED_WITH_SECONDS,
    FFF: DATETIME_FULL_WITH_SECONDS,
    FFFF: DATETIME_HUGE_WITH_SECONDS
};
var Formatter = class {
    static create(locale, opts = {}) {
        return new Formatter(locale, opts);
    }
    static parseFormat(fmt) {
        let current = null, currentFull = "", bracketed = false;
        const splits = [];
        for(let i = 0; i < fmt.length; i++){
            const c = fmt.charAt(i);
            if (c === "'") {
                if (currentFull.length > 0) {
                    splits.push({
                        literal: bracketed,
                        val: currentFull
                    });
                }
                current = null;
                currentFull = "";
                bracketed = !bracketed;
            } else if (bracketed) {
                currentFull += c;
            } else if (c === current) {
                currentFull += c;
            } else {
                if (currentFull.length > 0) {
                    splits.push({
                        literal: false,
                        val: currentFull
                    });
                }
                currentFull = c;
                current = c;
            }
        }
        if (currentFull.length > 0) {
            splits.push({
                literal: bracketed,
                val: currentFull
            });
        }
        return splits;
    }
    static macroTokenToFormatOpts(token) {
        return macroTokenToFormatOpts[token];
    }
    constructor(locale, formatOpts){
        this.opts = formatOpts;
        this.loc = locale;
        this.systemLoc = null;
    }
    formatWithSystemDefault(dt, opts) {
        if (this.systemLoc === null) {
            this.systemLoc = this.loc.redefaultToSystem();
        }
        const df = this.systemLoc.dtFormatter(dt, {
            ...this.opts,
            ...opts
        });
        return df.format();
    }
    formatDateTime(dt, opts = {}) {
        const df = this.loc.dtFormatter(dt, {
            ...this.opts,
            ...opts
        });
        return df.format();
    }
    formatDateTimeParts(dt, opts = {}) {
        const df = this.loc.dtFormatter(dt, {
            ...this.opts,
            ...opts
        });
        return df.formatToParts();
    }
    resolvedOptions(dt, opts = {}) {
        const df = this.loc.dtFormatter(dt, {
            ...this.opts,
            ...opts
        });
        return df.resolvedOptions();
    }
    num(n2, p = 0) {
        if (this.opts.forceSimple) {
            return padStart(n2, p);
        }
        const opts = {
            ...this.opts
        };
        if (p > 0) {
            opts.padTo = p;
        }
        return this.loc.numberFormatter(opts).format(n2);
    }
    formatDateTimeFromString(dt, fmt) {
        const knownEnglish = this.loc.listingMode() === "en", useDateTimeFormatter = this.loc.outputCalendar && this.loc.outputCalendar !== "gregory", string2 = (opts, extract)=>this.loc.extract(dt, opts, extract), formatOffset2 = (opts)=>{
            if (dt.isOffsetFixed && dt.offset === 0 && opts.allowZ) {
                return "Z";
            }
            return dt.isValid ? dt.zone.formatOffset(dt.ts, opts.format) : "";
        }, meridiem = ()=>knownEnglish ? meridiemForDateTime(dt) : string2({
                hour: "numeric",
                hourCycle: "h12"
            }, "dayperiod"), month = (length, standalone)=>knownEnglish ? monthForDateTime(dt, length) : string2(standalone ? {
                month: length
            } : {
                month: length,
                day: "numeric"
            }, "month"), weekday = (length, standalone)=>knownEnglish ? weekdayForDateTime(dt, length) : string2(standalone ? {
                weekday: length
            } : {
                weekday: length,
                month: "long",
                day: "numeric"
            }, "weekday"), maybeMacro = (token)=>{
            const formatOpts = Formatter.macroTokenToFormatOpts(token);
            if (formatOpts) {
                return this.formatWithSystemDefault(dt, formatOpts);
            } else {
                return token;
            }
        }, era = (length)=>knownEnglish ? eraForDateTime(dt, length) : string2({
                era: length
            }, "era"), tokenToString = (token)=>{
            switch(token){
                case "S":
                    return this.num(dt.millisecond);
                case "u":
                case "SSS":
                    return this.num(dt.millisecond, 3);
                case "s":
                    return this.num(dt.second);
                case "ss":
                    return this.num(dt.second, 2);
                case "uu":
                    return this.num(Math.floor(dt.millisecond / 10), 2);
                case "uuu":
                    return this.num(Math.floor(dt.millisecond / 100));
                case "m":
                    return this.num(dt.minute);
                case "mm":
                    return this.num(dt.minute, 2);
                case "h":
                    return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12);
                case "hh":
                    return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12, 2);
                case "H":
                    return this.num(dt.hour);
                case "HH":
                    return this.num(dt.hour, 2);
                case "Z":
                    return formatOffset2({
                        format: "narrow",
                        allowZ: this.opts.allowZ
                    });
                case "ZZ":
                    return formatOffset2({
                        format: "short",
                        allowZ: this.opts.allowZ
                    });
                case "ZZZ":
                    return formatOffset2({
                        format: "techie",
                        allowZ: this.opts.allowZ
                    });
                case "ZZZZ":
                    return dt.zone.offsetName(dt.ts, {
                        format: "short",
                        locale: this.loc.locale
                    });
                case "ZZZZZ":
                    return dt.zone.offsetName(dt.ts, {
                        format: "long",
                        locale: this.loc.locale
                    });
                case "z":
                    return dt.zoneName;
                case "a":
                    return meridiem();
                case "d":
                    return useDateTimeFormatter ? string2({
                        day: "numeric"
                    }, "day") : this.num(dt.day);
                case "dd":
                    return useDateTimeFormatter ? string2({
                        day: "2-digit"
                    }, "day") : this.num(dt.day, 2);
                case "c":
                    return this.num(dt.weekday);
                case "ccc":
                    return weekday("short", true);
                case "cccc":
                    return weekday("long", true);
                case "ccccc":
                    return weekday("narrow", true);
                case "E":
                    return this.num(dt.weekday);
                case "EEE":
                    return weekday("short", false);
                case "EEEE":
                    return weekday("long", false);
                case "EEEEE":
                    return weekday("narrow", false);
                case "L":
                    return useDateTimeFormatter ? string2({
                        month: "numeric",
                        day: "numeric"
                    }, "month") : this.num(dt.month);
                case "LL":
                    return useDateTimeFormatter ? string2({
                        month: "2-digit",
                        day: "numeric"
                    }, "month") : this.num(dt.month, 2);
                case "LLL":
                    return month("short", true);
                case "LLLL":
                    return month("long", true);
                case "LLLLL":
                    return month("narrow", true);
                case "M":
                    return useDateTimeFormatter ? string2({
                        month: "numeric"
                    }, "month") : this.num(dt.month);
                case "MM":
                    return useDateTimeFormatter ? string2({
                        month: "2-digit"
                    }, "month") : this.num(dt.month, 2);
                case "MMM":
                    return month("short", false);
                case "MMMM":
                    return month("long", false);
                case "MMMMM":
                    return month("narrow", false);
                case "y":
                    return useDateTimeFormatter ? string2({
                        year: "numeric"
                    }, "year") : this.num(dt.year);
                case "yy":
                    return useDateTimeFormatter ? string2({
                        year: "2-digit"
                    }, "year") : this.num(dt.year.toString().slice(-2), 2);
                case "yyyy":
                    return useDateTimeFormatter ? string2({
                        year: "numeric"
                    }, "year") : this.num(dt.year, 4);
                case "yyyyyy":
                    return useDateTimeFormatter ? string2({
                        year: "numeric"
                    }, "year") : this.num(dt.year, 6);
                case "G":
                    return era("short");
                case "GG":
                    return era("long");
                case "GGGGG":
                    return era("narrow");
                case "kk":
                    return this.num(dt.weekYear.toString().slice(-2), 2);
                case "kkkk":
                    return this.num(dt.weekYear, 4);
                case "W":
                    return this.num(dt.weekNumber);
                case "WW":
                    return this.num(dt.weekNumber, 2);
                case "o":
                    return this.num(dt.ordinal);
                case "ooo":
                    return this.num(dt.ordinal, 3);
                case "q":
                    return this.num(dt.quarter);
                case "qq":
                    return this.num(dt.quarter, 2);
                case "X":
                    return this.num(Math.floor(dt.ts / 1e3));
                case "x":
                    return this.num(dt.ts);
                default:
                    return maybeMacro(token);
            }
        };
        return stringifyTokens(Formatter.parseFormat(fmt), tokenToString);
    }
    formatDurationFromString(dur, fmt) {
        const tokenToField = (token)=>{
            switch(token[0]){
                case "S":
                    return "millisecond";
                case "s":
                    return "second";
                case "m":
                    return "minute";
                case "h":
                    return "hour";
                case "d":
                    return "day";
                case "w":
                    return "week";
                case "M":
                    return "month";
                case "y":
                    return "year";
                default:
                    return null;
            }
        }, tokenToString = (lildur)=>(token)=>{
                const mapped = tokenToField(token);
                if (mapped) {
                    return this.num(lildur.get(mapped), token.length);
                } else {
                    return token;
                }
            }, tokens = Formatter.parseFormat(fmt), realTokens = tokens.reduce((found, { literal , val  })=>literal ? found : found.concat(val), []), collapsed = dur.shiftTo(...realTokens.map(tokenToField).filter((t)=>t));
        return stringifyTokens(tokens, tokenToString(collapsed));
    }
};
var Invalid = class {
    constructor(reason, explanation){
        this.reason = reason;
        this.explanation = explanation;
    }
    toMessage() {
        if (this.explanation) {
            return `${this.reason}: ${this.explanation}`;
        } else {
            return this.reason;
        }
    }
};
var Zone = class {
    get type() {
        throw new ZoneIsAbstractError();
    }
    get name() {
        throw new ZoneIsAbstractError();
    }
    get ianaName() {
        return this.name;
    }
    get isUniversal() {
        throw new ZoneIsAbstractError();
    }
    offsetName(ts, opts) {
        throw new ZoneIsAbstractError();
    }
    formatOffset(ts, format) {
        throw new ZoneIsAbstractError();
    }
    offset(ts) {
        throw new ZoneIsAbstractError();
    }
    equals(otherZone) {
        throw new ZoneIsAbstractError();
    }
    get isValid() {
        throw new ZoneIsAbstractError();
    }
};
var singleton = null;
var SystemZone = class extends Zone {
    static get instance() {
        if (singleton === null) {
            singleton = new SystemZone();
        }
        return singleton;
    }
    get type() {
        return "system";
    }
    get name() {
        return new Intl.DateTimeFormat().resolvedOptions().timeZone;
    }
    get isUniversal() {
        return false;
    }
    offsetName(ts, { format , locale  }) {
        return parseZoneInfo(ts, format, locale);
    }
    formatOffset(ts, format) {
        return formatOffset(this.offset(ts), format);
    }
    offset(ts) {
        return -new Date(ts).getTimezoneOffset();
    }
    equals(otherZone) {
        return otherZone.type === "system";
    }
    get isValid() {
        return true;
    }
};
var dtfCache = {};
function makeDTF(zone) {
    if (!dtfCache[zone]) {
        dtfCache[zone] = new Intl.DateTimeFormat("en-US", {
            hour12: false,
            timeZone: zone,
            year: "numeric",
            month: "2-digit",
            day: "2-digit",
            hour: "2-digit",
            minute: "2-digit",
            second: "2-digit",
            era: "short"
        });
    }
    return dtfCache[zone];
}
var typeToPos = {
    year: 0,
    month: 1,
    day: 2,
    era: 3,
    hour: 4,
    minute: 5,
    second: 6
};
function hackyOffset(dtf, date) {
    const formatted = dtf.format(date).replace(/\u200E/g, ""), parsed = /(\d+)\/(\d+)\/(\d+) (AD|BC),? (\d+):(\d+):(\d+)/.exec(formatted), [, fMonth, fDay, fYear, fadOrBc, fHour, fMinute, fSecond] = parsed;
    return [
        fYear,
        fMonth,
        fDay,
        fadOrBc,
        fHour,
        fMinute,
        fSecond
    ];
}
function partsOffset(dtf, date) {
    const formatted = dtf.formatToParts(date);
    const filled = [];
    for(let i = 0; i < formatted.length; i++){
        const { type , value  } = formatted[i];
        const pos = typeToPos[type];
        if (type === "era") {
            filled[pos] = value;
        } else if (!isUndefined(pos)) {
            filled[pos] = parseInt(value, 10);
        }
    }
    return filled;
}
var ianaZoneCache = {};
var IANAZone = class extends Zone {
    static create(name) {
        if (!ianaZoneCache[name]) {
            ianaZoneCache[name] = new IANAZone(name);
        }
        return ianaZoneCache[name];
    }
    static resetCache() {
        ianaZoneCache = {};
        dtfCache = {};
    }
    static isValidSpecifier(s2) {
        return this.isValidZone(s2);
    }
    static isValidZone(zone) {
        if (!zone) {
            return false;
        }
        try {
            new Intl.DateTimeFormat("en-US", {
                timeZone: zone
            }).format();
            return true;
        } catch (e) {
            return false;
        }
    }
    constructor(name){
        super();
        this.zoneName = name;
        this.valid = IANAZone.isValidZone(name);
    }
    get type() {
        return "iana";
    }
    get name() {
        return this.zoneName;
    }
    get isUniversal() {
        return false;
    }
    offsetName(ts, { format , locale  }) {
        return parseZoneInfo(ts, format, locale, this.name);
    }
    formatOffset(ts, format) {
        return formatOffset(this.offset(ts), format);
    }
    offset(ts) {
        const date = new Date(ts);
        if (isNaN(date)) return NaN;
        const dtf = makeDTF(this.name);
        let [year, month, day, adOrBc, hour, minute, second] = dtf.formatToParts ? partsOffset(dtf, date) : hackyOffset(dtf, date);
        if (adOrBc === "BC") {
            year = -Math.abs(year) + 1;
        }
        const adjustedHour = hour === 24 ? 0 : hour;
        const asUTC = objToLocalTS({
            year,
            month,
            day,
            hour: adjustedHour,
            minute,
            second,
            millisecond: 0
        });
        let asTS = +date;
        const over = asTS % 1e3;
        asTS -= over >= 0 ? over : 1e3 + over;
        return (asUTC - asTS) / (60 * 1e3);
    }
    equals(otherZone) {
        return otherZone.type === "iana" && otherZone.name === this.name;
    }
    get isValid() {
        return this.valid;
    }
};
var singleton2 = null;
var FixedOffsetZone = class extends Zone {
    static get utcInstance() {
        if (singleton2 === null) {
            singleton2 = new FixedOffsetZone(0);
        }
        return singleton2;
    }
    static instance(offset2) {
        return offset2 === 0 ? FixedOffsetZone.utcInstance : new FixedOffsetZone(offset2);
    }
    static parseSpecifier(s2) {
        if (s2) {
            const r = s2.match(/^utc(?:([+-]\d{1,2})(?::(\d{2}))?)?$/i);
            if (r) {
                return new FixedOffsetZone(signedOffset(r[1], r[2]));
            }
        }
        return null;
    }
    constructor(offset2){
        super();
        this.fixed = offset2;
    }
    get type() {
        return "fixed";
    }
    get name() {
        return this.fixed === 0 ? "UTC" : `UTC${formatOffset(this.fixed, "narrow")}`;
    }
    get ianaName() {
        if (this.fixed === 0) {
            return "Etc/UTC";
        } else {
            return `Etc/GMT${formatOffset(-this.fixed, "narrow")}`;
        }
    }
    offsetName() {
        return this.name;
    }
    formatOffset(ts, format) {
        return formatOffset(this.fixed, format);
    }
    get isUniversal() {
        return true;
    }
    offset() {
        return this.fixed;
    }
    equals(otherZone) {
        return otherZone.type === "fixed" && otherZone.fixed === this.fixed;
    }
    get isValid() {
        return true;
    }
};
var InvalidZone = class extends Zone {
    constructor(zoneName){
        super();
        this.zoneName = zoneName;
    }
    get type() {
        return "invalid";
    }
    get name() {
        return this.zoneName;
    }
    get isUniversal() {
        return false;
    }
    offsetName() {
        return null;
    }
    formatOffset() {
        return "";
    }
    offset() {
        return NaN;
    }
    equals() {
        return false;
    }
    get isValid() {
        return false;
    }
};
function normalizeZone(input, defaultZone2) {
    if (isUndefined(input) || input === null) {
        return defaultZone2;
    } else if (input instanceof Zone) {
        return input;
    } else if (isString(input)) {
        const lowered = input.toLowerCase();
        if (lowered === "default") return defaultZone2;
        else if (lowered === "local" || lowered === "system") return SystemZone.instance;
        else if (lowered === "utc" || lowered === "gmt") return FixedOffsetZone.utcInstance;
        else return FixedOffsetZone.parseSpecifier(lowered) || IANAZone.create(input);
    } else if (isNumber(input)) {
        return FixedOffsetZone.instance(input);
    } else if (typeof input === "object" && input.offset && typeof input.offset === "number") {
        return input;
    } else {
        return new InvalidZone(input);
    }
}
var now = ()=>Date.now();
var defaultZone = "system";
var defaultLocale = null;
var defaultNumberingSystem = null;
var defaultOutputCalendar = null;
var throwOnInvalid;
var Settings = class {
    static get now() {
        return now;
    }
    static set now(n2) {
        now = n2;
    }
    static set defaultZone(zone) {
        defaultZone = zone;
    }
    static get defaultZone() {
        return normalizeZone(defaultZone, SystemZone.instance);
    }
    static get defaultLocale() {
        return defaultLocale;
    }
    static set defaultLocale(locale) {
        defaultLocale = locale;
    }
    static get defaultNumberingSystem() {
        return defaultNumberingSystem;
    }
    static set defaultNumberingSystem(numberingSystem) {
        defaultNumberingSystem = numberingSystem;
    }
    static get defaultOutputCalendar() {
        return defaultOutputCalendar;
    }
    static set defaultOutputCalendar(outputCalendar) {
        defaultOutputCalendar = outputCalendar;
    }
    static get throwOnInvalid() {
        return throwOnInvalid;
    }
    static set throwOnInvalid(t) {
        throwOnInvalid = t;
    }
    static resetCaches() {
        Locale.resetCache();
        IANAZone.resetCache();
    }
};
var intlLFCache = {};
function getCachedLF(locString, opts = {}) {
    const key = JSON.stringify([
        locString,
        opts
    ]);
    let dtf = intlLFCache[key];
    if (!dtf) {
        dtf = new Intl.ListFormat(locString, opts);
        intlLFCache[key] = dtf;
    }
    return dtf;
}
var intlDTCache = {};
function getCachedDTF(locString, opts = {}) {
    const key = JSON.stringify([
        locString,
        opts
    ]);
    let dtf = intlDTCache[key];
    if (!dtf) {
        dtf = new Intl.DateTimeFormat(locString, opts);
        intlDTCache[key] = dtf;
    }
    return dtf;
}
var intlNumCache = {};
function getCachedINF(locString, opts = {}) {
    const key = JSON.stringify([
        locString,
        opts
    ]);
    let inf = intlNumCache[key];
    if (!inf) {
        inf = new Intl.NumberFormat(locString, opts);
        intlNumCache[key] = inf;
    }
    return inf;
}
var intlRelCache = {};
function getCachedRTF(locString, opts = {}) {
    const { base , ...cacheKeyOpts } = opts;
    const key = JSON.stringify([
        locString,
        cacheKeyOpts
    ]);
    let inf = intlRelCache[key];
    if (!inf) {
        inf = new Intl.RelativeTimeFormat(locString, opts);
        intlRelCache[key] = inf;
    }
    return inf;
}
var sysLocaleCache = null;
function systemLocale() {
    if (sysLocaleCache) {
        return sysLocaleCache;
    } else {
        sysLocaleCache = new Intl.DateTimeFormat().resolvedOptions().locale;
        return sysLocaleCache;
    }
}
function parseLocaleString(localeStr) {
    const uIndex = localeStr.indexOf("-u-");
    if (uIndex === -1) {
        return [
            localeStr
        ];
    } else {
        let options;
        const smaller = localeStr.substring(0, uIndex);
        try {
            options = getCachedDTF(localeStr).resolvedOptions();
        } catch (e) {
            options = getCachedDTF(smaller).resolvedOptions();
        }
        const { numberingSystem , calendar  } = options;
        return [
            smaller,
            numberingSystem,
            calendar
        ];
    }
}
function intlConfigString(localeStr, numberingSystem, outputCalendar) {
    if (outputCalendar || numberingSystem) {
        localeStr += "-u";
        if (outputCalendar) {
            localeStr += `-ca-${outputCalendar}`;
        }
        if (numberingSystem) {
            localeStr += `-nu-${numberingSystem}`;
        }
        return localeStr;
    } else {
        return localeStr;
    }
}
function mapMonths(f) {
    const ms = [];
    for(let i = 1; i <= 12; i++){
        const dt = DateTime.utc(2016, i, 1);
        ms.push(f(dt));
    }
    return ms;
}
function mapWeekdays(f) {
    const ms = [];
    for(let i = 1; i <= 7; i++){
        const dt = DateTime.utc(2016, 11, 13 + i);
        ms.push(f(dt));
    }
    return ms;
}
function listStuff(loc, length, defaultOK, englishFn, intlFn) {
    const mode = loc.listingMode(defaultOK);
    if (mode === "error") {
        return null;
    } else if (mode === "en") {
        return englishFn(length);
    } else {
        return intlFn(length);
    }
}
function supportsFastNumbers(loc) {
    if (loc.numberingSystem && loc.numberingSystem !== "latn") {
        return false;
    } else {
        return loc.numberingSystem === "latn" || !loc.locale || loc.locale.startsWith("en") || new Intl.DateTimeFormat(loc.intl).resolvedOptions().numberingSystem === "latn";
    }
}
var PolyNumberFormatter = class {
    constructor(intl, forceSimple, opts){
        this.padTo = opts.padTo || 0;
        this.floor = opts.floor || false;
        const { padTo , floor , ...otherOpts } = opts;
        if (!forceSimple || Object.keys(otherOpts).length > 0) {
            const intlOpts = {
                useGrouping: false,
                ...opts
            };
            if (opts.padTo > 0) intlOpts.minimumIntegerDigits = opts.padTo;
            this.inf = getCachedINF(intl, intlOpts);
        }
    }
    format(i) {
        if (this.inf) {
            const fixed = this.floor ? Math.floor(i) : i;
            return this.inf.format(fixed);
        } else {
            const fixed1 = this.floor ? Math.floor(i) : roundTo(i, 3);
            return padStart(fixed1, this.padTo);
        }
    }
};
var PolyDateFormatter = class {
    constructor(dt, intl, opts){
        this.opts = opts;
        let z;
        if (dt.zone.isUniversal) {
            const gmtOffset = -1 * (dt.offset / 60);
            const offsetZ = gmtOffset >= 0 ? `Etc/GMT+${gmtOffset}` : `Etc/GMT${gmtOffset}`;
            if (dt.offset !== 0 && IANAZone.create(offsetZ).valid) {
                z = offsetZ;
                this.dt = dt;
            } else {
                z = "UTC";
                if (opts.timeZoneName) {
                    this.dt = dt;
                } else {
                    this.dt = dt.offset === 0 ? dt : DateTime.fromMillis(dt.ts + dt.offset * 60 * 1e3);
                }
            }
        } else if (dt.zone.type === "system") {
            this.dt = dt;
        } else {
            this.dt = dt;
            z = dt.zone.name;
        }
        const intlOpts = {
            ...this.opts
        };
        if (z) {
            intlOpts.timeZone = z;
        }
        this.dtf = getCachedDTF(intl, intlOpts);
    }
    format() {
        return this.dtf.format(this.dt.toJSDate());
    }
    formatToParts() {
        return this.dtf.formatToParts(this.dt.toJSDate());
    }
    resolvedOptions() {
        return this.dtf.resolvedOptions();
    }
};
var PolyRelFormatter = class {
    constructor(intl, isEnglish, opts){
        this.opts = {
            style: "long",
            ...opts
        };
        if (!isEnglish && hasRelative()) {
            this.rtf = getCachedRTF(intl, opts);
        }
    }
    format(count, unit) {
        if (this.rtf) {
            return this.rtf.format(count, unit);
        } else {
            return formatRelativeTime(unit, count, this.opts.numeric, this.opts.style !== "long");
        }
    }
    formatToParts(count, unit) {
        if (this.rtf) {
            return this.rtf.formatToParts(count, unit);
        } else {
            return [];
        }
    }
};
var Locale = class {
    static fromOpts(opts) {
        return Locale.create(opts.locale, opts.numberingSystem, opts.outputCalendar, opts.defaultToEN);
    }
    static create(locale, numberingSystem, outputCalendar, defaultToEN = false) {
        const specifiedLocale = locale || Settings.defaultLocale;
        const localeR = specifiedLocale || (defaultToEN ? "en-US" : systemLocale());
        const numberingSystemR = numberingSystem || Settings.defaultNumberingSystem;
        const outputCalendarR = outputCalendar || Settings.defaultOutputCalendar;
        return new Locale(localeR, numberingSystemR, outputCalendarR, specifiedLocale);
    }
    static resetCache() {
        sysLocaleCache = null;
        intlDTCache = {};
        intlNumCache = {};
        intlRelCache = {};
    }
    static fromObject({ locale , numberingSystem , outputCalendar  } = {}) {
        return Locale.create(locale, numberingSystem, outputCalendar);
    }
    constructor(locale, numbering, outputCalendar, specifiedLocale){
        const [parsedLocale, parsedNumberingSystem, parsedOutputCalendar] = parseLocaleString(locale);
        this.locale = parsedLocale;
        this.numberingSystem = numbering || parsedNumberingSystem || null;
        this.outputCalendar = outputCalendar || parsedOutputCalendar || null;
        this.intl = intlConfigString(this.locale, this.numberingSystem, this.outputCalendar);
        this.weekdaysCache = {
            format: {},
            standalone: {}
        };
        this.monthsCache = {
            format: {},
            standalone: {}
        };
        this.meridiemCache = null;
        this.eraCache = {};
        this.specifiedLocale = specifiedLocale;
        this.fastNumbersCached = null;
    }
    get fastNumbers() {
        if (this.fastNumbersCached == null) {
            this.fastNumbersCached = supportsFastNumbers(this);
        }
        return this.fastNumbersCached;
    }
    listingMode() {
        const isActuallyEn = this.isEnglish();
        const hasNoWeirdness = (this.numberingSystem === null || this.numberingSystem === "latn") && (this.outputCalendar === null || this.outputCalendar === "gregory");
        return isActuallyEn && hasNoWeirdness ? "en" : "intl";
    }
    clone(alts) {
        if (!alts || Object.getOwnPropertyNames(alts).length === 0) {
            return this;
        } else {
            return Locale.create(alts.locale || this.specifiedLocale, alts.numberingSystem || this.numberingSystem, alts.outputCalendar || this.outputCalendar, alts.defaultToEN || false);
        }
    }
    redefaultToEN(alts = {}) {
        return this.clone({
            ...alts,
            defaultToEN: true
        });
    }
    redefaultToSystem(alts = {}) {
        return this.clone({
            ...alts,
            defaultToEN: false
        });
    }
    months(length, format = false, defaultOK = true) {
        return listStuff(this, length, defaultOK, months, ()=>{
            const intl = format ? {
                month: length,
                day: "numeric"
            } : {
                month: length
            }, formatStr = format ? "format" : "standalone";
            if (!this.monthsCache[formatStr][length]) {
                this.monthsCache[formatStr][length] = mapMonths((dt)=>this.extract(dt, intl, "month"));
            }
            return this.monthsCache[formatStr][length];
        });
    }
    weekdays(length, format = false, defaultOK = true) {
        return listStuff(this, length, defaultOK, weekdays, ()=>{
            const intl = format ? {
                weekday: length,
                year: "numeric",
                month: "long",
                day: "numeric"
            } : {
                weekday: length
            }, formatStr = format ? "format" : "standalone";
            if (!this.weekdaysCache[formatStr][length]) {
                this.weekdaysCache[formatStr][length] = mapWeekdays((dt)=>this.extract(dt, intl, "weekday"));
            }
            return this.weekdaysCache[formatStr][length];
        });
    }
    meridiems(defaultOK = true) {
        return listStuff(this, void 0, defaultOK, ()=>meridiems, ()=>{
            if (!this.meridiemCache) {
                const intl = {
                    hour: "numeric",
                    hourCycle: "h12"
                };
                this.meridiemCache = [
                    DateTime.utc(2016, 11, 13, 9),
                    DateTime.utc(2016, 11, 13, 19)
                ].map((dt)=>this.extract(dt, intl, "dayperiod"));
            }
            return this.meridiemCache;
        });
    }
    eras(length, defaultOK = true) {
        return listStuff(this, length, defaultOK, eras, ()=>{
            const intl = {
                era: length
            };
            if (!this.eraCache[length]) {
                this.eraCache[length] = [
                    DateTime.utc(-40, 1, 1),
                    DateTime.utc(2017, 1, 1)
                ].map((dt)=>this.extract(dt, intl, "era"));
            }
            return this.eraCache[length];
        });
    }
    extract(dt, intlOpts, field) {
        const df = this.dtFormatter(dt, intlOpts), results = df.formatToParts(), matching = results.find((m)=>m.type.toLowerCase() === field);
        return matching ? matching.value : null;
    }
    numberFormatter(opts = {}) {
        return new PolyNumberFormatter(this.intl, opts.forceSimple || this.fastNumbers, opts);
    }
    dtFormatter(dt, intlOpts = {}) {
        return new PolyDateFormatter(dt, this.intl, intlOpts);
    }
    relFormatter(opts = {}) {
        return new PolyRelFormatter(this.intl, this.isEnglish(), opts);
    }
    listFormatter(opts = {}) {
        return getCachedLF(this.intl, opts);
    }
    isEnglish() {
        return this.locale === "en" || this.locale.toLowerCase() === "en-us" || new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith("en-us");
    }
    equals(other) {
        return this.locale === other.locale && this.numberingSystem === other.numberingSystem && this.outputCalendar === other.outputCalendar;
    }
};
function combineRegexes(...regexes) {
    const full = regexes.reduce((f, r)=>f + r.source, "");
    return RegExp(`^${full}$`);
}
function combineExtractors(...extractors) {
    return (m)=>extractors.reduce(([mergedVals, mergedZone, cursor], ex)=>{
            const [val, zone, next] = ex(m, cursor);
            return [
                {
                    ...mergedVals,
                    ...val
                },
                zone || mergedZone,
                next
            ];
        }, [
            {},
            null,
            1
        ]).slice(0, 2);
}
function parse(s2, ...patterns) {
    if (s2 == null) {
        return [
            null,
            null
        ];
    }
    for (const [regex, extractor] of patterns){
        const m = regex.exec(s2);
        if (m) {
            return extractor(m);
        }
    }
    return [
        null,
        null
    ];
}
function simpleParse(...keys) {
    return (match2, cursor)=>{
        const ret = {};
        let i;
        for(i = 0; i < keys.length; i++){
            ret[keys[i]] = parseInteger(match2[cursor + i]);
        }
        return [
            ret,
            null,
            cursor + i
        ];
    };
}
var offsetRegex = /(?:(Z)|([+-]\d\d)(?::?(\d\d))?)/;
var isoExtendedZone = `(?:${offsetRegex.source}?(?:\\[(${ianaRegex.source})\\])?)?`;
var isoTimeBaseRegex = /(\d\d)(?::?(\d\d)(?::?(\d\d)(?:[.,](\d{1,30}))?)?)?/;
var isoTimeRegex = RegExp(`${isoTimeBaseRegex.source}${isoExtendedZone}`);
var isoTimeExtensionRegex = RegExp(`(?:T${isoTimeRegex.source})?`);
var isoYmdRegex = /([+-]\d{6}|\d{4})(?:-?(\d\d)(?:-?(\d\d))?)?/;
var isoWeekRegex = /(\d{4})-?W(\d\d)(?:-?(\d))?/;
var isoOrdinalRegex = /(\d{4})-?(\d{3})/;
var extractISOWeekData = simpleParse("weekYear", "weekNumber", "weekDay");
var extractISOOrdinalData = simpleParse("year", "ordinal");
var sqlYmdRegex = /(\d{4})-(\d\d)-(\d\d)/;
var sqlTimeRegex = RegExp(`${isoTimeBaseRegex.source} ?(?:${offsetRegex.source}|(${ianaRegex.source}))?`);
var sqlTimeExtensionRegex = RegExp(`(?: ${sqlTimeRegex.source})?`);
function int(match2, pos, fallback) {
    const m = match2[pos];
    return isUndefined(m) ? fallback : parseInteger(m);
}
function extractISOYmd(match2, cursor) {
    const item = {
        year: int(match2, cursor),
        month: int(match2, cursor + 1, 1),
        day: int(match2, cursor + 2, 1)
    };
    return [
        item,
        null,
        cursor + 3
    ];
}
function extractISOTime(match2, cursor) {
    const item = {
        hours: int(match2, cursor, 0),
        minutes: int(match2, cursor + 1, 0),
        seconds: int(match2, cursor + 2, 0),
        milliseconds: parseMillis(match2[cursor + 3])
    };
    return [
        item,
        null,
        cursor + 4
    ];
}
function extractISOOffset(match2, cursor) {
    const local = !match2[cursor] && !match2[cursor + 1], fullOffset = signedOffset(match2[cursor + 1], match2[cursor + 2]), zone = local ? null : FixedOffsetZone.instance(fullOffset);
    return [
        {},
        zone,
        cursor + 3
    ];
}
function extractIANAZone(match2, cursor) {
    const zone = match2[cursor] ? IANAZone.create(match2[cursor]) : null;
    return [
        {},
        zone,
        cursor + 1
    ];
}
var isoTimeOnly = RegExp(`^T?${isoTimeBaseRegex.source}$`);
var isoDuration = /^-?P(?:(?:(-?\d{1,20}(?:\.\d{1,20})?)Y)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20}(?:\.\d{1,20})?)W)?(?:(-?\d{1,20}(?:\.\d{1,20})?)D)?(?:T(?:(-?\d{1,20}(?:\.\d{1,20})?)H)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20})(?:[.,](-?\d{1,20}))?S)?)?)$/;
function extractISODuration(match2) {
    const [s2, yearStr, monthStr, weekStr, dayStr, hourStr, minuteStr, secondStr, millisecondsStr] = match2;
    const hasNegativePrefix = s2[0] === "-";
    const negativeSeconds = secondStr && secondStr[0] === "-";
    const maybeNegate = (num, force = false)=>num !== void 0 && (force || num && hasNegativePrefix) ? -num : num;
    return [
        {
            years: maybeNegate(parseFloating(yearStr)),
            months: maybeNegate(parseFloating(monthStr)),
            weeks: maybeNegate(parseFloating(weekStr)),
            days: maybeNegate(parseFloating(dayStr)),
            hours: maybeNegate(parseFloating(hourStr)),
            minutes: maybeNegate(parseFloating(minuteStr)),
            seconds: maybeNegate(parseFloating(secondStr), secondStr === "-0"),
            milliseconds: maybeNegate(parseMillis(millisecondsStr), negativeSeconds)
        }
    ];
}
var obsOffsets = {
    GMT: 0,
    EDT: -4 * 60,
    EST: -5 * 60,
    CDT: -5 * 60,
    CST: -6 * 60,
    MDT: -6 * 60,
    MST: -7 * 60,
    PDT: -7 * 60,
    PST: -8 * 60
};
function fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
    const result = {
        year: yearStr.length === 2 ? untruncateYear(parseInteger(yearStr)) : parseInteger(yearStr),
        month: monthsShort.indexOf(monthStr) + 1,
        day: parseInteger(dayStr),
        hour: parseInteger(hourStr),
        minute: parseInteger(minuteStr)
    };
    if (secondStr) result.second = parseInteger(secondStr);
    if (weekdayStr) {
        result.weekday = weekdayStr.length > 3 ? weekdaysLong.indexOf(weekdayStr) + 1 : weekdaysShort.indexOf(weekdayStr) + 1;
    }
    return result;
}
var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\d\d)(\d\d)))$/;
function extractRFC2822(match2) {
    const [, weekdayStr, dayStr, monthStr, yearStr, hourStr, minuteStr, secondStr, obsOffset, milOffset, offHourStr, offMinuteStr] = match2, result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
    let offset2;
    if (obsOffset) {
        offset2 = obsOffsets[obsOffset];
    } else if (milOffset) {
        offset2 = 0;
    } else {
        offset2 = signedOffset(offHourStr, offMinuteStr);
    }
    return [
        result,
        new FixedOffsetZone(offset2)
    ];
}
function preprocessRFC2822(s2) {
    return s2.replace(/\([^)]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").trim();
}
var rfc1123 = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d\d):(\d\d):(\d\d) GMT$/;
var rfc850 = /^(Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d\d) (\d\d):(\d\d):(\d\d) GMT$/;
var ascii = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \d|\d\d) (\d\d):(\d\d):(\d\d) (\d{4})$/;
function extractRFC1123Or850(match2) {
    const [, weekdayStr, dayStr, monthStr, yearStr, hourStr, minuteStr, secondStr] = match2, result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
    return [
        result,
        FixedOffsetZone.utcInstance
    ];
}
function extractASCII(match2) {
    const [, weekdayStr, monthStr, dayStr, hourStr, minuteStr, secondStr, yearStr] = match2, result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
    return [
        result,
        FixedOffsetZone.utcInstance
    ];
}
var isoYmdWithTimeExtensionRegex = combineRegexes(isoYmdRegex, isoTimeExtensionRegex);
var isoWeekWithTimeExtensionRegex = combineRegexes(isoWeekRegex, isoTimeExtensionRegex);
var isoOrdinalWithTimeExtensionRegex = combineRegexes(isoOrdinalRegex, isoTimeExtensionRegex);
var isoTimeCombinedRegex = combineRegexes(isoTimeRegex);
var extractISOYmdTimeAndOffset = combineExtractors(extractISOYmd, extractISOTime, extractISOOffset, extractIANAZone);
var extractISOWeekTimeAndOffset = combineExtractors(extractISOWeekData, extractISOTime, extractISOOffset, extractIANAZone);
var extractISOOrdinalDateAndTime = combineExtractors(extractISOOrdinalData, extractISOTime, extractISOOffset, extractIANAZone);
var extractISOTimeAndOffset = combineExtractors(extractISOTime, extractISOOffset, extractIANAZone);
function parseISODate(s2) {
    return parse(s2, [
        isoYmdWithTimeExtensionRegex,
        extractISOYmdTimeAndOffset
    ], [
        isoWeekWithTimeExtensionRegex,
        extractISOWeekTimeAndOffset
    ], [
        isoOrdinalWithTimeExtensionRegex,
        extractISOOrdinalDateAndTime
    ], [
        isoTimeCombinedRegex,
        extractISOTimeAndOffset
    ]);
}
function parseRFC2822Date(s2) {
    return parse(preprocessRFC2822(s2), [
        rfc2822,
        extractRFC2822
    ]);
}
function parseHTTPDate(s2) {
    return parse(s2, [
        rfc1123,
        extractRFC1123Or850
    ], [
        rfc850,
        extractRFC1123Or850
    ], [
        ascii,
        extractASCII
    ]);
}
function parseISODuration(s2) {
    return parse(s2, [
        isoDuration,
        extractISODuration
    ]);
}
var extractISOTimeOnly = combineExtractors(extractISOTime);
function parseISOTimeOnly(s2) {
    return parse(s2, [
        isoTimeOnly,
        extractISOTimeOnly
    ]);
}
var sqlYmdWithTimeExtensionRegex = combineRegexes(sqlYmdRegex, sqlTimeExtensionRegex);
var sqlTimeCombinedRegex = combineRegexes(sqlTimeRegex);
var extractISOTimeOffsetAndIANAZone = combineExtractors(extractISOTime, extractISOOffset, extractIANAZone);
function parseSQL(s2) {
    return parse(s2, [
        sqlYmdWithTimeExtensionRegex,
        extractISOYmdTimeAndOffset
    ], [
        sqlTimeCombinedRegex,
        extractISOTimeOffsetAndIANAZone
    ]);
}
var INVALID2 = "Invalid Duration";
var lowOrderMatrix = {
    weeks: {
        days: 7,
        hours: 7 * 24,
        minutes: 7 * 24 * 60,
        seconds: 7 * 24 * 60 * 60,
        milliseconds: 7 * 24 * 60 * 60 * 1e3
    },
    days: {
        hours: 24,
        minutes: 24 * 60,
        seconds: 24 * 60 * 60,
        milliseconds: 24 * 60 * 60 * 1e3
    },
    hours: {
        minutes: 60,
        seconds: 60 * 60,
        milliseconds: 60 * 60 * 1e3
    },
    minutes: {
        seconds: 60,
        milliseconds: 60 * 1e3
    },
    seconds: {
        milliseconds: 1e3
    }
};
var casualMatrix = {
    years: {
        quarters: 4,
        months: 12,
        weeks: 52,
        days: 365,
        hours: 365 * 24,
        minutes: 365 * 24 * 60,
        seconds: 365 * 24 * 60 * 60,
        milliseconds: 365 * 24 * 60 * 60 * 1e3
    },
    quarters: {
        months: 3,
        weeks: 13,
        days: 91,
        hours: 91 * 24,
        minutes: 91 * 24 * 60,
        seconds: 91 * 24 * 60 * 60,
        milliseconds: 91 * 24 * 60 * 60 * 1e3
    },
    months: {
        weeks: 4,
        days: 30,
        hours: 30 * 24,
        minutes: 30 * 24 * 60,
        seconds: 30 * 24 * 60 * 60,
        milliseconds: 30 * 24 * 60 * 60 * 1e3
    },
    ...lowOrderMatrix
};
var daysInYearAccurate = 146097 / 400;
var daysInMonthAccurate = 146097 / 4800;
var accurateMatrix = {
    years: {
        quarters: 4,
        months: 12,
        weeks: daysInYearAccurate / 7,
        days: daysInYearAccurate,
        hours: daysInYearAccurate * 24,
        minutes: daysInYearAccurate * 24 * 60,
        seconds: daysInYearAccurate * 24 * 60 * 60,
        milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1e3
    },
    quarters: {
        months: 3,
        weeks: daysInYearAccurate / 28,
        days: daysInYearAccurate / 4,
        hours: daysInYearAccurate * 24 / 4,
        minutes: daysInYearAccurate * 24 * 60 / 4,
        seconds: daysInYearAccurate * 24 * 60 * 60 / 4,
        milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1e3 / 4
    },
    months: {
        weeks: daysInMonthAccurate / 7,
        days: daysInMonthAccurate,
        hours: daysInMonthAccurate * 24,
        minutes: daysInMonthAccurate * 24 * 60,
        seconds: daysInMonthAccurate * 24 * 60 * 60,
        milliseconds: daysInMonthAccurate * 24 * 60 * 60 * 1e3
    },
    ...lowOrderMatrix
};
var orderedUnits = [
    "years",
    "quarters",
    "months",
    "weeks",
    "days",
    "hours",
    "minutes",
    "seconds",
    "milliseconds"
];
var reverseUnits = orderedUnits.slice(0).reverse();
function clone(dur, alts, clear = false) {
    const conf = {
        values: clear ? alts.values : {
            ...dur.values,
            ...alts.values || {}
        },
        loc: dur.loc.clone(alts.loc),
        conversionAccuracy: alts.conversionAccuracy || dur.conversionAccuracy
    };
    return new Duration(conf);
}
function antiTrunc(n2) {
    return n2 < 0 ? Math.floor(n2) : Math.ceil(n2);
}
function convert(matrix, fromMap, fromUnit, toMap, toUnit) {
    const conv = matrix[toUnit][fromUnit], raw = fromMap[fromUnit] / conv, sameSign = Math.sign(raw) === Math.sign(toMap[toUnit]), added = !sameSign && toMap[toUnit] !== 0 && Math.abs(raw) <= 1 ? antiTrunc(raw) : Math.trunc(raw);
    toMap[toUnit] += added;
    fromMap[fromUnit] -= added * conv;
}
function normalizeValues(matrix, vals) {
    reverseUnits.reduce((previous, current)=>{
        if (!isUndefined(vals[current])) {
            if (previous) {
                convert(matrix, vals, previous, vals, current);
            }
            return current;
        } else {
            return previous;
        }
    }, null);
}
var Duration = class {
    constructor(config){
        const accurate = config.conversionAccuracy === "longterm" || false;
        this.values = config.values;
        this.loc = config.loc || Locale.create();
        this.conversionAccuracy = accurate ? "longterm" : "casual";
        this.invalid = config.invalid || null;
        this.matrix = accurate ? accurateMatrix : casualMatrix;
        this.isLuxonDuration = true;
    }
    static fromMillis(count, opts) {
        return Duration.fromObject({
            milliseconds: count
        }, opts);
    }
    static fromObject(obj, opts = {}) {
        if (obj == null || typeof obj !== "object") {
            throw new InvalidArgumentError(`Duration.fromObject: argument expected to be an object, got ${obj === null ? "null" : typeof obj}`);
        }
        return new Duration({
            values: normalizeObject(obj, Duration.normalizeUnit),
            loc: Locale.fromObject(opts),
            conversionAccuracy: opts.conversionAccuracy
        });
    }
    static fromDurationLike(durationLike) {
        if (isNumber(durationLike)) {
            return Duration.fromMillis(durationLike);
        } else if (Duration.isDuration(durationLike)) {
            return durationLike;
        } else if (typeof durationLike === "object") {
            return Duration.fromObject(durationLike);
        } else {
            throw new InvalidArgumentError(`Unknown duration argument ${durationLike} of type ${typeof durationLike}`);
        }
    }
    static fromISO(text, opts) {
        const [parsed] = parseISODuration(text);
        if (parsed) {
            return Duration.fromObject(parsed, opts);
        } else {
            return Duration.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
        }
    }
    static fromISOTime(text, opts) {
        const [parsed] = parseISOTimeOnly(text);
        if (parsed) {
            return Duration.fromObject(parsed, opts);
        } else {
            return Duration.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
        }
    }
    static invalid(reason, explanation = null) {
        if (!reason) {
            throw new InvalidArgumentError("need to specify a reason the Duration is invalid");
        }
        const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);
        if (Settings.throwOnInvalid) {
            throw new InvalidDurationError(invalid);
        } else {
            return new Duration({
                invalid
            });
        }
    }
    static normalizeUnit(unit) {
        const normalized = {
            year: "years",
            years: "years",
            quarter: "quarters",
            quarters: "quarters",
            month: "months",
            months: "months",
            week: "weeks",
            weeks: "weeks",
            day: "days",
            days: "days",
            hour: "hours",
            hours: "hours",
            minute: "minutes",
            minutes: "minutes",
            second: "seconds",
            seconds: "seconds",
            millisecond: "milliseconds",
            milliseconds: "milliseconds"
        }[unit ? unit.toLowerCase() : unit];
        if (!normalized) throw new InvalidUnitError(unit);
        return normalized;
    }
    static isDuration(o) {
        return o && o.isLuxonDuration || false;
    }
    get locale() {
        return this.isValid ? this.loc.locale : null;
    }
    get numberingSystem() {
        return this.isValid ? this.loc.numberingSystem : null;
    }
    toFormat(fmt, opts = {}) {
        const fmtOpts = {
            ...opts,
            floor: opts.round !== false && opts.floor !== false
        };
        return this.isValid ? Formatter.create(this.loc, fmtOpts).formatDurationFromString(this, fmt) : INVALID2;
    }
    toHuman(opts = {}) {
        const l2 = orderedUnits.map((unit)=>{
            const val = this.values[unit];
            if (isUndefined(val)) {
                return null;
            }
            return this.loc.numberFormatter({
                style: "unit",
                unitDisplay: "long",
                ...opts,
                unit: unit.slice(0, -1)
            }).format(val);
        }).filter((n2)=>n2);
        return this.loc.listFormatter({
            type: "conjunction",
            style: opts.listStyle || "narrow",
            ...opts
        }).format(l2);
    }
    toObject() {
        if (!this.isValid) return {};
        return {
            ...this.values
        };
    }
    toISO() {
        if (!this.isValid) return null;
        let s2 = "P";
        if (this.years !== 0) s2 += this.years + "Y";
        if (this.months !== 0 || this.quarters !== 0) s2 += this.months + this.quarters * 3 + "M";
        if (this.weeks !== 0) s2 += this.weeks + "W";
        if (this.days !== 0) s2 += this.days + "D";
        if (this.hours !== 0 || this.minutes !== 0 || this.seconds !== 0 || this.milliseconds !== 0) s2 += "T";
        if (this.hours !== 0) s2 += this.hours + "H";
        if (this.minutes !== 0) s2 += this.minutes + "M";
        if (this.seconds !== 0 || this.milliseconds !== 0) s2 += roundTo(this.seconds + this.milliseconds / 1e3, 3) + "S";
        if (s2 === "P") s2 += "T0S";
        return s2;
    }
    toISOTime(opts = {}) {
        if (!this.isValid) return null;
        const millis = this.toMillis();
        if (millis < 0 || millis >= 864e5) return null;
        opts = {
            suppressMilliseconds: false,
            suppressSeconds: false,
            includePrefix: false,
            format: "extended",
            ...opts
        };
        const value = this.shiftTo("hours", "minutes", "seconds", "milliseconds");
        let fmt = opts.format === "basic" ? "hhmm" : "hh:mm";
        if (!opts.suppressSeconds || value.seconds !== 0 || value.milliseconds !== 0) {
            fmt += opts.format === "basic" ? "ss" : ":ss";
            if (!opts.suppressMilliseconds || value.milliseconds !== 0) {
                fmt += ".SSS";
            }
        }
        let str = value.toFormat(fmt);
        if (opts.includePrefix) {
            str = "T" + str;
        }
        return str;
    }
    toJSON() {
        return this.toISO();
    }
    toString() {
        return this.toISO();
    }
    toMillis() {
        return this.as("milliseconds");
    }
    valueOf() {
        return this.toMillis();
    }
    plus(duration) {
        if (!this.isValid) return this;
        const dur = Duration.fromDurationLike(duration), result = {};
        for (const k of orderedUnits){
            if (hasOwnProperty(dur.values, k) || hasOwnProperty(this.values, k)) {
                result[k] = dur.get(k) + this.get(k);
            }
        }
        return clone(this, {
            values: result
        }, true);
    }
    minus(duration) {
        if (!this.isValid) return this;
        const dur = Duration.fromDurationLike(duration);
        return this.plus(dur.negate());
    }
    mapUnits(fn) {
        if (!this.isValid) return this;
        const result = {};
        for (const k of Object.keys(this.values)){
            result[k] = asNumber(fn(this.values[k], k));
        }
        return clone(this, {
            values: result
        }, true);
    }
    get(unit) {
        return this[Duration.normalizeUnit(unit)];
    }
    set(values) {
        if (!this.isValid) return this;
        const mixed = {
            ...this.values,
            ...normalizeObject(values, Duration.normalizeUnit)
        };
        return clone(this, {
            values: mixed
        });
    }
    reconfigure({ locale , numberingSystem , conversionAccuracy  } = {}) {
        const loc = this.loc.clone({
            locale,
            numberingSystem
        }), opts = {
            loc
        };
        if (conversionAccuracy) {
            opts.conversionAccuracy = conversionAccuracy;
        }
        return clone(this, opts);
    }
    as(unit) {
        return this.isValid ? this.shiftTo(unit).get(unit) : NaN;
    }
    normalize() {
        if (!this.isValid) return this;
        const vals = this.toObject();
        normalizeValues(this.matrix, vals);
        return clone(this, {
            values: vals
        }, true);
    }
    shiftTo(...units) {
        if (!this.isValid) return this;
        if (units.length === 0) {
            return this;
        }
        units = units.map((u)=>Duration.normalizeUnit(u));
        const built = {}, accumulated = {}, vals = this.toObject();
        let lastUnit;
        for (const k of orderedUnits){
            if (units.indexOf(k) >= 0) {
                lastUnit = k;
                let own = 0;
                for(const ak in accumulated){
                    own += this.matrix[ak][k] * accumulated[ak];
                    accumulated[ak] = 0;
                }
                if (isNumber(vals[k])) {
                    own += vals[k];
                }
                const i = Math.trunc(own);
                built[k] = i;
                accumulated[k] = (own * 1e3 - i * 1e3) / 1e3;
                for(const down in vals){
                    if (orderedUnits.indexOf(down) > orderedUnits.indexOf(k)) {
                        convert(this.matrix, vals, down, built, k);
                    }
                }
            } else if (isNumber(vals[k])) {
                accumulated[k] = vals[k];
            }
        }
        for(const key in accumulated){
            if (accumulated[key] !== 0) {
                built[lastUnit] += key === lastUnit ? accumulated[key] : accumulated[key] / this.matrix[lastUnit][key];
            }
        }
        return clone(this, {
            values: built
        }, true).normalize();
    }
    negate() {
        if (!this.isValid) return this;
        const negated = {};
        for (const k of Object.keys(this.values)){
            negated[k] = this.values[k] === 0 ? 0 : -this.values[k];
        }
        return clone(this, {
            values: negated
        }, true);
    }
    get years() {
        return this.isValid ? this.values.years || 0 : NaN;
    }
    get quarters() {
        return this.isValid ? this.values.quarters || 0 : NaN;
    }
    get months() {
        return this.isValid ? this.values.months || 0 : NaN;
    }
    get weeks() {
        return this.isValid ? this.values.weeks || 0 : NaN;
    }
    get days() {
        return this.isValid ? this.values.days || 0 : NaN;
    }
    get hours() {
        return this.isValid ? this.values.hours || 0 : NaN;
    }
    get minutes() {
        return this.isValid ? this.values.minutes || 0 : NaN;
    }
    get seconds() {
        return this.isValid ? this.values.seconds || 0 : NaN;
    }
    get milliseconds() {
        return this.isValid ? this.values.milliseconds || 0 : NaN;
    }
    get isValid() {
        return this.invalid === null;
    }
    get invalidReason() {
        return this.invalid ? this.invalid.reason : null;
    }
    get invalidExplanation() {
        return this.invalid ? this.invalid.explanation : null;
    }
    equals(other) {
        if (!this.isValid || !other.isValid) {
            return false;
        }
        if (!this.loc.equals(other.loc)) {
            return false;
        }
        function eq(v1, v2) {
            if (v1 === void 0 || v1 === 0) return v2 === void 0 || v2 === 0;
            return v1 === v2;
        }
        for (const u of orderedUnits){
            if (!eq(this.values[u], other.values[u])) {
                return false;
            }
        }
        return true;
    }
};
var INVALID3 = "Invalid Interval";
function validateStartEnd(start, end) {
    if (!start || !start.isValid) {
        return Interval.invalid("missing or invalid start");
    } else if (!end || !end.isValid) {
        return Interval.invalid("missing or invalid end");
    } else if (end < start) {
        return Interval.invalid("end before start", `The end of an interval must be after its start, but you had start=${start.toISO()} and end=${end.toISO()}`);
    } else {
        return null;
    }
}
var Interval = class {
    constructor(config){
        this.s = config.start;
        this.e = config.end;
        this.invalid = config.invalid || null;
        this.isLuxonInterval = true;
    }
    static invalid(reason, explanation = null) {
        if (!reason) {
            throw new InvalidArgumentError("need to specify a reason the Interval is invalid");
        }
        const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);
        if (Settings.throwOnInvalid) {
            throw new InvalidIntervalError(invalid);
        } else {
            return new Interval({
                invalid
            });
        }
    }
    static fromDateTimes(start, end) {
        const builtStart = friendlyDateTime(start), builtEnd = friendlyDateTime(end);
        const validateError = validateStartEnd(builtStart, builtEnd);
        if (validateError == null) {
            return new Interval({
                start: builtStart,
                end: builtEnd
            });
        } else {
            return validateError;
        }
    }
    static after(start, duration) {
        const dur = Duration.fromDurationLike(duration), dt = friendlyDateTime(start);
        return Interval.fromDateTimes(dt, dt.plus(dur));
    }
    static before(end, duration) {
        const dur = Duration.fromDurationLike(duration), dt = friendlyDateTime(end);
        return Interval.fromDateTimes(dt.minus(dur), dt);
    }
    static fromISO(text, opts) {
        const [s2, e] = (text || "").split("/", 2);
        if (s2 && e) {
            let start, startIsValid;
            try {
                start = DateTime.fromISO(s2, opts);
                startIsValid = start.isValid;
            } catch (e2) {
                startIsValid = false;
            }
            let end, endIsValid;
            try {
                end = DateTime.fromISO(e, opts);
                endIsValid = end.isValid;
            } catch (e21) {
                endIsValid = false;
            }
            if (startIsValid && endIsValid) {
                return Interval.fromDateTimes(start, end);
            }
            if (startIsValid) {
                const dur = Duration.fromISO(e, opts);
                if (dur.isValid) {
                    return Interval.after(start, dur);
                }
            } else if (endIsValid) {
                const dur1 = Duration.fromISO(s2, opts);
                if (dur1.isValid) {
                    return Interval.before(end, dur1);
                }
            }
        }
        return Interval.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
    }
    static isInterval(o) {
        return o && o.isLuxonInterval || false;
    }
    get start() {
        return this.isValid ? this.s : null;
    }
    get end() {
        return this.isValid ? this.e : null;
    }
    get isValid() {
        return this.invalidReason === null;
    }
    get invalidReason() {
        return this.invalid ? this.invalid.reason : null;
    }
    get invalidExplanation() {
        return this.invalid ? this.invalid.explanation : null;
    }
    length(unit = "milliseconds") {
        return this.isValid ? this.toDuration(...[
            unit
        ]).get(unit) : NaN;
    }
    count(unit = "milliseconds") {
        if (!this.isValid) return NaN;
        const start = this.start.startOf(unit), end = this.end.startOf(unit);
        return Math.floor(end.diff(start, unit).get(unit)) + 1;
    }
    hasSame(unit) {
        return this.isValid ? this.isEmpty() || this.e.minus(1).hasSame(this.s, unit) : false;
    }
    isEmpty() {
        return this.s.valueOf() === this.e.valueOf();
    }
    isAfter(dateTime) {
        if (!this.isValid) return false;
        return this.s > dateTime;
    }
    isBefore(dateTime) {
        if (!this.isValid) return false;
        return this.e <= dateTime;
    }
    contains(dateTime) {
        if (!this.isValid) return false;
        return this.s <= dateTime && this.e > dateTime;
    }
    set({ start , end  } = {}) {
        if (!this.isValid) return this;
        return Interval.fromDateTimes(start || this.s, end || this.e);
    }
    splitAt(...dateTimes) {
        if (!this.isValid) return [];
        const sorted = dateTimes.map(friendlyDateTime).filter((d)=>this.contains(d)).sort(), results = [];
        let { s: s2  } = this, i = 0;
        while(s2 < this.e){
            const added = sorted[i] || this.e, next = +added > +this.e ? this.e : added;
            results.push(Interval.fromDateTimes(s2, next));
            s2 = next;
            i += 1;
        }
        return results;
    }
    splitBy(duration) {
        const dur = Duration.fromDurationLike(duration);
        if (!this.isValid || !dur.isValid || dur.as("milliseconds") === 0) {
            return [];
        }
        let { s: s2  } = this, idx = 1, next;
        const results = [];
        while(s2 < this.e){
            const added = this.start.plus(dur.mapUnits((x)=>x * idx));
            next = +added > +this.e ? this.e : added;
            results.push(Interval.fromDateTimes(s2, next));
            s2 = next;
            idx += 1;
        }
        return results;
    }
    divideEqually(numberOfParts) {
        if (!this.isValid) return [];
        return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);
    }
    overlaps(other) {
        return this.e > other.s && this.s < other.e;
    }
    abutsStart(other) {
        if (!this.isValid) return false;
        return +this.e === +other.s;
    }
    abutsEnd(other) {
        if (!this.isValid) return false;
        return +other.e === +this.s;
    }
    engulfs(other) {
        if (!this.isValid) return false;
        return this.s <= other.s && this.e >= other.e;
    }
    equals(other) {
        if (!this.isValid || !other.isValid) {
            return false;
        }
        return this.s.equals(other.s) && this.e.equals(other.e);
    }
    intersection(other) {
        if (!this.isValid) return this;
        const s2 = this.s > other.s ? this.s : other.s, e = this.e < other.e ? this.e : other.e;
        if (s2 >= e) {
            return null;
        } else {
            return Interval.fromDateTimes(s2, e);
        }
    }
    union(other) {
        if (!this.isValid) return this;
        const s2 = this.s < other.s ? this.s : other.s, e = this.e > other.e ? this.e : other.e;
        return Interval.fromDateTimes(s2, e);
    }
    static merge(intervals) {
        const [found, final] = intervals.sort((a, b)=>a.s - b.s).reduce(([sofar, current], item)=>{
            if (!current) {
                return [
                    sofar,
                    item
                ];
            } else if (current.overlaps(item) || current.abutsStart(item)) {
                return [
                    sofar,
                    current.union(item)
                ];
            } else {
                return [
                    sofar.concat([
                        current
                    ]),
                    item
                ];
            }
        }, [
            [],
            null
        ]);
        if (final) {
            found.push(final);
        }
        return found;
    }
    static xor(intervals) {
        let start = null, currentCount = 0;
        const results = [], ends = intervals.map((i)=>[
                {
                    time: i.s,
                    type: "s"
                },
                {
                    time: i.e,
                    type: "e"
                }
            ]), flattened = Array.prototype.concat(...ends), arr = flattened.sort((a, b)=>a.time - b.time);
        for (const i of arr){
            currentCount += i.type === "s" ? 1 : -1;
            if (currentCount === 1) {
                start = i.time;
            } else {
                if (start && +start !== +i.time) {
                    results.push(Interval.fromDateTimes(start, i.time));
                }
                start = null;
            }
        }
        return Interval.merge(results);
    }
    difference(...intervals) {
        return Interval.xor([
            this
        ].concat(intervals)).map((i)=>this.intersection(i)).filter((i)=>i && !i.isEmpty());
    }
    toString() {
        if (!this.isValid) return INVALID3;
        return `[${this.s.toISO()} \u2013 ${this.e.toISO()})`;
    }
    toISO(opts) {
        if (!this.isValid) return INVALID3;
        return `${this.s.toISO(opts)}/${this.e.toISO(opts)}`;
    }
    toISODate() {
        if (!this.isValid) return INVALID3;
        return `${this.s.toISODate()}/${this.e.toISODate()}`;
    }
    toISOTime(opts) {
        if (!this.isValid) return INVALID3;
        return `${this.s.toISOTime(opts)}/${this.e.toISOTime(opts)}`;
    }
    toFormat(dateFormat, { separator =" \u2013 "  } = {}) {
        if (!this.isValid) return INVALID3;
        return `${this.s.toFormat(dateFormat)}${separator}${this.e.toFormat(dateFormat)}`;
    }
    toDuration(unit, opts) {
        if (!this.isValid) {
            return Duration.invalid(this.invalidReason);
        }
        return this.e.diff(this.s, unit, opts);
    }
    mapEndpoints(mapFn) {
        return Interval.fromDateTimes(mapFn(this.s), mapFn(this.e));
    }
};
var Info = class {
    static hasDST(zone = Settings.defaultZone) {
        const proto = DateTime.now().setZone(zone).set({
            month: 12
        });
        return !zone.isUniversal && proto.offset !== proto.set({
            month: 6
        }).offset;
    }
    static isValidIANAZone(zone) {
        return IANAZone.isValidZone(zone);
    }
    static normalizeZone(input) {
        return normalizeZone(input, Settings.defaultZone);
    }
    static months(length = "long", { locale =null , numberingSystem =null , locObj =null , outputCalendar ="gregory"  } = {}) {
        return (locObj || Locale.create(locale, numberingSystem, outputCalendar)).months(length);
    }
    static monthsFormat(length = "long", { locale =null , numberingSystem =null , locObj =null , outputCalendar ="gregory"  } = {}) {
        return (locObj || Locale.create(locale, numberingSystem, outputCalendar)).months(length, true);
    }
    static weekdays(length = "long", { locale =null , numberingSystem =null , locObj =null  } = {}) {
        return (locObj || Locale.create(locale, numberingSystem, null)).weekdays(length);
    }
    static weekdaysFormat(length = "long", { locale =null , numberingSystem =null , locObj =null  } = {}) {
        return (locObj || Locale.create(locale, numberingSystem, null)).weekdays(length, true);
    }
    static meridiems({ locale =null  } = {}) {
        return Locale.create(locale).meridiems();
    }
    static eras(length = "short", { locale =null  } = {}) {
        return Locale.create(locale, null, "gregory").eras(length);
    }
    static features() {
        return {
            relative: hasRelative()
        };
    }
};
function dayDiff(earlier, later) {
    const utcDayStart = (dt)=>dt.toUTC(0, {
            keepLocalTime: true
        }).startOf("day").valueOf(), ms = utcDayStart(later) - utcDayStart(earlier);
    return Math.floor(Duration.fromMillis(ms).as("days"));
}
function highOrderDiffs(cursor, later, units) {
    const differs = [
        [
            "years",
            (a, b)=>b.year - a.year
        ],
        [
            "quarters",
            (a, b)=>b.quarter - a.quarter
        ],
        [
            "months",
            (a, b)=>b.month - a.month + (b.year - a.year) * 12
        ],
        [
            "weeks",
            (a, b)=>{
                const days = dayDiff(a, b);
                return (days - days % 7) / 7;
            }
        ],
        [
            "days",
            dayDiff
        ]
    ];
    const results = {};
    let lowestOrder, highWater;
    for (const [unit, differ] of differs){
        if (units.indexOf(unit) >= 0) {
            lowestOrder = unit;
            let delta = differ(cursor, later);
            highWater = cursor.plus({
                [unit]: delta
            });
            if (highWater > later) {
                cursor = cursor.plus({
                    [unit]: delta - 1
                });
                delta -= 1;
            } else {
                cursor = highWater;
            }
            results[unit] = delta;
        }
    }
    return [
        cursor,
        results,
        highWater,
        lowestOrder
    ];
}
function diff_default(earlier, later, units, opts) {
    let [cursor, results, highWater, lowestOrder] = highOrderDiffs(earlier, later, units);
    const remainingMillis = later - cursor;
    const lowerOrderUnits = units.filter((u)=>[
            "hours",
            "minutes",
            "seconds",
            "milliseconds"
        ].indexOf(u) >= 0);
    if (lowerOrderUnits.length === 0) {
        if (highWater < later) {
            highWater = cursor.plus({
                [lowestOrder]: 1
            });
        }
        if (highWater !== cursor) {
            results[lowestOrder] = (results[lowestOrder] || 0) + remainingMillis / (highWater - cursor);
        }
    }
    const duration = Duration.fromObject(results, opts);
    if (lowerOrderUnits.length > 0) {
        return Duration.fromMillis(remainingMillis, opts).shiftTo(...lowerOrderUnits).plus(duration);
    } else {
        return duration;
    }
}
var numberingSystems = {
    arab: "[\u0660-\u0669]",
    arabext: "[\u06F0-\u06F9]",
    bali: "[\u1B50-\u1B59]",
    beng: "[\u09E6-\u09EF]",
    deva: "[\u0966-\u096F]",
    fullwide: "[\uFF10-\uFF19]",
    gujr: "[\u0AE6-\u0AEF]",
    hanidec: "[\u3007|\u4E00|\u4E8C|\u4E09|\u56DB|\u4E94|\u516D|\u4E03|\u516B|\u4E5D]",
    khmr: "[\u17E0-\u17E9]",
    knda: "[\u0CE6-\u0CEF]",
    laoo: "[\u0ED0-\u0ED9]",
    limb: "[\u1946-\u194F]",
    mlym: "[\u0D66-\u0D6F]",
    mong: "[\u1810-\u1819]",
    mymr: "[\u1040-\u1049]",
    orya: "[\u0B66-\u0B6F]",
    tamldec: "[\u0BE6-\u0BEF]",
    telu: "[\u0C66-\u0C6F]",
    thai: "[\u0E50-\u0E59]",
    tibt: "[\u0F20-\u0F29]",
    latn: "\\d"
};
var numberingSystemsUTF16 = {
    arab: [
        1632,
        1641
    ],
    arabext: [
        1776,
        1785
    ],
    bali: [
        6992,
        7001
    ],
    beng: [
        2534,
        2543
    ],
    deva: [
        2406,
        2415
    ],
    fullwide: [
        65296,
        65303
    ],
    gujr: [
        2790,
        2799
    ],
    khmr: [
        6112,
        6121
    ],
    knda: [
        3302,
        3311
    ],
    laoo: [
        3792,
        3801
    ],
    limb: [
        6470,
        6479
    ],
    mlym: [
        3430,
        3439
    ],
    mong: [
        6160,
        6169
    ],
    mymr: [
        4160,
        4169
    ],
    orya: [
        2918,
        2927
    ],
    tamldec: [
        3046,
        3055
    ],
    telu: [
        3174,
        3183
    ],
    thai: [
        3664,
        3673
    ],
    tibt: [
        3872,
        3881
    ]
};
var hanidecChars = numberingSystems.hanidec.replace(/[\[|\]]/g, "").split("");
function parseDigits(str) {
    let value = parseInt(str, 10);
    if (isNaN(value)) {
        value = "";
        for(let i = 0; i < str.length; i++){
            const code = str.charCodeAt(i);
            if (str[i].search(numberingSystems.hanidec) !== -1) {
                value += hanidecChars.indexOf(str[i]);
            } else {
                for(const key in numberingSystemsUTF16){
                    const [min, max] = numberingSystemsUTF16[key];
                    if (code >= min && code <= max) {
                        value += code - min;
                    }
                }
            }
        }
        return parseInt(value, 10);
    } else {
        return value;
    }
}
function digitRegex({ numberingSystem  }, append = "") {
    return new RegExp(`${numberingSystems[numberingSystem || "latn"]}${append}`);
}
var MISSING_FTP = "missing Intl.DateTimeFormat.formatToParts support";
function intUnit(regex, post = (i)=>i) {
    return {
        regex,
        deser: ([s2])=>post(parseDigits(s2))
    };
}
var NBSP = String.fromCharCode(160);
var spaceOrNBSP = `[ ${NBSP}]`;
var spaceOrNBSPRegExp = new RegExp(spaceOrNBSP, "g");
function fixListRegex(s2) {
    return s2.replace(/\./g, "\\.?").replace(spaceOrNBSPRegExp, spaceOrNBSP);
}
function stripInsensitivities(s2) {
    return s2.replace(/\./g, "").replace(spaceOrNBSPRegExp, " ").toLowerCase();
}
function oneOf(strings, startIndex) {
    if (strings === null) {
        return null;
    } else {
        return {
            regex: RegExp(strings.map(fixListRegex).join("|")),
            deser: ([s2])=>strings.findIndex((i)=>stripInsensitivities(s2) === stripInsensitivities(i)) + startIndex
        };
    }
}
function offset(regex, groups) {
    return {
        regex,
        deser: ([, h, m])=>signedOffset(h, m),
        groups
    };
}
function simple(regex) {
    return {
        regex,
        deser: ([s2])=>s2
    };
}
function escapeToken(value) {
    return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
}
function unitForToken(token, loc) {
    const one = digitRegex(loc), two = digitRegex(loc, "{2}"), three = digitRegex(loc, "{3}"), four = digitRegex(loc, "{4}"), six = digitRegex(loc, "{6}"), oneOrTwo = digitRegex(loc, "{1,2}"), oneToThree = digitRegex(loc, "{1,3}"), oneToSix = digitRegex(loc, "{1,6}"), oneToNine = digitRegex(loc, "{1,9}"), twoToFour = digitRegex(loc, "{2,4}"), fourToSix = digitRegex(loc, "{4,6}"), literal = (t)=>({
            regex: RegExp(escapeToken(t.val)),
            deser: ([s2])=>s2,
            literal: true
        }), unitate = (t)=>{
        if (token.literal) {
            return literal(t);
        }
        switch(t.val){
            case "G":
                return oneOf(loc.eras("short", false), 0);
            case "GG":
                return oneOf(loc.eras("long", false), 0);
            case "y":
                return intUnit(oneToSix);
            case "yy":
                return intUnit(twoToFour, untruncateYear);
            case "yyyy":
                return intUnit(four);
            case "yyyyy":
                return intUnit(fourToSix);
            case "yyyyyy":
                return intUnit(six);
            case "M":
                return intUnit(oneOrTwo);
            case "MM":
                return intUnit(two);
            case "MMM":
                return oneOf(loc.months("short", true, false), 1);
            case "MMMM":
                return oneOf(loc.months("long", true, false), 1);
            case "L":
                return intUnit(oneOrTwo);
            case "LL":
                return intUnit(two);
            case "LLL":
                return oneOf(loc.months("short", false, false), 1);
            case "LLLL":
                return oneOf(loc.months("long", false, false), 1);
            case "d":
                return intUnit(oneOrTwo);
            case "dd":
                return intUnit(two);
            case "o":
                return intUnit(oneToThree);
            case "ooo":
                return intUnit(three);
            case "HH":
                return intUnit(two);
            case "H":
                return intUnit(oneOrTwo);
            case "hh":
                return intUnit(two);
            case "h":
                return intUnit(oneOrTwo);
            case "mm":
                return intUnit(two);
            case "m":
                return intUnit(oneOrTwo);
            case "q":
                return intUnit(oneOrTwo);
            case "qq":
                return intUnit(two);
            case "s":
                return intUnit(oneOrTwo);
            case "ss":
                return intUnit(two);
            case "S":
                return intUnit(oneToThree);
            case "SSS":
                return intUnit(three);
            case "u":
                return simple(oneToNine);
            case "uu":
                return simple(oneOrTwo);
            case "uuu":
                return intUnit(one);
            case "a":
                return oneOf(loc.meridiems(), 0);
            case "kkkk":
                return intUnit(four);
            case "kk":
                return intUnit(twoToFour, untruncateYear);
            case "W":
                return intUnit(oneOrTwo);
            case "WW":
                return intUnit(two);
            case "E":
            case "c":
                return intUnit(one);
            case "EEE":
                return oneOf(loc.weekdays("short", false, false), 1);
            case "EEEE":
                return oneOf(loc.weekdays("long", false, false), 1);
            case "ccc":
                return oneOf(loc.weekdays("short", true, false), 1);
            case "cccc":
                return oneOf(loc.weekdays("long", true, false), 1);
            case "Z":
            case "ZZ":
                return offset(new RegExp(`([+-]${oneOrTwo.source})(?::(${two.source}))?`), 2);
            case "ZZZ":
                return offset(new RegExp(`([+-]${oneOrTwo.source})(${two.source})?`), 2);
            case "z":
                return simple(/[a-z_+-/]{1,256}?/i);
            default:
                return literal(t);
        }
    };
    const unit = unitate(token) || {
        invalidReason: MISSING_FTP
    };
    unit.token = token;
    return unit;
}
var partTypeStyleToTokenVal = {
    year: {
        "2-digit": "yy",
        numeric: "yyyyy"
    },
    month: {
        numeric: "M",
        "2-digit": "MM",
        short: "MMM",
        long: "MMMM"
    },
    day: {
        numeric: "d",
        "2-digit": "dd"
    },
    weekday: {
        short: "EEE",
        long: "EEEE"
    },
    dayperiod: "a",
    dayPeriod: "a",
    hour: {
        numeric: "h",
        "2-digit": "hh"
    },
    minute: {
        numeric: "m",
        "2-digit": "mm"
    },
    second: {
        numeric: "s",
        "2-digit": "ss"
    },
    timeZoneName: {
        long: "ZZZZZ",
        short: "ZZZ"
    }
};
function tokenForPart(part, locale, formatOpts) {
    const { type , value  } = part;
    if (type === "literal") {
        return {
            literal: true,
            val: value
        };
    }
    const style = formatOpts[type];
    let val = partTypeStyleToTokenVal[type];
    if (typeof val === "object") {
        val = val[style];
    }
    if (val) {
        return {
            literal: false,
            val
        };
    }
    return void 0;
}
function buildRegex(units) {
    const re = units.map((u)=>u.regex).reduce((f, r)=>`${f}(${r.source})`, "");
    return [
        `^${re}$`,
        units
    ];
}
function match(input, regex, handlers) {
    const matches = input.match(regex);
    if (matches) {
        const all = {};
        let matchIndex = 1;
        for(const i in handlers){
            if (hasOwnProperty(handlers, i)) {
                const h = handlers[i], groups = h.groups ? h.groups + 1 : 1;
                if (!h.literal && h.token) {
                    all[h.token.val[0]] = h.deser(matches.slice(matchIndex, matchIndex + groups));
                }
                matchIndex += groups;
            }
        }
        return [
            matches,
            all
        ];
    } else {
        return [
            matches,
            {}
        ];
    }
}
function dateTimeFromMatches(matches) {
    const toField = (token)=>{
        switch(token){
            case "S":
                return "millisecond";
            case "s":
                return "second";
            case "m":
                return "minute";
            case "h":
            case "H":
                return "hour";
            case "d":
                return "day";
            case "o":
                return "ordinal";
            case "L":
            case "M":
                return "month";
            case "y":
                return "year";
            case "E":
            case "c":
                return "weekday";
            case "W":
                return "weekNumber";
            case "k":
                return "weekYear";
            case "q":
                return "quarter";
            default:
                return null;
        }
    };
    let zone = null;
    let specificOffset;
    if (!isUndefined(matches.z)) {
        zone = IANAZone.create(matches.z);
    }
    if (!isUndefined(matches.Z)) {
        if (!zone) {
            zone = new FixedOffsetZone(matches.Z);
        }
        specificOffset = matches.Z;
    }
    if (!isUndefined(matches.q)) {
        matches.M = (matches.q - 1) * 3 + 1;
    }
    if (!isUndefined(matches.h)) {
        if (matches.h < 12 && matches.a === 1) {
            matches.h += 12;
        } else if (matches.h === 12 && matches.a === 0) {
            matches.h = 0;
        }
    }
    if (matches.G === 0 && matches.y) {
        matches.y = -matches.y;
    }
    if (!isUndefined(matches.u)) {
        matches.S = parseMillis(matches.u);
    }
    const vals = Object.keys(matches).reduce((r, k)=>{
        const f = toField(k);
        if (f) {
            r[f] = matches[k];
        }
        return r;
    }, {});
    return [
        vals,
        zone,
        specificOffset
    ];
}
var dummyDateTimeCache = null;
function getDummyDateTime() {
    if (!dummyDateTimeCache) {
        dummyDateTimeCache = DateTime.fromMillis(1555555555555);
    }
    return dummyDateTimeCache;
}
function maybeExpandMacroToken(token, locale) {
    if (token.literal) {
        return token;
    }
    const formatOpts = Formatter.macroTokenToFormatOpts(token.val);
    const tokens = formatOptsToTokens(formatOpts, locale);
    if (tokens == null || tokens.includes(void 0)) {
        return token;
    }
    return tokens;
}
function expandMacroTokens(tokens, locale) {
    return Array.prototype.concat(...tokens.map((t)=>maybeExpandMacroToken(t, locale)));
}
function explainFromTokens(locale, input, format) {
    const tokens = expandMacroTokens(Formatter.parseFormat(format), locale), units = tokens.map((t)=>unitForToken(t, locale)), disqualifyingUnit = units.find((t)=>t.invalidReason);
    if (disqualifyingUnit) {
        return {
            input,
            tokens,
            invalidReason: disqualifyingUnit.invalidReason
        };
    } else {
        const [regexString, handlers] = buildRegex(units), regex = RegExp(regexString, "i"), [rawMatches, matches] = match(input, regex, handlers), [result, zone, specificOffset] = matches ? dateTimeFromMatches(matches) : [
            null,
            null,
            void 0
        ];
        if (hasOwnProperty(matches, "a") && hasOwnProperty(matches, "H")) {
            throw new ConflictingSpecificationError("Can't include meridiem when specifying 24-hour format");
        }
        return {
            input,
            tokens,
            regex,
            rawMatches,
            matches,
            result,
            zone,
            specificOffset
        };
    }
}
function parseFromTokens(locale, input, format) {
    const { result , zone , specificOffset , invalidReason  } = explainFromTokens(locale, input, format);
    return [
        result,
        zone,
        specificOffset,
        invalidReason
    ];
}
function formatOptsToTokens(formatOpts, locale) {
    if (!formatOpts) {
        return null;
    }
    const formatter = Formatter.create(locale, formatOpts);
    const parts = formatter.formatDateTimeParts(getDummyDateTime());
    return parts.map((p)=>tokenForPart(p, locale, formatOpts));
}
var nonLeapLadder = [
    0,
    31,
    59,
    90,
    120,
    151,
    181,
    212,
    243,
    273,
    304,
    334
];
var leapLadder = [
    0,
    31,
    60,
    91,
    121,
    152,
    182,
    213,
    244,
    274,
    305,
    335
];
function unitOutOfRange(unit, value) {
    return new Invalid("unit out of range", `you specified ${value} (of type ${typeof value}) as a ${unit}, which is invalid`);
}
function dayOfWeek(year, month, day) {
    const d = new Date(Date.UTC(year, month - 1, day));
    if (year < 100 && year >= 0) {
        d.setUTCFullYear(d.getUTCFullYear() - 1900);
    }
    const js = d.getUTCDay();
    return js === 0 ? 7 : js;
}
function computeOrdinal(year, month, day) {
    return day + (isLeapYear(year) ? leapLadder : nonLeapLadder)[month - 1];
}
function uncomputeOrdinal(year, ordinal) {
    const table = isLeapYear(year) ? leapLadder : nonLeapLadder, month0 = table.findIndex((i)=>i < ordinal), day = ordinal - table[month0];
    return {
        month: month0 + 1,
        day
    };
}
function gregorianToWeek(gregObj) {
    const { year , month , day  } = gregObj, ordinal = computeOrdinal(year, month, day), weekday = dayOfWeek(year, month, day);
    let weekNumber = Math.floor((ordinal - weekday + 10) / 7), weekYear;
    if (weekNumber < 1) {
        weekYear = year - 1;
        weekNumber = weeksInWeekYear(weekYear);
    } else if (weekNumber > weeksInWeekYear(year)) {
        weekYear = year + 1;
        weekNumber = 1;
    } else {
        weekYear = year;
    }
    return {
        weekYear,
        weekNumber,
        weekday,
        ...timeObject(gregObj)
    };
}
function weekToGregorian(weekData) {
    const { weekYear , weekNumber , weekday  } = weekData, weekdayOfJan4 = dayOfWeek(weekYear, 1, 4), yearInDays = daysInYear(weekYear);
    let ordinal = weekNumber * 7 + weekday - weekdayOfJan4 - 3, year;
    if (ordinal < 1) {
        year = weekYear - 1;
        ordinal += daysInYear(year);
    } else if (ordinal > yearInDays) {
        year = weekYear + 1;
        ordinal -= daysInYear(weekYear);
    } else {
        year = weekYear;
    }
    const { month , day  } = uncomputeOrdinal(year, ordinal);
    return {
        year,
        month,
        day,
        ...timeObject(weekData)
    };
}
function gregorianToOrdinal(gregData) {
    const { year , month , day  } = gregData;
    const ordinal = computeOrdinal(year, month, day);
    return {
        year,
        ordinal,
        ...timeObject(gregData)
    };
}
function ordinalToGregorian(ordinalData) {
    const { year , ordinal  } = ordinalData;
    const { month , day  } = uncomputeOrdinal(year, ordinal);
    return {
        year,
        month,
        day,
        ...timeObject(ordinalData)
    };
}
function hasInvalidWeekData(obj) {
    const validYear = isInteger(obj.weekYear), validWeek = integerBetween(obj.weekNumber, 1, weeksInWeekYear(obj.weekYear)), validWeekday = integerBetween(obj.weekday, 1, 7);
    if (!validYear) {
        return unitOutOfRange("weekYear", obj.weekYear);
    } else if (!validWeek) {
        return unitOutOfRange("week", obj.week);
    } else if (!validWeekday) {
        return unitOutOfRange("weekday", obj.weekday);
    } else return false;
}
function hasInvalidOrdinalData(obj) {
    const validYear = isInteger(obj.year), validOrdinal = integerBetween(obj.ordinal, 1, daysInYear(obj.year));
    if (!validYear) {
        return unitOutOfRange("year", obj.year);
    } else if (!validOrdinal) {
        return unitOutOfRange("ordinal", obj.ordinal);
    } else return false;
}
function hasInvalidGregorianData(obj) {
    const validYear = isInteger(obj.year), validMonth = integerBetween(obj.month, 1, 12), validDay = integerBetween(obj.day, 1, daysInMonth(obj.year, obj.month));
    if (!validYear) {
        return unitOutOfRange("year", obj.year);
    } else if (!validMonth) {
        return unitOutOfRange("month", obj.month);
    } else if (!validDay) {
        return unitOutOfRange("day", obj.day);
    } else return false;
}
function hasInvalidTimeData(obj) {
    const { hour , minute , second , millisecond  } = obj;
    const validHour = integerBetween(hour, 0, 23) || hour === 24 && minute === 0 && second === 0 && millisecond === 0, validMinute = integerBetween(minute, 0, 59), validSecond = integerBetween(second, 0, 59), validMillisecond = integerBetween(millisecond, 0, 999);
    if (!validHour) {
        return unitOutOfRange("hour", hour);
    } else if (!validMinute) {
        return unitOutOfRange("minute", minute);
    } else if (!validSecond) {
        return unitOutOfRange("second", second);
    } else if (!validMillisecond) {
        return unitOutOfRange("millisecond", millisecond);
    } else return false;
}
var INVALID4 = "Invalid DateTime";
var MAX_DATE = 864e13;
function unsupportedZone(zone) {
    return new Invalid("unsupported zone", `the zone "${zone.name}" is not supported`);
}
function possiblyCachedWeekData(dt) {
    if (dt.weekData === null) {
        dt.weekData = gregorianToWeek(dt.c);
    }
    return dt.weekData;
}
function clone2(inst, alts) {
    const current = {
        ts: inst.ts,
        zone: inst.zone,
        c: inst.c,
        o: inst.o,
        loc: inst.loc,
        invalid: inst.invalid
    };
    return new DateTime({
        ...current,
        ...alts,
        old: current
    });
}
function fixOffset(localTS, o, tz) {
    let utcGuess = localTS - o * 60 * 1e3;
    const o2 = tz.offset(utcGuess);
    if (o === o2) {
        return [
            utcGuess,
            o
        ];
    }
    utcGuess -= (o2 - o) * 60 * 1e3;
    const o3 = tz.offset(utcGuess);
    if (o2 === o3) {
        return [
            utcGuess,
            o2
        ];
    }
    return [
        localTS - Math.min(o2, o3) * 60 * 1e3,
        Math.max(o2, o3)
    ];
}
function tsToObj(ts, offset2) {
    ts += offset2 * 60 * 1e3;
    const d = new Date(ts);
    return {
        year: d.getUTCFullYear(),
        month: d.getUTCMonth() + 1,
        day: d.getUTCDate(),
        hour: d.getUTCHours(),
        minute: d.getUTCMinutes(),
        second: d.getUTCSeconds(),
        millisecond: d.getUTCMilliseconds()
    };
}
function objToTS(obj, offset2, zone) {
    return fixOffset(objToLocalTS(obj), offset2, zone);
}
function adjustTime(inst, dur) {
    const oPre = inst.o, year = inst.c.year + Math.trunc(dur.years), month = inst.c.month + Math.trunc(dur.months) + Math.trunc(dur.quarters) * 3, c = {
        ...inst.c,
        year,
        month,
        day: Math.min(inst.c.day, daysInMonth(year, month)) + Math.trunc(dur.days) + Math.trunc(dur.weeks) * 7
    }, millisToAdd = Duration.fromObject({
        years: dur.years - Math.trunc(dur.years),
        quarters: dur.quarters - Math.trunc(dur.quarters),
        months: dur.months - Math.trunc(dur.months),
        weeks: dur.weeks - Math.trunc(dur.weeks),
        days: dur.days - Math.trunc(dur.days),
        hours: dur.hours,
        minutes: dur.minutes,
        seconds: dur.seconds,
        milliseconds: dur.milliseconds
    }).as("milliseconds"), localTS = objToLocalTS(c);
    let [ts, o] = fixOffset(localTS, oPre, inst.zone);
    if (millisToAdd !== 0) {
        ts += millisToAdd;
        o = inst.zone.offset(ts);
    }
    return {
        ts,
        o
    };
}
function parseDataToDateTime(parsed, parsedZone, opts, format, text, specificOffset) {
    const { setZone , zone  } = opts;
    if (parsed && Object.keys(parsed).length !== 0) {
        const interpretationZone = parsedZone || zone, inst = DateTime.fromObject(parsed, {
            ...opts,
            zone: interpretationZone,
            specificOffset
        });
        return setZone ? inst : inst.setZone(zone);
    } else {
        return DateTime.invalid(new Invalid("unparsable", `the input "${text}" can't be parsed as ${format}`));
    }
}
function toTechFormat(dt, format, allowZ = true) {
    return dt.isValid ? Formatter.create(Locale.create("en-US"), {
        allowZ,
        forceSimple: true
    }).formatDateTimeFromString(dt, format) : null;
}
function toISODate(o, extended) {
    const longFormat = o.c.year > 9999 || o.c.year < 0;
    let c = "";
    if (longFormat && o.c.year >= 0) c += "+";
    c += padStart(o.c.year, longFormat ? 6 : 4);
    if (extended) {
        c += "-";
        c += padStart(o.c.month);
        c += "-";
        c += padStart(o.c.day);
    } else {
        c += padStart(o.c.month);
        c += padStart(o.c.day);
    }
    return c;
}
function toISOTime(o, extended, suppressSeconds, suppressMilliseconds, includeOffset, extendedZone) {
    let c = padStart(o.c.hour);
    if (extended) {
        c += ":";
        c += padStart(o.c.minute);
        if (o.c.second !== 0 || !suppressSeconds) {
            c += ":";
        }
    } else {
        c += padStart(o.c.minute);
    }
    if (o.c.second !== 0 || !suppressSeconds) {
        c += padStart(o.c.second);
        if (o.c.millisecond !== 0 || !suppressMilliseconds) {
            c += ".";
            c += padStart(o.c.millisecond, 3);
        }
    }
    if (includeOffset) {
        if (o.isOffsetFixed && o.offset === 0 && !extendedZone) {
            c += "Z";
        } else if (o.o < 0) {
            c += "-";
            c += padStart(Math.trunc(-o.o / 60));
            c += ":";
            c += padStart(Math.trunc(-o.o % 60));
        } else {
            c += "+";
            c += padStart(Math.trunc(o.o / 60));
            c += ":";
            c += padStart(Math.trunc(o.o % 60));
        }
    }
    if (extendedZone) {
        c += "[" + o.zone.ianaName + "]";
    }
    return c;
}
var defaultUnitValues = {
    month: 1,
    day: 1,
    hour: 0,
    minute: 0,
    second: 0,
    millisecond: 0
};
var defaultWeekUnitValues = {
    weekNumber: 1,
    weekday: 1,
    hour: 0,
    minute: 0,
    second: 0,
    millisecond: 0
};
var defaultOrdinalUnitValues = {
    ordinal: 1,
    hour: 0,
    minute: 0,
    second: 0,
    millisecond: 0
};
var orderedUnits2 = [
    "year",
    "month",
    "day",
    "hour",
    "minute",
    "second",
    "millisecond"
];
var orderedWeekUnits = [
    "weekYear",
    "weekNumber",
    "weekday",
    "hour",
    "minute",
    "second",
    "millisecond"
];
var orderedOrdinalUnits = [
    "year",
    "ordinal",
    "hour",
    "minute",
    "second",
    "millisecond"
];
function normalizeUnit(unit) {
    const normalized = {
        year: "year",
        years: "year",
        month: "month",
        months: "month",
        day: "day",
        days: "day",
        hour: "hour",
        hours: "hour",
        minute: "minute",
        minutes: "minute",
        quarter: "quarter",
        quarters: "quarter",
        second: "second",
        seconds: "second",
        millisecond: "millisecond",
        milliseconds: "millisecond",
        weekday: "weekday",
        weekdays: "weekday",
        weeknumber: "weekNumber",
        weeksnumber: "weekNumber",
        weeknumbers: "weekNumber",
        weekyear: "weekYear",
        weekyears: "weekYear",
        ordinal: "ordinal"
    }[unit.toLowerCase()];
    if (!normalized) throw new InvalidUnitError(unit);
    return normalized;
}
function quickDT(obj, opts) {
    const zone = normalizeZone(opts.zone, Settings.defaultZone), loc = Locale.fromObject(opts), tsNow = Settings.now();
    let ts, o;
    if (!isUndefined(obj.year)) {
        for (const u of orderedUnits2){
            if (isUndefined(obj[u])) {
                obj[u] = defaultUnitValues[u];
            }
        }
        const invalid = hasInvalidGregorianData(obj) || hasInvalidTimeData(obj);
        if (invalid) {
            return DateTime.invalid(invalid);
        }
        const offsetProvis = zone.offset(tsNow);
        [ts, o] = objToTS(obj, offsetProvis, zone);
    } else {
        ts = tsNow;
    }
    return new DateTime({
        ts,
        zone,
        loc,
        o
    });
}
function diffRelative(start, end, opts) {
    const round = isUndefined(opts.round) ? true : opts.round, format = (c, unit)=>{
        c = roundTo(c, round || opts.calendary ? 0 : 2, true);
        const formatter = end.loc.clone(opts).relFormatter(opts);
        return formatter.format(c, unit);
    }, differ = (unit)=>{
        if (opts.calendary) {
            if (!end.hasSame(start, unit)) {
                return end.startOf(unit).diff(start.startOf(unit), unit).get(unit);
            } else return 0;
        } else {
            return end.diff(start, unit).get(unit);
        }
    };
    if (opts.unit) {
        return format(differ(opts.unit), opts.unit);
    }
    for (const unit of opts.units){
        const count = differ(unit);
        if (Math.abs(count) >= 1) {
            return format(count, unit);
        }
    }
    return format(start > end ? -0 : 0, opts.units[opts.units.length - 1]);
}
function lastOpts(argList) {
    let opts = {}, args;
    if (argList.length > 0 && typeof argList[argList.length - 1] === "object") {
        opts = argList[argList.length - 1];
        args = Array.from(argList).slice(0, argList.length - 1);
    } else {
        args = Array.from(argList);
    }
    return [
        opts,
        args
    ];
}
var DateTime = class {
    constructor(config){
        const zone = config.zone || Settings.defaultZone;
        let invalid = config.invalid || (Number.isNaN(config.ts) ? new Invalid("invalid input") : null) || (!zone.isValid ? unsupportedZone(zone) : null);
        this.ts = isUndefined(config.ts) ? Settings.now() : config.ts;
        let c = null, o = null;
        if (!invalid) {
            const unchanged = config.old && config.old.ts === this.ts && config.old.zone.equals(zone);
            if (unchanged) {
                [c, o] = [
                    config.old.c,
                    config.old.o
                ];
            } else {
                const ot = zone.offset(this.ts);
                c = tsToObj(this.ts, ot);
                invalid = Number.isNaN(c.year) ? new Invalid("invalid input") : null;
                c = invalid ? null : c;
                o = invalid ? null : ot;
            }
        }
        this._zone = zone;
        this.loc = config.loc || Locale.create();
        this.invalid = invalid;
        this.weekData = null;
        this.c = c;
        this.o = o;
        this.isLuxonDateTime = true;
    }
    static now() {
        return new DateTime({});
    }
    static local() {
        const [opts, args] = lastOpts(arguments), [year, month, day, hour, minute, second, millisecond] = args;
        return quickDT({
            year,
            month,
            day,
            hour,
            minute,
            second,
            millisecond
        }, opts);
    }
    static utc() {
        const [opts, args] = lastOpts(arguments), [year, month, day, hour, minute, second, millisecond] = args;
        opts.zone = FixedOffsetZone.utcInstance;
        return quickDT({
            year,
            month,
            day,
            hour,
            minute,
            second,
            millisecond
        }, opts);
    }
    static fromJSDate(date, options = {}) {
        const ts = isDate(date) ? date.valueOf() : NaN;
        if (Number.isNaN(ts)) {
            return DateTime.invalid("invalid input");
        }
        const zoneToUse = normalizeZone(options.zone, Settings.defaultZone);
        if (!zoneToUse.isValid) {
            return DateTime.invalid(unsupportedZone(zoneToUse));
        }
        return new DateTime({
            ts,
            zone: zoneToUse,
            loc: Locale.fromObject(options)
        });
    }
    static fromMillis(milliseconds, options = {}) {
        if (!isNumber(milliseconds)) {
            throw new InvalidArgumentError(`fromMillis requires a numerical input, but received a ${typeof milliseconds} with value ${milliseconds}`);
        } else if (milliseconds < -MAX_DATE || milliseconds > MAX_DATE) {
            return DateTime.invalid("Timestamp out of range");
        } else {
            return new DateTime({
                ts: milliseconds,
                zone: normalizeZone(options.zone, Settings.defaultZone),
                loc: Locale.fromObject(options)
            });
        }
    }
    static fromSeconds(seconds, options = {}) {
        if (!isNumber(seconds)) {
            throw new InvalidArgumentError("fromSeconds requires a numerical input");
        } else {
            return new DateTime({
                ts: seconds * 1e3,
                zone: normalizeZone(options.zone, Settings.defaultZone),
                loc: Locale.fromObject(options)
            });
        }
    }
    static fromObject(obj, opts = {}) {
        obj = obj || {};
        const zoneToUse = normalizeZone(opts.zone, Settings.defaultZone);
        if (!zoneToUse.isValid) {
            return DateTime.invalid(unsupportedZone(zoneToUse));
        }
        const tsNow = Settings.now(), offsetProvis = !isUndefined(opts.specificOffset) ? opts.specificOffset : zoneToUse.offset(tsNow), normalized = normalizeObject(obj, normalizeUnit), containsOrdinal = !isUndefined(normalized.ordinal), containsGregorYear = !isUndefined(normalized.year), containsGregorMD = !isUndefined(normalized.month) || !isUndefined(normalized.day), containsGregor = containsGregorYear || containsGregorMD, definiteWeekDef = normalized.weekYear || normalized.weekNumber, loc = Locale.fromObject(opts);
        if ((containsGregor || containsOrdinal) && definiteWeekDef) {
            throw new ConflictingSpecificationError("Can't mix weekYear/weekNumber units with year/month/day or ordinals");
        }
        if (containsGregorMD && containsOrdinal) {
            throw new ConflictingSpecificationError("Can't mix ordinal dates with month/day");
        }
        const useWeekData = definiteWeekDef || normalized.weekday && !containsGregor;
        let units, defaultValues, objNow = tsToObj(tsNow, offsetProvis);
        if (useWeekData) {
            units = orderedWeekUnits;
            defaultValues = defaultWeekUnitValues;
            objNow = gregorianToWeek(objNow);
        } else if (containsOrdinal) {
            units = orderedOrdinalUnits;
            defaultValues = defaultOrdinalUnitValues;
            objNow = gregorianToOrdinal(objNow);
        } else {
            units = orderedUnits2;
            defaultValues = defaultUnitValues;
        }
        let foundFirst = false;
        for (const u of units){
            const v = normalized[u];
            if (!isUndefined(v)) {
                foundFirst = true;
            } else if (foundFirst) {
                normalized[u] = defaultValues[u];
            } else {
                normalized[u] = objNow[u];
            }
        }
        const higherOrderInvalid = useWeekData ? hasInvalidWeekData(normalized) : containsOrdinal ? hasInvalidOrdinalData(normalized) : hasInvalidGregorianData(normalized), invalid = higherOrderInvalid || hasInvalidTimeData(normalized);
        if (invalid) {
            return DateTime.invalid(invalid);
        }
        const gregorian = useWeekData ? weekToGregorian(normalized) : containsOrdinal ? ordinalToGregorian(normalized) : normalized, [tsFinal, offsetFinal] = objToTS(gregorian, offsetProvis, zoneToUse), inst = new DateTime({
            ts: tsFinal,
            zone: zoneToUse,
            o: offsetFinal,
            loc
        });
        if (normalized.weekday && containsGregor && obj.weekday !== inst.weekday) {
            return DateTime.invalid("mismatched weekday", `you can't specify both a weekday of ${normalized.weekday} and a date of ${inst.toISO()}`);
        }
        return inst;
    }
    static fromISO(text, opts = {}) {
        const [vals, parsedZone] = parseISODate(text);
        return parseDataToDateTime(vals, parsedZone, opts, "ISO 8601", text);
    }
    static fromRFC2822(text, opts = {}) {
        const [vals, parsedZone] = parseRFC2822Date(text);
        return parseDataToDateTime(vals, parsedZone, opts, "RFC 2822", text);
    }
    static fromHTTP(text, opts = {}) {
        const [vals, parsedZone] = parseHTTPDate(text);
        return parseDataToDateTime(vals, parsedZone, opts, "HTTP", opts);
    }
    static fromFormat(text, fmt, opts = {}) {
        if (isUndefined(text) || isUndefined(fmt)) {
            throw new InvalidArgumentError("fromFormat requires an input string and a format");
        }
        const { locale =null , numberingSystem =null  } = opts, localeToUse = Locale.fromOpts({
            locale,
            numberingSystem,
            defaultToEN: true
        }), [vals, parsedZone, specificOffset, invalid] = parseFromTokens(localeToUse, text, fmt);
        if (invalid) {
            return DateTime.invalid(invalid);
        } else {
            return parseDataToDateTime(vals, parsedZone, opts, `format ${fmt}`, text, specificOffset);
        }
    }
    static fromString(text, fmt, opts = {}) {
        return DateTime.fromFormat(text, fmt, opts);
    }
    static fromSQL(text, opts = {}) {
        const [vals, parsedZone] = parseSQL(text);
        return parseDataToDateTime(vals, parsedZone, opts, "SQL", text);
    }
    static invalid(reason, explanation = null) {
        if (!reason) {
            throw new InvalidArgumentError("need to specify a reason the DateTime is invalid");
        }
        const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);
        if (Settings.throwOnInvalid) {
            throw new InvalidDateTimeError(invalid);
        } else {
            return new DateTime({
                invalid
            });
        }
    }
    static isDateTime(o) {
        return o && o.isLuxonDateTime || false;
    }
    static parseFormatForOpts(formatOpts, localeOpts = {}) {
        const tokenList = formatOptsToTokens(formatOpts, Locale.fromObject(localeOpts));
        return !tokenList ? null : tokenList.map((t)=>t ? t.val : null).join("");
    }
    get(unit) {
        return this[unit];
    }
    get isValid() {
        return this.invalid === null;
    }
    get invalidReason() {
        return this.invalid ? this.invalid.reason : null;
    }
    get invalidExplanation() {
        return this.invalid ? this.invalid.explanation : null;
    }
    get locale() {
        return this.isValid ? this.loc.locale : null;
    }
    get numberingSystem() {
        return this.isValid ? this.loc.numberingSystem : null;
    }
    get outputCalendar() {
        return this.isValid ? this.loc.outputCalendar : null;
    }
    get zone() {
        return this._zone;
    }
    get zoneName() {
        return this.isValid ? this.zone.name : null;
    }
    get year() {
        return this.isValid ? this.c.year : NaN;
    }
    get quarter() {
        return this.isValid ? Math.ceil(this.c.month / 3) : NaN;
    }
    get month() {
        return this.isValid ? this.c.month : NaN;
    }
    get day() {
        return this.isValid ? this.c.day : NaN;
    }
    get hour() {
        return this.isValid ? this.c.hour : NaN;
    }
    get minute() {
        return this.isValid ? this.c.minute : NaN;
    }
    get second() {
        return this.isValid ? this.c.second : NaN;
    }
    get millisecond() {
        return this.isValid ? this.c.millisecond : NaN;
    }
    get weekYear() {
        return this.isValid ? possiblyCachedWeekData(this).weekYear : NaN;
    }
    get weekNumber() {
        return this.isValid ? possiblyCachedWeekData(this).weekNumber : NaN;
    }
    get weekday() {
        return this.isValid ? possiblyCachedWeekData(this).weekday : NaN;
    }
    get ordinal() {
        return this.isValid ? gregorianToOrdinal(this.c).ordinal : NaN;
    }
    get monthShort() {
        return this.isValid ? Info.months("short", {
            locObj: this.loc
        })[this.month - 1] : null;
    }
    get monthLong() {
        return this.isValid ? Info.months("long", {
            locObj: this.loc
        })[this.month - 1] : null;
    }
    get weekdayShort() {
        return this.isValid ? Info.weekdays("short", {
            locObj: this.loc
        })[this.weekday - 1] : null;
    }
    get weekdayLong() {
        return this.isValid ? Info.weekdays("long", {
            locObj: this.loc
        })[this.weekday - 1] : null;
    }
    get offset() {
        return this.isValid ? +this.o : NaN;
    }
    get offsetNameShort() {
        if (this.isValid) {
            return this.zone.offsetName(this.ts, {
                format: "short",
                locale: this.locale
            });
        } else {
            return null;
        }
    }
    get offsetNameLong() {
        if (this.isValid) {
            return this.zone.offsetName(this.ts, {
                format: "long",
                locale: this.locale
            });
        } else {
            return null;
        }
    }
    get isOffsetFixed() {
        return this.isValid ? this.zone.isUniversal : null;
    }
    get isInDST() {
        if (this.isOffsetFixed) {
            return false;
        } else {
            return this.offset > this.set({
                month: 1,
                day: 1
            }).offset || this.offset > this.set({
                month: 5
            }).offset;
        }
    }
    get isInLeapYear() {
        return isLeapYear(this.year);
    }
    get daysInMonth() {
        return daysInMonth(this.year, this.month);
    }
    get daysInYear() {
        return this.isValid ? daysInYear(this.year) : NaN;
    }
    get weeksInWeekYear() {
        return this.isValid ? weeksInWeekYear(this.weekYear) : NaN;
    }
    resolvedLocaleOptions(opts = {}) {
        const { locale , numberingSystem , calendar  } = Formatter.create(this.loc.clone(opts), opts).resolvedOptions(this);
        return {
            locale,
            numberingSystem,
            outputCalendar: calendar
        };
    }
    toUTC(offset2 = 0, opts = {}) {
        return this.setZone(FixedOffsetZone.instance(offset2), opts);
    }
    toLocal() {
        return this.setZone(Settings.defaultZone);
    }
    setZone(zone, { keepLocalTime =false , keepCalendarTime =false  } = {}) {
        zone = normalizeZone(zone, Settings.defaultZone);
        if (zone.equals(this.zone)) {
            return this;
        } else if (!zone.isValid) {
            return DateTime.invalid(unsupportedZone(zone));
        } else {
            let newTS = this.ts;
            if (keepLocalTime || keepCalendarTime) {
                const offsetGuess = zone.offset(this.ts);
                const asObj = this.toObject();
                [newTS] = objToTS(asObj, offsetGuess, zone);
            }
            return clone2(this, {
                ts: newTS,
                zone
            });
        }
    }
    reconfigure({ locale , numberingSystem , outputCalendar  } = {}) {
        const loc = this.loc.clone({
            locale,
            numberingSystem,
            outputCalendar
        });
        return clone2(this, {
            loc
        });
    }
    setLocale(locale) {
        return this.reconfigure({
            locale
        });
    }
    set(values) {
        if (!this.isValid) return this;
        const normalized = normalizeObject(values, normalizeUnit), settingWeekStuff = !isUndefined(normalized.weekYear) || !isUndefined(normalized.weekNumber) || !isUndefined(normalized.weekday), containsOrdinal = !isUndefined(normalized.ordinal), containsGregorYear = !isUndefined(normalized.year), containsGregorMD = !isUndefined(normalized.month) || !isUndefined(normalized.day), containsGregor = containsGregorYear || containsGregorMD, definiteWeekDef = normalized.weekYear || normalized.weekNumber;
        if ((containsGregor || containsOrdinal) && definiteWeekDef) {
            throw new ConflictingSpecificationError("Can't mix weekYear/weekNumber units with year/month/day or ordinals");
        }
        if (containsGregorMD && containsOrdinal) {
            throw new ConflictingSpecificationError("Can't mix ordinal dates with month/day");
        }
        let mixed;
        if (settingWeekStuff) {
            mixed = weekToGregorian({
                ...gregorianToWeek(this.c),
                ...normalized
            });
        } else if (!isUndefined(normalized.ordinal)) {
            mixed = ordinalToGregorian({
                ...gregorianToOrdinal(this.c),
                ...normalized
            });
        } else {
            mixed = {
                ...this.toObject(),
                ...normalized
            };
            if (isUndefined(normalized.day)) {
                mixed.day = Math.min(daysInMonth(mixed.year, mixed.month), mixed.day);
            }
        }
        const [ts, o] = objToTS(mixed, this.o, this.zone);
        return clone2(this, {
            ts,
            o
        });
    }
    plus(duration) {
        if (!this.isValid) return this;
        const dur = Duration.fromDurationLike(duration);
        return clone2(this, adjustTime(this, dur));
    }
    minus(duration) {
        if (!this.isValid) return this;
        const dur = Duration.fromDurationLike(duration).negate();
        return clone2(this, adjustTime(this, dur));
    }
    startOf(unit) {
        if (!this.isValid) return this;
        const o = {}, normalizedUnit = Duration.normalizeUnit(unit);
        switch(normalizedUnit){
            case "years":
                o.month = 1;
            case "quarters":
            case "months":
                o.day = 1;
            case "weeks":
            case "days":
                o.hour = 0;
            case "hours":
                o.minute = 0;
            case "minutes":
                o.second = 0;
            case "seconds":
                o.millisecond = 0;
                break;
        }
        if (normalizedUnit === "weeks") {
            o.weekday = 1;
        }
        if (normalizedUnit === "quarters") {
            const q = Math.ceil(this.month / 3);
            o.month = (q - 1) * 3 + 1;
        }
        return this.set(o);
    }
    endOf(unit) {
        return this.isValid ? this.plus({
            [unit]: 1
        }).startOf(unit).minus(1) : this;
    }
    toFormat(fmt, opts = {}) {
        return this.isValid ? Formatter.create(this.loc.redefaultToEN(opts)).formatDateTimeFromString(this, fmt) : INVALID4;
    }
    toLocaleString(formatOpts = DATE_SHORT, opts = {}) {
        return this.isValid ? Formatter.create(this.loc.clone(opts), formatOpts).formatDateTime(this) : INVALID4;
    }
    toLocaleParts(opts = {}) {
        return this.isValid ? Formatter.create(this.loc.clone(opts), opts).formatDateTimeParts(this) : [];
    }
    toISO({ format ="extended" , suppressSeconds =false , suppressMilliseconds =false , includeOffset =true , extendedZone =false  } = {}) {
        if (!this.isValid) {
            return null;
        }
        const ext = format === "extended";
        let c = toISODate(this, ext);
        c += "T";
        c += toISOTime(this, ext, suppressSeconds, suppressMilliseconds, includeOffset, extendedZone);
        return c;
    }
    toISODate({ format ="extended"  } = {}) {
        if (!this.isValid) {
            return null;
        }
        return toISODate(this, format === "extended");
    }
    toISOWeekDate() {
        return toTechFormat(this, "kkkk-'W'WW-c");
    }
    toISOTime({ suppressMilliseconds =false , suppressSeconds =false , includeOffset =true , includePrefix =false , extendedZone =false , format ="extended"  } = {}) {
        if (!this.isValid) {
            return null;
        }
        let c = includePrefix ? "T" : "";
        return c + toISOTime(this, format === "extended", suppressSeconds, suppressMilliseconds, includeOffset, extendedZone);
    }
    toRFC2822() {
        return toTechFormat(this, "EEE, dd LLL yyyy HH:mm:ss ZZZ", false);
    }
    toHTTP() {
        return toTechFormat(this.toUTC(), "EEE, dd LLL yyyy HH:mm:ss 'GMT'");
    }
    toSQLDate() {
        if (!this.isValid) {
            return null;
        }
        return toISODate(this, true);
    }
    toSQLTime({ includeOffset =true , includeZone =false , includeOffsetSpace =true  } = {}) {
        let fmt = "HH:mm:ss.SSS";
        if (includeZone || includeOffset) {
            if (includeOffsetSpace) {
                fmt += " ";
            }
            if (includeZone) {
                fmt += "z";
            } else if (includeOffset) {
                fmt += "ZZ";
            }
        }
        return toTechFormat(this, fmt, true);
    }
    toSQL(opts = {}) {
        if (!this.isValid) {
            return null;
        }
        return `${this.toSQLDate()} ${this.toSQLTime(opts)}`;
    }
    toString() {
        return this.isValid ? this.toISO() : INVALID4;
    }
    valueOf() {
        return this.toMillis();
    }
    toMillis() {
        return this.isValid ? this.ts : NaN;
    }
    toSeconds() {
        return this.isValid ? this.ts / 1e3 : NaN;
    }
    toUnixInteger() {
        return this.isValid ? Math.floor(this.ts / 1e3) : NaN;
    }
    toJSON() {
        return this.toISO();
    }
    toBSON() {
        return this.toJSDate();
    }
    toObject(opts = {}) {
        if (!this.isValid) return {};
        const base = {
            ...this.c
        };
        if (opts.includeConfig) {
            base.outputCalendar = this.outputCalendar;
            base.numberingSystem = this.loc.numberingSystem;
            base.locale = this.loc.locale;
        }
        return base;
    }
    toJSDate() {
        return new Date(this.isValid ? this.ts : NaN);
    }
    diff(otherDateTime, unit = "milliseconds", opts = {}) {
        if (!this.isValid || !otherDateTime.isValid) {
            return Duration.invalid("created by diffing an invalid DateTime");
        }
        const durOpts = {
            locale: this.locale,
            numberingSystem: this.numberingSystem,
            ...opts
        };
        const units = maybeArray(unit).map(Duration.normalizeUnit), otherIsLater = otherDateTime.valueOf() > this.valueOf(), earlier = otherIsLater ? this : otherDateTime, later = otherIsLater ? otherDateTime : this, diffed = diff_default(earlier, later, units, durOpts);
        return otherIsLater ? diffed.negate() : diffed;
    }
    diffNow(unit = "milliseconds", opts = {}) {
        return this.diff(DateTime.now(), unit, opts);
    }
    until(otherDateTime) {
        return this.isValid ? Interval.fromDateTimes(this, otherDateTime) : this;
    }
    hasSame(otherDateTime, unit) {
        if (!this.isValid) return false;
        const inputMs = otherDateTime.valueOf();
        const adjustedToZone = this.setZone(otherDateTime.zone, {
            keepLocalTime: true
        });
        return adjustedToZone.startOf(unit) <= inputMs && inputMs <= adjustedToZone.endOf(unit);
    }
    equals(other) {
        return this.isValid && other.isValid && this.valueOf() === other.valueOf() && this.zone.equals(other.zone) && this.loc.equals(other.loc);
    }
    toRelative(options = {}) {
        if (!this.isValid) return null;
        const base = options.base || DateTime.fromObject({}, {
            zone: this.zone
        }), padding = options.padding ? this < base ? -options.padding : options.padding : 0;
        let units = [
            "years",
            "months",
            "days",
            "hours",
            "minutes",
            "seconds"
        ];
        let unit = options.unit;
        if (Array.isArray(options.unit)) {
            units = options.unit;
            unit = void 0;
        }
        return diffRelative(base, this.plus(padding), {
            ...options,
            numeric: "always",
            units,
            unit
        });
    }
    toRelativeCalendar(options = {}) {
        if (!this.isValid) return null;
        return diffRelative(options.base || DateTime.fromObject({}, {
            zone: this.zone
        }), this, {
            ...options,
            numeric: "auto",
            units: [
                "years",
                "months",
                "days"
            ],
            calendary: true
        });
    }
    static min(...dateTimes) {
        if (!dateTimes.every(DateTime.isDateTime)) {
            throw new InvalidArgumentError("min requires all arguments be DateTimes");
        }
        return bestBy(dateTimes, (i)=>i.valueOf(), Math.min);
    }
    static max(...dateTimes) {
        if (!dateTimes.every(DateTime.isDateTime)) {
            throw new InvalidArgumentError("max requires all arguments be DateTimes");
        }
        return bestBy(dateTimes, (i)=>i.valueOf(), Math.max);
    }
    static fromFormatExplain(text, fmt, options = {}) {
        const { locale =null , numberingSystem =null  } = options, localeToUse = Locale.fromOpts({
            locale,
            numberingSystem,
            defaultToEN: true
        });
        return explainFromTokens(localeToUse, text, fmt);
    }
    static fromStringExplain(text, fmt, options = {}) {
        return DateTime.fromFormatExplain(text, fmt, options);
    }
    static get DATE_SHORT() {
        return DATE_SHORT;
    }
    static get DATE_MED() {
        return DATE_MED;
    }
    static get DATE_MED_WITH_WEEKDAY() {
        return DATE_MED_WITH_WEEKDAY;
    }
    static get DATE_FULL() {
        return DATE_FULL;
    }
    static get DATE_HUGE() {
        return DATE_HUGE;
    }
    static get TIME_SIMPLE() {
        return TIME_SIMPLE;
    }
    static get TIME_WITH_SECONDS() {
        return TIME_WITH_SECONDS;
    }
    static get TIME_WITH_SHORT_OFFSET() {
        return TIME_WITH_SHORT_OFFSET;
    }
    static get TIME_WITH_LONG_OFFSET() {
        return TIME_WITH_LONG_OFFSET;
    }
    static get TIME_24_SIMPLE() {
        return TIME_24_SIMPLE;
    }
    static get TIME_24_WITH_SECONDS() {
        return TIME_24_WITH_SECONDS;
    }
    static get TIME_24_WITH_SHORT_OFFSET() {
        return TIME_24_WITH_SHORT_OFFSET;
    }
    static get TIME_24_WITH_LONG_OFFSET() {
        return TIME_24_WITH_LONG_OFFSET;
    }
    static get DATETIME_SHORT() {
        return DATETIME_SHORT;
    }
    static get DATETIME_SHORT_WITH_SECONDS() {
        return DATETIME_SHORT_WITH_SECONDS;
    }
    static get DATETIME_MED() {
        return DATETIME_MED;
    }
    static get DATETIME_MED_WITH_SECONDS() {
        return DATETIME_MED_WITH_SECONDS;
    }
    static get DATETIME_MED_WITH_WEEKDAY() {
        return DATETIME_MED_WITH_WEEKDAY;
    }
    static get DATETIME_FULL() {
        return DATETIME_FULL;
    }
    static get DATETIME_FULL_WITH_SECONDS() {
        return DATETIME_FULL_WITH_SECONDS;
    }
    static get DATETIME_HUGE() {
        return DATETIME_HUGE;
    }
    static get DATETIME_HUGE_WITH_SECONDS() {
        return DATETIME_HUGE_WITH_SECONDS;
    }
};
function friendlyDateTime(dateTimeish) {
    if (DateTime.isDateTime(dateTimeish)) {
        return dateTimeish;
    } else if (dateTimeish && dateTimeish.valueOf && isNumber(dateTimeish.valueOf())) {
        return DateTime.fromJSDate(dateTimeish);
    } else if (dateTimeish && typeof dateTimeish === "object") {
        return DateTime.fromObject(dateTimeish);
    } else {
        throw new InvalidArgumentError(`Unknown datetime argument: ${dateTimeish}, of type ${typeof dateTimeish}`);
    }
}
var __create2 = Object.create;
var __defProp22 = Object.defineProperty;
var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
var __getOwnPropNames2 = Object.getOwnPropertyNames;
var __getProtoOf2 = Object.getPrototypeOf;
var __hasOwnProp2 = Object.prototype.hasOwnProperty;
var __commonJS2 = (cb, mod22)=>function __require2() {
        return mod22 || (0, cb[__getOwnPropNames2(cb)[0]])((mod22 = {
            exports: {}
        }).exports, mod22), mod22.exports;
    };
var __copyProps2 = (to, from, except, desc)=>{
    if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))if (!__hasOwnProp2.call(to, key) && key !== except) __defProp22(to, key, {
            get: ()=>from[key],
            enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable
        });
    }
    return to;
};
var __toESM2 = (mod22, isNodeMode, target)=>(target = mod22 != null ? __create2(__getProtoOf2(mod22)) : {}, __copyProps2(isNodeMode || !mod22 || !mod22.__esModule ? __defProp22(target, "default", {
        value: mod22,
        enumerable: true
    }) : target, mod22));
var require_int = __commonJS2({
    "node_modules/@stablelib/int/lib/int.js" (exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function imulShim(a, b) {
            var ah = a >>> 16 & 65535, al = a & 65535;
            var bh = b >>> 16 & 65535, bl = b & 65535;
            return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
        }
        exports.mul = Math.imul || imulShim;
        function add(a, b) {
            return a + b | 0;
        }
        exports.add = add;
        function sub(a, b) {
            return a - b | 0;
        }
        exports.sub = sub;
        function rotl(x, n2) {
            return x << n2 | x >>> 32 - n2;
        }
        exports.rotl = rotl;
        function rotr(x, n2) {
            return x << 32 - n2 | x >>> n2;
        }
        exports.rotr = rotr;
        function isIntegerShim(n2) {
            return typeof n2 === "number" && isFinite(n2) && Math.floor(n2) === n2;
        }
        exports.isInteger = Number.isInteger || isIntegerShim;
        exports.MAX_SAFE_INTEGER = 9007199254740991;
        exports.isSafeInteger = function(n2) {
            return exports.isInteger(n2) && n2 >= -exports.MAX_SAFE_INTEGER && n2 <= exports.MAX_SAFE_INTEGER;
        };
    }
});
var require_binary = __commonJS2({
    "node_modules/@stablelib/binary/lib/binary.js" (exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var int_1 = require_int();
        function readInt16BE(array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            return (array[offset2 + 0] << 8 | array[offset2 + 1]) << 16 >> 16;
        }
        exports.readInt16BE = readInt16BE;
        function readUint16BE(array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            return (array[offset2 + 0] << 8 | array[offset2 + 1]) >>> 0;
        }
        exports.readUint16BE = readUint16BE;
        function readInt16LE(array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            return (array[offset2 + 1] << 8 | array[offset2]) << 16 >> 16;
        }
        exports.readInt16LE = readInt16LE;
        function readUint16LE(array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            return (array[offset2 + 1] << 8 | array[offset2]) >>> 0;
        }
        exports.readUint16LE = readUint16LE;
        function writeUint16BE(value, out, offset2) {
            if (out === void 0) {
                out = new Uint8Array(2);
            }
            if (offset2 === void 0) {
                offset2 = 0;
            }
            out[offset2 + 0] = value >>> 8;
            out[offset2 + 1] = value >>> 0;
            return out;
        }
        exports.writeUint16BE = writeUint16BE;
        exports.writeInt16BE = writeUint16BE;
        function writeUint16LE(value, out, offset2) {
            if (out === void 0) {
                out = new Uint8Array(2);
            }
            if (offset2 === void 0) {
                offset2 = 0;
            }
            out[offset2 + 0] = value >>> 0;
            out[offset2 + 1] = value >>> 8;
            return out;
        }
        exports.writeUint16LE = writeUint16LE;
        exports.writeInt16LE = writeUint16LE;
        function readInt32BE(array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            return array[offset2] << 24 | array[offset2 + 1] << 16 | array[offset2 + 2] << 8 | array[offset2 + 3];
        }
        exports.readInt32BE = readInt32BE;
        function readUint32BE(array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            return (array[offset2] << 24 | array[offset2 + 1] << 16 | array[offset2 + 2] << 8 | array[offset2 + 3]) >>> 0;
        }
        exports.readUint32BE = readUint32BE;
        function readInt32LE(array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            return array[offset2 + 3] << 24 | array[offset2 + 2] << 16 | array[offset2 + 1] << 8 | array[offset2];
        }
        exports.readInt32LE = readInt32LE;
        function readUint32LE(array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            return (array[offset2 + 3] << 24 | array[offset2 + 2] << 16 | array[offset2 + 1] << 8 | array[offset2]) >>> 0;
        }
        exports.readUint32LE = readUint32LE;
        function writeUint32BE(value, out, offset2) {
            if (out === void 0) {
                out = new Uint8Array(4);
            }
            if (offset2 === void 0) {
                offset2 = 0;
            }
            out[offset2 + 0] = value >>> 24;
            out[offset2 + 1] = value >>> 16;
            out[offset2 + 2] = value >>> 8;
            out[offset2 + 3] = value >>> 0;
            return out;
        }
        exports.writeUint32BE = writeUint32BE;
        exports.writeInt32BE = writeUint32BE;
        function writeUint32LE(value, out, offset2) {
            if (out === void 0) {
                out = new Uint8Array(4);
            }
            if (offset2 === void 0) {
                offset2 = 0;
            }
            out[offset2 + 0] = value >>> 0;
            out[offset2 + 1] = value >>> 8;
            out[offset2 + 2] = value >>> 16;
            out[offset2 + 3] = value >>> 24;
            return out;
        }
        exports.writeUint32LE = writeUint32LE;
        exports.writeInt32LE = writeUint32LE;
        function readInt64BE(array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            var hi = readInt32BE(array, offset2);
            var lo = readInt32BE(array, offset2 + 4);
            return hi * 4294967296 + lo - (lo >> 31) * 4294967296;
        }
        exports.readInt64BE = readInt64BE;
        function readUint64BE(array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            var hi = readUint32BE(array, offset2);
            var lo = readUint32BE(array, offset2 + 4);
            return hi * 4294967296 + lo;
        }
        exports.readUint64BE = readUint64BE;
        function readInt64LE(array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            var lo = readInt32LE(array, offset2);
            var hi = readInt32LE(array, offset2 + 4);
            return hi * 4294967296 + lo - (lo >> 31) * 4294967296;
        }
        exports.readInt64LE = readInt64LE;
        function readUint64LE(array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            var lo = readUint32LE(array, offset2);
            var hi = readUint32LE(array, offset2 + 4);
            return hi * 4294967296 + lo;
        }
        exports.readUint64LE = readUint64LE;
        function writeUint64BE(value, out, offset2) {
            if (out === void 0) {
                out = new Uint8Array(8);
            }
            if (offset2 === void 0) {
                offset2 = 0;
            }
            writeUint32BE(value / 4294967296 >>> 0, out, offset2);
            writeUint32BE(value >>> 0, out, offset2 + 4);
            return out;
        }
        exports.writeUint64BE = writeUint64BE;
        exports.writeInt64BE = writeUint64BE;
        function writeUint64LE(value, out, offset2) {
            if (out === void 0) {
                out = new Uint8Array(8);
            }
            if (offset2 === void 0) {
                offset2 = 0;
            }
            writeUint32LE(value >>> 0, out, offset2);
            writeUint32LE(value / 4294967296 >>> 0, out, offset2 + 4);
            return out;
        }
        exports.writeUint64LE = writeUint64LE;
        exports.writeInt64LE = writeUint64LE;
        function readUintBE(bitLength, array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            if (bitLength % 8 !== 0) {
                throw new Error("readUintBE supports only bitLengths divisible by 8");
            }
            if (bitLength / 8 > array.length - offset2) {
                throw new Error("readUintBE: array is too short for the given bitLength");
            }
            var result = 0;
            var mul = 1;
            for(var i = bitLength / 8 + offset2 - 1; i >= offset2; i--){
                result += array[i] * mul;
                mul *= 256;
            }
            return result;
        }
        exports.readUintBE = readUintBE;
        function readUintLE(bitLength, array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            if (bitLength % 8 !== 0) {
                throw new Error("readUintLE supports only bitLengths divisible by 8");
            }
            if (bitLength / 8 > array.length - offset2) {
                throw new Error("readUintLE: array is too short for the given bitLength");
            }
            var result = 0;
            var mul = 1;
            for(var i = offset2; i < offset2 + bitLength / 8; i++){
                result += array[i] * mul;
                mul *= 256;
            }
            return result;
        }
        exports.readUintLE = readUintLE;
        function writeUintBE(bitLength, value, out, offset2) {
            if (out === void 0) {
                out = new Uint8Array(bitLength / 8);
            }
            if (offset2 === void 0) {
                offset2 = 0;
            }
            if (bitLength % 8 !== 0) {
                throw new Error("writeUintBE supports only bitLengths divisible by 8");
            }
            if (!int_1.isSafeInteger(value)) {
                throw new Error("writeUintBE value must be an integer");
            }
            var div = 1;
            for(var i = bitLength / 8 + offset2 - 1; i >= offset2; i--){
                out[i] = value / div & 255;
                div *= 256;
            }
            return out;
        }
        exports.writeUintBE = writeUintBE;
        function writeUintLE(bitLength, value, out, offset2) {
            if (out === void 0) {
                out = new Uint8Array(bitLength / 8);
            }
            if (offset2 === void 0) {
                offset2 = 0;
            }
            if (bitLength % 8 !== 0) {
                throw new Error("writeUintLE supports only bitLengths divisible by 8");
            }
            if (!int_1.isSafeInteger(value)) {
                throw new Error("writeUintLE value must be an integer");
            }
            var div = 1;
            for(var i = offset2; i < offset2 + bitLength / 8; i++){
                out[i] = value / div & 255;
                div *= 256;
            }
            return out;
        }
        exports.writeUintLE = writeUintLE;
        function readFloat32BE(array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
            return view.getFloat32(offset2);
        }
        exports.readFloat32BE = readFloat32BE;
        function readFloat32LE(array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
            return view.getFloat32(offset2, true);
        }
        exports.readFloat32LE = readFloat32LE;
        function readFloat64BE(array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
            return view.getFloat64(offset2);
        }
        exports.readFloat64BE = readFloat64BE;
        function readFloat64LE(array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
            return view.getFloat64(offset2, true);
        }
        exports.readFloat64LE = readFloat64LE;
        function writeFloat32BE(value, out, offset2) {
            if (out === void 0) {
                out = new Uint8Array(4);
            }
            if (offset2 === void 0) {
                offset2 = 0;
            }
            var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
            view.setFloat32(offset2, value);
            return out;
        }
        exports.writeFloat32BE = writeFloat32BE;
        function writeFloat32LE(value, out, offset2) {
            if (out === void 0) {
                out = new Uint8Array(4);
            }
            if (offset2 === void 0) {
                offset2 = 0;
            }
            var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
            view.setFloat32(offset2, value, true);
            return out;
        }
        exports.writeFloat32LE = writeFloat32LE;
        function writeFloat64BE(value, out, offset2) {
            if (out === void 0) {
                out = new Uint8Array(8);
            }
            if (offset2 === void 0) {
                offset2 = 0;
            }
            var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
            view.setFloat64(offset2, value);
            return out;
        }
        exports.writeFloat64BE = writeFloat64BE;
        function writeFloat64LE(value, out, offset2) {
            if (out === void 0) {
                out = new Uint8Array(8);
            }
            if (offset2 === void 0) {
                offset2 = 0;
            }
            var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
            view.setFloat64(offset2, value, true);
            return out;
        }
        exports.writeFloat64LE = writeFloat64LE;
    }
});
var require_wipe = __commonJS2({
    "node_modules/@stablelib/wipe/lib/wipe.js" (exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function wipe(array) {
            for(var i = 0; i < array.length; i++){
                array[i] = 0;
            }
            return array;
        }
        exports.wipe = wipe;
    }
});
var require_sha256 = __commonJS2({
    "node_modules/@stablelib/sha256/lib/sha256.js" (exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var binary_1 = require_binary();
        var wipe_1 = require_wipe();
        exports.DIGEST_LENGTH = 32;
        exports.BLOCK_SIZE = 64;
        var SHA256 = function() {
            function SHA2562() {
                this.digestLength = exports.DIGEST_LENGTH;
                this.blockSize = exports.BLOCK_SIZE;
                this._state = new Int32Array(8);
                this._temp = new Int32Array(64);
                this._buffer = new Uint8Array(128);
                this._bufferLength = 0;
                this._bytesHashed = 0;
                this._finished = false;
                this.reset();
            }
            SHA2562.prototype._initState = function() {
                this._state[0] = 1779033703;
                this._state[1] = 3144134277;
                this._state[2] = 1013904242;
                this._state[3] = 2773480762;
                this._state[4] = 1359893119;
                this._state[5] = 2600822924;
                this._state[6] = 528734635;
                this._state[7] = 1541459225;
            };
            SHA2562.prototype.reset = function() {
                this._initState();
                this._bufferLength = 0;
                this._bytesHashed = 0;
                this._finished = false;
                return this;
            };
            SHA2562.prototype.clean = function() {
                wipe_1.wipe(this._buffer);
                wipe_1.wipe(this._temp);
                this.reset();
            };
            SHA2562.prototype.update = function(data, dataLength) {
                if (dataLength === void 0) {
                    dataLength = data.length;
                }
                if (this._finished) {
                    throw new Error("SHA256: can't update because hash was finished.");
                }
                var dataPos = 0;
                this._bytesHashed += dataLength;
                if (this._bufferLength > 0) {
                    while(this._bufferLength < this.blockSize && dataLength > 0){
                        this._buffer[this._bufferLength++] = data[dataPos++];
                        dataLength--;
                    }
                    if (this._bufferLength === this.blockSize) {
                        hashBlocks(this._temp, this._state, this._buffer, 0, this.blockSize);
                        this._bufferLength = 0;
                    }
                }
                if (dataLength >= this.blockSize) {
                    dataPos = hashBlocks(this._temp, this._state, data, dataPos, dataLength);
                    dataLength %= this.blockSize;
                }
                while(dataLength > 0){
                    this._buffer[this._bufferLength++] = data[dataPos++];
                    dataLength--;
                }
                return this;
            };
            SHA2562.prototype.finish = function(out) {
                if (!this._finished) {
                    var bytesHashed = this._bytesHashed;
                    var left = this._bufferLength;
                    var bitLenHi = bytesHashed / 536870912 | 0;
                    var bitLenLo = bytesHashed << 3;
                    var padLength = bytesHashed % 64 < 56 ? 64 : 128;
                    this._buffer[left] = 128;
                    for(var i = left + 1; i < padLength - 8; i++){
                        this._buffer[i] = 0;
                    }
                    binary_1.writeUint32BE(bitLenHi, this._buffer, padLength - 8);
                    binary_1.writeUint32BE(bitLenLo, this._buffer, padLength - 4);
                    hashBlocks(this._temp, this._state, this._buffer, 0, padLength);
                    this._finished = true;
                }
                for(var i = 0; i < this.digestLength / 4; i++){
                    binary_1.writeUint32BE(this._state[i], out, i * 4);
                }
                return this;
            };
            SHA2562.prototype.digest = function() {
                var out = new Uint8Array(this.digestLength);
                this.finish(out);
                return out;
            };
            SHA2562.prototype.saveState = function() {
                if (this._finished) {
                    throw new Error("SHA256: cannot save finished state");
                }
                return {
                    state: new Int32Array(this._state),
                    buffer: this._bufferLength > 0 ? new Uint8Array(this._buffer) : void 0,
                    bufferLength: this._bufferLength,
                    bytesHashed: this._bytesHashed
                };
            };
            SHA2562.prototype.restoreState = function(savedState) {
                this._state.set(savedState.state);
                this._bufferLength = savedState.bufferLength;
                if (savedState.buffer) {
                    this._buffer.set(savedState.buffer);
                }
                this._bytesHashed = savedState.bytesHashed;
                this._finished = false;
                return this;
            };
            SHA2562.prototype.cleanSavedState = function(savedState) {
                wipe_1.wipe(savedState.state);
                if (savedState.buffer) {
                    wipe_1.wipe(savedState.buffer);
                }
                savedState.bufferLength = 0;
                savedState.bytesHashed = 0;
            };
            return SHA2562;
        }();
        exports.SHA256 = SHA256;
        var K = new Int32Array([
            1116352408,
            1899447441,
            3049323471,
            3921009573,
            961987163,
            1508970993,
            2453635748,
            2870763221,
            3624381080,
            310598401,
            607225278,
            1426881987,
            1925078388,
            2162078206,
            2614888103,
            3248222580,
            3835390401,
            4022224774,
            264347078,
            604807628,
            770255983,
            1249150122,
            1555081692,
            1996064986,
            2554220882,
            2821834349,
            2952996808,
            3210313671,
            3336571891,
            3584528711,
            113926993,
            338241895,
            666307205,
            773529912,
            1294757372,
            1396182291,
            1695183700,
            1986661051,
            2177026350,
            2456956037,
            2730485921,
            2820302411,
            3259730800,
            3345764771,
            3516065817,
            3600352804,
            4094571909,
            275423344,
            430227734,
            506948616,
            659060556,
            883997877,
            958139571,
            1322822218,
            1537002063,
            1747873779,
            1955562222,
            2024104815,
            2227730452,
            2361852424,
            2428436474,
            2756734187,
            3204031479,
            3329325298
        ]);
        function hashBlocks(w, v, p, pos, len) {
            while(len >= 64){
                var a = v[0];
                var b = v[1];
                var c = v[2];
                var d = v[3];
                var e = v[4];
                var f = v[5];
                var g = v[6];
                var h = v[7];
                for(var i = 0; i < 16; i++){
                    var j = pos + i * 4;
                    w[i] = binary_1.readUint32BE(p, j);
                }
                for(var i = 16; i < 64; i++){
                    var u = w[i - 2];
                    var t1 = (u >>> 17 | u << 32 - 17) ^ (u >>> 19 | u << 32 - 19) ^ u >>> 10;
                    u = w[i - 15];
                    var t2 = (u >>> 7 | u << 32 - 7) ^ (u >>> 18 | u << 32 - 18) ^ u >>> 3;
                    w[i] = (t1 + w[i - 7] | 0) + (t2 + w[i - 16] | 0);
                }
                for(var i = 0; i < 64; i++){
                    var t1 = (((e >>> 6 | e << 32 - 6) ^ (e >>> 11 | e << 32 - 11) ^ (e >>> 25 | e << 32 - 25)) + (e & f ^ ~e & g) | 0) + (h + (K[i] + w[i] | 0) | 0) | 0;
                    var t2 = ((a >>> 2 | a << 32 - 2) ^ (a >>> 13 | a << 32 - 13) ^ (a >>> 22 | a << 32 - 22)) + (a & b ^ a & c ^ b & c) | 0;
                    h = g;
                    g = f;
                    f = e;
                    e = d + t1 | 0;
                    d = c;
                    c = b;
                    b = a;
                    a = t1 + t2 | 0;
                }
                v[0] += a;
                v[1] += b;
                v[2] += c;
                v[3] += d;
                v[4] += e;
                v[5] += f;
                v[6] += g;
                v[7] += h;
                pos += 64;
                len -= 64;
            }
            return pos;
        }
        function hash(data) {
            var h = new SHA256();
            h.update(data);
            var digest = h.digest();
            h.clean();
            return digest;
        }
        exports.hash = hash;
    }
});
var require_halfsiphash = __commonJS2({
    "node_modules/@stablelib/halfsiphash/lib/halfsiphash.js" (exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var binary_1 = require_binary();
        var int_1 = require_int();
        exports.KEY_LENGTH = 8;
        exports.DIGEST_LENGTH = 4;
        function halfSipHash2(key, data) {
            if (key.length !== exports.KEY_LENGTH) {
                throw new Error("halfSipHash: incorrect key length");
            }
            var k0 = binary_1.readUint32LE(key, 0);
            var k1 = binary_1.readUint32LE(key, 4);
            return binary_1.writeUint32LE(halfSipHashNum(k0, k1, data));
        }
        exports.halfSipHash = halfSipHash2;
        function halfSipHashNum(k0, k1, data) {
            var v0 = k0;
            var v1 = k1;
            var v2 = k0 ^ 1819895653;
            var v3 = k1 ^ 1952801890;
            var pos = 0;
            var len = data.length;
            var fin = len % 256 << 24;
            while(len >= 4){
                var m = binary_1.readUint32LE(data, pos);
                v3 ^= m;
                v0 = int_1.add(v0, v1);
                v1 = int_1.rotl(v1, 5);
                v1 ^= v0;
                v0 = int_1.rotl(v0, 16);
                v2 = int_1.add(v2, v3);
                v3 = int_1.rotl(v3, 8);
                v3 ^= v2;
                v0 = int_1.add(v0, v3);
                v3 = int_1.rotl(v3, 7);
                v3 ^= v0;
                v2 = int_1.add(v2, v1);
                v1 = int_1.rotl(v1, 13);
                v1 ^= v2;
                v2 = int_1.rotl(v2, 16);
                v0 = int_1.add(v0, v1);
                v1 = int_1.rotl(v1, 5);
                v1 ^= v0;
                v0 = int_1.rotl(v0, 16);
                v2 = int_1.add(v2, v3);
                v3 = int_1.rotl(v3, 8);
                v3 ^= v2;
                v0 = int_1.add(v0, v3);
                v3 = int_1.rotl(v3, 7);
                v3 ^= v0;
                v2 = int_1.add(v2, v1);
                v1 = int_1.rotl(v1, 13);
                v1 ^= v2;
                v2 = int_1.rotl(v2, 16);
                v0 ^= m;
                pos += 4;
                len -= 4;
            }
            switch(len){
                case 3:
                    fin |= data[pos + 2] << 16;
                case 2:
                    fin |= data[pos + 1] << 8;
                case 1:
                    fin |= data[pos];
            }
            v3 ^= fin;
            v0 = int_1.add(v0, v1);
            v1 = int_1.rotl(v1, 5);
            v1 ^= v0;
            v0 = int_1.rotl(v0, 16);
            v2 = int_1.add(v2, v3);
            v3 = int_1.rotl(v3, 8);
            v3 ^= v2;
            v0 = int_1.add(v0, v3);
            v3 = int_1.rotl(v3, 7);
            v3 ^= v0;
            v2 = int_1.add(v2, v1);
            v1 = int_1.rotl(v1, 13);
            v1 ^= v2;
            v2 = int_1.rotl(v2, 16);
            v0 = int_1.add(v0, v1);
            v1 = int_1.rotl(v1, 5);
            v1 ^= v0;
            v0 = int_1.rotl(v0, 16);
            v2 = int_1.add(v2, v3);
            v3 = int_1.rotl(v3, 8);
            v3 ^= v2;
            v0 = int_1.add(v0, v3);
            v3 = int_1.rotl(v3, 7);
            v3 ^= v0;
            v2 = int_1.add(v2, v1);
            v1 = int_1.rotl(v1, 13);
            v1 ^= v2;
            v2 = int_1.rotl(v2, 16);
            v0 ^= fin;
            v2 ^= 255;
            v0 = int_1.add(v0, v1);
            v1 = int_1.rotl(v1, 5);
            v1 ^= v0;
            v0 = int_1.rotl(v0, 16);
            v2 = int_1.add(v2, v3);
            v3 = int_1.rotl(v3, 8);
            v3 ^= v2;
            v0 = int_1.add(v0, v3);
            v3 = int_1.rotl(v3, 7);
            v3 ^= v0;
            v2 = int_1.add(v2, v1);
            v1 = int_1.rotl(v1, 13);
            v1 ^= v2;
            v2 = int_1.rotl(v2, 16);
            v0 = int_1.add(v0, v1);
            v1 = int_1.rotl(v1, 5);
            v1 ^= v0;
            v0 = int_1.rotl(v0, 16);
            v2 = int_1.add(v2, v3);
            v3 = int_1.rotl(v3, 8);
            v3 ^= v2;
            v0 = int_1.add(v0, v3);
            v3 = int_1.rotl(v3, 7);
            v3 ^= v0;
            v2 = int_1.add(v2, v1);
            v1 = int_1.rotl(v1, 13);
            v1 ^= v2;
            v2 = int_1.rotl(v2, 16);
            v0 = int_1.add(v0, v1);
            v1 = int_1.rotl(v1, 5);
            v1 ^= v0;
            v0 = int_1.rotl(v0, 16);
            v2 = int_1.add(v2, v3);
            v3 = int_1.rotl(v3, 8);
            v3 ^= v2;
            v0 = int_1.add(v0, v3);
            v3 = int_1.rotl(v3, 7);
            v3 ^= v0;
            v2 = int_1.add(v2, v1);
            v1 = int_1.rotl(v1, 13);
            v1 ^= v2;
            v2 = int_1.rotl(v2, 16);
            v0 = int_1.add(v0, v1);
            v1 = int_1.rotl(v1, 5);
            v1 ^= v0;
            v0 = int_1.rotl(v0, 16);
            v2 = int_1.add(v2, v3);
            v3 = int_1.rotl(v3, 8);
            v3 ^= v2;
            v0 = int_1.add(v0, v3);
            v3 = int_1.rotl(v3, 7);
            v3 ^= v0;
            v2 = int_1.add(v2, v1);
            v1 = int_1.rotl(v1, 13);
            v1 ^= v2;
            return (v1 ^ v3) >>> 0;
        }
        exports.halfSipHashNum = halfSipHashNum;
    }
});
var require_constant_time = __commonJS2({
    "node_modules/@stablelib/constant-time/lib/constant-time.js" (exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function select(subject, resultIfOne, resultIfZero) {
            return ~(subject - 1) & resultIfOne | subject - 1 & resultIfZero;
        }
        exports.select = select;
        function lessOrEqual(a, b) {
            return (a | 0) - (b | 0) - 1 >>> 31 & 1;
        }
        exports.lessOrEqual = lessOrEqual;
        function compare2(a, b) {
            if (a.length !== b.length) {
                return 0;
            }
            var result = 0;
            for(var i = 0; i < a.length; i++){
                result |= a[i] ^ b[i];
            }
            return 1 & result - 1 >>> 8;
        }
        exports.compare = compare2;
        function equal22(a, b) {
            if (a.length === 0 || b.length === 0) {
                return false;
            }
            return compare2(a, b) !== 0;
        }
        exports.equal = equal22;
    }
});
var require_lib = __commonJS2({
    "node_modules/@scure/base/lib/index.js" (exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.bytes = exports.stringToBytes = exports.str = exports.bytesToString = exports.hex = exports.utf8 = exports.bech32m = exports.bech32 = exports.base58check = exports.base58xmr = exports.base58xrp = exports.base58flickr = exports.base58 = exports.base64url = exports.base64 = exports.base32crockford = exports.base32hex = exports.base32 = exports.base16 = exports.utils = exports.assertNumber = void 0;
        function assertNumber(n2) {
            if (!Number.isSafeInteger(n2)) throw new Error(`Wrong integer: ${n2}`);
        }
        exports.assertNumber = assertNumber;
        function chain(...args) {
            const wrap = (a, b)=>(c)=>a(b(c));
            const encode2 = Array.from(args).reverse().reduce((acc, i)=>acc ? wrap(acc, i.encode) : i.encode, void 0);
            const decode2 = args.reduce((acc, i)=>acc ? wrap(acc, i.decode) : i.decode, void 0);
            return {
                encode: encode2,
                decode: decode2
            };
        }
        function alphabet(alphabet2) {
            return {
                encode: (digits)=>{
                    if (!Array.isArray(digits) || digits.length && typeof digits[0] !== "number") throw new Error("alphabet.encode input should be an array of numbers");
                    return digits.map((i)=>{
                        assertNumber(i);
                        if (i < 0 || i >= alphabet2.length) throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet2.length})`);
                        return alphabet2[i];
                    });
                },
                decode: (input)=>{
                    if (!Array.isArray(input) || input.length && typeof input[0] !== "string") throw new Error("alphabet.decode input should be array of strings");
                    return input.map((letter)=>{
                        if (typeof letter !== "string") throw new Error(`alphabet.decode: not string element=${letter}`);
                        const index = alphabet2.indexOf(letter);
                        if (index === -1) throw new Error(`Unknown letter: "${letter}". Allowed: ${alphabet2}`);
                        return index;
                    });
                }
            };
        }
        function join(separator = "") {
            if (typeof separator !== "string") throw new Error("join separator should be string");
            return {
                encode: (from)=>{
                    if (!Array.isArray(from) || from.length && typeof from[0] !== "string") throw new Error("join.encode input should be array of strings");
                    for (let i of from)if (typeof i !== "string") throw new Error(`join.encode: non-string input=${i}`);
                    return from.join(separator);
                },
                decode: (to)=>{
                    if (typeof to !== "string") throw new Error("join.decode input should be string");
                    return to.split(separator);
                }
            };
        }
        function padding(bits, chr = "=") {
            assertNumber(bits);
            if (typeof chr !== "string") throw new Error("padding chr should be string");
            return {
                encode (data) {
                    if (!Array.isArray(data) || data.length && typeof data[0] !== "string") throw new Error("padding.encode input should be array of strings");
                    for (let i of data)if (typeof i !== "string") throw new Error(`padding.encode: non-string input=${i}`);
                    while(data.length * bits % 8)data.push(chr);
                    return data;
                },
                decode (input) {
                    if (!Array.isArray(input) || input.length && typeof input[0] !== "string") throw new Error("padding.encode input should be array of strings");
                    for (let i of input)if (typeof i !== "string") throw new Error(`padding.decode: non-string input=${i}`);
                    let end = input.length;
                    if (end * bits % 8) throw new Error("Invalid padding: string should have whole number of bytes");
                    for(; end > 0 && input[end - 1] === chr; end--){
                        if (!((end - 1) * bits % 8)) throw new Error("Invalid padding: string has too much padding");
                    }
                    return input.slice(0, end);
                }
            };
        }
        function normalize(fn) {
            if (typeof fn !== "function") throw new Error("normalize fn should be function");
            return {
                encode: (from)=>from,
                decode: (to)=>fn(to)
            };
        }
        function convertRadix(data, from, to) {
            if (from < 2) throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);
            if (to < 2) throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);
            if (!Array.isArray(data)) throw new Error("convertRadix: data should be array");
            if (!data.length) return [];
            let pos = 0;
            const res = [];
            const digits = Array.from(data);
            digits.forEach((d)=>{
                assertNumber(d);
                if (d < 0 || d >= from) throw new Error(`Wrong integer: ${d}`);
            });
            while(true){
                let carry = 0;
                let done = true;
                for(let i = pos; i < digits.length; i++){
                    const digit = digits[i];
                    const digitBase = from * carry + digit;
                    if (!Number.isSafeInteger(digitBase) || from * carry / from !== carry || digitBase - digit !== from * carry) {
                        throw new Error("convertRadix: carry overflow");
                    }
                    carry = digitBase % to;
                    digits[i] = Math.floor(digitBase / to);
                    if (!Number.isSafeInteger(digits[i]) || digits[i] * to + carry !== digitBase) throw new Error("convertRadix: carry overflow");
                    if (!done) continue;
                    else if (!digits[i]) pos = i;
                    else done = false;
                }
                res.push(carry);
                if (done) break;
            }
            for(let i1 = 0; i1 < data.length - 1 && data[i1] === 0; i1++)res.push(0);
            return res.reverse();
        }
        var gcd = (a, b)=>!b ? a : gcd(b, a % b);
        var radix2carry = (from, to)=>from + (to - gcd(from, to));
        function convertRadix2(data, from, to, padding2) {
            if (!Array.isArray(data)) throw new Error("convertRadix2: data should be array");
            if (from <= 0 || from > 32) throw new Error(`convertRadix2: wrong from=${from}`);
            if (to <= 0 || to > 32) throw new Error(`convertRadix2: wrong to=${to}`);
            if (radix2carry(from, to) > 32) {
                throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);
            }
            let carry = 0;
            let pos = 0;
            const mask = 2 ** to - 1;
            const res = [];
            for (const n2 of data){
                assertNumber(n2);
                if (n2 >= 2 ** from) throw new Error(`convertRadix2: invalid data word=${n2} from=${from}`);
                carry = carry << from | n2;
                if (pos + from > 32) throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);
                pos += from;
                for(; pos >= to; pos -= to)res.push((carry >> pos - to & mask) >>> 0);
                carry &= 2 ** pos - 1;
            }
            carry = carry << to - pos & mask;
            if (!padding2 && pos >= from) throw new Error("Excess padding");
            if (!padding2 && carry) throw new Error(`Non-zero padding: ${carry}`);
            if (padding2 && pos > 0) res.push(carry >>> 0);
            return res;
        }
        function radix(num) {
            assertNumber(num);
            return {
                encode: (bytes2)=>{
                    if (!(bytes2 instanceof Uint8Array)) throw new Error("radix.encode input should be Uint8Array");
                    return convertRadix(Array.from(bytes2), 2 ** 8, num);
                },
                decode: (digits)=>{
                    if (!Array.isArray(digits) || digits.length && typeof digits[0] !== "number") throw new Error("radix.decode input should be array of strings");
                    return Uint8Array.from(convertRadix(digits, num, 2 ** 8));
                }
            };
        }
        function radix2(bits, revPadding = false) {
            assertNumber(bits);
            if (bits <= 0 || bits > 32) throw new Error("radix2: bits should be in (0..32]");
            if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32) throw new Error("radix2: carry overflow");
            return {
                encode: (bytes2)=>{
                    if (!(bytes2 instanceof Uint8Array)) throw new Error("radix2.encode input should be Uint8Array");
                    return convertRadix2(Array.from(bytes2), 8, bits, !revPadding);
                },
                decode: (digits)=>{
                    if (!Array.isArray(digits) || digits.length && typeof digits[0] !== "number") throw new Error("radix2.decode input should be array of strings");
                    return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));
                }
            };
        }
        function unsafeWrapper(fn) {
            if (typeof fn !== "function") throw new Error("unsafeWrapper fn should be function");
            return function(...args) {
                try {
                    return fn.apply(null, args);
                } catch (e) {}
            };
        }
        function checksum(len, fn) {
            assertNumber(len);
            if (typeof fn !== "function") throw new Error("checksum fn should be function");
            return {
                encode (data) {
                    if (!(data instanceof Uint8Array)) throw new Error("checksum.encode: input should be Uint8Array");
                    const checksum2 = fn(data).slice(0, len);
                    const res = new Uint8Array(data.length + len);
                    res.set(data);
                    res.set(checksum2, data.length);
                    return res;
                },
                decode (data) {
                    if (!(data instanceof Uint8Array)) throw new Error("checksum.decode: input should be Uint8Array");
                    const payload = data.slice(0, -len);
                    const newChecksum = fn(payload).slice(0, len);
                    const oldChecksum = data.slice(-len);
                    for(let i = 0; i < len; i++)if (newChecksum[i] !== oldChecksum[i]) throw new Error("Invalid checksum");
                    return payload;
                }
            };
        }
        exports.utils = {
            alphabet,
            chain,
            checksum,
            radix,
            radix2,
            join,
            padding
        };
        exports.base16 = chain(radix2(4), alphabet("0123456789ABCDEF"), join(""));
        exports.base32 = chain(radix2(5), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"), padding(5), join(""));
        exports.base32hex = chain(radix2(5), alphabet("0123456789ABCDEFGHIJKLMNOPQRSTUV"), padding(5), join(""));
        exports.base32crockford = chain(radix2(5), alphabet("0123456789ABCDEFGHJKMNPQRSTVWXYZ"), join(""), normalize((s2)=>s2.toUpperCase().replace(/O/g, "0").replace(/[IL]/g, "1")));
        exports.base64 = chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"), padding(6), join(""));
        exports.base64url = chain(radix2(6), alphabet("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"), padding(6), join(""));
        var genBase58 = (abc)=>chain(radix(58), alphabet(abc), join(""));
        exports.base58 = genBase58("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
        exports.base58flickr = genBase58("123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ");
        exports.base58xrp = genBase58("rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz");
        var XMR_BLOCK_LEN = [
            0,
            2,
            3,
            5,
            6,
            7,
            9,
            10,
            11
        ];
        exports.base58xmr = {
            encode (data) {
                let res = "";
                for(let i = 0; i < data.length; i += 8){
                    const block = data.subarray(i, i + 8);
                    res += exports.base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], "1");
                }
                return res;
            },
            decode (str) {
                let res = [];
                for(let i = 0; i < str.length; i += 11){
                    const slice = str.slice(i, i + 11);
                    const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);
                    const block = exports.base58.decode(slice);
                    for(let j = 0; j < block.length - blockLen; j++){
                        if (block[j] !== 0) throw new Error("base58xmr: wrong padding");
                    }
                    res = res.concat(Array.from(block.slice(block.length - blockLen)));
                }
                return Uint8Array.from(res);
            }
        };
        var base58check2 = (sha2562)=>chain(checksum(4, (data)=>sha2562(sha2562(data))), exports.base58);
        exports.base58check = base58check2;
        var BECH_ALPHABET = chain(alphabet("qpzry9x8gf2tvdw0s3jn54khce6mua7l"), join(""));
        var POLYMOD_GENERATORS = [
            996825010,
            642813549,
            513874426,
            1027748829,
            705979059
        ];
        function bech32Polymod(pre) {
            const b = pre >> 25;
            let chk = (pre & 33554431) << 5;
            for(let i = 0; i < POLYMOD_GENERATORS.length; i++){
                if ((b >> i & 1) === 1) chk ^= POLYMOD_GENERATORS[i];
            }
            return chk;
        }
        function bechChecksum(prefix, words, encodingConst = 1) {
            const len = prefix.length;
            let chk = 1;
            for(let i = 0; i < len; i++){
                const c = prefix.charCodeAt(i);
                if (c < 33 || c > 126) throw new Error(`Invalid prefix (${prefix})`);
                chk = bech32Polymod(chk) ^ c >> 5;
            }
            chk = bech32Polymod(chk);
            for(let i1 = 0; i1 < len; i1++)chk = bech32Polymod(chk) ^ prefix.charCodeAt(i1) & 31;
            for (let v of words)chk = bech32Polymod(chk) ^ v;
            for(let i2 = 0; i2 < 6; i2++)chk = bech32Polymod(chk);
            chk ^= encodingConst;
            return BECH_ALPHABET.encode(convertRadix2([
                chk % 2 ** 30
            ], 30, 5, false));
        }
        function genBech32(encoding) {
            const ENCODING_CONST = encoding === "bech32" ? 1 : 734539939;
            const _words = radix2(5);
            const fromWords = _words.decode;
            const toWords = _words.encode;
            const fromWordsUnsafe = unsafeWrapper(fromWords);
            function encode2(prefix, words, limit = 90) {
                if (typeof prefix !== "string") throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);
                if (!Array.isArray(words) || words.length && typeof words[0] !== "number") throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);
                const actualLength = prefix.length + 7 + words.length;
                if (limit !== false && actualLength > limit) throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);
                prefix = prefix.toLowerCase();
                return `${prefix}1${BECH_ALPHABET.encode(words)}${bechChecksum(prefix, words, ENCODING_CONST)}`;
            }
            function decode2(str, limit = 90) {
                if (typeof str !== "string") throw new Error(`bech32.decode input should be string, not ${typeof str}`);
                if (str.length < 8 || limit !== false && str.length > limit) throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);
                const lowered = str.toLowerCase();
                if (str !== lowered && str !== str.toUpperCase()) throw new Error(`String must be lowercase or uppercase`);
                str = lowered;
                const sepIndex = str.lastIndexOf("1");
                if (sepIndex === 0 || sepIndex === -1) throw new Error(`Letter "1" must be present between prefix and data only`);
                const prefix = str.slice(0, sepIndex);
                const _words2 = str.slice(sepIndex + 1);
                if (_words2.length < 6) throw new Error("Data must be at least 6 characters long");
                const words = BECH_ALPHABET.decode(_words2).slice(0, -6);
                const sum = bechChecksum(prefix, words, ENCODING_CONST);
                if (!_words2.endsWith(sum)) throw new Error(`Invalid checksum in ${str}: expected "${sum}"`);
                return {
                    prefix,
                    words
                };
            }
            const decodeUnsafe = unsafeWrapper(decode2);
            function decodeToBytes(str) {
                const { prefix , words  } = decode2(str, false);
                return {
                    prefix,
                    words,
                    bytes: fromWords(words)
                };
            }
            return {
                encode: encode2,
                decode: decode2,
                decodeToBytes,
                decodeUnsafe,
                fromWords,
                fromWordsUnsafe,
                toWords
            };
        }
        exports.bech32 = genBech32("bech32");
        exports.bech32m = genBech32("bech32m");
        exports.utf8 = {
            encode: (data)=>new TextDecoder().decode(data),
            decode: (str)=>new TextEncoder().encode(str)
        };
        exports.hex = chain(radix2(4), alphabet("0123456789abcdef"), join(""), normalize((s2)=>{
            if (typeof s2 !== "string" || s2.length % 2) throw new TypeError(`hex.decode: expected string, got ${typeof s2} with length ${s2.length}`);
            return s2.toLowerCase();
        }));
        var CODERS = {
            utf8: exports.utf8,
            hex: exports.hex,
            base16: exports.base16,
            base32: exports.base32,
            base64: exports.base64,
            base64url: exports.base64url,
            base58: exports.base58,
            base58xmr: exports.base58xmr
        };
        var coderTypeError = `Invalid encoding type. Available types: ${Object.keys(CODERS).join(", ")}`;
        var bytesToString = (type, bytes2)=>{
            if (typeof type !== "string" || !CODERS.hasOwnProperty(type)) throw new TypeError(coderTypeError);
            if (!(bytes2 instanceof Uint8Array)) throw new TypeError("bytesToString() expects Uint8Array");
            return CODERS[type].encode(bytes2);
        };
        exports.bytesToString = bytesToString;
        exports.str = exports.bytesToString;
        var stringToBytes = (type, str)=>{
            if (!CODERS.hasOwnProperty(type)) throw new TypeError(coderTypeError);
            if (typeof str !== "string") throw new TypeError("stringToBytes() expects string");
            return CODERS[type].decode(str);
        };
        exports.stringToBytes = stringToBytes;
        exports.bytes = exports.stringToBytes;
    }
});
function createContext(size = 4096) {
    const buffer = new ArrayBuffer(size);
    return {
        i: 0,
        view: new DataView(buffer),
        bytes: new Uint8Array(buffer)
    };
}
function growContext(ctx) {
    ctx.bytes = new Uint8Array(ctx.bytes.length * 2);
    ctx.view = new DataView(ctx.bytes.buffer);
}
function contextSer(ctx, ser, data) {
    while(true){
        const limit = ctx.bytes.length - 8;
        ctx.i = 0;
        try {
            ser(ctx, data);
            if (ctx.i < limit) return ctx.bytes;
        } catch (error) {
            if (ctx.i < limit) throw error;
        }
        growContext(ctx);
    }
}
function contextDes(ctx, des, bytes2) {
    const { length  } = bytes2;
    if (length < 4096) {
        ctx.bytes.set(bytes2);
        ctx.i = 0;
        const data = des(ctx);
        if (ctx.i > length) throw RangeError();
        return data;
    } else {
        return des(contextFromBytes(bytes2));
    }
}
function contextFromBytes(array2) {
    return {
        i: 0,
        bytes: array2,
        view: new DataView(array2.buffer, array2.byteOffset, array2.byteLength)
    };
}
function define(ser, des) {
    return {
        ser,
        des
    };
}
var latin1 = {
    encode (ctx, data) {
        const { length  } = data;
        for(let i = 0; i < length; i++){
            ctx.view.setUint8(ctx.i++, data.charCodeAt(i));
        }
    },
    decode (ctx, size) {
        const codes = new Array(size);
        for(let i = 0; i < size; i++){
            codes[i] = ctx.view.getUint8(ctx.i++);
        }
        return String.fromCharCode(...codes);
    }
};
var string = (encoding, headSd)=>define((ctx, data)=>{
        const head = ctx.i;
        headSd.ser(ctx, data.length);
        const begin = ctx.i;
        const headSize = begin - head;
        encoding.encode(ctx, data);
        const end = ctx.i;
        const size = end - begin;
        if (size === data.length) return;
        headSd.ser(ctx, size);
        const requiredHeadSize = ctx.i - end;
        if (headSize !== requiredHeadSize) {
            ctx.bytes.copyWithin(head + requiredHeadSize, begin, end);
        }
        ctx.i = head;
        headSd.ser(ctx, size);
        ctx.i = end + (requiredHeadSize - headSize);
    }, (ctx)=>encoding.decode(ctx, headSd.des(ctx)));
var bytes = (headSd)=>define((ctx, data)=>{
        const { byteLength  } = data;
        headSd.ser(ctx, byteLength);
        ctx.bytes.set(data, ctx.i);
        ctx.i += byteLength;
    }, (ctx)=>{
        const byteLength = headSd.des(ctx);
        return ctx.bytes.subarray(ctx.i, ctx.i += byteLength);
    });
var boolean = define((ctx, data)=>void ctx.view.setUint8(ctx.i++, +data), (ctx)=>!!ctx.view.getUint8(ctx.i++));
function use({ ser , des  }) {
    const ctx = createContext();
    return {
        ser,
        des,
        toBytes: (data)=>contextSer(ctx, ser, data).slice(0, ctx.i),
        toUnsafeBytes: (data)=>contextSer(ctx, ser, data).subarray(0, ctx.i),
        fromBytes: (bytes2)=>contextDes(ctx, des, bytes2)
    };
}
var uint8 = define((ctx, data)=>ctx.view.setUint8(ctx.i++, data), (ctx)=>ctx.view.getUint8(ctx.i++));
var bigUint64 = define((ctx, data)=>{
    ctx.view.setBigUint64(ctx.i, data);
    ctx.i += 8;
}, (ctx)=>{
    const data = ctx.view.getBigUint64(ctx.i);
    ctx.i += 8;
    return data;
});
var struct = (definition)=>{
    const obj = definition instanceof Array ? ()=>[] : ()=>({});
    return define((ctx, data)=>{
        for(const key in definition){
            definition[key].ser(ctx, data[key]);
        }
    }, (ctx)=>{
        const data = obj();
        for(const key in definition){
            data[key] = definition[key].des(ctx);
        }
        return data;
    });
};
var import_sha256 = __toESM2(require_sha256(), 1);
var import_halfsiphash = __toESM2(require_halfsiphash(), 1);
var import_constant_time = __toESM2(require_constant_time(), 1);
var util2;
(function(util22) {
    function assertEqual(_cond) {}
    util22.assertEqual = assertEqual;
    function assertNever(_x) {
        throw new Error();
    }
    util22.assertNever = assertNever;
    util22.arrayToEnum = (items)=>{
        const obj = {};
        for (const item of items){
            obj[item] = item;
        }
        return obj;
    };
    util22.getValidEnumValues = (obj)=>{
        const validKeys = util22.objectKeys(obj).filter((k)=>typeof obj[obj[k]] !== "number");
        const filtered = {};
        for (const k of validKeys){
            filtered[k] = obj[k];
        }
        return util22.objectValues(filtered);
    };
    util22.objectValues = (obj)=>{
        return util22.objectKeys(obj).map(function(e) {
            return obj[e];
        });
    };
    util22.objectKeys = typeof Object.keys === "function" ? (obj)=>Object.keys(obj) : (object)=>{
        const keys = [];
        for(const key in object){
            if (Object.prototype.hasOwnProperty.call(object, key)) {
                keys.push(key);
            }
        }
        return keys;
    };
    util22.find = (arr, checker)=>{
        for (const item of arr){
            if (checker(item)) return item;
        }
        return void 0;
    };
    util22.isInteger = typeof Number.isInteger === "function" ? (val)=>Number.isInteger(val) : (val)=>typeof val === "number" && isFinite(val) && Math.floor(val) === val;
    function joinValues(array, separator = " | ") {
        return array.map((val)=>typeof val === "string" ? `'${val}'` : val).join(separator);
    }
    util22.joinValues = joinValues;
})(util2 || (util2 = {}));
var ZodParsedType2 = util2.arrayToEnum([
    "string",
    "nan",
    "number",
    "integer",
    "float",
    "boolean",
    "date",
    "bigint",
    "symbol",
    "function",
    "undefined",
    "null",
    "array",
    "object",
    "unknown",
    "promise",
    "void",
    "never",
    "map",
    "set"
]);
var getParsedType2 = (data)=>{
    const t = typeof data;
    switch(t){
        case "undefined":
            return ZodParsedType2.undefined;
        case "string":
            return ZodParsedType2.string;
        case "number":
            return isNaN(data) ? ZodParsedType2.nan : ZodParsedType2.number;
        case "boolean":
            return ZodParsedType2.boolean;
        case "function":
            return ZodParsedType2.function;
        case "bigint":
            return ZodParsedType2.bigint;
        case "object":
            if (Array.isArray(data)) {
                return ZodParsedType2.array;
            }
            if (data === null) {
                return ZodParsedType2.null;
            }
            if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
                return ZodParsedType2.promise;
            }
            if (typeof Map !== "undefined" && data instanceof Map) {
                return ZodParsedType2.map;
            }
            if (typeof Set !== "undefined" && data instanceof Set) {
                return ZodParsedType2.set;
            }
            if (typeof Date !== "undefined" && data instanceof Date) {
                return ZodParsedType2.date;
            }
            return ZodParsedType2.object;
        default:
            return ZodParsedType2.unknown;
    }
};
var ZodIssueCode2 = util2.arrayToEnum([
    "invalid_type",
    "invalid_literal",
    "custom",
    "invalid_union",
    "invalid_union_discriminator",
    "invalid_enum_value",
    "unrecognized_keys",
    "invalid_arguments",
    "invalid_return_type",
    "invalid_date",
    "invalid_string",
    "too_small",
    "too_big",
    "invalid_intersection_types",
    "not_multiple_of"
]);
var quotelessJson2 = (obj)=>{
    const json = JSON.stringify(obj, null, 2);
    return json.replace(/"([^"]+)":/g, "$1:");
};
var ZodError2 = class extends Error {
    constructor(issues){
        super();
        this.issues = [];
        this.addIssue = (sub)=>{
            this.issues = [
                ...this.issues,
                sub
            ];
        };
        this.addIssues = (subs = [])=>{
            this.issues = [
                ...this.issues,
                ...subs
            ];
        };
        const actualProto = new.target.prototype;
        if (Object.setPrototypeOf) {
            Object.setPrototypeOf(this, actualProto);
        } else {
            this.__proto__ = actualProto;
        }
        this.name = "ZodError";
        this.issues = issues;
    }
    get errors() {
        return this.issues;
    }
    format(_mapper) {
        const mapper = _mapper || function(issue) {
            return issue.message;
        };
        const fieldErrors = {
            _errors: []
        };
        const processError = (error)=>{
            for (const issue of error.issues){
                if (issue.code === "invalid_union") {
                    issue.unionErrors.map(processError);
                } else if (issue.code === "invalid_return_type") {
                    processError(issue.returnTypeError);
                } else if (issue.code === "invalid_arguments") {
                    processError(issue.argumentsError);
                } else if (issue.path.length === 0) {
                    fieldErrors._errors.push(mapper(issue));
                } else {
                    let curr = fieldErrors;
                    let i = 0;
                    while(i < issue.path.length){
                        const el = issue.path[i];
                        const terminal = i === issue.path.length - 1;
                        if (!terminal) {
                            curr[el] = curr[el] || {
                                _errors: []
                            };
                        } else {
                            curr[el] = curr[el] || {
                                _errors: []
                            };
                            curr[el]._errors.push(mapper(issue));
                        }
                        curr = curr[el];
                        i++;
                    }
                }
            }
        };
        processError(this);
        return fieldErrors;
    }
    toString() {
        return this.message;
    }
    get message() {
        return JSON.stringify(this.issues, jsonStringifyReplacer2, 2);
    }
    get isEmpty() {
        return this.issues.length === 0;
    }
    flatten(mapper = (issue)=>issue.message) {
        const fieldErrors = {};
        const formErrors = [];
        for (const sub of this.issues){
            if (sub.path.length > 0) {
                fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
                fieldErrors[sub.path[0]].push(mapper(sub));
            } else {
                formErrors.push(mapper(sub));
            }
        }
        return {
            formErrors,
            fieldErrors
        };
    }
    get formErrors() {
        return this.flatten();
    }
};
ZodError2.create = (issues)=>{
    const error = new ZodError2(issues);
    return error;
};
var defaultErrorMap2 = (issue, _ctx)=>{
    let message;
    switch(issue.code){
        case ZodIssueCode2.invalid_type:
            if (issue.received === ZodParsedType2.undefined) {
                message = "Required";
            } else {
                message = `Expected ${issue.expected}, received ${issue.received}`;
            }
            break;
        case ZodIssueCode2.invalid_literal:
            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, jsonStringifyReplacer2)}`;
            break;
        case ZodIssueCode2.unrecognized_keys:
            message = `Unrecognized key(s) in object: ${util2.joinValues(issue.keys, ", ")}`;
            break;
        case ZodIssueCode2.invalid_union:
            message = `Invalid input`;
            break;
        case ZodIssueCode2.invalid_union_discriminator:
            message = `Invalid discriminator value. Expected ${util2.joinValues(issue.options)}`;
            break;
        case ZodIssueCode2.invalid_enum_value:
            message = `Invalid enum value. Expected ${util2.joinValues(issue.options)}, received '${issue.received}'`;
            break;
        case ZodIssueCode2.invalid_arguments:
            message = `Invalid function arguments`;
            break;
        case ZodIssueCode2.invalid_return_type:
            message = `Invalid function return type`;
            break;
        case ZodIssueCode2.invalid_date:
            message = `Invalid date`;
            break;
        case ZodIssueCode2.invalid_string:
            if (typeof issue.validation === "object") {
                if ("startsWith" in issue.validation) {
                    message = `Invalid input: must start with "${issue.validation.startsWith}"`;
                } else if ("endsWith" in issue.validation) {
                    message = `Invalid input: must end with "${issue.validation.endsWith}"`;
                } else {
                    util2.assertNever(issue.validation);
                }
            } else if (issue.validation !== "regex") {
                message = `Invalid ${issue.validation}`;
            } else {
                message = "Invalid";
            }
            break;
        case ZodIssueCode2.too_small:
            if (issue.type === "array") message = `Array must contain ${issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
            else if (issue.type === "string") message = `String must contain ${issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
            else if (issue.type === "number") message = `Number must be greater than ${issue.inclusive ? `or equal to ` : ``}${issue.minimum}`;
            else if (issue.type === "date") message = `Date must be greater than ${issue.inclusive ? `or equal to ` : ``}${new Date(issue.minimum)}`;
            else message = "Invalid input";
            break;
        case ZodIssueCode2.too_big:
            if (issue.type === "array") message = `Array must contain ${issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
            else if (issue.type === "string") message = `String must contain ${issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
            else if (issue.type === "number") message = `Number must be less than ${issue.inclusive ? `or equal to ` : ``}${issue.maximum}`;
            else if (issue.type === "date") message = `Date must be smaller than ${issue.inclusive ? `or equal to ` : ``}${new Date(issue.maximum)}`;
            else message = "Invalid input";
            break;
        case ZodIssueCode2.custom:
            message = `Invalid input`;
            break;
        case ZodIssueCode2.invalid_intersection_types:
            message = `Intersection results could not be merged`;
            break;
        case ZodIssueCode2.not_multiple_of:
            message = `Number must be a multiple of ${issue.multipleOf}`;
            break;
        default:
            message = _ctx.defaultError;
            util2.assertNever(issue);
    }
    return {
        message
    };
};
var overrideErrorMap2 = defaultErrorMap2;
function setErrorMap2(map) {
    overrideErrorMap2 = map;
}
function getErrorMap2() {
    return overrideErrorMap2;
}
var makeIssue2 = (params)=>{
    const { data , path , errorMaps , issueData  } = params;
    const fullPath = [
        ...path,
        ...issueData.path || []
    ];
    const fullIssue = {
        ...issueData,
        path: fullPath
    };
    let errorMessage = "";
    const maps = errorMaps.filter((m)=>!!m).slice().reverse();
    for (const map of maps){
        errorMessage = map(fullIssue, {
            data,
            defaultError: errorMessage
        }).message;
    }
    return {
        ...issueData,
        path: fullPath,
        message: issueData.message || errorMessage
    };
};
var EMPTY_PATH2 = [];
function addIssueToContext2(ctx, issueData) {
    const issue = makeIssue2({
        issueData,
        data: ctx.data,
        path: ctx.path,
        errorMaps: [
            ctx.common.contextualErrorMap,
            ctx.schemaErrorMap,
            getErrorMap2(),
            defaultErrorMap2
        ].filter((x)=>!!x)
    });
    ctx.common.issues.push(issue);
}
var ParseStatus2 = class {
    constructor(){
        this.value = "valid";
    }
    dirty() {
        if (this.value === "valid") this.value = "dirty";
    }
    abort() {
        if (this.value !== "aborted") this.value = "aborted";
    }
    static mergeArray(status, results) {
        const arrayValue = [];
        for (const s2 of results){
            if (s2.status === "aborted") return INVALID5;
            if (s2.status === "dirty") status.dirty();
            arrayValue.push(s2.value);
        }
        return {
            status: status.value,
            value: arrayValue
        };
    }
    static async mergeObjectAsync(status, pairs) {
        const syncPairs = [];
        for (const pair of pairs){
            syncPairs.push({
                key: await pair.key,
                value: await pair.value
            });
        }
        return ParseStatus2.mergeObjectSync(status, syncPairs);
    }
    static mergeObjectSync(status, pairs) {
        const finalObject = {};
        for (const pair of pairs){
            const { key , value  } = pair;
            if (key.status === "aborted") return INVALID5;
            if (value.status === "aborted") return INVALID5;
            if (key.status === "dirty") status.dirty();
            if (value.status === "dirty") status.dirty();
            if (typeof value.value !== "undefined" || pair.alwaysSet) {
                finalObject[key.value] = value.value;
            }
        }
        return {
            status: status.value,
            value: finalObject
        };
    }
};
var INVALID5 = Object.freeze({
    status: "aborted"
});
var DIRTY2 = (value)=>({
        status: "dirty",
        value
    });
var OK2 = (value)=>({
        status: "valid",
        value
    });
var isAborted2 = (x)=>x.status === "aborted";
var isDirty2 = (x)=>x.status === "dirty";
var isValid2 = (x)=>x.status === "valid";
var isAsync2 = (x)=>typeof Promise !== void 0 && x instanceof Promise;
var jsonStringifyReplacer2 = (_, value)=>{
    if (typeof value === "bigint") {
        return value.toString();
    }
    return value;
};
var errorUtil2;
(function(errorUtil22) {
    errorUtil22.errToObj = (message)=>typeof message === "string" ? {
            message
        } : message || {};
    errorUtil22.toString = (message)=>typeof message === "string" ? message : message === null || message === void 0 ? void 0 : message.message;
})(errorUtil2 || (errorUtil2 = {}));
var ParseInputLazyPath2 = class {
    constructor(parent, value, path, key){
        this.parent = parent;
        this.data = value;
        this._path = path;
        this._key = key;
    }
    get path() {
        return this._path.concat(this._key);
    }
};
var handleResult2 = (ctx, result)=>{
    if (isValid2(result)) {
        return {
            success: true,
            data: result.value
        };
    } else {
        if (!ctx.common.issues.length) {
            throw new Error("Validation failed but no issues detected.");
        }
        const error = new ZodError2(ctx.common.issues);
        return {
            success: false,
            error
        };
    }
};
function processCreateParams2(params) {
    if (!params) return {};
    const { errorMap , invalid_type_error , required_error , description  } = params;
    if (errorMap && (invalid_type_error || required_error)) {
        throw new Error(`Can't use "invalid" or "required" in conjunction with custom error map.`);
    }
    if (errorMap) return {
        errorMap,
        description
    };
    const customMap = (iss, ctx)=>{
        if (iss.code !== "invalid_type") return {
            message: ctx.defaultError
        };
        if (typeof ctx.data === "undefined") {
            return {
                message: required_error !== null && required_error !== void 0 ? required_error : ctx.defaultError
            };
        }
        return {
            message: invalid_type_error !== null && invalid_type_error !== void 0 ? invalid_type_error : ctx.defaultError
        };
    };
    return {
        errorMap: customMap,
        description
    };
}
var ZodType2 = class {
    constructor(def){
        this.spa = this.safeParseAsync;
        this.superRefine = this._refinement;
        this._def = def;
        this.parse = this.parse.bind(this);
        this.safeParse = this.safeParse.bind(this);
        this.parseAsync = this.parseAsync.bind(this);
        this.safeParseAsync = this.safeParseAsync.bind(this);
        this.spa = this.spa.bind(this);
        this.refine = this.refine.bind(this);
        this.refinement = this.refinement.bind(this);
        this.superRefine = this.superRefine.bind(this);
        this.optional = this.optional.bind(this);
        this.nullable = this.nullable.bind(this);
        this.nullish = this.nullish.bind(this);
        this.array = this.array.bind(this);
        this.promise = this.promise.bind(this);
        this.or = this.or.bind(this);
        this.and = this.and.bind(this);
        this.transform = this.transform.bind(this);
        this.default = this.default.bind(this);
        this.describe = this.describe.bind(this);
        this.isNullable = this.isNullable.bind(this);
        this.isOptional = this.isOptional.bind(this);
    }
    get description() {
        return this._def.description;
    }
    _getType(input) {
        return getParsedType2(input.data);
    }
    _getOrReturnCtx(input, ctx) {
        return ctx || {
            common: input.parent.common,
            data: input.data,
            parsedType: getParsedType2(input.data),
            schemaErrorMap: this._def.errorMap,
            path: input.path,
            parent: input.parent
        };
    }
    _processInputParams(input) {
        return {
            status: new ParseStatus2(),
            ctx: {
                common: input.parent.common,
                data: input.data,
                parsedType: getParsedType2(input.data),
                schemaErrorMap: this._def.errorMap,
                path: input.path,
                parent: input.parent
            }
        };
    }
    _parseSync(input) {
        const result = this._parse(input);
        if (isAsync2(result)) {
            throw new Error("Synchronous parse encountered promise.");
        }
        return result;
    }
    _parseAsync(input) {
        const result = this._parse(input);
        return Promise.resolve(result);
    }
    parse(data, params) {
        const result = this.safeParse(data, params);
        if (result.success) return result.data;
        throw result.error;
    }
    safeParse(data, params) {
        var _a;
        const ctx = {
            common: {
                issues: [],
                async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,
                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap
            },
            path: (params === null || params === void 0 ? void 0 : params.path) || [],
            schemaErrorMap: this._def.errorMap,
            parent: null,
            data,
            parsedType: getParsedType2(data)
        };
        const result = this._parseSync({
            data,
            path: ctx.path,
            parent: ctx
        });
        return handleResult2(ctx, result);
    }
    async parseAsync(data, params) {
        const result = await this.safeParseAsync(data, params);
        if (result.success) return result.data;
        throw result.error;
    }
    async safeParseAsync(data, params) {
        const ctx = {
            common: {
                issues: [],
                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
                async: true
            },
            path: (params === null || params === void 0 ? void 0 : params.path) || [],
            schemaErrorMap: this._def.errorMap,
            parent: null,
            data,
            parsedType: getParsedType2(data)
        };
        const maybeAsyncResult = this._parse({
            data,
            path: [],
            parent: ctx
        });
        const result = await (isAsync2(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
        return handleResult2(ctx, result);
    }
    refine(check, message) {
        const getIssueProperties = (val)=>{
            if (typeof message === "string" || typeof message === "undefined") {
                return {
                    message
                };
            } else if (typeof message === "function") {
                return message(val);
            } else {
                return message;
            }
        };
        return this._refinement((val, ctx)=>{
            const result = check(val);
            const setError = ()=>ctx.addIssue({
                    code: ZodIssueCode2.custom,
                    ...getIssueProperties(val)
                });
            if (typeof Promise !== "undefined" && result instanceof Promise) {
                return result.then((data)=>{
                    if (!data) {
                        setError();
                        return false;
                    } else {
                        return true;
                    }
                });
            }
            if (!result) {
                setError();
                return false;
            } else {
                return true;
            }
        });
    }
    refinement(check, refinementData) {
        return this._refinement((val, ctx)=>{
            if (!check(val)) {
                ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
                return false;
            } else {
                return true;
            }
        });
    }
    _refinement(refinement) {
        return new ZodEffects2({
            schema: this,
            typeName: ZodFirstPartyTypeKind2.ZodEffects,
            effect: {
                type: "refinement",
                refinement
            }
        });
    }
    optional() {
        return ZodOptional2.create(this);
    }
    nullable() {
        return ZodNullable2.create(this);
    }
    nullish() {
        return this.optional().nullable();
    }
    array() {
        return ZodArray2.create(this);
    }
    promise() {
        return ZodPromise2.create(this);
    }
    or(option) {
        return ZodUnion2.create([
            this,
            option
        ]);
    }
    and(incoming) {
        return ZodIntersection2.create(this, incoming);
    }
    transform(transform) {
        return new ZodEffects2({
            schema: this,
            typeName: ZodFirstPartyTypeKind2.ZodEffects,
            effect: {
                type: "transform",
                transform
            }
        });
    }
    default(def) {
        const defaultValueFunc = typeof def === "function" ? def : ()=>def;
        return new ZodDefault2({
            innerType: this,
            defaultValue: defaultValueFunc,
            typeName: ZodFirstPartyTypeKind2.ZodDefault
        });
    }
    describe(description) {
        const This = this.constructor;
        return new This({
            ...this._def,
            description
        });
    }
    isOptional() {
        return this.safeParse(void 0).success;
    }
    isNullable() {
        return this.safeParse(null).success;
    }
};
var cuidRegex2 = /^c[^\s-]{8,}$/i;
var uuidRegex2 = /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;
var emailRegex2 = /^(([^<>()[\]\.,;:\s@\"]+(\.[^<>()[\]\.,;:\s@\"]+)*)|(\".+\"))@(([^<>()[\]\.,;:\s@\"]+\.)+[^<>()[\]\.,;:\s@\"]{2,})$/i;
var ZodString2 = class extends ZodType2 {
    constructor(){
        super(...arguments);
        this._regex = (regex, validation, message)=>this.refinement((data)=>regex.test(data), {
                validation,
                code: ZodIssueCode2.invalid_string,
                ...errorUtil2.errToObj(message)
            });
        this.nonempty = (message)=>this.min(1, errorUtil2.errToObj(message));
        this.trim = ()=>new ZodString2({
                ...this._def,
                checks: [
                    ...this._def.checks,
                    {
                        kind: "trim"
                    }
                ]
            });
    }
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType2.string) {
            const ctx2 = this._getOrReturnCtx(input);
            addIssueToContext2(ctx2, {
                code: ZodIssueCode2.invalid_type,
                expected: ZodParsedType2.string,
                received: ctx2.parsedType
            });
            return INVALID5;
        }
        const status = new ParseStatus2();
        let ctx = void 0;
        for (const check of this._def.checks){
            if (check.kind === "min") {
                if (input.data.length < check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext2(ctx, {
                        code: ZodIssueCode2.too_small,
                        minimum: check.value,
                        type: "string",
                        inclusive: true,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "max") {
                if (input.data.length > check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext2(ctx, {
                        code: ZodIssueCode2.too_big,
                        maximum: check.value,
                        type: "string",
                        inclusive: true,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "email") {
                if (!emailRegex2.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext2(ctx, {
                        validation: "email",
                        code: ZodIssueCode2.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "uuid") {
                if (!uuidRegex2.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext2(ctx, {
                        validation: "uuid",
                        code: ZodIssueCode2.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "cuid") {
                if (!cuidRegex2.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext2(ctx, {
                        validation: "cuid",
                        code: ZodIssueCode2.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "url") {
                try {
                    new URL(input.data);
                } catch (_a) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext2(ctx, {
                        validation: "url",
                        code: ZodIssueCode2.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "regex") {
                check.regex.lastIndex = 0;
                const testResult = check.regex.test(input.data);
                if (!testResult) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext2(ctx, {
                        validation: "regex",
                        code: ZodIssueCode2.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "trim") {
                input.data = input.data.trim();
            } else if (check.kind === "startsWith") {
                if (!input.data.startsWith(check.value)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext2(ctx, {
                        code: ZodIssueCode2.invalid_string,
                        validation: {
                            startsWith: check.value
                        },
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "endsWith") {
                if (!input.data.endsWith(check.value)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext2(ctx, {
                        code: ZodIssueCode2.invalid_string,
                        validation: {
                            endsWith: check.value
                        },
                        message: check.message
                    });
                    status.dirty();
                }
            } else {
                util2.assertNever(check);
            }
        }
        return {
            status: status.value,
            value: input.data
        };
    }
    _addCheck(check) {
        return new ZodString2({
            ...this._def,
            checks: [
                ...this._def.checks,
                check
            ]
        });
    }
    email(message) {
        return this._addCheck({
            kind: "email",
            ...errorUtil2.errToObj(message)
        });
    }
    url(message) {
        return this._addCheck({
            kind: "url",
            ...errorUtil2.errToObj(message)
        });
    }
    uuid(message) {
        return this._addCheck({
            kind: "uuid",
            ...errorUtil2.errToObj(message)
        });
    }
    cuid(message) {
        return this._addCheck({
            kind: "cuid",
            ...errorUtil2.errToObj(message)
        });
    }
    regex(regex, message) {
        return this._addCheck({
            kind: "regex",
            regex,
            ...errorUtil2.errToObj(message)
        });
    }
    startsWith(value, message) {
        return this._addCheck({
            kind: "startsWith",
            value,
            ...errorUtil2.errToObj(message)
        });
    }
    endsWith(value, message) {
        return this._addCheck({
            kind: "endsWith",
            value,
            ...errorUtil2.errToObj(message)
        });
    }
    min(minLength, message) {
        return this._addCheck({
            kind: "min",
            value: minLength,
            ...errorUtil2.errToObj(message)
        });
    }
    max(maxLength, message) {
        return this._addCheck({
            kind: "max",
            value: maxLength,
            ...errorUtil2.errToObj(message)
        });
    }
    length(len, message) {
        return this.min(len, message).max(len, message);
    }
    get isEmail() {
        return !!this._def.checks.find((ch)=>ch.kind === "email");
    }
    get isURL() {
        return !!this._def.checks.find((ch)=>ch.kind === "url");
    }
    get isUUID() {
        return !!this._def.checks.find((ch)=>ch.kind === "uuid");
    }
    get isCUID() {
        return !!this._def.checks.find((ch)=>ch.kind === "cuid");
    }
    get minLength() {
        let min = null;
        for (const ch of this._def.checks){
            if (ch.kind === "min") {
                if (min === null || ch.value > min) min = ch.value;
            }
        }
        return min;
    }
    get maxLength() {
        let max = null;
        for (const ch of this._def.checks){
            if (ch.kind === "max") {
                if (max === null || ch.value < max) max = ch.value;
            }
        }
        return max;
    }
};
ZodString2.create = (params)=>{
    return new ZodString2({
        checks: [],
        typeName: ZodFirstPartyTypeKind2.ZodString,
        ...processCreateParams2(params)
    });
};
function floatSafeRemainder2(val, step) {
    const valDecCount = (val.toString().split(".")[1] || "").length;
    const stepDecCount = (step.toString().split(".")[1] || "").length;
    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
    const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
    const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
    return valInt % stepInt / Math.pow(10, decCount);
}
var ZodNumber2 = class extends ZodType2 {
    constructor(){
        super(...arguments);
        this.min = this.gte;
        this.max = this.lte;
        this.step = this.multipleOf;
    }
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType2.number) {
            const ctx2 = this._getOrReturnCtx(input);
            addIssueToContext2(ctx2, {
                code: ZodIssueCode2.invalid_type,
                expected: ZodParsedType2.number,
                received: ctx2.parsedType
            });
            return INVALID5;
        }
        let ctx = void 0;
        const status = new ParseStatus2();
        for (const check of this._def.checks){
            if (check.kind === "int") {
                if (!util2.isInteger(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext2(ctx, {
                        code: ZodIssueCode2.invalid_type,
                        expected: "integer",
                        received: "float",
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "min") {
                const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
                if (tooSmall) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext2(ctx, {
                        code: ZodIssueCode2.too_small,
                        minimum: check.value,
                        type: "number",
                        inclusive: check.inclusive,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "max") {
                const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
                if (tooBig) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext2(ctx, {
                        code: ZodIssueCode2.too_big,
                        maximum: check.value,
                        type: "number",
                        inclusive: check.inclusive,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "multipleOf") {
                if (floatSafeRemainder2(input.data, check.value) !== 0) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext2(ctx, {
                        code: ZodIssueCode2.not_multiple_of,
                        multipleOf: check.value,
                        message: check.message
                    });
                    status.dirty();
                }
            } else {
                util2.assertNever(check);
            }
        }
        return {
            status: status.value,
            value: input.data
        };
    }
    gte(value, message) {
        return this.setLimit("min", value, true, errorUtil2.toString(message));
    }
    gt(value, message) {
        return this.setLimit("min", value, false, errorUtil2.toString(message));
    }
    lte(value, message) {
        return this.setLimit("max", value, true, errorUtil2.toString(message));
    }
    lt(value, message) {
        return this.setLimit("max", value, false, errorUtil2.toString(message));
    }
    setLimit(kind, value, inclusive, message) {
        return new ZodNumber2({
            ...this._def,
            checks: [
                ...this._def.checks,
                {
                    kind,
                    value,
                    inclusive,
                    message: errorUtil2.toString(message)
                }
            ]
        });
    }
    _addCheck(check) {
        return new ZodNumber2({
            ...this._def,
            checks: [
                ...this._def.checks,
                check
            ]
        });
    }
    int(message) {
        return this._addCheck({
            kind: "int",
            message: errorUtil2.toString(message)
        });
    }
    positive(message) {
        return this._addCheck({
            kind: "min",
            value: 0,
            inclusive: false,
            message: errorUtil2.toString(message)
        });
    }
    negative(message) {
        return this._addCheck({
            kind: "max",
            value: 0,
            inclusive: false,
            message: errorUtil2.toString(message)
        });
    }
    nonpositive(message) {
        return this._addCheck({
            kind: "max",
            value: 0,
            inclusive: true,
            message: errorUtil2.toString(message)
        });
    }
    nonnegative(message) {
        return this._addCheck({
            kind: "min",
            value: 0,
            inclusive: true,
            message: errorUtil2.toString(message)
        });
    }
    multipleOf(value, message) {
        return this._addCheck({
            kind: "multipleOf",
            value,
            message: errorUtil2.toString(message)
        });
    }
    get minValue() {
        let min = null;
        for (const ch of this._def.checks){
            if (ch.kind === "min") {
                if (min === null || ch.value > min) min = ch.value;
            }
        }
        return min;
    }
    get maxValue() {
        let max = null;
        for (const ch of this._def.checks){
            if (ch.kind === "max") {
                if (max === null || ch.value < max) max = ch.value;
            }
        }
        return max;
    }
    get isInt() {
        return !!this._def.checks.find((ch)=>ch.kind === "int");
    }
};
ZodNumber2.create = (params)=>{
    return new ZodNumber2({
        checks: [],
        typeName: ZodFirstPartyTypeKind2.ZodNumber,
        ...processCreateParams2(params)
    });
};
var ZodBigInt2 = class extends ZodType2 {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType2.bigint) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext2(ctx, {
                code: ZodIssueCode2.invalid_type,
                expected: ZodParsedType2.bigint,
                received: ctx.parsedType
            });
            return INVALID5;
        }
        return OK2(input.data);
    }
};
ZodBigInt2.create = (params)=>{
    return new ZodBigInt2({
        typeName: ZodFirstPartyTypeKind2.ZodBigInt,
        ...processCreateParams2(params)
    });
};
var ZodBoolean2 = class extends ZodType2 {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType2.boolean) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext2(ctx, {
                code: ZodIssueCode2.invalid_type,
                expected: ZodParsedType2.boolean,
                received: ctx.parsedType
            });
            return INVALID5;
        }
        return OK2(input.data);
    }
};
ZodBoolean2.create = (params)=>{
    return new ZodBoolean2({
        typeName: ZodFirstPartyTypeKind2.ZodBoolean,
        ...processCreateParams2(params)
    });
};
var ZodDate2 = class extends ZodType2 {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType2.date) {
            const ctx2 = this._getOrReturnCtx(input);
            addIssueToContext2(ctx2, {
                code: ZodIssueCode2.invalid_type,
                expected: ZodParsedType2.date,
                received: ctx2.parsedType
            });
            return INVALID5;
        }
        if (isNaN(input.data.getTime())) {
            const ctx21 = this._getOrReturnCtx(input);
            addIssueToContext2(ctx21, {
                code: ZodIssueCode2.invalid_date
            });
            return INVALID5;
        }
        const status = new ParseStatus2();
        let ctx = void 0;
        for (const check of this._def.checks){
            if (check.kind === "min") {
                if (input.data.getTime() < check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext2(ctx, {
                        code: ZodIssueCode2.too_small,
                        message: check.message,
                        inclusive: true,
                        minimum: check.value,
                        type: "date"
                    });
                    status.dirty();
                }
            } else if (check.kind === "max") {
                if (input.data.getTime() > check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext2(ctx, {
                        code: ZodIssueCode2.too_big,
                        message: check.message,
                        inclusive: true,
                        maximum: check.value,
                        type: "date"
                    });
                    status.dirty();
                }
            } else {
                util2.assertNever(check);
            }
        }
        return {
            status: status.value,
            value: new Date(input.data.getTime())
        };
    }
    _addCheck(check) {
        return new ZodDate2({
            ...this._def,
            checks: [
                ...this._def.checks,
                check
            ]
        });
    }
    min(minDate, message) {
        return this._addCheck({
            kind: "min",
            value: minDate.getTime(),
            message: errorUtil2.toString(message)
        });
    }
    max(maxDate, message) {
        return this._addCheck({
            kind: "max",
            value: maxDate.getTime(),
            message: errorUtil2.toString(message)
        });
    }
    get minDate() {
        let min = null;
        for (const ch of this._def.checks){
            if (ch.kind === "min") {
                if (min === null || ch.value > min) min = ch.value;
            }
        }
        return min != null ? new Date(min) : null;
    }
    get maxDate() {
        let max = null;
        for (const ch of this._def.checks){
            if (ch.kind === "max") {
                if (max === null || ch.value < max) max = ch.value;
            }
        }
        return max != null ? new Date(max) : null;
    }
};
ZodDate2.create = (params)=>{
    return new ZodDate2({
        checks: [],
        typeName: ZodFirstPartyTypeKind2.ZodDate,
        ...processCreateParams2(params)
    });
};
var ZodUndefined2 = class extends ZodType2 {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType2.undefined) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext2(ctx, {
                code: ZodIssueCode2.invalid_type,
                expected: ZodParsedType2.undefined,
                received: ctx.parsedType
            });
            return INVALID5;
        }
        return OK2(input.data);
    }
};
ZodUndefined2.create = (params)=>{
    return new ZodUndefined2({
        typeName: ZodFirstPartyTypeKind2.ZodUndefined,
        ...processCreateParams2(params)
    });
};
var ZodNull2 = class extends ZodType2 {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType2.null) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext2(ctx, {
                code: ZodIssueCode2.invalid_type,
                expected: ZodParsedType2.null,
                received: ctx.parsedType
            });
            return INVALID5;
        }
        return OK2(input.data);
    }
};
ZodNull2.create = (params)=>{
    return new ZodNull2({
        typeName: ZodFirstPartyTypeKind2.ZodNull,
        ...processCreateParams2(params)
    });
};
var ZodAny2 = class extends ZodType2 {
    constructor(){
        super(...arguments);
        this._any = true;
    }
    _parse(input) {
        return OK2(input.data);
    }
};
ZodAny2.create = (params)=>{
    return new ZodAny2({
        typeName: ZodFirstPartyTypeKind2.ZodAny,
        ...processCreateParams2(params)
    });
};
var ZodUnknown2 = class extends ZodType2 {
    constructor(){
        super(...arguments);
        this._unknown = true;
    }
    _parse(input) {
        return OK2(input.data);
    }
};
ZodUnknown2.create = (params)=>{
    return new ZodUnknown2({
        typeName: ZodFirstPartyTypeKind2.ZodUnknown,
        ...processCreateParams2(params)
    });
};
var ZodNever2 = class extends ZodType2 {
    _parse(input) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext2(ctx, {
            code: ZodIssueCode2.invalid_type,
            expected: ZodParsedType2.never,
            received: ctx.parsedType
        });
        return INVALID5;
    }
};
ZodNever2.create = (params)=>{
    return new ZodNever2({
        typeName: ZodFirstPartyTypeKind2.ZodNever,
        ...processCreateParams2(params)
    });
};
var ZodVoid2 = class extends ZodType2 {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType2.undefined) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext2(ctx, {
                code: ZodIssueCode2.invalid_type,
                expected: ZodParsedType2.void,
                received: ctx.parsedType
            });
            return INVALID5;
        }
        return OK2(input.data);
    }
};
ZodVoid2.create = (params)=>{
    return new ZodVoid2({
        typeName: ZodFirstPartyTypeKind2.ZodVoid,
        ...processCreateParams2(params)
    });
};
var ZodArray2 = class extends ZodType2 {
    _parse(input) {
        const { ctx , status  } = this._processInputParams(input);
        const def = this._def;
        if (ctx.parsedType !== ZodParsedType2.array) {
            addIssueToContext2(ctx, {
                code: ZodIssueCode2.invalid_type,
                expected: ZodParsedType2.array,
                received: ctx.parsedType
            });
            return INVALID5;
        }
        if (def.minLength !== null) {
            if (ctx.data.length < def.minLength.value) {
                addIssueToContext2(ctx, {
                    code: ZodIssueCode2.too_small,
                    minimum: def.minLength.value,
                    type: "array",
                    inclusive: true,
                    message: def.minLength.message
                });
                status.dirty();
            }
        }
        if (def.maxLength !== null) {
            if (ctx.data.length > def.maxLength.value) {
                addIssueToContext2(ctx, {
                    code: ZodIssueCode2.too_big,
                    maximum: def.maxLength.value,
                    type: "array",
                    inclusive: true,
                    message: def.maxLength.message
                });
                status.dirty();
            }
        }
        if (ctx.common.async) {
            return Promise.all(ctx.data.map((item, i)=>{
                return def.type._parseAsync(new ParseInputLazyPath2(ctx, item, ctx.path, i));
            })).then((result2)=>{
                return ParseStatus2.mergeArray(status, result2);
            });
        }
        const result = ctx.data.map((item, i)=>{
            return def.type._parseSync(new ParseInputLazyPath2(ctx, item, ctx.path, i));
        });
        return ParseStatus2.mergeArray(status, result);
    }
    get element() {
        return this._def.type;
    }
    min(minLength, message) {
        return new ZodArray2({
            ...this._def,
            minLength: {
                value: minLength,
                message: errorUtil2.toString(message)
            }
        });
    }
    max(maxLength, message) {
        return new ZodArray2({
            ...this._def,
            maxLength: {
                value: maxLength,
                message: errorUtil2.toString(message)
            }
        });
    }
    length(len, message) {
        return this.min(len, message).max(len, message);
    }
    nonempty(message) {
        return this.min(1, message);
    }
};
ZodArray2.create = (schema, params)=>{
    return new ZodArray2({
        type: schema,
        minLength: null,
        maxLength: null,
        typeName: ZodFirstPartyTypeKind2.ZodArray,
        ...processCreateParams2(params)
    });
};
var objectUtil2;
(function(objectUtil22) {
    objectUtil22.mergeShapes = (first, second)=>{
        return {
            ...first,
            ...second
        };
    };
})(objectUtil2 || (objectUtil2 = {}));
var AugmentFactory2 = (def)=>(augmentation)=>{
        return new ZodObject2({
            ...def,
            shape: ()=>({
                    ...def.shape(),
                    ...augmentation
                })
        });
    };
function deepPartialify2(schema) {
    if (schema instanceof ZodObject2) {
        const newShape = {};
        for(const key in schema.shape){
            const fieldSchema = schema.shape[key];
            newShape[key] = ZodOptional2.create(deepPartialify2(fieldSchema));
        }
        return new ZodObject2({
            ...schema._def,
            shape: ()=>newShape
        });
    } else if (schema instanceof ZodArray2) {
        return ZodArray2.create(deepPartialify2(schema.element));
    } else if (schema instanceof ZodOptional2) {
        return ZodOptional2.create(deepPartialify2(schema.unwrap()));
    } else if (schema instanceof ZodNullable2) {
        return ZodNullable2.create(deepPartialify2(schema.unwrap()));
    } else if (schema instanceof ZodTuple2) {
        return ZodTuple2.create(schema.items.map((item)=>deepPartialify2(item)));
    } else {
        return schema;
    }
}
var ZodObject2 = class extends ZodType2 {
    constructor(){
        super(...arguments);
        this._cached = null;
        this.nonstrict = this.passthrough;
        this.augment = AugmentFactory2(this._def);
        this.extend = AugmentFactory2(this._def);
    }
    _getCached() {
        if (this._cached !== null) return this._cached;
        const shape = this._def.shape();
        const keys = util2.objectKeys(shape);
        return this._cached = {
            shape,
            keys
        };
    }
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType2.object) {
            const ctx2 = this._getOrReturnCtx(input);
            addIssueToContext2(ctx2, {
                code: ZodIssueCode2.invalid_type,
                expected: ZodParsedType2.object,
                received: ctx2.parsedType
            });
            return INVALID5;
        }
        const { status , ctx  } = this._processInputParams(input);
        const { shape , keys: shapeKeys  } = this._getCached();
        const extraKeys = [];
        for(const key in ctx.data){
            if (!shapeKeys.includes(key)) {
                extraKeys.push(key);
            }
        }
        const pairs = [];
        for (const key1 of shapeKeys){
            const keyValidator = shape[key1];
            const value = ctx.data[key1];
            pairs.push({
                key: {
                    status: "valid",
                    value: key1
                },
                value: keyValidator._parse(new ParseInputLazyPath2(ctx, value, ctx.path, key1)),
                alwaysSet: key1 in ctx.data
            });
        }
        if (this._def.catchall instanceof ZodNever2) {
            const unknownKeys = this._def.unknownKeys;
            if (unknownKeys === "passthrough") {
                for (const key2 of extraKeys){
                    pairs.push({
                        key: {
                            status: "valid",
                            value: key2
                        },
                        value: {
                            status: "valid",
                            value: ctx.data[key2]
                        }
                    });
                }
            } else if (unknownKeys === "strict") {
                if (extraKeys.length > 0) {
                    addIssueToContext2(ctx, {
                        code: ZodIssueCode2.unrecognized_keys,
                        keys: extraKeys
                    });
                    status.dirty();
                }
            } else if (unknownKeys === "strip") ;
            else {
                throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
            }
        } else {
            const catchall = this._def.catchall;
            for (const key3 of extraKeys){
                const value1 = ctx.data[key3];
                pairs.push({
                    key: {
                        status: "valid",
                        value: key3
                    },
                    value: catchall._parse(new ParseInputLazyPath2(ctx, value1, ctx.path, key3)),
                    alwaysSet: key3 in ctx.data
                });
            }
        }
        if (ctx.common.async) {
            return Promise.resolve().then(async ()=>{
                const syncPairs = [];
                for (const pair of pairs){
                    const key = await pair.key;
                    syncPairs.push({
                        key,
                        value: await pair.value,
                        alwaysSet: pair.alwaysSet
                    });
                }
                return syncPairs;
            }).then((syncPairs)=>{
                return ParseStatus2.mergeObjectSync(status, syncPairs);
            });
        } else {
            return ParseStatus2.mergeObjectSync(status, pairs);
        }
    }
    get shape() {
        return this._def.shape();
    }
    strict(message) {
        errorUtil2.errToObj;
        return new ZodObject2({
            ...this._def,
            unknownKeys: "strict",
            ...message !== void 0 ? {
                errorMap: (issue, ctx)=>{
                    var _a, _b, _c, _d;
                    const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;
                    if (issue.code === "unrecognized_keys") return {
                        message: (_d = errorUtil2.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError
                    };
                    return {
                        message: defaultError
                    };
                }
            } : {}
        });
    }
    strip() {
        return new ZodObject2({
            ...this._def,
            unknownKeys: "strip"
        });
    }
    passthrough() {
        return new ZodObject2({
            ...this._def,
            unknownKeys: "passthrough"
        });
    }
    setKey(key, schema) {
        return this.augment({
            [key]: schema
        });
    }
    merge(merging) {
        const merged = new ZodObject2({
            unknownKeys: merging._def.unknownKeys,
            catchall: merging._def.catchall,
            shape: ()=>objectUtil2.mergeShapes(this._def.shape(), merging._def.shape()),
            typeName: ZodFirstPartyTypeKind2.ZodObject
        });
        return merged;
    }
    catchall(index) {
        return new ZodObject2({
            ...this._def,
            catchall: index
        });
    }
    pick(mask) {
        const shape = {};
        util2.objectKeys(mask).map((key)=>{
            if (this.shape[key]) shape[key] = this.shape[key];
        });
        return new ZodObject2({
            ...this._def,
            shape: ()=>shape
        });
    }
    omit(mask) {
        const shape = {};
        util2.objectKeys(this.shape).map((key)=>{
            if (util2.objectKeys(mask).indexOf(key) === -1) {
                shape[key] = this.shape[key];
            }
        });
        return new ZodObject2({
            ...this._def,
            shape: ()=>shape
        });
    }
    deepPartial() {
        return deepPartialify2(this);
    }
    partial(mask) {
        const newShape = {};
        if (mask) {
            util2.objectKeys(this.shape).map((key)=>{
                if (util2.objectKeys(mask).indexOf(key) === -1) {
                    newShape[key] = this.shape[key];
                } else {
                    newShape[key] = this.shape[key].optional();
                }
            });
            return new ZodObject2({
                ...this._def,
                shape: ()=>newShape
            });
        } else {
            for(const key in this.shape){
                const fieldSchema = this.shape[key];
                newShape[key] = fieldSchema.optional();
            }
        }
        return new ZodObject2({
            ...this._def,
            shape: ()=>newShape
        });
    }
    required() {
        const newShape = {};
        for(const key in this.shape){
            const fieldSchema = this.shape[key];
            let newField = fieldSchema;
            while(newField instanceof ZodOptional2){
                newField = newField._def.innerType;
            }
            newShape[key] = newField;
        }
        return new ZodObject2({
            ...this._def,
            shape: ()=>newShape
        });
    }
    keyof() {
        return createZodEnum2(util2.objectKeys(this.shape));
    }
};
ZodObject2.create = (shape, params)=>{
    return new ZodObject2({
        shape: ()=>shape,
        unknownKeys: "strip",
        catchall: ZodNever2.create(),
        typeName: ZodFirstPartyTypeKind2.ZodObject,
        ...processCreateParams2(params)
    });
};
ZodObject2.strictCreate = (shape, params)=>{
    return new ZodObject2({
        shape: ()=>shape,
        unknownKeys: "strict",
        catchall: ZodNever2.create(),
        typeName: ZodFirstPartyTypeKind2.ZodObject,
        ...processCreateParams2(params)
    });
};
ZodObject2.lazycreate = (shape, params)=>{
    return new ZodObject2({
        shape,
        unknownKeys: "strip",
        catchall: ZodNever2.create(),
        typeName: ZodFirstPartyTypeKind2.ZodObject,
        ...processCreateParams2(params)
    });
};
var ZodUnion2 = class extends ZodType2 {
    _parse(input) {
        const { ctx  } = this._processInputParams(input);
        const options = this._def.options;
        function handleResults(results) {
            for (const result of results){
                if (result.result.status === "valid") {
                    return result.result;
                }
            }
            for (const result1 of results){
                if (result1.result.status === "dirty") {
                    ctx.common.issues.push(...result1.ctx.common.issues);
                    return result1.result;
                }
            }
            const unionErrors = results.map((result)=>new ZodError2(result.ctx.common.issues));
            addIssueToContext2(ctx, {
                code: ZodIssueCode2.invalid_union,
                unionErrors
            });
            return INVALID5;
        }
        if (ctx.common.async) {
            return Promise.all(options.map(async (option)=>{
                const childCtx = {
                    ...ctx,
                    common: {
                        ...ctx.common,
                        issues: []
                    },
                    parent: null
                };
                return {
                    result: await option._parseAsync({
                        data: ctx.data,
                        path: ctx.path,
                        parent: childCtx
                    }),
                    ctx: childCtx
                };
            })).then(handleResults);
        } else {
            let dirty = void 0;
            const issues = [];
            for (const option of options){
                const childCtx = {
                    ...ctx,
                    common: {
                        ...ctx.common,
                        issues: []
                    },
                    parent: null
                };
                const result = option._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: childCtx
                });
                if (result.status === "valid") {
                    return result;
                } else if (result.status === "dirty" && !dirty) {
                    dirty = {
                        result,
                        ctx: childCtx
                    };
                }
                if (childCtx.common.issues.length) {
                    issues.push(childCtx.common.issues);
                }
            }
            if (dirty) {
                ctx.common.issues.push(...dirty.ctx.common.issues);
                return dirty.result;
            }
            const unionErrors = issues.map((issues2)=>new ZodError2(issues2));
            addIssueToContext2(ctx, {
                code: ZodIssueCode2.invalid_union,
                unionErrors
            });
            return INVALID5;
        }
    }
    get options() {
        return this._def.options;
    }
};
ZodUnion2.create = (types, params)=>{
    return new ZodUnion2({
        options: types,
        typeName: ZodFirstPartyTypeKind2.ZodUnion,
        ...processCreateParams2(params)
    });
};
var ZodDiscriminatedUnion2 = class extends ZodType2 {
    _parse(input) {
        const { ctx  } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType2.object) {
            addIssueToContext2(ctx, {
                code: ZodIssueCode2.invalid_type,
                expected: ZodParsedType2.object,
                received: ctx.parsedType
            });
            return INVALID5;
        }
        const discriminator = this.discriminator;
        const discriminatorValue = ctx.data[discriminator];
        const option = this.options.get(discriminatorValue);
        if (!option) {
            addIssueToContext2(ctx, {
                code: ZodIssueCode2.invalid_union_discriminator,
                options: this.validDiscriminatorValues,
                path: [
                    discriminator
                ]
            });
            return INVALID5;
        }
        if (ctx.common.async) {
            return option._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
            });
        } else {
            return option._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
            });
        }
    }
    get discriminator() {
        return this._def.discriminator;
    }
    get validDiscriminatorValues() {
        return Array.from(this.options.keys());
    }
    get options() {
        return this._def.options;
    }
    static create(discriminator, types, params) {
        const options = /* @__PURE__ */ new Map();
        try {
            types.forEach((type)=>{
                const discriminatorValue = type.shape[discriminator].value;
                options.set(discriminatorValue, type);
            });
        } catch (e) {
            throw new Error("The discriminator value could not be extracted from all the provided schemas");
        }
        if (options.size !== types.length) {
            throw new Error("Some of the discriminator values are not unique");
        }
        return new ZodDiscriminatedUnion2({
            typeName: ZodFirstPartyTypeKind2.ZodDiscriminatedUnion,
            discriminator,
            options,
            ...processCreateParams2(params)
        });
    }
};
function mergeValues2(a, b) {
    const aType = getParsedType2(a);
    const bType = getParsedType2(b);
    if (a === b) {
        return {
            valid: true,
            data: a
        };
    } else if (aType === ZodParsedType2.object && bType === ZodParsedType2.object) {
        const bKeys = util2.objectKeys(b);
        const sharedKeys = util2.objectKeys(a).filter((key)=>bKeys.indexOf(key) !== -1);
        const newObj = {
            ...a,
            ...b
        };
        for (const key of sharedKeys){
            const sharedValue = mergeValues2(a[key], b[key]);
            if (!sharedValue.valid) {
                return {
                    valid: false
                };
            }
            newObj[key] = sharedValue.data;
        }
        return {
            valid: true,
            data: newObj
        };
    } else if (aType === ZodParsedType2.array && bType === ZodParsedType2.array) {
        if (a.length !== b.length) {
            return {
                valid: false
            };
        }
        const newArray = [];
        for(let index = 0; index < a.length; index++){
            const itemA = a[index];
            const itemB = b[index];
            const sharedValue1 = mergeValues2(itemA, itemB);
            if (!sharedValue1.valid) {
                return {
                    valid: false
                };
            }
            newArray.push(sharedValue1.data);
        }
        return {
            valid: true,
            data: newArray
        };
    } else if (aType === ZodParsedType2.date && bType === ZodParsedType2.date && +a === +b) {
        return {
            valid: true,
            data: a
        };
    } else {
        return {
            valid: false
        };
    }
}
var ZodIntersection2 = class extends ZodType2 {
    _parse(input) {
        const { status , ctx  } = this._processInputParams(input);
        const handleParsed = (parsedLeft, parsedRight)=>{
            if (isAborted2(parsedLeft) || isAborted2(parsedRight)) {
                return INVALID5;
            }
            const merged = mergeValues2(parsedLeft.value, parsedRight.value);
            if (!merged.valid) {
                addIssueToContext2(ctx, {
                    code: ZodIssueCode2.invalid_intersection_types
                });
                return INVALID5;
            }
            if (isDirty2(parsedLeft) || isDirty2(parsedRight)) {
                status.dirty();
            }
            return {
                status: status.value,
                value: merged.data
            };
        };
        if (ctx.common.async) {
            return Promise.all([
                this._def.left._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx
                }),
                this._def.right._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx
                })
            ]).then(([left, right])=>handleParsed(left, right));
        } else {
            return handleParsed(this._def.left._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
            }), this._def.right._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
            }));
        }
    }
};
ZodIntersection2.create = (left, right, params)=>{
    return new ZodIntersection2({
        left,
        right,
        typeName: ZodFirstPartyTypeKind2.ZodIntersection,
        ...processCreateParams2(params)
    });
};
var ZodTuple2 = class extends ZodType2 {
    _parse(input) {
        const { status , ctx  } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType2.array) {
            addIssueToContext2(ctx, {
                code: ZodIssueCode2.invalid_type,
                expected: ZodParsedType2.array,
                received: ctx.parsedType
            });
            return INVALID5;
        }
        if (ctx.data.length < this._def.items.length) {
            addIssueToContext2(ctx, {
                code: ZodIssueCode2.too_small,
                minimum: this._def.items.length,
                inclusive: true,
                type: "array"
            });
            return INVALID5;
        }
        const rest = this._def.rest;
        if (!rest && ctx.data.length > this._def.items.length) {
            addIssueToContext2(ctx, {
                code: ZodIssueCode2.too_big,
                maximum: this._def.items.length,
                inclusive: true,
                type: "array"
            });
            status.dirty();
        }
        const items = ctx.data.map((item, itemIndex)=>{
            const schema = this._def.items[itemIndex] || this._def.rest;
            if (!schema) return null;
            return schema._parse(new ParseInputLazyPath2(ctx, item, ctx.path, itemIndex));
        }).filter((x)=>!!x);
        if (ctx.common.async) {
            return Promise.all(items).then((results)=>{
                return ParseStatus2.mergeArray(status, results);
            });
        } else {
            return ParseStatus2.mergeArray(status, items);
        }
    }
    get items() {
        return this._def.items;
    }
    rest(rest) {
        return new ZodTuple2({
            ...this._def,
            rest
        });
    }
};
ZodTuple2.create = (schemas, params)=>{
    return new ZodTuple2({
        items: schemas,
        typeName: ZodFirstPartyTypeKind2.ZodTuple,
        rest: null,
        ...processCreateParams2(params)
    });
};
var ZodRecord2 = class extends ZodType2 {
    get keySchema() {
        return this._def.keyType;
    }
    get valueSchema() {
        return this._def.valueType;
    }
    _parse(input) {
        const { status , ctx  } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType2.object) {
            addIssueToContext2(ctx, {
                code: ZodIssueCode2.invalid_type,
                expected: ZodParsedType2.object,
                received: ctx.parsedType
            });
            return INVALID5;
        }
        const pairs = [];
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        for(const key in ctx.data){
            pairs.push({
                key: keyType._parse(new ParseInputLazyPath2(ctx, key, ctx.path, key)),
                value: valueType._parse(new ParseInputLazyPath2(ctx, ctx.data[key], ctx.path, key))
            });
        }
        if (ctx.common.async) {
            return ParseStatus2.mergeObjectAsync(status, pairs);
        } else {
            return ParseStatus2.mergeObjectSync(status, pairs);
        }
    }
    get element() {
        return this._def.valueType;
    }
    static create(first, second, third) {
        if (second instanceof ZodType2) {
            return new ZodRecord2({
                keyType: first,
                valueType: second,
                typeName: ZodFirstPartyTypeKind2.ZodRecord,
                ...processCreateParams2(third)
            });
        }
        return new ZodRecord2({
            keyType: ZodString2.create(),
            valueType: first,
            typeName: ZodFirstPartyTypeKind2.ZodRecord,
            ...processCreateParams2(second)
        });
    }
};
var ZodMap2 = class extends ZodType2 {
    _parse(input) {
        const { status , ctx  } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType2.map) {
            addIssueToContext2(ctx, {
                code: ZodIssueCode2.invalid_type,
                expected: ZodParsedType2.map,
                received: ctx.parsedType
            });
            return INVALID5;
        }
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        const pairs = [
            ...ctx.data.entries()
        ].map(([key, value], index)=>{
            return {
                key: keyType._parse(new ParseInputLazyPath2(ctx, key, ctx.path, [
                    index,
                    "key"
                ])),
                value: valueType._parse(new ParseInputLazyPath2(ctx, value, ctx.path, [
                    index,
                    "value"
                ]))
            };
        });
        if (ctx.common.async) {
            const finalMap = /* @__PURE__ */ new Map();
            return Promise.resolve().then(async ()=>{
                for (const pair of pairs){
                    const key = await pair.key;
                    const value = await pair.value;
                    if (key.status === "aborted" || value.status === "aborted") {
                        return INVALID5;
                    }
                    if (key.status === "dirty" || value.status === "dirty") {
                        status.dirty();
                    }
                    finalMap.set(key.value, value.value);
                }
                return {
                    status: status.value,
                    value: finalMap
                };
            });
        } else {
            const finalMap1 = /* @__PURE__ */ new Map();
            for (const pair of pairs){
                const key = pair.key;
                const value = pair.value;
                if (key.status === "aborted" || value.status === "aborted") {
                    return INVALID5;
                }
                if (key.status === "dirty" || value.status === "dirty") {
                    status.dirty();
                }
                finalMap1.set(key.value, value.value);
            }
            return {
                status: status.value,
                value: finalMap1
            };
        }
    }
};
ZodMap2.create = (keyType, valueType, params)=>{
    return new ZodMap2({
        valueType,
        keyType,
        typeName: ZodFirstPartyTypeKind2.ZodMap,
        ...processCreateParams2(params)
    });
};
var ZodSet2 = class extends ZodType2 {
    _parse(input) {
        const { status , ctx  } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType2.set) {
            addIssueToContext2(ctx, {
                code: ZodIssueCode2.invalid_type,
                expected: ZodParsedType2.set,
                received: ctx.parsedType
            });
            return INVALID5;
        }
        const def = this._def;
        if (def.minSize !== null) {
            if (ctx.data.size < def.minSize.value) {
                addIssueToContext2(ctx, {
                    code: ZodIssueCode2.too_small,
                    minimum: def.minSize.value,
                    type: "set",
                    inclusive: true,
                    message: def.minSize.message
                });
                status.dirty();
            }
        }
        if (def.maxSize !== null) {
            if (ctx.data.size > def.maxSize.value) {
                addIssueToContext2(ctx, {
                    code: ZodIssueCode2.too_big,
                    maximum: def.maxSize.value,
                    type: "set",
                    inclusive: true,
                    message: def.maxSize.message
                });
                status.dirty();
            }
        }
        const valueType = this._def.valueType;
        function finalizeSet(elements2) {
            const parsedSet = /* @__PURE__ */ new Set();
            for (const element of elements2){
                if (element.status === "aborted") return INVALID5;
                if (element.status === "dirty") status.dirty();
                parsedSet.add(element.value);
            }
            return {
                status: status.value,
                value: parsedSet
            };
        }
        const elements = [
            ...ctx.data.values()
        ].map((item, i)=>valueType._parse(new ParseInputLazyPath2(ctx, item, ctx.path, i)));
        if (ctx.common.async) {
            return Promise.all(elements).then((elements2)=>finalizeSet(elements2));
        } else {
            return finalizeSet(elements);
        }
    }
    min(minSize, message) {
        return new ZodSet2({
            ...this._def,
            minSize: {
                value: minSize,
                message: errorUtil2.toString(message)
            }
        });
    }
    max(maxSize, message) {
        return new ZodSet2({
            ...this._def,
            maxSize: {
                value: maxSize,
                message: errorUtil2.toString(message)
            }
        });
    }
    size(size, message) {
        return this.min(size, message).max(size, message);
    }
    nonempty(message) {
        return this.min(1, message);
    }
};
ZodSet2.create = (valueType, params)=>{
    return new ZodSet2({
        valueType,
        minSize: null,
        maxSize: null,
        typeName: ZodFirstPartyTypeKind2.ZodSet,
        ...processCreateParams2(params)
    });
};
var ZodFunction2 = class extends ZodType2 {
    constructor(){
        super(...arguments);
        this.validate = this.implement;
    }
    _parse(input) {
        const { ctx  } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType2.function) {
            addIssueToContext2(ctx, {
                code: ZodIssueCode2.invalid_type,
                expected: ZodParsedType2.function,
                received: ctx.parsedType
            });
            return INVALID5;
        }
        function makeArgsIssue(args, error) {
            return makeIssue2({
                data: args,
                path: ctx.path,
                errorMaps: [
                    ctx.common.contextualErrorMap,
                    ctx.schemaErrorMap,
                    getErrorMap2(),
                    defaultErrorMap2
                ].filter((x)=>!!x),
                issueData: {
                    code: ZodIssueCode2.invalid_arguments,
                    argumentsError: error
                }
            });
        }
        function makeReturnsIssue(returns, error) {
            return makeIssue2({
                data: returns,
                path: ctx.path,
                errorMaps: [
                    ctx.common.contextualErrorMap,
                    ctx.schemaErrorMap,
                    getErrorMap2(),
                    defaultErrorMap2
                ].filter((x)=>!!x),
                issueData: {
                    code: ZodIssueCode2.invalid_return_type,
                    returnTypeError: error
                }
            });
        }
        const params = {
            errorMap: ctx.common.contextualErrorMap
        };
        const fn = ctx.data;
        if (this._def.returns instanceof ZodPromise2) {
            return OK2(async (...args)=>{
                const error = new ZodError2([]);
                const parsedArgs = await this._def.args.parseAsync(args, params).catch((e)=>{
                    error.addIssue(makeArgsIssue(args, e));
                    throw error;
                });
                const result = await fn(...parsedArgs);
                const parsedReturns = await this._def.returns._def.type.parseAsync(result, params).catch((e)=>{
                    error.addIssue(makeReturnsIssue(result, e));
                    throw error;
                });
                return parsedReturns;
            });
        } else {
            return OK2((...args)=>{
                const parsedArgs = this._def.args.safeParse(args, params);
                if (!parsedArgs.success) {
                    throw new ZodError2([
                        makeArgsIssue(args, parsedArgs.error)
                    ]);
                }
                const result = fn(...parsedArgs.data);
                const parsedReturns = this._def.returns.safeParse(result, params);
                if (!parsedReturns.success) {
                    throw new ZodError2([
                        makeReturnsIssue(result, parsedReturns.error)
                    ]);
                }
                return parsedReturns.data;
            });
        }
    }
    parameters() {
        return this._def.args;
    }
    returnType() {
        return this._def.returns;
    }
    args(...items) {
        return new ZodFunction2({
            ...this._def,
            args: ZodTuple2.create(items).rest(ZodUnknown2.create())
        });
    }
    returns(returnType) {
        return new ZodFunction2({
            ...this._def,
            returns: returnType
        });
    }
    implement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
    }
    strictImplement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
    }
};
ZodFunction2.create = (args, returns, params)=>{
    return new ZodFunction2({
        args: args ? args.rest(ZodUnknown2.create()) : ZodTuple2.create([]).rest(ZodUnknown2.create()),
        returns: returns || ZodUnknown2.create(),
        typeName: ZodFirstPartyTypeKind2.ZodFunction,
        ...processCreateParams2(params)
    });
};
var ZodLazy2 = class extends ZodType2 {
    get schema() {
        return this._def.getter();
    }
    _parse(input) {
        const { ctx  } = this._processInputParams(input);
        const lazySchema = this._def.getter();
        return lazySchema._parse({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
        });
    }
};
ZodLazy2.create = (getter, params)=>{
    return new ZodLazy2({
        getter,
        typeName: ZodFirstPartyTypeKind2.ZodLazy,
        ...processCreateParams2(params)
    });
};
var ZodLiteral2 = class extends ZodType2 {
    _parse(input) {
        if (input.data !== this._def.value) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext2(ctx, {
                code: ZodIssueCode2.invalid_literal,
                expected: this._def.value
            });
            return INVALID5;
        }
        return {
            status: "valid",
            value: input.data
        };
    }
    get value() {
        return this._def.value;
    }
};
ZodLiteral2.create = (value, params)=>{
    return new ZodLiteral2({
        value,
        typeName: ZodFirstPartyTypeKind2.ZodLiteral,
        ...processCreateParams2(params)
    });
};
function createZodEnum2(values, params) {
    return new ZodEnum2({
        values,
        typeName: ZodFirstPartyTypeKind2.ZodEnum,
        ...processCreateParams2(params)
    });
}
var ZodEnum2 = class extends ZodType2 {
    _parse(input) {
        if (typeof input.data !== "string") {
            const ctx = this._getOrReturnCtx(input);
            const expectedValues = this._def.values;
            addIssueToContext2(ctx, {
                expected: util2.joinValues(expectedValues),
                received: ctx.parsedType,
                code: ZodIssueCode2.invalid_type
            });
            return INVALID5;
        }
        if (this._def.values.indexOf(input.data) === -1) {
            const ctx1 = this._getOrReturnCtx(input);
            const expectedValues1 = this._def.values;
            addIssueToContext2(ctx1, {
                received: ctx1.data,
                code: ZodIssueCode2.invalid_enum_value,
                options: expectedValues1
            });
            return INVALID5;
        }
        return OK2(input.data);
    }
    get options() {
        return this._def.values;
    }
    get enum() {
        const enumValues = {};
        for (const val of this._def.values){
            enumValues[val] = val;
        }
        return enumValues;
    }
    get Values() {
        const enumValues = {};
        for (const val of this._def.values){
            enumValues[val] = val;
        }
        return enumValues;
    }
    get Enum() {
        const enumValues = {};
        for (const val of this._def.values){
            enumValues[val] = val;
        }
        return enumValues;
    }
};
ZodEnum2.create = createZodEnum2;
var ZodNativeEnum2 = class extends ZodType2 {
    _parse(input) {
        const nativeEnumValues = util2.getValidEnumValues(this._def.values);
        const ctx = this._getOrReturnCtx(input);
        if (ctx.parsedType !== ZodParsedType2.string && ctx.parsedType !== ZodParsedType2.number) {
            const expectedValues = util2.objectValues(nativeEnumValues);
            addIssueToContext2(ctx, {
                expected: util2.joinValues(expectedValues),
                received: ctx.parsedType,
                code: ZodIssueCode2.invalid_type
            });
            return INVALID5;
        }
        if (nativeEnumValues.indexOf(input.data) === -1) {
            const expectedValues1 = util2.objectValues(nativeEnumValues);
            addIssueToContext2(ctx, {
                received: ctx.data,
                code: ZodIssueCode2.invalid_enum_value,
                options: expectedValues1
            });
            return INVALID5;
        }
        return OK2(input.data);
    }
    get enum() {
        return this._def.values;
    }
};
ZodNativeEnum2.create = (values, params)=>{
    return new ZodNativeEnum2({
        values,
        typeName: ZodFirstPartyTypeKind2.ZodNativeEnum,
        ...processCreateParams2(params)
    });
};
var ZodPromise2 = class extends ZodType2 {
    _parse(input) {
        const { ctx  } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType2.promise && ctx.common.async === false) {
            addIssueToContext2(ctx, {
                code: ZodIssueCode2.invalid_type,
                expected: ZodParsedType2.promise,
                received: ctx.parsedType
            });
            return INVALID5;
        }
        const promisified = ctx.parsedType === ZodParsedType2.promise ? ctx.data : Promise.resolve(ctx.data);
        return OK2(promisified.then((data)=>{
            return this._def.type.parseAsync(data, {
                path: ctx.path,
                errorMap: ctx.common.contextualErrorMap
            });
        }));
    }
};
ZodPromise2.create = (schema, params)=>{
    return new ZodPromise2({
        type: schema,
        typeName: ZodFirstPartyTypeKind2.ZodPromise,
        ...processCreateParams2(params)
    });
};
var ZodEffects2 = class extends ZodType2 {
    innerType() {
        return this._def.schema;
    }
    _parse(input) {
        const { status , ctx  } = this._processInputParams(input);
        const effect = this._def.effect || null;
        if (effect.type === "preprocess") {
            const processed = effect.transform(ctx.data);
            if (ctx.common.async) {
                return Promise.resolve(processed).then((processed2)=>{
                    return this._def.schema._parseAsync({
                        data: processed2,
                        path: ctx.path,
                        parent: ctx
                    });
                });
            } else {
                return this._def.schema._parseSync({
                    data: processed,
                    path: ctx.path,
                    parent: ctx
                });
            }
        }
        const checkCtx = {
            addIssue: (arg)=>{
                addIssueToContext2(ctx, arg);
                if (arg.fatal) {
                    status.abort();
                } else {
                    status.dirty();
                }
            },
            get path () {
                return ctx.path;
            }
        };
        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
        if (effect.type === "refinement") {
            const executeRefinement = (acc)=>{
                const result = effect.refinement(acc, checkCtx);
                if (ctx.common.async) {
                    return Promise.resolve(result);
                }
                if (result instanceof Promise) {
                    throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
                }
                return acc;
            };
            if (ctx.common.async === false) {
                const inner = this._def.schema._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx
                });
                if (inner.status === "aborted") return INVALID5;
                if (inner.status === "dirty") status.dirty();
                executeRefinement(inner.value);
                return {
                    status: status.value,
                    value: inner.value
                };
            } else {
                return this._def.schema._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx
                }).then((inner)=>{
                    if (inner.status === "aborted") return INVALID5;
                    if (inner.status === "dirty") status.dirty();
                    return executeRefinement(inner.value).then(()=>{
                        return {
                            status: status.value,
                            value: inner.value
                        };
                    });
                });
            }
        }
        if (effect.type === "transform") {
            if (ctx.common.async === false) {
                const base = this._def.schema._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx
                });
                if (!isValid2(base)) return base;
                const result = effect.transform(base.value, checkCtx);
                if (result instanceof Promise) {
                    throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
                }
                return {
                    status: status.value,
                    value: result
                };
            } else {
                return this._def.schema._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx
                }).then((base)=>{
                    if (!isValid2(base)) return base;
                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result)=>({
                            status: status.value,
                            value: result
                        }));
                });
            }
        }
        util2.assertNever(effect);
    }
};
ZodEffects2.create = (schema, effect, params)=>{
    return new ZodEffects2({
        schema,
        typeName: ZodFirstPartyTypeKind2.ZodEffects,
        effect,
        ...processCreateParams2(params)
    });
};
ZodEffects2.createWithPreprocess = (preprocess, schema, params)=>{
    return new ZodEffects2({
        schema,
        effect: {
            type: "preprocess",
            transform: preprocess
        },
        typeName: ZodFirstPartyTypeKind2.ZodEffects,
        ...processCreateParams2(params)
    });
};
var ZodOptional2 = class extends ZodType2 {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === ZodParsedType2.undefined) {
            return OK2(void 0);
        }
        return this._def.innerType._parse(input);
    }
    unwrap() {
        return this._def.innerType;
    }
};
ZodOptional2.create = (type, params)=>{
    return new ZodOptional2({
        innerType: type,
        typeName: ZodFirstPartyTypeKind2.ZodOptional,
        ...processCreateParams2(params)
    });
};
var ZodNullable2 = class extends ZodType2 {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === ZodParsedType2.null) {
            return OK2(null);
        }
        return this._def.innerType._parse(input);
    }
    unwrap() {
        return this._def.innerType;
    }
};
ZodNullable2.create = (type, params)=>{
    return new ZodNullable2({
        innerType: type,
        typeName: ZodFirstPartyTypeKind2.ZodNullable,
        ...processCreateParams2(params)
    });
};
var ZodDefault2 = class extends ZodType2 {
    _parse(input) {
        const { ctx  } = this._processInputParams(input);
        let data = ctx.data;
        if (ctx.parsedType === ZodParsedType2.undefined) {
            data = this._def.defaultValue();
        }
        return this._def.innerType._parse({
            data,
            path: ctx.path,
            parent: ctx
        });
    }
    removeDefault() {
        return this._def.innerType;
    }
};
ZodDefault2.create = (type, params)=>{
    return new ZodOptional2({
        innerType: type,
        typeName: ZodFirstPartyTypeKind2.ZodOptional,
        ...processCreateParams2(params)
    });
};
var ZodNaN2 = class extends ZodType2 {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType2.nan) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext2(ctx, {
                code: ZodIssueCode2.invalid_type,
                expected: ZodParsedType2.nan,
                received: ctx.parsedType
            });
            return INVALID5;
        }
        return {
            status: "valid",
            value: input.data
        };
    }
};
ZodNaN2.create = (params)=>{
    return new ZodNaN2({
        typeName: ZodFirstPartyTypeKind2.ZodNaN,
        ...processCreateParams2(params)
    });
};
var custom2 = (check, params = {}, fatal)=>{
    if (check) return ZodAny2.create().superRefine((data, ctx)=>{
        if (!check(data)) {
            const p = typeof params === "function" ? params(data) : params;
            const p2 = typeof p === "string" ? {
                message: p
            } : p;
            ctx.addIssue({
                code: "custom",
                ...p2,
                fatal
            });
        }
    });
    return ZodAny2.create();
};
var late2 = {
    object: ZodObject2.lazycreate
};
var ZodFirstPartyTypeKind2;
(function(ZodFirstPartyTypeKind22) {
    ZodFirstPartyTypeKind22["ZodString"] = "ZodString";
    ZodFirstPartyTypeKind22["ZodNumber"] = "ZodNumber";
    ZodFirstPartyTypeKind22["ZodNaN"] = "ZodNaN";
    ZodFirstPartyTypeKind22["ZodBigInt"] = "ZodBigInt";
    ZodFirstPartyTypeKind22["ZodBoolean"] = "ZodBoolean";
    ZodFirstPartyTypeKind22["ZodDate"] = "ZodDate";
    ZodFirstPartyTypeKind22["ZodUndefined"] = "ZodUndefined";
    ZodFirstPartyTypeKind22["ZodNull"] = "ZodNull";
    ZodFirstPartyTypeKind22["ZodAny"] = "ZodAny";
    ZodFirstPartyTypeKind22["ZodUnknown"] = "ZodUnknown";
    ZodFirstPartyTypeKind22["ZodNever"] = "ZodNever";
    ZodFirstPartyTypeKind22["ZodVoid"] = "ZodVoid";
    ZodFirstPartyTypeKind22["ZodArray"] = "ZodArray";
    ZodFirstPartyTypeKind22["ZodObject"] = "ZodObject";
    ZodFirstPartyTypeKind22["ZodUnion"] = "ZodUnion";
    ZodFirstPartyTypeKind22["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
    ZodFirstPartyTypeKind22["ZodIntersection"] = "ZodIntersection";
    ZodFirstPartyTypeKind22["ZodTuple"] = "ZodTuple";
    ZodFirstPartyTypeKind22["ZodRecord"] = "ZodRecord";
    ZodFirstPartyTypeKind22["ZodMap"] = "ZodMap";
    ZodFirstPartyTypeKind22["ZodSet"] = "ZodSet";
    ZodFirstPartyTypeKind22["ZodFunction"] = "ZodFunction";
    ZodFirstPartyTypeKind22["ZodLazy"] = "ZodLazy";
    ZodFirstPartyTypeKind22["ZodLiteral"] = "ZodLiteral";
    ZodFirstPartyTypeKind22["ZodEnum"] = "ZodEnum";
    ZodFirstPartyTypeKind22["ZodEffects"] = "ZodEffects";
    ZodFirstPartyTypeKind22["ZodNativeEnum"] = "ZodNativeEnum";
    ZodFirstPartyTypeKind22["ZodOptional"] = "ZodOptional";
    ZodFirstPartyTypeKind22["ZodNullable"] = "ZodNullable";
    ZodFirstPartyTypeKind22["ZodDefault"] = "ZodDefault";
    ZodFirstPartyTypeKind22["ZodPromise"] = "ZodPromise";
})(ZodFirstPartyTypeKind2 || (ZodFirstPartyTypeKind2 = {}));
var instanceOfType2 = (cls, params = {
    message: `Input not instance of ${cls.name}`
})=>custom2((data)=>data instanceof cls, params, true);
var stringType2 = ZodString2.create;
var numberType2 = ZodNumber2.create;
var nanType2 = ZodNaN2.create;
var bigIntType2 = ZodBigInt2.create;
var booleanType2 = ZodBoolean2.create;
var dateType2 = ZodDate2.create;
var undefinedType2 = ZodUndefined2.create;
var nullType2 = ZodNull2.create;
var anyType2 = ZodAny2.create;
var unknownType2 = ZodUnknown2.create;
var neverType2 = ZodNever2.create;
var voidType2 = ZodVoid2.create;
var arrayType2 = ZodArray2.create;
var objectType2 = ZodObject2.create;
var strictObjectType2 = ZodObject2.strictCreate;
var unionType2 = ZodUnion2.create;
var discriminatedUnionType2 = ZodDiscriminatedUnion2.create;
var intersectionType2 = ZodIntersection2.create;
var tupleType2 = ZodTuple2.create;
var recordType2 = ZodRecord2.create;
var mapType2 = ZodMap2.create;
var setType2 = ZodSet2.create;
var functionType2 = ZodFunction2.create;
var lazyType2 = ZodLazy2.create;
var literalType2 = ZodLiteral2.create;
var enumType2 = ZodEnum2.create;
var nativeEnumType2 = ZodNativeEnum2.create;
var promiseType2 = ZodPromise2.create;
var effectsType2 = ZodEffects2.create;
var optionalType2 = ZodOptional2.create;
var nullableType2 = ZodNullable2.create;
var preprocessType2 = ZodEffects2.createWithPreprocess;
var ostring2 = ()=>stringType2().optional();
var onumber2 = ()=>numberType2().optional();
var oboolean2 = ()=>booleanType2().optional();
var mod2 = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    getParsedType: getParsedType2,
    ZodParsedType: ZodParsedType2,
    makeIssue: makeIssue2,
    EMPTY_PATH: EMPTY_PATH2,
    addIssueToContext: addIssueToContext2,
    ParseStatus: ParseStatus2,
    INVALID: INVALID5,
    DIRTY: DIRTY2,
    OK: OK2,
    isAborted: isAborted2,
    isDirty: isDirty2,
    isValid: isValid2,
    isAsync: isAsync2,
    jsonStringifyReplacer: jsonStringifyReplacer2,
    ZodType: ZodType2,
    ZodString: ZodString2,
    ZodNumber: ZodNumber2,
    ZodBigInt: ZodBigInt2,
    ZodBoolean: ZodBoolean2,
    ZodDate: ZodDate2,
    ZodUndefined: ZodUndefined2,
    ZodNull: ZodNull2,
    ZodAny: ZodAny2,
    ZodUnknown: ZodUnknown2,
    ZodNever: ZodNever2,
    ZodVoid: ZodVoid2,
    ZodArray: ZodArray2,
    get objectUtil () {
        return objectUtil2;
    },
    ZodObject: ZodObject2,
    ZodUnion: ZodUnion2,
    ZodDiscriminatedUnion: ZodDiscriminatedUnion2,
    ZodIntersection: ZodIntersection2,
    ZodTuple: ZodTuple2,
    ZodRecord: ZodRecord2,
    ZodMap: ZodMap2,
    ZodSet: ZodSet2,
    ZodFunction: ZodFunction2,
    ZodLazy: ZodLazy2,
    ZodLiteral: ZodLiteral2,
    ZodEnum: ZodEnum2,
    ZodNativeEnum: ZodNativeEnum2,
    ZodPromise: ZodPromise2,
    ZodEffects: ZodEffects2,
    ZodTransformer: ZodEffects2,
    ZodOptional: ZodOptional2,
    ZodNullable: ZodNullable2,
    ZodDefault: ZodDefault2,
    ZodNaN: ZodNaN2,
    custom: custom2,
    Schema: ZodType2,
    ZodSchema: ZodType2,
    late: late2,
    get ZodFirstPartyTypeKind () {
        return ZodFirstPartyTypeKind2;
    },
    any: anyType2,
    array: arrayType2,
    bigint: bigIntType2,
    boolean: booleanType2,
    date: dateType2,
    discriminatedUnion: discriminatedUnionType2,
    effect: effectsType2,
    enum: enumType2,
    function: functionType2,
    instanceof: instanceOfType2,
    intersection: intersectionType2,
    lazy: lazyType2,
    literal: literalType2,
    map: mapType2,
    nan: nanType2,
    nativeEnum: nativeEnumType2,
    never: neverType2,
    null: nullType2,
    nullable: nullableType2,
    number: numberType2,
    object: objectType2,
    oboolean: oboolean2,
    onumber: onumber2,
    optional: optionalType2,
    ostring: ostring2,
    preprocess: preprocessType2,
    promise: promiseType2,
    record: recordType2,
    set: setType2,
    strictObject: strictObjectType2,
    string: stringType2,
    transformer: effectsType2,
    tuple: tupleType2,
    undefined: undefinedType2,
    union: unionType2,
    unknown: unknownType2,
    void: voidType2,
    ZodIssueCode: ZodIssueCode2,
    quotelessJson: quotelessJson2,
    ZodError: ZodError2,
    defaultErrorMap: defaultErrorMap2,
    setErrorMap: setErrorMap2,
    getErrorMap: getErrorMap2
});
var { base58check  } = require_lib();
var ID_SEPARATOR = "-";
var REGEX_ULID = /^[0123456789ABCDEFGHJKMNPQRSTVWXYZ]{26}$/;
var idBinaryStruct = use(struct({
    test: boolean,
    timestamp: bigUint64,
    ulid: string(latin1, uint8),
    siphash: bytes(uint8)
}));
var SipHashKeyStruct = mod2.instanceof(Uint8Array).refine((val)=>val.length === 8, {
    message: `SipHash key must be ${import_halfsiphash.KEY_LENGTH} bytes`
});
var SipHashHashStruct = mod2.instanceof(Uint8Array).refine((value)=>{
    return value.length === 4;
}, {
    message: `SipHash hash should be 4 bytes`
});
var PayloadStruct = mod2.object({
    test: mod2.boolean().default(false),
    timestamp: mod2.string(),
    ulid: mod2.string().regex(REGEX_ULID)
});
function parseId(id) {
    const splitId = id.split(ID_SEPARATOR);
    if (splitId.length !== 1 && splitId.length !== 2) {
        throw new Error(`string format error`);
    }
    const idString = splitId.length === 2 ? splitId[1] : splitId[0];
    const decodedId = base58check(import_sha256.hash).decode(idString);
    const deserializedId = idBinaryStruct.fromBytes(decodedId);
    const { siphash , ...payload } = deserializedId;
    const payloadWithStringTimestamp = {
        ...payload,
        timestamp: payload.timestamp.toString()
    };
    if (!PayloadStruct.safeParse(payloadWithStringTimestamp).success) {
        throw new Error(`invalid payload`);
    }
    return [
        payloadWithStringTimestamp,
        siphash
    ];
}
var decodeUnsafely = (id)=>{
    try {
        const [payload] = parseId(id);
        return payload;
    } catch (error) {
        if (error instanceof mod2.ZodError) {
            const joinedIssues = error.issues.map((issue)=>{
                return `${issue.code} : [${issue.path.join(", ")}] : ${issue.message}`;
            }).join("; ");
            throw new Error(`Invalid ID:  ${joinedIssues}`);
        } else if (error instanceof Error) {
            throw new Error(`Invalid ID: ${error.message}`);
        } else {
            throw error;
        }
    }
};
var isValidUnsafely = (id)=>{
    try {
        decodeUnsafely(id);
        return true;
    } catch (error) {
        return false;
    }
};
var import_base64 = __toESM(require_base64(), 1);
var import_iso_3166_ts = __toESM(require_dist(), 1);
var REGEX_HASH_HEX_32 = /^(([a-f0-9]{2}){32})$/i;
var HashHex32 = mod.string().regex(REGEX_HASH_HEX_32);
var REGEX_HASH_HEX_20_64 = /^(([a-f0-9]{2}){20,64})$/i;
var HashHex20to64 = mod.string().regex(REGEX_HASH_HEX_20_64);
var REGEX_ULID2 = /^[0123456789ABCDEFGHJKMNPQRSTVWXYZ]{26}$/;
var ULID = mod.string().regex(REGEX_ULID2);
var UnionHashTypes = mod.union([
    mod.literal("sha1"),
    mod.literal("sha-256"),
    mod.literal("sha-384"),
    mod.literal("sha-512")
]);
var UnionProofHashTypes = mod.union([
    mod.literal("sha224"),
    mod.literal("sha256"),
    mod.literal("sha384"),
    mod.literal("sha512"),
    mod.literal("sha512_256"),
    mod.literal("sha3_224"),
    mod.literal("sha3_256"),
    mod.literal("sha3_384"),
    mod.literal("sha3_512")
]);
var UnionIntentTypes = mod.union([
    mod.literal("bitcoin"),
    mod.literal("ethereum"),
    mod.literal("stellar"),
    mod.literal("twitter")
]);
var UnionEnvironmentTypes = mod.union([
    mod.literal("development"),
    mod.literal("staging"),
    mod.literal("production")
]);
var HashType = mod.object({
    minBytes: mod.number().min(20).max(64),
    maxBytes: mod.number().min(20).max(64)
});
var HashTypes = mod.record(mod.string(), HashType);
var TruestampId = mod.string().refine((val)=>{
    try {
        return isValidUnsafely(val);
    } catch (error) {
        return false;
    }
}, {
    message: `is not a valid Truestamp Id string`
});
var Base64 = mod.string().refine((val)=>{
    try {
        (0, import_base64.decode)(val);
        return true;
    } catch (error) {
        return false;
    }
}, {
    message: `is not a valid Base64 encoded string`
});
var ISO8601 = mod.string().refine((val)=>{
    try {
        return DateTime.fromISO(val).isValid;
    } catch (error) {
        return false;
    }
}, {
    message: `is not a valid ISO8601 timestamp`
});
var ISO8601UTC = mod.string().refine((val)=>{
    try {
        if (!val.endsWith("Z") && !val.endsWith("+00:00")) {
            return false;
        }
        const d = DateTime.fromISO(val, {
            zone: "utc"
        });
        return d.isValid && d.offsetNameShort === "UTC";
    } catch (error) {
        return false;
    }
}, {
    message: `is not a valid ISO8601 UTC timestamp`
});
var ISO3166Alpha2 = mod.string().length(2).refine((val)=>{
    try {
        return (0, import_iso_3166_ts.isIso3166Alpha2Code)(val);
    } catch (error) {
        return false;
    }
}, {
    message: `is not an ISO3166 Alpha 2 country code`
});
var Address = mod.object({
    streetNo: mod.optional(mod.string().min(1).max(8)),
    streetName: mod.optional(mod.string().min(1).max(64)),
    streetType: mod.optional(mod.string().min(1).max(16)),
    floor: mod.optional(mod.string().min(1).max(8)),
    town: mod.optional(mod.string().min(1).max(64)),
    region: mod.optional(mod.string().min(1).max(64)),
    postcode: mod.optional(mod.string().min(1).max(16)),
    countryCode: mod.optional(ISO3166Alpha2)
});
var Latitude = mod.string().refine((val)=>{
    try {
        const decimalLatLongValueString = /^[-+]?[0-9]*\.?[0-9]+$/;
        if (!decimalLatLongValueString.test(val)) {
            return false;
        }
        const valFloat = parseFloat(val);
        return valFloat >= -90 && valFloat <= 90 ? true : false;
    } catch (error) {
        return false;
    }
}, {
    message: `is not a valid Latitude`
});
var Longitude = mod.string().refine((val)=>{
    try {
        const decimalLatLongValueString = /^[-+]?[0-9]*\.?[0-9]+$/;
        if (!decimalLatLongValueString.test(val)) {
            return false;
        }
        const valFloat = parseFloat(val);
        return valFloat >= -180 && valFloat <= 180 ? true : false;
    } catch (error) {
        return false;
    }
}, {
    message: `is not a valid Longitude`
});
var LatLong = mod.object({
    latitude: Latitude,
    longitude: Longitude
});
var Location = mod.object({
    coordinate: LatLong,
    altitude: mod.optional(mod.number().int().min(-1e5).max(1e5)),
    ellipsoidalAltitude: mod.optional(mod.number().int().min(-1e5).max(1e5)),
    floor: mod.optional(mod.number().int().min(0).max(200)),
    horizontalAccuracy: mod.optional(mod.number().int().min(-1e5).max(1e5)),
    verticalAccuracy: mod.optional(mod.number().int().min(-1e5).max(1e5)),
    timestamp: mod.optional(ISO8601),
    speed: mod.optional(mod.number().int().min(-1e5).max(1e5)),
    speedAccuracy: mod.optional(mod.number().int().min(-1e4).max(1e4)),
    course: mod.optional(mod.number().int().min(-360).max(360)),
    courseAccuracy: mod.optional(mod.number().int().min(-360).max(360)),
    magneticHeading: mod.optional(mod.number().int().min(0).max(359)),
    headingAccuracy: mod.optional(mod.number().int().min(-180).max(180)),
    trueHeading: mod.optional(mod.number().int().min(0).max(359))
});
var Person = mod.object({
    givenName: mod.optional(mod.string().min(1).max(32)),
    surname: mod.optional(mod.string().min(1).max(32)),
    organizationName: mod.optional(mod.string().min(1).max(64)),
    roles: mod.optional(mod.array(mod.string()).min(1).max(32)),
    email: mod.optional(mod.string().email()),
    uri: mod.optional(mod.string().url()),
    address: mod.optional(Address)
});
var Signature = mod.object({
    publicKey: Base64,
    signature: Base64,
    signatureType: mod.literal("ed25519"),
    signer: mod.optional(Person)
});
var ItemRequestProps = mod.object({
    asn: mod.optional(mod.nullable(mod.union([
        mod.number().int(),
        mod.string()
    ]))),
    colo: mod.optional(mod.nullable(mod.string().min(1))),
    country: mod.optional(mod.nullable(mod.string().min(1))),
    city: mod.optional(mod.nullable(mod.string().min(1))),
    continent: mod.optional(mod.nullable(mod.string().min(1))),
    latitude: mod.optional(mod.nullable(mod.string().min(1))),
    longitude: mod.optional(mod.nullable(mod.string().min(1))),
    postalCode: mod.optional(mod.nullable(mod.string().min(1))),
    metroCode: mod.optional(mod.nullable(mod.string().min(1))),
    region: mod.optional(mod.nullable(mod.string().min(1))),
    regionCode: mod.optional(mod.nullable(mod.string().min(1))),
    timezone: mod.optional(mod.nullable(mod.string().min(1)))
});
var literalSchema = mod.union([
    mod.string(),
    mod.number(),
    mod.boolean(),
    mod.null()
]);
var jsonSchema = mod.lazy(()=>mod.union([
        literalSchema,
        mod.array(jsonSchema),
        mod.record(jsonSchema)
    ]));
var ItemData = mod.object({
    hash: HashHex20to64,
    hashType: UnionHashTypes,
    people: mod.optional(mod.array(Person).min(1)),
    description: mod.optional(mod.string().min(1).max(256)),
    address: mod.optional(Address),
    location: mod.optional(Location),
    timestamp: mod.optional(ISO8601),
    extra: mod.optional(jsonSchema)
});
var ItemSignals = mod.object({
    cf: mod.optional(ItemRequestProps),
    observableEntropy: mod.optional(HashHex32),
    submittedAt: ISO8601UTC
});
var Item = mod.object({
    itemData: mod.array(ItemData).min(1),
    itemSignals: mod.optional(ItemSignals),
    itemDataSignatures: mod.optional(mod.array(Signature).min(1))
});
var ItemRequest = Item.pick({
    itemData: true,
    itemDataSignatures: true
});
var ItemResponse = mod.object({
    id: TruestampId
});
var ItemEnvelope = mod.object({
    owner: mod.string().min(1).max(255),
    ulid: ULID,
    item: Item
});
var SNSTopicMessage = mod.object({
    owner: mod.optional(mod.string().min(1)),
    inputHash: HashHex32
});
var ProofObjectLayer = mod.tuple([
    mod.number().int().min(0).max(1),
    HashHex20to64
]);
var ProofObject = mod.object({
    v: mod.number().int().min(1).max(1),
    h: UnionProofHashTypes,
    p: mod.array(ProofObjectLayer)
});
var CommitProof = mod.object({
    inputHash: HashHex32,
    inclusionProof: ProofObject,
    merkleRoot: HashHex32
});
var CommitTransactionBase = mod.object({
    inputHash: HashHex32
});
var CommitTransactionBitcoin = CommitTransactionBase.extend({
    intent: mod.literal("bitcoin"),
    hash: mod.string().regex(/(0x)?[0-9a-f]+/i)
}).strict();
var CommitTransactionEthereum = CommitTransactionBase.extend({
    intent: mod.literal("ethereum"),
    hash: mod.string().regex(/(0x)?[0-9a-f]+/i)
}).strict();
var CommitTransactionStellar = CommitTransactionBase.extend({
    intent: mod.literal("stellar"),
    hash: HashHex32,
    ledger: mod.number().int().min(11111)
}).strict();
var CommitTransactionTwitter = CommitTransactionBase.extend({
    intent: mod.literal("twitter"),
    id: mod.string().regex(/[0-9]+/i)
}).strict();
var CommitTransaction = mod.discriminatedUnion("intent", [
    CommitTransactionBitcoin,
    CommitTransactionEthereum,
    CommitTransactionStellar,
    CommitTransactionTwitter
]);
var CommitmentData = mod.object({
    id: TruestampId,
    itemData: mod.array(ItemData).min(1),
    itemDataSignatures: mod.optional(mod.array(Signature).min(1)),
    itemSignals: mod.optional(ItemSignals),
    proofs: mod.array(CommitProof),
    transactions: mod.record(mod.string(), mod.array(CommitTransaction).min(1))
});
var Commitment = mod.object({
    commitmentData: CommitmentData,
    commitmentDataSignatures: mod.array(Signature).min(1)
});
var ULIDResponse = mod.object({
    t: mod.number(),
    ts: ISO8601UTC,
    ulid: ULID
});
var ULIDResponseCollection = mod.array(ULIDResponse);
var VerificationProof = mod.object({
    inputHash: HashHex32,
    merkleRoot: HashHex32
}).strict();
var VerificationTransaction = mod.object({
    intent: UnionIntentTypes,
    verified: mod.boolean(),
    transaction: CommitTransaction,
    timestamp: mod.optional(ISO8601UTC),
    urls: mod.optional(mod.object({
        machine: mod.optional(mod.array(mod.string().url())),
        human: mod.optional(mod.array(mod.string().url()))
    })),
    error: mod.optional(mod.string())
}).strict();
var CommitmentVerification = mod.object({
    verified: mod.boolean(),
    id: mod.optional(TruestampId),
    idData: mod.optional(mod.object({
        test: mod.boolean(),
        timestamp: mod.string(),
        ulid: ULID
    })),
    itemData: mod.optional(mod.object({
        hash: HashHex32,
        hashType: UnionHashTypes,
        signaturesCount: mod.optional(mod.number().int())
    })),
    item: mod.optional(mod.object({
        hash: HashHex32,
        hashType: mod.literal("sha-256")
    })),
    commitmentData: mod.optional(mod.object({
        hash: HashHex32,
        hashType: mod.literal("sha-256"),
        signaturesCount: mod.optional(mod.number().int())
    })),
    proofs: mod.optional(mod.array(VerificationProof).min(1)),
    transactions: mod.optional(mod.array(VerificationTransaction).min(1)),
    commitsTo: mod.optional(mod.object({
        hashes: mod.array(mod.object({
            hash: HashHex20to64,
            hashType: mod.string()
        })).min(1),
        observableEntropy: mod.optional(HashHex32),
        timestamps: mod.object({
            submittedAfter: mod.optional(ISO8601UTC),
            submittedAt: ISO8601UTC,
            submittedBefore: mod.optional(mod.array(mod.string())),
            submitWindowMilliseconds: mod.optional(mod.number().int().min(0).max(3600 * 24 * 365 * 1e3))
        })
    })),
    error: mod.optional(mod.string())
}).strict();
var SignedKey = mod.object({
    environment: UnionEnvironmentTypes,
    expired: mod.boolean(),
    handle: mod.string().min(1),
    publicKey: Base64,
    type: mod.literal("ed25519"),
    selfSignature: Base64
});
var SignedKeys = mod.array(SignedKey).min(1);
var UnsignedKey = SignedKey.omit({
    selfSignature: true
});
var CanonicalHash = mod.object({
    hash: mod.instanceof(Uint8Array),
    hashHex: HashHex32,
    hashType: UnionHashTypes,
    canonicalData: mod.optional(mod.string())
});
var EntropyResponseFile = mod.object({
    name: mod.string(),
    hash: HashHex32,
    hashType: mod.literal("sha256")
});
var EntropyResponse = mod.object({
    hash: HashHex32,
    hashType: mod.literal("sha256"),
    hashIterations: mod.number().int().min(1),
    createdAt: ISO8601UTC,
    signature: Base64,
    prevHash: mod.optional(HashHex32),
    files: mod.optional(mod.array(EntropyResponseFile).min(1))
});
var __create3 = Object.create;
var __defProp3 = Object.defineProperty;
var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
var __getOwnPropNames3 = Object.getOwnPropertyNames;
var __getProtoOf3 = Object.getPrototypeOf;
var __hasOwnProp3 = Object.prototype.hasOwnProperty;
var __commonJS3 = (cb, mod22)=>function __require2() {
        return mod22 || (0, cb[__getOwnPropNames3(cb)[0]])((mod22 = {
            exports: {}
        }).exports, mod22), mod22.exports;
    };
var __copyProps3 = (to, from, except, desc)=>{
    if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))if (!__hasOwnProp3.call(to, key) && key !== except) __defProp3(to, key, {
            get: ()=>from[key],
            enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable
        });
    }
    return to;
};
var __toESM3 = (mod22, isNodeMode, target)=>(target = mod22 != null ? __create3(__getProtoOf3(mod22)) : {}, __copyProps3(isNodeMode || !mod22 || !mod22.__esModule ? __defProp3(target, "default", {
        value: mod22,
        enumerable: true
    }) : target, mod22));
var require_hex = __commonJS3({
    "node_modules/@stablelib/hex/lib/hex.js" (exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function encodeNibble(b) {
            var result = b + 48;
            result += 9 - b >>> 8 & -48 + 65 - 10;
            return String.fromCharCode(result);
        }
        function encodeNibbleLower(b) {
            var result = b + 48;
            result += 9 - b >>> 8 & -48 + 97 - 10;
            return String.fromCharCode(result);
        }
        var INVALID_HEX_NIBBLE = 256;
        function decodeNibble(c) {
            var result = INVALID_HEX_NIBBLE;
            result += (47 - c & c - 58) >> 8 & -INVALID_HEX_NIBBLE + c - 48;
            result += (64 - c & c - 71) >> 8 & -INVALID_HEX_NIBBLE + c - 65 + 10;
            result += (96 - c & c - 103) >> 8 & -INVALID_HEX_NIBBLE + c - 97 + 10;
            return result;
        }
        function encode2(data, lowerCase) {
            if (lowerCase === void 0) {
                lowerCase = false;
            }
            var enc = lowerCase ? encodeNibbleLower : encodeNibble;
            var s2 = "";
            for(var i = 0; i < data.length; i++){
                s2 += enc(data[i] >>> 4);
                s2 += enc(data[i] & 15);
            }
            return s2;
        }
        exports.encode = encode2;
        function decode2(hex) {
            if (hex.length === 0) {
                return new Uint8Array(0);
            }
            if (hex.length % 2 !== 0) {
                throw new Error("hex: input string must be divisible by two");
            }
            var result = new Uint8Array(hex.length / 2);
            var haveBad = 0;
            for(var i = 0; i < hex.length; i += 2){
                var v0 = decodeNibble(hex.charCodeAt(i));
                var v1 = decodeNibble(hex.charCodeAt(i + 1));
                result[i / 2] = v0 << 4 | v1;
                haveBad |= v0 & INVALID_HEX_NIBBLE;
                haveBad |= v1 & INVALID_HEX_NIBBLE;
            }
            if (haveBad !== 0) {
                throw new Error("hex: incorrect characters for decoding");
            }
            return result;
        }
        exports.decode = decode2;
    }
});
var require_constant_time2 = __commonJS3({
    "node_modules/@stablelib/constant-time/lib/constant-time.js" (exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function select(subject, resultIfOne, resultIfZero) {
            return ~(subject - 1) & resultIfOne | subject - 1 & resultIfZero;
        }
        exports.select = select;
        function lessOrEqual(a, b) {
            return (a | 0) - (b | 0) - 1 >>> 31 & 1;
        }
        exports.lessOrEqual = lessOrEqual;
        function compare2(a, b) {
            if (a.length !== b.length) {
                return 0;
            }
            var result = 0;
            for(var i = 0; i < a.length; i++){
                result |= a[i] ^ b[i];
            }
            return 1 & result - 1 >>> 8;
        }
        exports.compare = compare2;
        function equal3(a, b) {
            if (a.length === 0 || b.length === 0) {
                return false;
            }
            return compare2(a, b) !== 0;
        }
        exports.equal = equal3;
    }
});
var require_bytes = __commonJS3({
    "node_modules/@stablelib/bytes/lib/bytes.js" (exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function concat2() {
            var totalLength = 0;
            for(var i = 0; i < arguments.length; i++){
                totalLength += arguments[i].length;
            }
            var result = new Uint8Array(totalLength);
            var offset2 = 0;
            for(var i = 0; i < arguments.length; i++){
                var arg = arguments[i];
                result.set(arg, offset2);
                offset2 += arg.length;
            }
            return result;
        }
        exports.concat = concat2;
    }
});
var require_int2 = __commonJS3({
    "node_modules/@stablelib/int/lib/int.js" (exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function imulShim(a, b) {
            var ah = a >>> 16 & 65535, al = a & 65535;
            var bh = b >>> 16 & 65535, bl = b & 65535;
            return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
        }
        exports.mul = Math.imul || imulShim;
        function add(a, b) {
            return a + b | 0;
        }
        exports.add = add;
        function sub(a, b) {
            return a - b | 0;
        }
        exports.sub = sub;
        function rotl(x, n2) {
            return x << n2 | x >>> 32 - n2;
        }
        exports.rotl = rotl;
        function rotr(x, n2) {
            return x << 32 - n2 | x >>> n2;
        }
        exports.rotr = rotr;
        function isIntegerShim(n2) {
            return typeof n2 === "number" && isFinite(n2) && Math.floor(n2) === n2;
        }
        exports.isInteger = Number.isInteger || isIntegerShim;
        exports.MAX_SAFE_INTEGER = 9007199254740991;
        exports.isSafeInteger = function(n2) {
            return exports.isInteger(n2) && n2 >= -exports.MAX_SAFE_INTEGER && n2 <= exports.MAX_SAFE_INTEGER;
        };
    }
});
var require_binary2 = __commonJS3({
    "node_modules/@stablelib/binary/lib/binary.js" (exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var int_1 = require_int2();
        function readInt16BE(array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            return (array[offset2 + 0] << 8 | array[offset2 + 1]) << 16 >> 16;
        }
        exports.readInt16BE = readInt16BE;
        function readUint16BE(array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            return (array[offset2 + 0] << 8 | array[offset2 + 1]) >>> 0;
        }
        exports.readUint16BE = readUint16BE;
        function readInt16LE(array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            return (array[offset2 + 1] << 8 | array[offset2]) << 16 >> 16;
        }
        exports.readInt16LE = readInt16LE;
        function readUint16LE(array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            return (array[offset2 + 1] << 8 | array[offset2]) >>> 0;
        }
        exports.readUint16LE = readUint16LE;
        function writeUint16BE(value, out, offset2) {
            if (out === void 0) {
                out = new Uint8Array(2);
            }
            if (offset2 === void 0) {
                offset2 = 0;
            }
            out[offset2 + 0] = value >>> 8;
            out[offset2 + 1] = value >>> 0;
            return out;
        }
        exports.writeUint16BE = writeUint16BE;
        exports.writeInt16BE = writeUint16BE;
        function writeUint16LE(value, out, offset2) {
            if (out === void 0) {
                out = new Uint8Array(2);
            }
            if (offset2 === void 0) {
                offset2 = 0;
            }
            out[offset2 + 0] = value >>> 0;
            out[offset2 + 1] = value >>> 8;
            return out;
        }
        exports.writeUint16LE = writeUint16LE;
        exports.writeInt16LE = writeUint16LE;
        function readInt32BE(array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            return array[offset2] << 24 | array[offset2 + 1] << 16 | array[offset2 + 2] << 8 | array[offset2 + 3];
        }
        exports.readInt32BE = readInt32BE;
        function readUint32BE(array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            return (array[offset2] << 24 | array[offset2 + 1] << 16 | array[offset2 + 2] << 8 | array[offset2 + 3]) >>> 0;
        }
        exports.readUint32BE = readUint32BE;
        function readInt32LE(array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            return array[offset2 + 3] << 24 | array[offset2 + 2] << 16 | array[offset2 + 1] << 8 | array[offset2];
        }
        exports.readInt32LE = readInt32LE;
        function readUint32LE(array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            return (array[offset2 + 3] << 24 | array[offset2 + 2] << 16 | array[offset2 + 1] << 8 | array[offset2]) >>> 0;
        }
        exports.readUint32LE = readUint32LE;
        function writeUint32BE(value, out, offset2) {
            if (out === void 0) {
                out = new Uint8Array(4);
            }
            if (offset2 === void 0) {
                offset2 = 0;
            }
            out[offset2 + 0] = value >>> 24;
            out[offset2 + 1] = value >>> 16;
            out[offset2 + 2] = value >>> 8;
            out[offset2 + 3] = value >>> 0;
            return out;
        }
        exports.writeUint32BE = writeUint32BE;
        exports.writeInt32BE = writeUint32BE;
        function writeUint32LE(value, out, offset2) {
            if (out === void 0) {
                out = new Uint8Array(4);
            }
            if (offset2 === void 0) {
                offset2 = 0;
            }
            out[offset2 + 0] = value >>> 0;
            out[offset2 + 1] = value >>> 8;
            out[offset2 + 2] = value >>> 16;
            out[offset2 + 3] = value >>> 24;
            return out;
        }
        exports.writeUint32LE = writeUint32LE;
        exports.writeInt32LE = writeUint32LE;
        function readInt64BE(array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            var hi = readInt32BE(array, offset2);
            var lo = readInt32BE(array, offset2 + 4);
            return hi * 4294967296 + lo - (lo >> 31) * 4294967296;
        }
        exports.readInt64BE = readInt64BE;
        function readUint64BE(array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            var hi = readUint32BE(array, offset2);
            var lo = readUint32BE(array, offset2 + 4);
            return hi * 4294967296 + lo;
        }
        exports.readUint64BE = readUint64BE;
        function readInt64LE(array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            var lo = readInt32LE(array, offset2);
            var hi = readInt32LE(array, offset2 + 4);
            return hi * 4294967296 + lo - (lo >> 31) * 4294967296;
        }
        exports.readInt64LE = readInt64LE;
        function readUint64LE(array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            var lo = readUint32LE(array, offset2);
            var hi = readUint32LE(array, offset2 + 4);
            return hi * 4294967296 + lo;
        }
        exports.readUint64LE = readUint64LE;
        function writeUint64BE(value, out, offset2) {
            if (out === void 0) {
                out = new Uint8Array(8);
            }
            if (offset2 === void 0) {
                offset2 = 0;
            }
            writeUint32BE(value / 4294967296 >>> 0, out, offset2);
            writeUint32BE(value >>> 0, out, offset2 + 4);
            return out;
        }
        exports.writeUint64BE = writeUint64BE;
        exports.writeInt64BE = writeUint64BE;
        function writeUint64LE(value, out, offset2) {
            if (out === void 0) {
                out = new Uint8Array(8);
            }
            if (offset2 === void 0) {
                offset2 = 0;
            }
            writeUint32LE(value >>> 0, out, offset2);
            writeUint32LE(value / 4294967296 >>> 0, out, offset2 + 4);
            return out;
        }
        exports.writeUint64LE = writeUint64LE;
        exports.writeInt64LE = writeUint64LE;
        function readUintBE(bitLength, array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            if (bitLength % 8 !== 0) {
                throw new Error("readUintBE supports only bitLengths divisible by 8");
            }
            if (bitLength / 8 > array.length - offset2) {
                throw new Error("readUintBE: array is too short for the given bitLength");
            }
            var result = 0;
            var mul = 1;
            for(var i = bitLength / 8 + offset2 - 1; i >= offset2; i--){
                result += array[i] * mul;
                mul *= 256;
            }
            return result;
        }
        exports.readUintBE = readUintBE;
        function readUintLE(bitLength, array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            if (bitLength % 8 !== 0) {
                throw new Error("readUintLE supports only bitLengths divisible by 8");
            }
            if (bitLength / 8 > array.length - offset2) {
                throw new Error("readUintLE: array is too short for the given bitLength");
            }
            var result = 0;
            var mul = 1;
            for(var i = offset2; i < offset2 + bitLength / 8; i++){
                result += array[i] * mul;
                mul *= 256;
            }
            return result;
        }
        exports.readUintLE = readUintLE;
        function writeUintBE(bitLength, value, out, offset2) {
            if (out === void 0) {
                out = new Uint8Array(bitLength / 8);
            }
            if (offset2 === void 0) {
                offset2 = 0;
            }
            if (bitLength % 8 !== 0) {
                throw new Error("writeUintBE supports only bitLengths divisible by 8");
            }
            if (!int_1.isSafeInteger(value)) {
                throw new Error("writeUintBE value must be an integer");
            }
            var div = 1;
            for(var i = bitLength / 8 + offset2 - 1; i >= offset2; i--){
                out[i] = value / div & 255;
                div *= 256;
            }
            return out;
        }
        exports.writeUintBE = writeUintBE;
        function writeUintLE(bitLength, value, out, offset2) {
            if (out === void 0) {
                out = new Uint8Array(bitLength / 8);
            }
            if (offset2 === void 0) {
                offset2 = 0;
            }
            if (bitLength % 8 !== 0) {
                throw new Error("writeUintLE supports only bitLengths divisible by 8");
            }
            if (!int_1.isSafeInteger(value)) {
                throw new Error("writeUintLE value must be an integer");
            }
            var div = 1;
            for(var i = offset2; i < offset2 + bitLength / 8; i++){
                out[i] = value / div & 255;
                div *= 256;
            }
            return out;
        }
        exports.writeUintLE = writeUintLE;
        function readFloat32BE(array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
            return view.getFloat32(offset2);
        }
        exports.readFloat32BE = readFloat32BE;
        function readFloat32LE(array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
            return view.getFloat32(offset2, true);
        }
        exports.readFloat32LE = readFloat32LE;
        function readFloat64BE(array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
            return view.getFloat64(offset2);
        }
        exports.readFloat64BE = readFloat64BE;
        function readFloat64LE(array, offset2) {
            if (offset2 === void 0) {
                offset2 = 0;
            }
            var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
            return view.getFloat64(offset2, true);
        }
        exports.readFloat64LE = readFloat64LE;
        function writeFloat32BE(value, out, offset2) {
            if (out === void 0) {
                out = new Uint8Array(4);
            }
            if (offset2 === void 0) {
                offset2 = 0;
            }
            var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
            view.setFloat32(offset2, value);
            return out;
        }
        exports.writeFloat32BE = writeFloat32BE;
        function writeFloat32LE(value, out, offset2) {
            if (out === void 0) {
                out = new Uint8Array(4);
            }
            if (offset2 === void 0) {
                offset2 = 0;
            }
            var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
            view.setFloat32(offset2, value, true);
            return out;
        }
        exports.writeFloat32LE = writeFloat32LE;
        function writeFloat64BE(value, out, offset2) {
            if (out === void 0) {
                out = new Uint8Array(8);
            }
            if (offset2 === void 0) {
                offset2 = 0;
            }
            var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
            view.setFloat64(offset2, value);
            return out;
        }
        exports.writeFloat64BE = writeFloat64BE;
        function writeFloat64LE(value, out, offset2) {
            if (out === void 0) {
                out = new Uint8Array(8);
            }
            if (offset2 === void 0) {
                offset2 = 0;
            }
            var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
            view.setFloat64(offset2, value, true);
            return out;
        }
        exports.writeFloat64LE = writeFloat64LE;
    }
});
var require_wipe2 = __commonJS3({
    "node_modules/@stablelib/wipe/lib/wipe.js" (exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        function wipe(array) {
            for(var i = 0; i < array.length; i++){
                array[i] = 0;
            }
            return array;
        }
        exports.wipe = wipe;
    }
});
var require_sha2562 = __commonJS3({
    "node_modules/@stablelib/sha256/lib/sha256.js" (exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var binary_1 = require_binary2();
        var wipe_1 = require_wipe2();
        exports.DIGEST_LENGTH = 32;
        exports.BLOCK_SIZE = 64;
        var SHA256 = function() {
            function SHA2562() {
                this.digestLength = exports.DIGEST_LENGTH;
                this.blockSize = exports.BLOCK_SIZE;
                this._state = new Int32Array(8);
                this._temp = new Int32Array(64);
                this._buffer = new Uint8Array(128);
                this._bufferLength = 0;
                this._bytesHashed = 0;
                this._finished = false;
                this.reset();
            }
            SHA2562.prototype._initState = function() {
                this._state[0] = 1779033703;
                this._state[1] = 3144134277;
                this._state[2] = 1013904242;
                this._state[3] = 2773480762;
                this._state[4] = 1359893119;
                this._state[5] = 2600822924;
                this._state[6] = 528734635;
                this._state[7] = 1541459225;
            };
            SHA2562.prototype.reset = function() {
                this._initState();
                this._bufferLength = 0;
                this._bytesHashed = 0;
                this._finished = false;
                return this;
            };
            SHA2562.prototype.clean = function() {
                wipe_1.wipe(this._buffer);
                wipe_1.wipe(this._temp);
                this.reset();
            };
            SHA2562.prototype.update = function(data, dataLength) {
                if (dataLength === void 0) {
                    dataLength = data.length;
                }
                if (this._finished) {
                    throw new Error("SHA256: can't update because hash was finished.");
                }
                var dataPos = 0;
                this._bytesHashed += dataLength;
                if (this._bufferLength > 0) {
                    while(this._bufferLength < this.blockSize && dataLength > 0){
                        this._buffer[this._bufferLength++] = data[dataPos++];
                        dataLength--;
                    }
                    if (this._bufferLength === this.blockSize) {
                        hashBlocks(this._temp, this._state, this._buffer, 0, this.blockSize);
                        this._bufferLength = 0;
                    }
                }
                if (dataLength >= this.blockSize) {
                    dataPos = hashBlocks(this._temp, this._state, data, dataPos, dataLength);
                    dataLength %= this.blockSize;
                }
                while(dataLength > 0){
                    this._buffer[this._bufferLength++] = data[dataPos++];
                    dataLength--;
                }
                return this;
            };
            SHA2562.prototype.finish = function(out) {
                if (!this._finished) {
                    var bytesHashed = this._bytesHashed;
                    var left = this._bufferLength;
                    var bitLenHi = bytesHashed / 536870912 | 0;
                    var bitLenLo = bytesHashed << 3;
                    var padLength = bytesHashed % 64 < 56 ? 64 : 128;
                    this._buffer[left] = 128;
                    for(var i = left + 1; i < padLength - 8; i++){
                        this._buffer[i] = 0;
                    }
                    binary_1.writeUint32BE(bitLenHi, this._buffer, padLength - 8);
                    binary_1.writeUint32BE(bitLenLo, this._buffer, padLength - 4);
                    hashBlocks(this._temp, this._state, this._buffer, 0, padLength);
                    this._finished = true;
                }
                for(var i = 0; i < this.digestLength / 4; i++){
                    binary_1.writeUint32BE(this._state[i], out, i * 4);
                }
                return this;
            };
            SHA2562.prototype.digest = function() {
                var out = new Uint8Array(this.digestLength);
                this.finish(out);
                return out;
            };
            SHA2562.prototype.saveState = function() {
                if (this._finished) {
                    throw new Error("SHA256: cannot save finished state");
                }
                return {
                    state: new Int32Array(this._state),
                    buffer: this._bufferLength > 0 ? new Uint8Array(this._buffer) : void 0,
                    bufferLength: this._bufferLength,
                    bytesHashed: this._bytesHashed
                };
            };
            SHA2562.prototype.restoreState = function(savedState) {
                this._state.set(savedState.state);
                this._bufferLength = savedState.bufferLength;
                if (savedState.buffer) {
                    this._buffer.set(savedState.buffer);
                }
                this._bytesHashed = savedState.bytesHashed;
                this._finished = false;
                return this;
            };
            SHA2562.prototype.cleanSavedState = function(savedState) {
                wipe_1.wipe(savedState.state);
                if (savedState.buffer) {
                    wipe_1.wipe(savedState.buffer);
                }
                savedState.bufferLength = 0;
                savedState.bytesHashed = 0;
            };
            return SHA2562;
        }();
        exports.SHA256 = SHA256;
        var K = new Int32Array([
            1116352408,
            1899447441,
            3049323471,
            3921009573,
            961987163,
            1508970993,
            2453635748,
            2870763221,
            3624381080,
            310598401,
            607225278,
            1426881987,
            1925078388,
            2162078206,
            2614888103,
            3248222580,
            3835390401,
            4022224774,
            264347078,
            604807628,
            770255983,
            1249150122,
            1555081692,
            1996064986,
            2554220882,
            2821834349,
            2952996808,
            3210313671,
            3336571891,
            3584528711,
            113926993,
            338241895,
            666307205,
            773529912,
            1294757372,
            1396182291,
            1695183700,
            1986661051,
            2177026350,
            2456956037,
            2730485921,
            2820302411,
            3259730800,
            3345764771,
            3516065817,
            3600352804,
            4094571909,
            275423344,
            430227734,
            506948616,
            659060556,
            883997877,
            958139571,
            1322822218,
            1537002063,
            1747873779,
            1955562222,
            2024104815,
            2227730452,
            2361852424,
            2428436474,
            2756734187,
            3204031479,
            3329325298
        ]);
        function hashBlocks(w, v, p, pos, len) {
            while(len >= 64){
                var a = v[0];
                var b = v[1];
                var c = v[2];
                var d = v[3];
                var e = v[4];
                var f = v[5];
                var g = v[6];
                var h = v[7];
                for(var i = 0; i < 16; i++){
                    var j = pos + i * 4;
                    w[i] = binary_1.readUint32BE(p, j);
                }
                for(var i = 16; i < 64; i++){
                    var u = w[i - 2];
                    var t1 = (u >>> 17 | u << 32 - 17) ^ (u >>> 19 | u << 32 - 19) ^ u >>> 10;
                    u = w[i - 15];
                    var t2 = (u >>> 7 | u << 32 - 7) ^ (u >>> 18 | u << 32 - 18) ^ u >>> 3;
                    w[i] = (t1 + w[i - 7] | 0) + (t2 + w[i - 16] | 0);
                }
                for(var i = 0; i < 64; i++){
                    var t1 = (((e >>> 6 | e << 32 - 6) ^ (e >>> 11 | e << 32 - 11) ^ (e >>> 25 | e << 32 - 25)) + (e & f ^ ~e & g) | 0) + (h + (K[i] + w[i] | 0) | 0) | 0;
                    var t2 = ((a >>> 2 | a << 32 - 2) ^ (a >>> 13 | a << 32 - 13) ^ (a >>> 22 | a << 32 - 22)) + (a & b ^ a & c ^ b & c) | 0;
                    h = g;
                    g = f;
                    f = e;
                    e = d + t1 | 0;
                    d = c;
                    c = b;
                    b = a;
                    a = t1 + t2 | 0;
                }
                v[0] += a;
                v[1] += b;
                v[2] += c;
                v[3] += d;
                v[4] += e;
                v[5] += f;
                v[6] += g;
                v[7] += h;
                pos += 64;
                len -= 64;
            }
            return pos;
        }
        function hash(data) {
            var h = new SHA256();
            h.update(data);
            var digest = h.digest();
            h.clean();
            return digest;
        }
        exports.hash = hash;
    }
});
var require_sha224 = __commonJS3({
    "node_modules/@stablelib/sha224/lib/sha224.js" (exports) {
        var __extends = exports && exports.__extends || function() {
            var extendStatics = function(d, b) {
                extendStatics = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d2, b2) {
                    d2.__proto__ = b2;
                } || function(d2, b2) {
                    for(var p in b2)if (b2.hasOwnProperty(p)) d2[p] = b2[p];
                };
                return extendStatics(d, b);
            };
            return function(d, b) {
                extendStatics(d, b);
                function __() {
                    this.constructor = d;
                }
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
        }();
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var sha256_1 = require_sha2562();
        exports.DIGEST_LENGTH = 28;
        exports.BLOCK_SIZE = 64;
        var SHA224 = function(_super) {
            __extends(SHA2242, _super);
            function SHA2242() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.digestLength = exports.DIGEST_LENGTH;
                return _this;
            }
            SHA2242.prototype._initState = function() {
                this._state[0] = 3238371032;
                this._state[1] = 914150663;
                this._state[2] = 812702999;
                this._state[3] = 4144912697;
                this._state[4] = 4290775857;
                this._state[5] = 1750603025;
                this._state[6] = 1694076839;
                this._state[7] = 3204075428;
            };
            return SHA2242;
        }(sha256_1.SHA256);
        exports.SHA224 = SHA224;
        function hash(data) {
            var h = new SHA224();
            h.update(data);
            var digest = h.digest();
            h.clean();
            return digest;
        }
        exports.hash = hash;
    }
});
var require_sha512 = __commonJS3({
    "node_modules/@stablelib/sha512/lib/sha512.js" (exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var binary_1 = require_binary2();
        var wipe_1 = require_wipe2();
        exports.DIGEST_LENGTH = 64;
        exports.BLOCK_SIZE = 128;
        var SHA512 = function() {
            function SHA5122() {
                this.digestLength = exports.DIGEST_LENGTH;
                this.blockSize = exports.BLOCK_SIZE;
                this._stateHi = new Int32Array(8);
                this._stateLo = new Int32Array(8);
                this._tempHi = new Int32Array(16);
                this._tempLo = new Int32Array(16);
                this._buffer = new Uint8Array(256);
                this._bufferLength = 0;
                this._bytesHashed = 0;
                this._finished = false;
                this.reset();
            }
            SHA5122.prototype._initState = function() {
                this._stateHi[0] = 1779033703;
                this._stateHi[1] = 3144134277;
                this._stateHi[2] = 1013904242;
                this._stateHi[3] = 2773480762;
                this._stateHi[4] = 1359893119;
                this._stateHi[5] = 2600822924;
                this._stateHi[6] = 528734635;
                this._stateHi[7] = 1541459225;
                this._stateLo[0] = 4089235720;
                this._stateLo[1] = 2227873595;
                this._stateLo[2] = 4271175723;
                this._stateLo[3] = 1595750129;
                this._stateLo[4] = 2917565137;
                this._stateLo[5] = 725511199;
                this._stateLo[6] = 4215389547;
                this._stateLo[7] = 327033209;
            };
            SHA5122.prototype.reset = function() {
                this._initState();
                this._bufferLength = 0;
                this._bytesHashed = 0;
                this._finished = false;
                return this;
            };
            SHA5122.prototype.clean = function() {
                wipe_1.wipe(this._buffer);
                wipe_1.wipe(this._tempHi);
                wipe_1.wipe(this._tempLo);
                this.reset();
            };
            SHA5122.prototype.update = function(data, dataLength) {
                if (dataLength === void 0) {
                    dataLength = data.length;
                }
                if (this._finished) {
                    throw new Error("SHA512: can't update because hash was finished.");
                }
                var dataPos = 0;
                this._bytesHashed += dataLength;
                if (this._bufferLength > 0) {
                    while(this._bufferLength < exports.BLOCK_SIZE && dataLength > 0){
                        this._buffer[this._bufferLength++] = data[dataPos++];
                        dataLength--;
                    }
                    if (this._bufferLength === this.blockSize) {
                        hashBlocks(this._tempHi, this._tempLo, this._stateHi, this._stateLo, this._buffer, 0, this.blockSize);
                        this._bufferLength = 0;
                    }
                }
                if (dataLength >= this.blockSize) {
                    dataPos = hashBlocks(this._tempHi, this._tempLo, this._stateHi, this._stateLo, data, dataPos, dataLength);
                    dataLength %= this.blockSize;
                }
                while(dataLength > 0){
                    this._buffer[this._bufferLength++] = data[dataPos++];
                    dataLength--;
                }
                return this;
            };
            SHA5122.prototype.finish = function(out) {
                if (!this._finished) {
                    var bytesHashed = this._bytesHashed;
                    var left = this._bufferLength;
                    var bitLenHi = bytesHashed / 536870912 | 0;
                    var bitLenLo = bytesHashed << 3;
                    var padLength = bytesHashed % 128 < 112 ? 128 : 256;
                    this._buffer[left] = 128;
                    for(var i = left + 1; i < padLength - 8; i++){
                        this._buffer[i] = 0;
                    }
                    binary_1.writeUint32BE(bitLenHi, this._buffer, padLength - 8);
                    binary_1.writeUint32BE(bitLenLo, this._buffer, padLength - 4);
                    hashBlocks(this._tempHi, this._tempLo, this._stateHi, this._stateLo, this._buffer, 0, padLength);
                    this._finished = true;
                }
                for(var i = 0; i < this.digestLength / 8; i++){
                    binary_1.writeUint32BE(this._stateHi[i], out, i * 8);
                    binary_1.writeUint32BE(this._stateLo[i], out, i * 8 + 4);
                }
                return this;
            };
            SHA5122.prototype.digest = function() {
                var out = new Uint8Array(this.digestLength);
                this.finish(out);
                return out;
            };
            SHA5122.prototype.saveState = function() {
                if (this._finished) {
                    throw new Error("SHA256: cannot save finished state");
                }
                return {
                    stateHi: new Int32Array(this._stateHi),
                    stateLo: new Int32Array(this._stateLo),
                    buffer: this._bufferLength > 0 ? new Uint8Array(this._buffer) : void 0,
                    bufferLength: this._bufferLength,
                    bytesHashed: this._bytesHashed
                };
            };
            SHA5122.prototype.restoreState = function(savedState) {
                this._stateHi.set(savedState.stateHi);
                this._stateLo.set(savedState.stateLo);
                this._bufferLength = savedState.bufferLength;
                if (savedState.buffer) {
                    this._buffer.set(savedState.buffer);
                }
                this._bytesHashed = savedState.bytesHashed;
                this._finished = false;
                return this;
            };
            SHA5122.prototype.cleanSavedState = function(savedState) {
                wipe_1.wipe(savedState.stateHi);
                wipe_1.wipe(savedState.stateLo);
                if (savedState.buffer) {
                    wipe_1.wipe(savedState.buffer);
                }
                savedState.bufferLength = 0;
                savedState.bytesHashed = 0;
            };
            return SHA5122;
        }();
        exports.SHA512 = SHA512;
        var K = new Int32Array([
            1116352408,
            3609767458,
            1899447441,
            602891725,
            3049323471,
            3964484399,
            3921009573,
            2173295548,
            961987163,
            4081628472,
            1508970993,
            3053834265,
            2453635748,
            2937671579,
            2870763221,
            3664609560,
            3624381080,
            2734883394,
            310598401,
            1164996542,
            607225278,
            1323610764,
            1426881987,
            3590304994,
            1925078388,
            4068182383,
            2162078206,
            991336113,
            2614888103,
            633803317,
            3248222580,
            3479774868,
            3835390401,
            2666613458,
            4022224774,
            944711139,
            264347078,
            2341262773,
            604807628,
            2007800933,
            770255983,
            1495990901,
            1249150122,
            1856431235,
            1555081692,
            3175218132,
            1996064986,
            2198950837,
            2554220882,
            3999719339,
            2821834349,
            766784016,
            2952996808,
            2566594879,
            3210313671,
            3203337956,
            3336571891,
            1034457026,
            3584528711,
            2466948901,
            113926993,
            3758326383,
            338241895,
            168717936,
            666307205,
            1188179964,
            773529912,
            1546045734,
            1294757372,
            1522805485,
            1396182291,
            2643833823,
            1695183700,
            2343527390,
            1986661051,
            1014477480,
            2177026350,
            1206759142,
            2456956037,
            344077627,
            2730485921,
            1290863460,
            2820302411,
            3158454273,
            3259730800,
            3505952657,
            3345764771,
            106217008,
            3516065817,
            3606008344,
            3600352804,
            1432725776,
            4094571909,
            1467031594,
            275423344,
            851169720,
            430227734,
            3100823752,
            506948616,
            1363258195,
            659060556,
            3750685593,
            883997877,
            3785050280,
            958139571,
            3318307427,
            1322822218,
            3812723403,
            1537002063,
            2003034995,
            1747873779,
            3602036899,
            1955562222,
            1575990012,
            2024104815,
            1125592928,
            2227730452,
            2716904306,
            2361852424,
            442776044,
            2428436474,
            593698344,
            2756734187,
            3733110249,
            3204031479,
            2999351573,
            3329325298,
            3815920427,
            3391569614,
            3928383900,
            3515267271,
            566280711,
            3940187606,
            3454069534,
            4118630271,
            4000239992,
            116418474,
            1914138554,
            174292421,
            2731055270,
            289380356,
            3203993006,
            460393269,
            320620315,
            685471733,
            587496836,
            852142971,
            1086792851,
            1017036298,
            365543100,
            1126000580,
            2618297676,
            1288033470,
            3409855158,
            1501505948,
            4234509866,
            1607167915,
            987167468,
            1816402316,
            1246189591
        ]);
        function hashBlocks(wh, wl, hh, hl, m, pos, len) {
            var ah0 = hh[0], ah1 = hh[1], ah2 = hh[2], ah3 = hh[3], ah4 = hh[4], ah5 = hh[5], ah6 = hh[6], ah7 = hh[7], al0 = hl[0], al1 = hl[1], al2 = hl[2], al3 = hl[3], al4 = hl[4], al5 = hl[5], al6 = hl[6], al7 = hl[7];
            var h, l2;
            var th, tl;
            var a, b, c, d;
            while(len >= 128){
                for(var i = 0; i < 16; i++){
                    var j = 8 * i + pos;
                    wh[i] = binary_1.readUint32BE(m, j);
                    wl[i] = binary_1.readUint32BE(m, j + 4);
                }
                for(var i = 0; i < 80; i++){
                    var bh0 = ah0;
                    var bh1 = ah1;
                    var bh2 = ah2;
                    var bh3 = ah3;
                    var bh4 = ah4;
                    var bh5 = ah5;
                    var bh6 = ah6;
                    var bh7 = ah7;
                    var bl0 = al0;
                    var bl1 = al1;
                    var bl2 = al2;
                    var bl3 = al3;
                    var bl4 = al4;
                    var bl5 = al5;
                    var bl6 = al6;
                    var bl7 = al7;
                    h = ah7;
                    l2 = al7;
                    a = l2 & 65535;
                    b = l2 >>> 16;
                    c = h & 65535;
                    d = h >>> 16;
                    h = (ah4 >>> 14 | al4 << 32 - 14) ^ (ah4 >>> 18 | al4 << 32 - 18) ^ (al4 >>> 41 - 32 | ah4 << 32 - (41 - 32));
                    l2 = (al4 >>> 14 | ah4 << 32 - 14) ^ (al4 >>> 18 | ah4 << 32 - 18) ^ (ah4 >>> 41 - 32 | al4 << 32 - (41 - 32));
                    a += l2 & 65535;
                    b += l2 >>> 16;
                    c += h & 65535;
                    d += h >>> 16;
                    h = ah4 & ah5 ^ ~ah4 & ah6;
                    l2 = al4 & al5 ^ ~al4 & al6;
                    a += l2 & 65535;
                    b += l2 >>> 16;
                    c += h & 65535;
                    d += h >>> 16;
                    h = K[i * 2];
                    l2 = K[i * 2 + 1];
                    a += l2 & 65535;
                    b += l2 >>> 16;
                    c += h & 65535;
                    d += h >>> 16;
                    h = wh[i % 16];
                    l2 = wl[i % 16];
                    a += l2 & 65535;
                    b += l2 >>> 16;
                    c += h & 65535;
                    d += h >>> 16;
                    b += a >>> 16;
                    c += b >>> 16;
                    d += c >>> 16;
                    th = c & 65535 | d << 16;
                    tl = a & 65535 | b << 16;
                    h = th;
                    l2 = tl;
                    a = l2 & 65535;
                    b = l2 >>> 16;
                    c = h & 65535;
                    d = h >>> 16;
                    h = (ah0 >>> 28 | al0 << 32 - 28) ^ (al0 >>> 34 - 32 | ah0 << 32 - (34 - 32)) ^ (al0 >>> 39 - 32 | ah0 << 32 - (39 - 32));
                    l2 = (al0 >>> 28 | ah0 << 32 - 28) ^ (ah0 >>> 34 - 32 | al0 << 32 - (34 - 32)) ^ (ah0 >>> 39 - 32 | al0 << 32 - (39 - 32));
                    a += l2 & 65535;
                    b += l2 >>> 16;
                    c += h & 65535;
                    d += h >>> 16;
                    h = ah0 & ah1 ^ ah0 & ah2 ^ ah1 & ah2;
                    l2 = al0 & al1 ^ al0 & al2 ^ al1 & al2;
                    a += l2 & 65535;
                    b += l2 >>> 16;
                    c += h & 65535;
                    d += h >>> 16;
                    b += a >>> 16;
                    c += b >>> 16;
                    d += c >>> 16;
                    bh7 = c & 65535 | d << 16;
                    bl7 = a & 65535 | b << 16;
                    h = bh3;
                    l2 = bl3;
                    a = l2 & 65535;
                    b = l2 >>> 16;
                    c = h & 65535;
                    d = h >>> 16;
                    h = th;
                    l2 = tl;
                    a += l2 & 65535;
                    b += l2 >>> 16;
                    c += h & 65535;
                    d += h >>> 16;
                    b += a >>> 16;
                    c += b >>> 16;
                    d += c >>> 16;
                    bh3 = c & 65535 | d << 16;
                    bl3 = a & 65535 | b << 16;
                    ah1 = bh0;
                    ah2 = bh1;
                    ah3 = bh2;
                    ah4 = bh3;
                    ah5 = bh4;
                    ah6 = bh5;
                    ah7 = bh6;
                    ah0 = bh7;
                    al1 = bl0;
                    al2 = bl1;
                    al3 = bl2;
                    al4 = bl3;
                    al5 = bl4;
                    al6 = bl5;
                    al7 = bl6;
                    al0 = bl7;
                    if (i % 16 === 15) {
                        for(var j = 0; j < 16; j++){
                            h = wh[j];
                            l2 = wl[j];
                            a = l2 & 65535;
                            b = l2 >>> 16;
                            c = h & 65535;
                            d = h >>> 16;
                            h = wh[(j + 9) % 16];
                            l2 = wl[(j + 9) % 16];
                            a += l2 & 65535;
                            b += l2 >>> 16;
                            c += h & 65535;
                            d += h >>> 16;
                            th = wh[(j + 1) % 16];
                            tl = wl[(j + 1) % 16];
                            h = (th >>> 1 | tl << 32 - 1) ^ (th >>> 8 | tl << 32 - 8) ^ th >>> 7;
                            l2 = (tl >>> 1 | th << 32 - 1) ^ (tl >>> 8 | th << 32 - 8) ^ (tl >>> 7 | th << 32 - 7);
                            a += l2 & 65535;
                            b += l2 >>> 16;
                            c += h & 65535;
                            d += h >>> 16;
                            th = wh[(j + 14) % 16];
                            tl = wl[(j + 14) % 16];
                            h = (th >>> 19 | tl << 32 - 19) ^ (tl >>> 61 - 32 | th << 32 - (61 - 32)) ^ th >>> 6;
                            l2 = (tl >>> 19 | th << 32 - 19) ^ (th >>> 61 - 32 | tl << 32 - (61 - 32)) ^ (tl >>> 6 | th << 32 - 6);
                            a += l2 & 65535;
                            b += l2 >>> 16;
                            c += h & 65535;
                            d += h >>> 16;
                            b += a >>> 16;
                            c += b >>> 16;
                            d += c >>> 16;
                            wh[j] = c & 65535 | d << 16;
                            wl[j] = a & 65535 | b << 16;
                        }
                    }
                }
                h = ah0;
                l2 = al0;
                a = l2 & 65535;
                b = l2 >>> 16;
                c = h & 65535;
                d = h >>> 16;
                h = hh[0];
                l2 = hl[0];
                a += l2 & 65535;
                b += l2 >>> 16;
                c += h & 65535;
                d += h >>> 16;
                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;
                hh[0] = ah0 = c & 65535 | d << 16;
                hl[0] = al0 = a & 65535 | b << 16;
                h = ah1;
                l2 = al1;
                a = l2 & 65535;
                b = l2 >>> 16;
                c = h & 65535;
                d = h >>> 16;
                h = hh[1];
                l2 = hl[1];
                a += l2 & 65535;
                b += l2 >>> 16;
                c += h & 65535;
                d += h >>> 16;
                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;
                hh[1] = ah1 = c & 65535 | d << 16;
                hl[1] = al1 = a & 65535 | b << 16;
                h = ah2;
                l2 = al2;
                a = l2 & 65535;
                b = l2 >>> 16;
                c = h & 65535;
                d = h >>> 16;
                h = hh[2];
                l2 = hl[2];
                a += l2 & 65535;
                b += l2 >>> 16;
                c += h & 65535;
                d += h >>> 16;
                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;
                hh[2] = ah2 = c & 65535 | d << 16;
                hl[2] = al2 = a & 65535 | b << 16;
                h = ah3;
                l2 = al3;
                a = l2 & 65535;
                b = l2 >>> 16;
                c = h & 65535;
                d = h >>> 16;
                h = hh[3];
                l2 = hl[3];
                a += l2 & 65535;
                b += l2 >>> 16;
                c += h & 65535;
                d += h >>> 16;
                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;
                hh[3] = ah3 = c & 65535 | d << 16;
                hl[3] = al3 = a & 65535 | b << 16;
                h = ah4;
                l2 = al4;
                a = l2 & 65535;
                b = l2 >>> 16;
                c = h & 65535;
                d = h >>> 16;
                h = hh[4];
                l2 = hl[4];
                a += l2 & 65535;
                b += l2 >>> 16;
                c += h & 65535;
                d += h >>> 16;
                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;
                hh[4] = ah4 = c & 65535 | d << 16;
                hl[4] = al4 = a & 65535 | b << 16;
                h = ah5;
                l2 = al5;
                a = l2 & 65535;
                b = l2 >>> 16;
                c = h & 65535;
                d = h >>> 16;
                h = hh[5];
                l2 = hl[5];
                a += l2 & 65535;
                b += l2 >>> 16;
                c += h & 65535;
                d += h >>> 16;
                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;
                hh[5] = ah5 = c & 65535 | d << 16;
                hl[5] = al5 = a & 65535 | b << 16;
                h = ah6;
                l2 = al6;
                a = l2 & 65535;
                b = l2 >>> 16;
                c = h & 65535;
                d = h >>> 16;
                h = hh[6];
                l2 = hl[6];
                a += l2 & 65535;
                b += l2 >>> 16;
                c += h & 65535;
                d += h >>> 16;
                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;
                hh[6] = ah6 = c & 65535 | d << 16;
                hl[6] = al6 = a & 65535 | b << 16;
                h = ah7;
                l2 = al7;
                a = l2 & 65535;
                b = l2 >>> 16;
                c = h & 65535;
                d = h >>> 16;
                h = hh[7];
                l2 = hl[7];
                a += l2 & 65535;
                b += l2 >>> 16;
                c += h & 65535;
                d += h >>> 16;
                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;
                hh[7] = ah7 = c & 65535 | d << 16;
                hl[7] = al7 = a & 65535 | b << 16;
                pos += 128;
                len -= 128;
            }
            return pos;
        }
        function hash(data) {
            var h = new SHA512();
            h.update(data);
            var digest = h.digest();
            h.clean();
            return digest;
        }
        exports.hash = hash;
    }
});
var require_sha384 = __commonJS3({
    "node_modules/@stablelib/sha384/lib/sha384.js" (exports) {
        var __extends = exports && exports.__extends || function() {
            var extendStatics = function(d, b) {
                extendStatics = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d2, b2) {
                    d2.__proto__ = b2;
                } || function(d2, b2) {
                    for(var p in b2)if (b2.hasOwnProperty(p)) d2[p] = b2[p];
                };
                return extendStatics(d, b);
            };
            return function(d, b) {
                extendStatics(d, b);
                function __() {
                    this.constructor = d;
                }
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
        }();
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var sha512_1 = require_sha512();
        exports.DIGEST_LENGTH = 48;
        exports.BLOCK_SIZE = 128;
        var SHA384 = function(_super) {
            __extends(SHA3842, _super);
            function SHA3842() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.digestLength = exports.DIGEST_LENGTH;
                return _this;
            }
            SHA3842.prototype._initState = function() {
                this._stateHi[0] = 3418070365;
                this._stateHi[1] = 1654270250;
                this._stateHi[2] = 2438529370;
                this._stateHi[3] = 355462360;
                this._stateHi[4] = 1731405415;
                this._stateHi[5] = 2394180231;
                this._stateHi[6] = 3675008525;
                this._stateHi[7] = 1203062813;
                this._stateLo[0] = 3238371032;
                this._stateLo[1] = 914150663;
                this._stateLo[2] = 812702999;
                this._stateLo[3] = 4144912697;
                this._stateLo[4] = 4290775857;
                this._stateLo[5] = 1750603025;
                this._stateLo[6] = 1694076839;
                this._stateLo[7] = 3204075428;
            };
            return SHA3842;
        }(sha512_1.SHA512);
        exports.SHA384 = SHA384;
        function hash(data) {
            var h = new SHA384();
            h.update(data);
            var digest = h.digest();
            h.clean();
            return digest;
        }
        exports.hash = hash;
    }
});
var require_sha512_256 = __commonJS3({
    "node_modules/@stablelib/sha512_256/lib/sha512_256.js" (exports) {
        var __extends = exports && exports.__extends || function() {
            var extendStatics = function(d, b) {
                extendStatics = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d2, b2) {
                    d2.__proto__ = b2;
                } || function(d2, b2) {
                    for(var p in b2)if (b2.hasOwnProperty(p)) d2[p] = b2[p];
                };
                return extendStatics(d, b);
            };
            return function(d, b) {
                extendStatics(d, b);
                function __() {
                    this.constructor = d;
                }
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
        }();
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var sha512_1 = require_sha512();
        exports.DIGEST_LENGTH = 32;
        exports.BLOCK_SIZE = 128;
        var SHA512_256 = function(_super) {
            __extends(SHA512_2562, _super);
            function SHA512_2562() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.digestLength = exports.DIGEST_LENGTH;
                return _this;
            }
            SHA512_2562.prototype._initState = function() {
                this._stateHi[0] = 573645204;
                this._stateHi[1] = 2673172387;
                this._stateHi[2] = 596883563;
                this._stateHi[3] = 2520282905;
                this._stateHi[4] = 2519219938;
                this._stateHi[5] = 3193839141;
                this._stateHi[6] = 721525244;
                this._stateHi[7] = 246885852;
                this._stateLo[0] = 4230739756;
                this._stateLo[1] = 3360449730;
                this._stateLo[2] = 1867755857;
                this._stateLo[3] = 1497426621;
                this._stateLo[4] = 2827943907;
                this._stateLo[5] = 1401305490;
                this._stateLo[6] = 746961066;
                this._stateLo[7] = 2177182882;
            };
            return SHA512_2562;
        }(sha512_1.SHA512);
        exports.SHA512_256 = SHA512_256;
        function hash(data) {
            var h = new SHA512_256();
            h.update(data);
            var digest = h.digest();
            h.clean();
            return digest;
        }
        exports.hash = hash;
    }
});
var require_sha3 = __commonJS3({
    "node_modules/@stablelib/sha3/lib/sha3.js" (exports) {
        var __extends = exports && exports.__extends || function() {
            var extendStatics = function(d, b) {
                extendStatics = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(d2, b2) {
                    d2.__proto__ = b2;
                } || function(d2, b2) {
                    for(var p in b2)if (b2.hasOwnProperty(p)) d2[p] = b2[p];
                };
                return extendStatics(d, b);
            };
            return function(d, b) {
                extendStatics(d, b);
                function __() {
                    this.constructor = d;
                }
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            };
        }();
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var binary_1 = require_binary2();
        var wipe_1 = require_wipe2();
        var Keccak = function() {
            function Keccak2(capacity) {
                if (capacity === void 0) {
                    capacity = 32;
                }
                this.capacity = capacity;
                this._sh = new Int32Array(25);
                this._sl = new Int32Array(25);
                this._state = new Uint8Array(200);
                this._pos = 0;
                this._finished = false;
                this.clean = this.reset;
                if (capacity <= 0 || capacity > 128) {
                    throw new Error("SHA3: incorrect capacity");
                }
                this.blockSize = 200 - capacity;
            }
            Keccak2.prototype.reset = function() {
                wipe_1.wipe(this._sh);
                wipe_1.wipe(this._sl);
                wipe_1.wipe(this._state);
                this._pos = 0;
                this._finished = false;
                return this;
            };
            Keccak2.prototype.update = function(data) {
                if (this._finished) {
                    throw new Error("SHA3: can't update because hash was finished");
                }
                for(var i = 0; i < data.length; i++){
                    this._state[this._pos++] ^= data[i];
                    if (this._pos >= this.blockSize) {
                        keccakf(this._sh, this._sl, this._state);
                        this._pos = 0;
                    }
                }
                return this;
            };
            Keccak2.prototype._padAndPermute = function(paddingByte) {
                this._state[this._pos] ^= paddingByte;
                this._state[this.blockSize - 1] ^= 128;
                keccakf(this._sh, this._sl, this._state);
                this._finished = true;
                this._pos = 0;
            };
            Keccak2.prototype._squeeze = function(dst) {
                if (!this._finished) {
                    throw new Error("SHA3: squeezing before padAndPermute");
                }
                for(var i = 0; i < dst.length; i++){
                    if (this._pos === this.blockSize) {
                        keccakf(this._sh, this._sl, this._state);
                        this._pos = 0;
                    }
                    dst[i] = this._state[this._pos++];
                }
            };
            return Keccak2;
        }();
        exports.Keccak = Keccak;
        var SHA3 = function(_super) {
            __extends(SHA32, _super);
            function SHA32(digestLength) {
                if (digestLength === void 0) {
                    digestLength = 32;
                }
                var _this = _super.call(this, digestLength * 2) || this;
                _this.digestLength = digestLength;
                return _this;
            }
            SHA32.prototype.finish = function(dst) {
                if (!this._finished) {
                    this._padAndPermute(6);
                } else {
                    this._pos = 0;
                }
                this._squeeze(dst);
                return this;
            };
            SHA32.prototype.digest = function() {
                var out = new Uint8Array(this.digestLength);
                this.finish(out);
                return out;
            };
            SHA32.prototype.saveState = function() {
                if (this._finished) {
                    throw new Error("SHA3: cannot save finished state");
                }
                return new Uint8Array(this._state.subarray(0, this._pos));
            };
            SHA32.prototype.restoreState = function(savedState) {
                this._state.set(savedState);
                this._pos = savedState.length;
                this._finished = false;
                return this;
            };
            SHA32.prototype.cleanSavedState = function(savedState) {
                wipe_1.wipe(savedState);
            };
            return SHA32;
        }(Keccak);
        exports.SHA3 = SHA3;
        var SHA3224 = function(_super) {
            __extends(SHA32242, _super);
            function SHA32242() {
                return _super.call(this, 224 / 8) || this;
            }
            return SHA32242;
        }(SHA3);
        exports.SHA3224 = SHA3224;
        var SHA3256 = function(_super) {
            __extends(SHA32562, _super);
            function SHA32562() {
                return _super.call(this, 256 / 8) || this;
            }
            return SHA32562;
        }(SHA3);
        exports.SHA3256 = SHA3256;
        var SHA3384 = function(_super) {
            __extends(SHA33842, _super);
            function SHA33842() {
                return _super.call(this, 384 / 8) || this;
            }
            return SHA33842;
        }(SHA3);
        exports.SHA3384 = SHA3384;
        var SHA3512 = function(_super) {
            __extends(SHA35122, _super);
            function SHA35122() {
                return _super.call(this, 512 / 8) || this;
            }
            return SHA35122;
        }(SHA3);
        exports.SHA3512 = SHA3512;
        function hash(digestLength, data) {
            var h = new SHA3(digestLength);
            h.update(data);
            var digest = h.digest();
            h.clean();
            return digest;
        }
        exports.hash = hash;
        exports.hash224 = function(data) {
            return hash(224 / 8, data);
        };
        exports.hash256 = function(data) {
            return hash(256 / 8, data);
        };
        exports.hash384 = function(data) {
            return hash(384 / 8, data);
        };
        exports.hash512 = function(data) {
            return hash(512 / 8, data);
        };
        var SHAKE = function(_super) {
            __extends(SHAKE2, _super);
            function SHAKE2(bitSize) {
                var _this = _super.call(this, bitSize / 8 * 2) || this;
                _this.bitSize = bitSize;
                return _this;
            }
            SHAKE2.prototype.stream = function(dst) {
                if (!this._finished) {
                    this._padAndPermute(31);
                }
                this._squeeze(dst);
            };
            return SHAKE2;
        }(Keccak);
        exports.SHAKE = SHAKE;
        var SHAKE128 = function(_super) {
            __extends(SHAKE1282, _super);
            function SHAKE1282() {
                return _super.call(this, 128) || this;
            }
            return SHAKE1282;
        }(SHAKE);
        exports.SHAKE128 = SHAKE128;
        var SHAKE256 = function(_super) {
            __extends(SHAKE2562, _super);
            function SHAKE2562() {
                return _super.call(this, 256) || this;
            }
            return SHAKE2562;
        }(SHAKE);
        exports.SHAKE256 = SHAKE256;
        var RNDC_HI = new Int32Array([
            0,
            0,
            2147483648,
            2147483648,
            0,
            0,
            2147483648,
            2147483648,
            0,
            0,
            0,
            0,
            0,
            2147483648,
            2147483648,
            2147483648,
            2147483648,
            2147483648,
            0,
            2147483648,
            2147483648,
            2147483648,
            0,
            2147483648
        ]);
        var RNDC_LO = new Int32Array([
            1,
            32898,
            32906,
            2147516416,
            32907,
            2147483649,
            2147516545,
            32777,
            138,
            136,
            2147516425,
            2147483658,
            2147516555,
            139,
            32905,
            32771,
            32770,
            128,
            32778,
            2147483658,
            2147516545,
            32896,
            2147483649,
            2147516424
        ]);
        function keccakf(sh, sl, buf) {
            var bch0, bch1, bch2, bch3, bch4;
            var bcl0, bcl1, bcl2, bcl3, bcl4;
            var th, tl;
            for(var i = 0; i < 25; i++){
                sl[i] = binary_1.readUint32LE(buf, i * 8);
                sh[i] = binary_1.readUint32LE(buf, i * 8 + 4);
            }
            for(var r = 0; r < 24; r++){
                bch0 = sh[0] ^ sh[5] ^ sh[10] ^ sh[15] ^ sh[20];
                bch1 = sh[1] ^ sh[6] ^ sh[11] ^ sh[16] ^ sh[21];
                bch2 = sh[2] ^ sh[7] ^ sh[12] ^ sh[17] ^ sh[22];
                bch3 = sh[3] ^ sh[8] ^ sh[13] ^ sh[18] ^ sh[23];
                bch4 = sh[4] ^ sh[9] ^ sh[14] ^ sh[19] ^ sh[24];
                bcl0 = sl[0] ^ sl[5] ^ sl[10] ^ sl[15] ^ sl[20];
                bcl1 = sl[1] ^ sl[6] ^ sl[11] ^ sl[16] ^ sl[21];
                bcl2 = sl[2] ^ sl[7] ^ sl[12] ^ sl[17] ^ sl[22];
                bcl3 = sl[3] ^ sl[8] ^ sl[13] ^ sl[18] ^ sl[23];
                bcl4 = sl[4] ^ sl[9] ^ sl[14] ^ sl[19] ^ sl[24];
                th = bch4 ^ (bch1 << 1 | bcl1 >>> 32 - 1);
                tl = bcl4 ^ (bcl1 << 1 | bch1 >>> 32 - 1);
                sh[0] ^= th;
                sh[5] ^= th;
                sh[10] ^= th;
                sh[15] ^= th;
                sh[20] ^= th;
                sl[0] ^= tl;
                sl[5] ^= tl;
                sl[10] ^= tl;
                sl[15] ^= tl;
                sl[20] ^= tl;
                th = bch0 ^ (bch2 << 1 | bcl2 >>> 32 - 1);
                tl = bcl0 ^ (bcl2 << 1 | bch2 >>> 32 - 1);
                sh[1] ^= th;
                sh[6] ^= th;
                sh[11] ^= th;
                sh[16] ^= th;
                sh[21] ^= th;
                sl[1] ^= tl;
                sl[6] ^= tl;
                sl[11] ^= tl;
                sl[16] ^= tl;
                sl[21] ^= tl;
                th = bch1 ^ (bch3 << 1 | bcl3 >>> 32 - 1);
                tl = bcl1 ^ (bcl3 << 1 | bch3 >>> 32 - 1);
                sh[2] ^= th;
                sh[7] ^= th;
                sh[12] ^= th;
                sh[17] ^= th;
                sh[22] ^= th;
                sl[2] ^= tl;
                sl[7] ^= tl;
                sl[12] ^= tl;
                sl[17] ^= tl;
                sl[22] ^= tl;
                th = bch2 ^ (bch4 << 1 | bcl4 >>> 32 - 1);
                tl = bcl2 ^ (bcl4 << 1 | bch4 >>> 32 - 1);
                sh[3] ^= th;
                sl[3] ^= tl;
                sh[8] ^= th;
                sl[8] ^= tl;
                sh[13] ^= th;
                sl[13] ^= tl;
                sh[18] ^= th;
                sl[18] ^= tl;
                sh[23] ^= th;
                sl[23] ^= tl;
                th = bch3 ^ (bch0 << 1 | bcl0 >>> 32 - 1);
                tl = bcl3 ^ (bcl0 << 1 | bch0 >>> 32 - 1);
                sh[4] ^= th;
                sh[9] ^= th;
                sh[14] ^= th;
                sh[19] ^= th;
                sh[24] ^= th;
                sl[4] ^= tl;
                sl[9] ^= tl;
                sl[14] ^= tl;
                sl[19] ^= tl;
                sl[24] ^= tl;
                th = sh[1];
                tl = sl[1];
                bch0 = sh[10];
                bcl0 = sl[10];
                sh[10] = th << 1 | tl >>> 32 - 1;
                sl[10] = tl << 1 | th >>> 32 - 1;
                th = bch0;
                tl = bcl0;
                bch0 = sh[7];
                bcl0 = sl[7];
                sh[7] = th << 3 | tl >>> 32 - 3;
                sl[7] = tl << 3 | th >>> 32 - 3;
                th = bch0;
                tl = bcl0;
                bch0 = sh[11];
                bcl0 = sl[11];
                sh[11] = th << 6 | tl >>> 32 - 6;
                sl[11] = tl << 6 | th >>> 32 - 6;
                th = bch0;
                tl = bcl0;
                bch0 = sh[17];
                bcl0 = sl[17];
                sh[17] = th << 10 | tl >>> 32 - 10;
                sl[17] = tl << 10 | th >>> 32 - 10;
                th = bch0;
                tl = bcl0;
                bch0 = sh[18];
                bcl0 = sl[18];
                sh[18] = th << 15 | tl >>> 32 - 15;
                sl[18] = tl << 15 | th >>> 32 - 15;
                th = bch0;
                tl = bcl0;
                bch0 = sh[3];
                bcl0 = sl[3];
                sh[3] = th << 21 | tl >>> 32 - 21;
                sl[3] = tl << 21 | th >>> 32 - 21;
                th = bch0;
                tl = bcl0;
                bch0 = sh[5];
                bcl0 = sl[5];
                sh[5] = th << 28 | tl >>> 32 - 28;
                sl[5] = tl << 28 | th >>> 32 - 28;
                th = bch0;
                tl = bcl0;
                bch0 = sh[16];
                bcl0 = sl[16];
                sh[16] = tl << 4 | th >>> 32 - 4;
                sl[16] = th << 4 | tl >>> 32 - 4;
                th = bch0;
                tl = bcl0;
                bch0 = sh[8];
                bcl0 = sl[8];
                sh[8] = tl << 13 | th >>> 32 - 13;
                sl[8] = th << 13 | tl >>> 32 - 13;
                th = bch0;
                tl = bcl0;
                bch0 = sh[21];
                bcl0 = sl[21];
                sh[21] = tl << 23 | th >>> 32 - 23;
                sl[21] = th << 23 | tl >>> 32 - 23;
                th = bch0;
                tl = bcl0;
                bch0 = sh[24];
                bcl0 = sl[24];
                sh[24] = th << 2 | tl >>> 32 - 2;
                sl[24] = tl << 2 | th >>> 32 - 2;
                th = bch0;
                tl = bcl0;
                bch0 = sh[4];
                bcl0 = sl[4];
                sh[4] = th << 14 | tl >>> 32 - 14;
                sl[4] = tl << 14 | th >>> 32 - 14;
                th = bch0;
                tl = bcl0;
                bch0 = sh[15];
                bcl0 = sl[15];
                sh[15] = th << 27 | tl >>> 32 - 27;
                sl[15] = tl << 27 | th >>> 32 - 27;
                th = bch0;
                tl = bcl0;
                bch0 = sh[23];
                bcl0 = sl[23];
                sh[23] = tl << 9 | th >>> 32 - 9;
                sl[23] = th << 9 | tl >>> 32 - 9;
                th = bch0;
                tl = bcl0;
                bch0 = sh[19];
                bcl0 = sl[19];
                sh[19] = tl << 24 | th >>> 32 - 24;
                sl[19] = th << 24 | tl >>> 32 - 24;
                th = bch0;
                tl = bcl0;
                bch0 = sh[13];
                bcl0 = sl[13];
                sh[13] = th << 8 | tl >>> 32 - 8;
                sl[13] = tl << 8 | th >>> 32 - 8;
                th = bch0;
                tl = bcl0;
                bch0 = sh[12];
                bcl0 = sl[12];
                sh[12] = th << 25 | tl >>> 32 - 25;
                sl[12] = tl << 25 | th >>> 32 - 25;
                th = bch0;
                tl = bcl0;
                bch0 = sh[2];
                bcl0 = sl[2];
                sh[2] = tl << 11 | th >>> 32 - 11;
                sl[2] = th << 11 | tl >>> 32 - 11;
                th = bch0;
                tl = bcl0;
                bch0 = sh[20];
                bcl0 = sl[20];
                sh[20] = tl << 30 | th >>> 32 - 30;
                sl[20] = th << 30 | tl >>> 32 - 30;
                th = bch0;
                tl = bcl0;
                bch0 = sh[14];
                bcl0 = sl[14];
                sh[14] = th << 18 | tl >>> 32 - 18;
                sl[14] = tl << 18 | th >>> 32 - 18;
                th = bch0;
                tl = bcl0;
                bch0 = sh[22];
                bcl0 = sl[22];
                sh[22] = tl << 7 | th >>> 32 - 7;
                sl[22] = th << 7 | tl >>> 32 - 7;
                th = bch0;
                tl = bcl0;
                bch0 = sh[9];
                bcl0 = sl[9];
                sh[9] = tl << 29 | th >>> 32 - 29;
                sl[9] = th << 29 | tl >>> 32 - 29;
                th = bch0;
                tl = bcl0;
                bch0 = sh[6];
                bcl0 = sl[6];
                sh[6] = th << 20 | tl >>> 32 - 20;
                sl[6] = tl << 20 | th >>> 32 - 20;
                th = bch0;
                tl = bcl0;
                bch0 = sh[1];
                bcl0 = sl[1];
                sh[1] = tl << 12 | th >>> 32 - 12;
                sl[1] = th << 12 | tl >>> 32 - 12;
                th = bch0;
                tl = bcl0;
                bch0 = sh[0];
                bch1 = sh[1];
                bch2 = sh[2];
                bch3 = sh[3];
                bch4 = sh[4];
                sh[0] ^= ~bch1 & bch2;
                sh[1] ^= ~bch2 & bch3;
                sh[2] ^= ~bch3 & bch4;
                sh[3] ^= ~bch4 & bch0;
                sh[4] ^= ~bch0 & bch1;
                bcl0 = sl[0];
                bcl1 = sl[1];
                bcl2 = sl[2];
                bcl3 = sl[3];
                bcl4 = sl[4];
                sl[0] ^= ~bcl1 & bcl2;
                sl[1] ^= ~bcl2 & bcl3;
                sl[2] ^= ~bcl3 & bcl4;
                sl[3] ^= ~bcl4 & bcl0;
                sl[4] ^= ~bcl0 & bcl1;
                bch0 = sh[5];
                bch1 = sh[6];
                bch2 = sh[7];
                bch3 = sh[8];
                bch4 = sh[9];
                sh[5] ^= ~bch1 & bch2;
                sh[6] ^= ~bch2 & bch3;
                sh[7] ^= ~bch3 & bch4;
                sh[8] ^= ~bch4 & bch0;
                sh[9] ^= ~bch0 & bch1;
                bcl0 = sl[5];
                bcl1 = sl[6];
                bcl2 = sl[7];
                bcl3 = sl[8];
                bcl4 = sl[9];
                sl[5] ^= ~bcl1 & bcl2;
                sl[6] ^= ~bcl2 & bcl3;
                sl[7] ^= ~bcl3 & bcl4;
                sl[8] ^= ~bcl4 & bcl0;
                sl[9] ^= ~bcl0 & bcl1;
                bch0 = sh[10];
                bch1 = sh[11];
                bch2 = sh[12];
                bch3 = sh[13];
                bch4 = sh[14];
                sh[10] ^= ~bch1 & bch2;
                sh[11] ^= ~bch2 & bch3;
                sh[12] ^= ~bch3 & bch4;
                sh[13] ^= ~bch4 & bch0;
                sh[14] ^= ~bch0 & bch1;
                bcl0 = sl[10];
                bcl1 = sl[11];
                bcl2 = sl[12];
                bcl3 = sl[13];
                bcl4 = sl[14];
                sl[10] ^= ~bcl1 & bcl2;
                sl[11] ^= ~bcl2 & bcl3;
                sl[12] ^= ~bcl3 & bcl4;
                sl[13] ^= ~bcl4 & bcl0;
                sl[14] ^= ~bcl0 & bcl1;
                bch0 = sh[15];
                bch1 = sh[16];
                bch2 = sh[17];
                bch3 = sh[18];
                bch4 = sh[19];
                sh[15] ^= ~bch1 & bch2;
                sh[16] ^= ~bch2 & bch3;
                sh[17] ^= ~bch3 & bch4;
                sh[18] ^= ~bch4 & bch0;
                sh[19] ^= ~bch0 & bch1;
                bcl0 = sl[15];
                bcl1 = sl[16];
                bcl2 = sl[17];
                bcl3 = sl[18];
                bcl4 = sl[19];
                sl[15] ^= ~bcl1 & bcl2;
                sl[16] ^= ~bcl2 & bcl3;
                sl[17] ^= ~bcl3 & bcl4;
                sl[18] ^= ~bcl4 & bcl0;
                sl[19] ^= ~bcl0 & bcl1;
                bch0 = sh[20];
                bch1 = sh[21];
                bch2 = sh[22];
                bch3 = sh[23];
                bch4 = sh[24];
                sh[20] ^= ~bch1 & bch2;
                sh[21] ^= ~bch2 & bch3;
                sh[22] ^= ~bch3 & bch4;
                sh[23] ^= ~bch4 & bch0;
                sh[24] ^= ~bch0 & bch1;
                bcl0 = sl[20];
                bcl1 = sl[21];
                bcl2 = sl[22];
                bcl3 = sl[23];
                bcl4 = sl[24];
                sl[20] ^= ~bcl1 & bcl2;
                sl[21] ^= ~bcl2 & bcl3;
                sl[22] ^= ~bcl3 & bcl4;
                sl[23] ^= ~bcl4 & bcl0;
                sl[24] ^= ~bcl0 & bcl1;
                sh[0] ^= RNDC_HI[r];
                sl[0] ^= RNDC_LO[r];
            }
            for(var i = 0; i < 25; i++){
                binary_1.writeUint32LE(sl[i], buf, i * 8);
                binary_1.writeUint32LE(sh[i], buf, i * 8 + 4);
            }
        }
    }
});
var util3;
(function(util22) {
    function assertNever(_x) {
        throw new Error();
    }
    util22.assertNever = assertNever;
    util22.arrayToEnum = (items)=>{
        const obj = {};
        for (const item of items){
            obj[item] = item;
        }
        return obj;
    };
    util22.getValidEnumValues = (obj)=>{
        const validKeys = util22.objectKeys(obj).filter((k)=>typeof obj[obj[k]] !== "number");
        const filtered = {};
        for (const k of validKeys){
            filtered[k] = obj[k];
        }
        return util22.objectValues(filtered);
    };
    util22.objectValues = (obj)=>{
        return util22.objectKeys(obj).map(function(e) {
            return obj[e];
        });
    };
    util22.objectKeys = typeof Object.keys === "function" ? (obj)=>Object.keys(obj) : (object)=>{
        const keys = [];
        for(const key in object){
            if (Object.prototype.hasOwnProperty.call(object, key)) {
                keys.push(key);
            }
        }
        return keys;
    };
    util22.find = (arr, checker)=>{
        for (const item of arr){
            if (checker(item)) return item;
        }
        return void 0;
    };
    util22.isInteger = typeof Number.isInteger === "function" ? (val)=>Number.isInteger(val) : (val)=>typeof val === "number" && isFinite(val) && Math.floor(val) === val;
    function joinValues(array, separator = " | ") {
        return array.map((val)=>typeof val === "string" ? `'${val}'` : val).join(separator);
    }
    util22.joinValues = joinValues;
})(util3 || (util3 = {}));
var ZodParsedType3 = util3.arrayToEnum([
    "string",
    "nan",
    "number",
    "integer",
    "float",
    "boolean",
    "date",
    "bigint",
    "symbol",
    "function",
    "undefined",
    "null",
    "array",
    "object",
    "unknown",
    "promise",
    "void",
    "never",
    "map",
    "set"
]);
var getParsedType3 = (data)=>{
    const t = typeof data;
    switch(t){
        case "undefined":
            return ZodParsedType3.undefined;
        case "string":
            return ZodParsedType3.string;
        case "number":
            return isNaN(data) ? ZodParsedType3.nan : ZodParsedType3.number;
        case "boolean":
            return ZodParsedType3.boolean;
        case "function":
            return ZodParsedType3.function;
        case "bigint":
            return ZodParsedType3.bigint;
        case "object":
            if (Array.isArray(data)) {
                return ZodParsedType3.array;
            }
            if (data === null) {
                return ZodParsedType3.null;
            }
            if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
                return ZodParsedType3.promise;
            }
            if (typeof Map !== "undefined" && data instanceof Map) {
                return ZodParsedType3.map;
            }
            if (typeof Set !== "undefined" && data instanceof Set) {
                return ZodParsedType3.set;
            }
            if (typeof Date !== "undefined" && data instanceof Date) {
                return ZodParsedType3.date;
            }
            return ZodParsedType3.object;
        default:
            return ZodParsedType3.unknown;
    }
};
var ZodIssueCode3 = util3.arrayToEnum([
    "invalid_type",
    "invalid_literal",
    "custom",
    "invalid_union",
    "invalid_union_discriminator",
    "invalid_enum_value",
    "unrecognized_keys",
    "invalid_arguments",
    "invalid_return_type",
    "invalid_date",
    "invalid_string",
    "too_small",
    "too_big",
    "invalid_intersection_types",
    "not_multiple_of"
]);
var quotelessJson3 = (obj)=>{
    const json = JSON.stringify(obj, null, 2);
    return json.replace(/"([^"]+)":/g, "$1:");
};
var ZodError3 = class extends Error {
    constructor(issues){
        super();
        this.issues = [];
        this.addIssue = (sub)=>{
            this.issues = [
                ...this.issues,
                sub
            ];
        };
        this.addIssues = (subs = [])=>{
            this.issues = [
                ...this.issues,
                ...subs
            ];
        };
        const actualProto = new.target.prototype;
        if (Object.setPrototypeOf) {
            Object.setPrototypeOf(this, actualProto);
        } else {
            this.__proto__ = actualProto;
        }
        this.name = "ZodError";
        this.issues = issues;
    }
    get errors() {
        return this.issues;
    }
    format(_mapper) {
        const mapper = _mapper || function(issue) {
            return issue.message;
        };
        const fieldErrors = {
            _errors: []
        };
        const processError = (error)=>{
            for (const issue of error.issues){
                if (issue.code === "invalid_union") {
                    issue.unionErrors.map(processError);
                } else if (issue.code === "invalid_return_type") {
                    processError(issue.returnTypeError);
                } else if (issue.code === "invalid_arguments") {
                    processError(issue.argumentsError);
                } else if (issue.path.length === 0) {
                    fieldErrors._errors.push(mapper(issue));
                } else {
                    let curr = fieldErrors;
                    let i = 0;
                    while(i < issue.path.length){
                        const el = issue.path[i];
                        const terminal = i === issue.path.length - 1;
                        if (!terminal) {
                            curr[el] = curr[el] || {
                                _errors: []
                            };
                        } else {
                            curr[el] = curr[el] || {
                                _errors: []
                            };
                            curr[el]._errors.push(mapper(issue));
                        }
                        curr = curr[el];
                        i++;
                    }
                }
            }
        };
        processError(this);
        return fieldErrors;
    }
    toString() {
        return this.message;
    }
    get message() {
        return JSON.stringify(this.issues, null, 2);
    }
    get isEmpty() {
        return this.issues.length === 0;
    }
    flatten(mapper = (issue)=>issue.message) {
        const fieldErrors = {};
        const formErrors = [];
        for (const sub of this.issues){
            if (sub.path.length > 0) {
                fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
                fieldErrors[sub.path[0]].push(mapper(sub));
            } else {
                formErrors.push(mapper(sub));
            }
        }
        return {
            formErrors,
            fieldErrors
        };
    }
    get formErrors() {
        return this.flatten();
    }
};
ZodError3.create = (issues)=>{
    const error = new ZodError3(issues);
    return error;
};
var defaultErrorMap3 = (issue, _ctx)=>{
    let message;
    switch(issue.code){
        case ZodIssueCode3.invalid_type:
            if (issue.received === ZodParsedType3.undefined) {
                message = "Required";
            } else {
                message = `Expected ${issue.expected}, received ${issue.received}`;
            }
            break;
        case ZodIssueCode3.invalid_literal:
            message = `Invalid literal value, expected ${JSON.stringify(issue.expected)}`;
            break;
        case ZodIssueCode3.unrecognized_keys:
            message = `Unrecognized key(s) in object: ${util3.joinValues(issue.keys, ", ")}`;
            break;
        case ZodIssueCode3.invalid_union:
            message = `Invalid input`;
            break;
        case ZodIssueCode3.invalid_union_discriminator:
            message = `Invalid discriminator value. Expected ${util3.joinValues(issue.options)}`;
            break;
        case ZodIssueCode3.invalid_enum_value:
            message = `Invalid enum value. Expected ${util3.joinValues(issue.options)}, received '${issue.received}'`;
            break;
        case ZodIssueCode3.invalid_arguments:
            message = `Invalid function arguments`;
            break;
        case ZodIssueCode3.invalid_return_type:
            message = `Invalid function return type`;
            break;
        case ZodIssueCode3.invalid_date:
            message = `Invalid date`;
            break;
        case ZodIssueCode3.invalid_string:
            if (issue.validation !== "regex") message = `Invalid ${issue.validation}`;
            else message = "Invalid";
            break;
        case ZodIssueCode3.too_small:
            if (issue.type === "array") message = `Array must contain ${issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
            else if (issue.type === "string") message = `String must contain ${issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
            else if (issue.type === "number") message = `Number must be greater than ${issue.inclusive ? `or equal to ` : ``}${issue.minimum}`;
            else message = "Invalid input";
            break;
        case ZodIssueCode3.too_big:
            if (issue.type === "array") message = `Array must contain ${issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
            else if (issue.type === "string") message = `String must contain ${issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
            else if (issue.type === "number") message = `Number must be less than ${issue.inclusive ? `or equal to ` : ``}${issue.maximum}`;
            else message = "Invalid input";
            break;
        case ZodIssueCode3.custom:
            message = `Invalid input`;
            break;
        case ZodIssueCode3.invalid_intersection_types:
            message = `Intersection results could not be merged`;
            break;
        case ZodIssueCode3.not_multiple_of:
            message = `Number must be a multiple of ${issue.multipleOf}`;
            break;
        default:
            message = _ctx.defaultError;
            util3.assertNever(issue);
    }
    return {
        message
    };
};
var overrideErrorMap3 = defaultErrorMap3;
var setErrorMap3 = (map)=>{
    overrideErrorMap3 = map;
};
var makeIssue3 = (params)=>{
    const { data , path , errorMaps , issueData  } = params;
    const fullPath = [
        ...path,
        ...issueData.path || []
    ];
    const fullIssue = {
        ...issueData,
        path: fullPath
    };
    let errorMessage = "";
    const maps = errorMaps.filter((m)=>!!m).slice().reverse();
    for (const map of maps){
        errorMessage = map(fullIssue, {
            data,
            defaultError: errorMessage
        }).message;
    }
    return {
        ...issueData,
        path: fullPath,
        message: issueData.message || errorMessage
    };
};
var EMPTY_PATH3 = [];
function addIssueToContext3(ctx, issueData) {
    const issue = makeIssue3({
        issueData,
        data: ctx.data,
        path: ctx.path,
        errorMaps: [
            ctx.common.contextualErrorMap,
            ctx.schemaErrorMap,
            overrideErrorMap3,
            defaultErrorMap3
        ].filter((x)=>!!x)
    });
    ctx.common.issues.push(issue);
}
var ParseStatus3 = class {
    constructor(){
        this.value = "valid";
    }
    dirty() {
        if (this.value === "valid") this.value = "dirty";
    }
    abort() {
        if (this.value !== "aborted") this.value = "aborted";
    }
    static mergeArray(status, results) {
        const arrayValue = [];
        for (const s2 of results){
            if (s2.status === "aborted") return INVALID6;
            if (s2.status === "dirty") status.dirty();
            arrayValue.push(s2.value);
        }
        return {
            status: status.value,
            value: arrayValue
        };
    }
    static async mergeObjectAsync(status, pairs) {
        const syncPairs = [];
        for (const pair of pairs){
            syncPairs.push({
                key: await pair.key,
                value: await pair.value
            });
        }
        return ParseStatus3.mergeObjectSync(status, syncPairs);
    }
    static mergeObjectSync(status, pairs) {
        const finalObject = {};
        for (const pair of pairs){
            const { key , value  } = pair;
            if (key.status === "aborted") return INVALID6;
            if (value.status === "aborted") return INVALID6;
            if (key.status === "dirty") status.dirty();
            if (value.status === "dirty") status.dirty();
            if (typeof value.value !== "undefined" || pair.alwaysSet) {
                finalObject[key.value] = value.value;
            }
        }
        return {
            status: status.value,
            value: finalObject
        };
    }
};
var INVALID6 = Object.freeze({
    status: "aborted"
});
var DIRTY3 = (value)=>({
        status: "dirty",
        value
    });
var OK3 = (value)=>({
        status: "valid",
        value
    });
var isAborted3 = (x)=>x.status === "aborted";
var isDirty3 = (x)=>x.status === "dirty";
var isValid3 = (x)=>x.status === "valid";
var isAsync3 = (x)=>typeof Promise !== void 0 && x instanceof Promise;
var errorUtil3;
(function(errorUtil22) {
    errorUtil22.errToObj = (message)=>typeof message === "string" ? {
            message
        } : message || {};
    errorUtil22.toString = (message)=>typeof message === "string" ? message : message === null || message === void 0 ? void 0 : message.message;
})(errorUtil3 || (errorUtil3 = {}));
var ParseInputLazyPath3 = class {
    constructor(parent, value, path, key){
        this.parent = parent;
        this.data = value;
        this._path = path;
        this._key = key;
    }
    get path() {
        return this._path.concat(this._key);
    }
};
var handleResult3 = (ctx, result)=>{
    if (isValid3(result)) {
        return {
            success: true,
            data: result.value
        };
    } else {
        if (!ctx.common.issues.length) {
            throw new Error("Validation failed but no issues detected.");
        }
        const error = new ZodError3(ctx.common.issues);
        return {
            success: false,
            error
        };
    }
};
function processCreateParams3(params) {
    if (!params) return {};
    const { errorMap , invalid_type_error , required_error , description  } = params;
    if (errorMap && (invalid_type_error || required_error)) {
        throw new Error(`Can't use "invalid" or "required" in conjunction with custom error map.`);
    }
    if (errorMap) return {
        errorMap,
        description
    };
    const customMap = (iss, ctx)=>{
        if (iss.code !== "invalid_type") return {
            message: ctx.defaultError
        };
        if (typeof ctx.data === "undefined" && required_error) return {
            message: required_error
        };
        if (params.invalid_type_error) return {
            message: params.invalid_type_error
        };
        return {
            message: ctx.defaultError
        };
    };
    return {
        errorMap: customMap,
        description
    };
}
var ZodType3 = class {
    constructor(def){
        this.spa = this.safeParseAsync;
        this.superRefine = this._refinement;
        this._def = def;
        this.parse = this.parse.bind(this);
        this.safeParse = this.safeParse.bind(this);
        this.parseAsync = this.parseAsync.bind(this);
        this.safeParseAsync = this.safeParseAsync.bind(this);
        this.spa = this.spa.bind(this);
        this.refine = this.refine.bind(this);
        this.refinement = this.refinement.bind(this);
        this.superRefine = this.superRefine.bind(this);
        this.optional = this.optional.bind(this);
        this.nullable = this.nullable.bind(this);
        this.nullish = this.nullish.bind(this);
        this.array = this.array.bind(this);
        this.promise = this.promise.bind(this);
        this.or = this.or.bind(this);
        this.and = this.and.bind(this);
        this.transform = this.transform.bind(this);
        this.default = this.default.bind(this);
        this.describe = this.describe.bind(this);
        this.isNullable = this.isNullable.bind(this);
        this.isOptional = this.isOptional.bind(this);
    }
    get description() {
        return this._def.description;
    }
    _getType(input) {
        return getParsedType3(input.data);
    }
    _getOrReturnCtx(input, ctx) {
        return ctx || {
            common: input.parent.common,
            data: input.data,
            parsedType: getParsedType3(input.data),
            schemaErrorMap: this._def.errorMap,
            path: input.path,
            parent: input.parent
        };
    }
    _processInputParams(input) {
        return {
            status: new ParseStatus3(),
            ctx: {
                common: input.parent.common,
                data: input.data,
                parsedType: getParsedType3(input.data),
                schemaErrorMap: this._def.errorMap,
                path: input.path,
                parent: input.parent
            }
        };
    }
    _parseSync(input) {
        const result = this._parse(input);
        if (isAsync3(result)) {
            throw new Error("Synchronous parse encountered promise.");
        }
        return result;
    }
    _parseAsync(input) {
        const result = this._parse(input);
        return Promise.resolve(result);
    }
    parse(data, params) {
        const result = this.safeParse(data, params);
        if (result.success) return result.data;
        throw result.error;
    }
    safeParse(data, params) {
        var _a;
        const ctx = {
            common: {
                issues: [],
                async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,
                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap
            },
            path: (params === null || params === void 0 ? void 0 : params.path) || [],
            schemaErrorMap: this._def.errorMap,
            parent: null,
            data,
            parsedType: getParsedType3(data)
        };
        const result = this._parseSync({
            data,
            path: ctx.path,
            parent: ctx
        });
        return handleResult3(ctx, result);
    }
    async parseAsync(data, params) {
        const result = await this.safeParseAsync(data, params);
        if (result.success) return result.data;
        throw result.error;
    }
    async safeParseAsync(data, params) {
        const ctx = {
            common: {
                issues: [],
                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
                async: true
            },
            path: (params === null || params === void 0 ? void 0 : params.path) || [],
            schemaErrorMap: this._def.errorMap,
            parent: null,
            data,
            parsedType: getParsedType3(data)
        };
        const maybeAsyncResult = this._parse({
            data,
            path: [],
            parent: ctx
        });
        const result = await (isAsync3(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
        return handleResult3(ctx, result);
    }
    refine(check, message) {
        const getIssueProperties = (val)=>{
            if (typeof message === "string" || typeof message === "undefined") {
                return {
                    message
                };
            } else if (typeof message === "function") {
                return message(val);
            } else {
                return message;
            }
        };
        return this._refinement((val, ctx)=>{
            const result = check(val);
            const setError = ()=>ctx.addIssue({
                    code: ZodIssueCode3.custom,
                    ...getIssueProperties(val)
                });
            if (typeof Promise !== "undefined" && result instanceof Promise) {
                return result.then((data)=>{
                    if (!data) {
                        setError();
                        return false;
                    } else {
                        return true;
                    }
                });
            }
            if (!result) {
                setError();
                return false;
            } else {
                return true;
            }
        });
    }
    refinement(check, refinementData) {
        return this._refinement((val, ctx)=>{
            if (!check(val)) {
                ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
                return false;
            } else {
                return true;
            }
        });
    }
    _refinement(refinement) {
        return new ZodEffects3({
            schema: this,
            typeName: ZodFirstPartyTypeKind3.ZodEffects,
            effect: {
                type: "refinement",
                refinement
            }
        });
    }
    optional() {
        return ZodOptional3.create(this);
    }
    nullable() {
        return ZodNullable3.create(this);
    }
    nullish() {
        return this.optional().nullable();
    }
    array() {
        return ZodArray3.create(this);
    }
    promise() {
        return ZodPromise3.create(this);
    }
    or(option) {
        return ZodUnion3.create([
            this,
            option
        ]);
    }
    and(incoming) {
        return ZodIntersection3.create(this, incoming);
    }
    transform(transform) {
        return new ZodEffects3({
            schema: this,
            typeName: ZodFirstPartyTypeKind3.ZodEffects,
            effect: {
                type: "transform",
                transform
            }
        });
    }
    default(def) {
        const defaultValueFunc = typeof def === "function" ? def : ()=>def;
        return new ZodDefault3({
            innerType: this,
            defaultValue: defaultValueFunc,
            typeName: ZodFirstPartyTypeKind3.ZodDefault
        });
    }
    describe(description) {
        const This = this.constructor;
        return new This({
            ...this._def,
            description
        });
    }
    isOptional() {
        return this.safeParse(void 0).success;
    }
    isNullable() {
        return this.safeParse(null).success;
    }
};
var cuidRegex3 = /^c[^\s-]{8,}$/i;
var uuidRegex3 = /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;
var emailRegex3 = /^(([^<>()[\]\.,;:\s@\"]+(\.[^<>()[\]\.,;:\s@\"]+)*)|(\".+\"))@(([^<>()[\]\.,;:\s@\"]+\.)+[^<>()[\]\.,;:\s@\"]{2,})$/i;
var ZodString3 = class extends ZodType3 {
    constructor(){
        super(...arguments);
        this._regex = (regex, validation, message)=>this.refinement((data)=>regex.test(data), {
                validation,
                code: ZodIssueCode3.invalid_string,
                ...errorUtil3.errToObj(message)
            });
        this.nonempty = (message)=>this.min(1, errorUtil3.errToObj(message));
        this.trim = ()=>new ZodString3({
                ...this._def,
                checks: [
                    ...this._def.checks,
                    {
                        kind: "trim"
                    }
                ]
            });
    }
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType3.string) {
            const ctx2 = this._getOrReturnCtx(input);
            addIssueToContext3(ctx2, {
                code: ZodIssueCode3.invalid_type,
                expected: ZodParsedType3.string,
                received: ctx2.parsedType
            });
            return INVALID6;
        }
        const status = new ParseStatus3();
        let ctx = void 0;
        for (const check of this._def.checks){
            if (check.kind === "min") {
                if (input.data.length < check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext3(ctx, {
                        code: ZodIssueCode3.too_small,
                        minimum: check.value,
                        type: "string",
                        inclusive: true,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "max") {
                if (input.data.length > check.value) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext3(ctx, {
                        code: ZodIssueCode3.too_big,
                        maximum: check.value,
                        type: "string",
                        inclusive: true,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "email") {
                if (!emailRegex3.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext3(ctx, {
                        validation: "email",
                        code: ZodIssueCode3.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "uuid") {
                if (!uuidRegex3.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext3(ctx, {
                        validation: "uuid",
                        code: ZodIssueCode3.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "cuid") {
                if (!cuidRegex3.test(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext3(ctx, {
                        validation: "cuid",
                        code: ZodIssueCode3.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "url") {
                try {
                    new URL(input.data);
                } catch (_a) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext3(ctx, {
                        validation: "url",
                        code: ZodIssueCode3.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "regex") {
                check.regex.lastIndex = 0;
                const testResult = check.regex.test(input.data);
                if (!testResult) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext3(ctx, {
                        validation: "regex",
                        code: ZodIssueCode3.invalid_string,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "trim") {
                input.data = input.data.trim();
            } else {
                util3.assertNever(check);
            }
        }
        return {
            status: status.value,
            value: input.data
        };
    }
    _addCheck(check) {
        return new ZodString3({
            ...this._def,
            checks: [
                ...this._def.checks,
                check
            ]
        });
    }
    email(message) {
        return this._addCheck({
            kind: "email",
            ...errorUtil3.errToObj(message)
        });
    }
    url(message) {
        return this._addCheck({
            kind: "url",
            ...errorUtil3.errToObj(message)
        });
    }
    uuid(message) {
        return this._addCheck({
            kind: "uuid",
            ...errorUtil3.errToObj(message)
        });
    }
    cuid(message) {
        return this._addCheck({
            kind: "cuid",
            ...errorUtil3.errToObj(message)
        });
    }
    regex(regex, message) {
        return this._addCheck({
            kind: "regex",
            regex,
            ...errorUtil3.errToObj(message)
        });
    }
    min(minLength, message) {
        return this._addCheck({
            kind: "min",
            value: minLength,
            ...errorUtil3.errToObj(message)
        });
    }
    max(maxLength, message) {
        return this._addCheck({
            kind: "max",
            value: maxLength,
            ...errorUtil3.errToObj(message)
        });
    }
    length(len, message) {
        return this.min(len, message).max(len, message);
    }
    get isEmail() {
        return !!this._def.checks.find((ch)=>ch.kind === "email");
    }
    get isURL() {
        return !!this._def.checks.find((ch)=>ch.kind === "url");
    }
    get isUUID() {
        return !!this._def.checks.find((ch)=>ch.kind === "uuid");
    }
    get isCUID() {
        return !!this._def.checks.find((ch)=>ch.kind === "cuid");
    }
    get minLength() {
        let min = -Infinity;
        this._def.checks.map((ch)=>{
            if (ch.kind === "min") {
                if (min === null || ch.value > min) {
                    min = ch.value;
                }
            }
        });
        return min;
    }
    get maxLength() {
        let max = null;
        this._def.checks.map((ch)=>{
            if (ch.kind === "max") {
                if (max === null || ch.value < max) {
                    max = ch.value;
                }
            }
        });
        return max;
    }
};
ZodString3.create = (params)=>{
    return new ZodString3({
        checks: [],
        typeName: ZodFirstPartyTypeKind3.ZodString,
        ...processCreateParams3(params)
    });
};
function floatSafeRemainder3(val, step) {
    const valDecCount = (val.toString().split(".")[1] || "").length;
    const stepDecCount = (step.toString().split(".")[1] || "").length;
    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
    const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
    const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
    return valInt % stepInt / Math.pow(10, decCount);
}
var ZodNumber3 = class extends ZodType3 {
    constructor(){
        super(...arguments);
        this.min = this.gte;
        this.max = this.lte;
        this.step = this.multipleOf;
    }
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType3.number) {
            const ctx2 = this._getOrReturnCtx(input);
            addIssueToContext3(ctx2, {
                code: ZodIssueCode3.invalid_type,
                expected: ZodParsedType3.number,
                received: ctx2.parsedType
            });
            return INVALID6;
        }
        let ctx = void 0;
        const status = new ParseStatus3();
        for (const check of this._def.checks){
            if (check.kind === "int") {
                if (!util3.isInteger(input.data)) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext3(ctx, {
                        code: ZodIssueCode3.invalid_type,
                        expected: "integer",
                        received: "float",
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "min") {
                const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
                if (tooSmall) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext3(ctx, {
                        code: ZodIssueCode3.too_small,
                        minimum: check.value,
                        type: "number",
                        inclusive: check.inclusive,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "max") {
                const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
                if (tooBig) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext3(ctx, {
                        code: ZodIssueCode3.too_big,
                        maximum: check.value,
                        type: "number",
                        inclusive: check.inclusive,
                        message: check.message
                    });
                    status.dirty();
                }
            } else if (check.kind === "multipleOf") {
                if (floatSafeRemainder3(input.data, check.value) !== 0) {
                    ctx = this._getOrReturnCtx(input, ctx);
                    addIssueToContext3(ctx, {
                        code: ZodIssueCode3.not_multiple_of,
                        multipleOf: check.value,
                        message: check.message
                    });
                    status.dirty();
                }
            } else {
                util3.assertNever(check);
            }
        }
        return {
            status: status.value,
            value: input.data
        };
    }
    gte(value, message) {
        return this.setLimit("min", value, true, errorUtil3.toString(message));
    }
    gt(value, message) {
        return this.setLimit("min", value, false, errorUtil3.toString(message));
    }
    lte(value, message) {
        return this.setLimit("max", value, true, errorUtil3.toString(message));
    }
    lt(value, message) {
        return this.setLimit("max", value, false, errorUtil3.toString(message));
    }
    setLimit(kind, value, inclusive, message) {
        return new ZodNumber3({
            ...this._def,
            checks: [
                ...this._def.checks,
                {
                    kind,
                    value,
                    inclusive,
                    message: errorUtil3.toString(message)
                }
            ]
        });
    }
    _addCheck(check) {
        return new ZodNumber3({
            ...this._def,
            checks: [
                ...this._def.checks,
                check
            ]
        });
    }
    int(message) {
        return this._addCheck({
            kind: "int",
            message: errorUtil3.toString(message)
        });
    }
    positive(message) {
        return this._addCheck({
            kind: "min",
            value: 0,
            inclusive: false,
            message: errorUtil3.toString(message)
        });
    }
    negative(message) {
        return this._addCheck({
            kind: "max",
            value: 0,
            inclusive: false,
            message: errorUtil3.toString(message)
        });
    }
    nonpositive(message) {
        return this._addCheck({
            kind: "max",
            value: 0,
            inclusive: true,
            message: errorUtil3.toString(message)
        });
    }
    nonnegative(message) {
        return this._addCheck({
            kind: "min",
            value: 0,
            inclusive: true,
            message: errorUtil3.toString(message)
        });
    }
    multipleOf(value, message) {
        return this._addCheck({
            kind: "multipleOf",
            value,
            message: errorUtil3.toString(message)
        });
    }
    get minValue() {
        let min = null;
        for (const ch of this._def.checks){
            if (ch.kind === "min") {
                if (min === null || ch.value > min) min = ch.value;
            }
        }
        return min;
    }
    get maxValue() {
        let max = null;
        for (const ch of this._def.checks){
            if (ch.kind === "max") {
                if (max === null || ch.value < max) max = ch.value;
            }
        }
        return max;
    }
    get isInt() {
        return !!this._def.checks.find((ch)=>ch.kind === "int");
    }
};
ZodNumber3.create = (params)=>{
    return new ZodNumber3({
        checks: [],
        typeName: ZodFirstPartyTypeKind3.ZodNumber,
        ...processCreateParams3(params)
    });
};
var ZodBigInt3 = class extends ZodType3 {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType3.bigint) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext3(ctx, {
                code: ZodIssueCode3.invalid_type,
                expected: ZodParsedType3.bigint,
                received: ctx.parsedType
            });
            return INVALID6;
        }
        return OK3(input.data);
    }
};
ZodBigInt3.create = (params)=>{
    return new ZodBigInt3({
        typeName: ZodFirstPartyTypeKind3.ZodBigInt,
        ...processCreateParams3(params)
    });
};
var ZodBoolean3 = class extends ZodType3 {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType3.boolean) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext3(ctx, {
                code: ZodIssueCode3.invalid_type,
                expected: ZodParsedType3.boolean,
                received: ctx.parsedType
            });
            return INVALID6;
        }
        return OK3(input.data);
    }
};
ZodBoolean3.create = (params)=>{
    return new ZodBoolean3({
        typeName: ZodFirstPartyTypeKind3.ZodBoolean,
        ...processCreateParams3(params)
    });
};
var ZodDate3 = class extends ZodType3 {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType3.date) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext3(ctx, {
                code: ZodIssueCode3.invalid_type,
                expected: ZodParsedType3.date,
                received: ctx.parsedType
            });
            return INVALID6;
        }
        if (isNaN(input.data.getTime())) {
            const ctx1 = this._getOrReturnCtx(input);
            addIssueToContext3(ctx1, {
                code: ZodIssueCode3.invalid_date
            });
            return INVALID6;
        }
        return {
            status: "valid",
            value: new Date(input.data.getTime())
        };
    }
};
ZodDate3.create = (params)=>{
    return new ZodDate3({
        typeName: ZodFirstPartyTypeKind3.ZodDate,
        ...processCreateParams3(params)
    });
};
var ZodUndefined3 = class extends ZodType3 {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType3.undefined) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext3(ctx, {
                code: ZodIssueCode3.invalid_type,
                expected: ZodParsedType3.undefined,
                received: ctx.parsedType
            });
            return INVALID6;
        }
        return OK3(input.data);
    }
};
ZodUndefined3.create = (params)=>{
    return new ZodUndefined3({
        typeName: ZodFirstPartyTypeKind3.ZodUndefined,
        ...processCreateParams3(params)
    });
};
var ZodNull3 = class extends ZodType3 {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType3.null) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext3(ctx, {
                code: ZodIssueCode3.invalid_type,
                expected: ZodParsedType3.null,
                received: ctx.parsedType
            });
            return INVALID6;
        }
        return OK3(input.data);
    }
};
ZodNull3.create = (params)=>{
    return new ZodNull3({
        typeName: ZodFirstPartyTypeKind3.ZodNull,
        ...processCreateParams3(params)
    });
};
var ZodAny3 = class extends ZodType3 {
    constructor(){
        super(...arguments);
        this._any = true;
    }
    _parse(input) {
        return OK3(input.data);
    }
};
ZodAny3.create = (params)=>{
    return new ZodAny3({
        typeName: ZodFirstPartyTypeKind3.ZodAny,
        ...processCreateParams3(params)
    });
};
var ZodUnknown3 = class extends ZodType3 {
    constructor(){
        super(...arguments);
        this._unknown = true;
    }
    _parse(input) {
        return OK3(input.data);
    }
};
ZodUnknown3.create = (params)=>{
    return new ZodUnknown3({
        typeName: ZodFirstPartyTypeKind3.ZodUnknown,
        ...processCreateParams3(params)
    });
};
var ZodNever3 = class extends ZodType3 {
    _parse(input) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext3(ctx, {
            code: ZodIssueCode3.invalid_type,
            expected: ZodParsedType3.never,
            received: ctx.parsedType
        });
        return INVALID6;
    }
};
ZodNever3.create = (params)=>{
    return new ZodNever3({
        typeName: ZodFirstPartyTypeKind3.ZodNever,
        ...processCreateParams3(params)
    });
};
var ZodVoid3 = class extends ZodType3 {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType3.undefined) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext3(ctx, {
                code: ZodIssueCode3.invalid_type,
                expected: ZodParsedType3.void,
                received: ctx.parsedType
            });
            return INVALID6;
        }
        return OK3(input.data);
    }
};
ZodVoid3.create = (params)=>{
    return new ZodVoid3({
        typeName: ZodFirstPartyTypeKind3.ZodVoid,
        ...processCreateParams3(params)
    });
};
var ZodArray3 = class extends ZodType3 {
    _parse(input) {
        const { ctx , status  } = this._processInputParams(input);
        const def = this._def;
        if (ctx.parsedType !== ZodParsedType3.array) {
            addIssueToContext3(ctx, {
                code: ZodIssueCode3.invalid_type,
                expected: ZodParsedType3.array,
                received: ctx.parsedType
            });
            return INVALID6;
        }
        if (def.minLength !== null) {
            if (ctx.data.length < def.minLength.value) {
                addIssueToContext3(ctx, {
                    code: ZodIssueCode3.too_small,
                    minimum: def.minLength.value,
                    type: "array",
                    inclusive: true,
                    message: def.minLength.message
                });
                status.dirty();
            }
        }
        if (def.maxLength !== null) {
            if (ctx.data.length > def.maxLength.value) {
                addIssueToContext3(ctx, {
                    code: ZodIssueCode3.too_big,
                    maximum: def.maxLength.value,
                    type: "array",
                    inclusive: true,
                    message: def.maxLength.message
                });
                status.dirty();
            }
        }
        if (ctx.common.async) {
            return Promise.all(ctx.data.map((item, i)=>{
                return def.type._parseAsync(new ParseInputLazyPath3(ctx, item, ctx.path, i));
            })).then((result2)=>{
                return ParseStatus3.mergeArray(status, result2);
            });
        }
        const result = ctx.data.map((item, i)=>{
            return def.type._parseSync(new ParseInputLazyPath3(ctx, item, ctx.path, i));
        });
        return ParseStatus3.mergeArray(status, result);
    }
    get element() {
        return this._def.type;
    }
    min(minLength, message) {
        return new ZodArray3({
            ...this._def,
            minLength: {
                value: minLength,
                message: errorUtil3.toString(message)
            }
        });
    }
    max(maxLength, message) {
        return new ZodArray3({
            ...this._def,
            maxLength: {
                value: maxLength,
                message: errorUtil3.toString(message)
            }
        });
    }
    length(len, message) {
        return this.min(len, message).max(len, message);
    }
    nonempty(message) {
        return this.min(1, message);
    }
};
ZodArray3.create = (schema, params)=>{
    return new ZodArray3({
        type: schema,
        minLength: null,
        maxLength: null,
        typeName: ZodFirstPartyTypeKind3.ZodArray,
        ...processCreateParams3(params)
    });
};
var objectUtil3;
(function(objectUtil22) {
    objectUtil22.mergeShapes = (first, second)=>{
        return {
            ...first,
            ...second
        };
    };
})(objectUtil3 || (objectUtil3 = {}));
var AugmentFactory3 = (def)=>(augmentation)=>{
        return new ZodObject3({
            ...def,
            shape: ()=>({
                    ...def.shape(),
                    ...augmentation
                })
        });
    };
function deepPartialify3(schema) {
    if (schema instanceof ZodObject3) {
        const newShape = {};
        for(const key in schema.shape){
            const fieldSchema = schema.shape[key];
            newShape[key] = ZodOptional3.create(deepPartialify3(fieldSchema));
        }
        return new ZodObject3({
            ...schema._def,
            shape: ()=>newShape
        });
    } else if (schema instanceof ZodArray3) {
        return ZodArray3.create(deepPartialify3(schema.element));
    } else if (schema instanceof ZodOptional3) {
        return ZodOptional3.create(deepPartialify3(schema.unwrap()));
    } else if (schema instanceof ZodNullable3) {
        return ZodNullable3.create(deepPartialify3(schema.unwrap()));
    } else if (schema instanceof ZodTuple3) {
        return ZodTuple3.create(schema.items.map((item)=>deepPartialify3(item)));
    } else {
        return schema;
    }
}
var ZodObject3 = class extends ZodType3 {
    constructor(){
        super(...arguments);
        this._cached = null;
        this.nonstrict = this.passthrough;
        this.augment = AugmentFactory3(this._def);
        this.extend = AugmentFactory3(this._def);
    }
    _getCached() {
        if (this._cached !== null) return this._cached;
        const shape = this._def.shape();
        const keys = util3.objectKeys(shape);
        return this._cached = {
            shape,
            keys
        };
    }
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType3.object) {
            const ctx2 = this._getOrReturnCtx(input);
            addIssueToContext3(ctx2, {
                code: ZodIssueCode3.invalid_type,
                expected: ZodParsedType3.object,
                received: ctx2.parsedType
            });
            return INVALID6;
        }
        const { status , ctx  } = this._processInputParams(input);
        const { shape , keys: shapeKeys  } = this._getCached();
        const extraKeys = [];
        for(const key in ctx.data){
            if (!shapeKeys.includes(key)) {
                extraKeys.push(key);
            }
        }
        const pairs = [];
        for (const key1 of shapeKeys){
            const keyValidator = shape[key1];
            const value = ctx.data[key1];
            pairs.push({
                key: {
                    status: "valid",
                    value: key1
                },
                value: keyValidator._parse(new ParseInputLazyPath3(ctx, value, ctx.path, key1)),
                alwaysSet: key1 in ctx.data
            });
        }
        if (this._def.catchall instanceof ZodNever3) {
            const unknownKeys = this._def.unknownKeys;
            if (unknownKeys === "passthrough") {
                for (const key2 of extraKeys){
                    pairs.push({
                        key: {
                            status: "valid",
                            value: key2
                        },
                        value: {
                            status: "valid",
                            value: ctx.data[key2]
                        }
                    });
                }
            } else if (unknownKeys === "strict") {
                if (extraKeys.length > 0) {
                    addIssueToContext3(ctx, {
                        code: ZodIssueCode3.unrecognized_keys,
                        keys: extraKeys
                    });
                    status.dirty();
                }
            } else if (unknownKeys === "strip") ;
            else {
                throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
            }
        } else {
            const catchall = this._def.catchall;
            for (const key3 of extraKeys){
                const value1 = ctx.data[key3];
                pairs.push({
                    key: {
                        status: "valid",
                        value: key3
                    },
                    value: catchall._parse(new ParseInputLazyPath3(ctx, value1, ctx.path, key3)),
                    alwaysSet: key3 in ctx.data
                });
            }
        }
        if (ctx.common.async) {
            return Promise.resolve().then(async ()=>{
                const syncPairs = [];
                for (const pair of pairs){
                    const key = await pair.key;
                    syncPairs.push({
                        key,
                        value: await pair.value,
                        alwaysSet: pair.alwaysSet
                    });
                }
                return syncPairs;
            }).then((syncPairs)=>{
                return ParseStatus3.mergeObjectSync(status, syncPairs);
            });
        } else {
            return ParseStatus3.mergeObjectSync(status, pairs);
        }
    }
    get shape() {
        return this._def.shape();
    }
    strict(message) {
        errorUtil3.errToObj;
        return new ZodObject3({
            ...this._def,
            unknownKeys: "strict",
            ...message !== void 0 ? {
                errorMap: (issue, ctx)=>{
                    var _a, _b, _c, _d;
                    const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;
                    if (issue.code === "unrecognized_keys") return {
                        message: (_d = errorUtil3.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError
                    };
                    return {
                        message: defaultError
                    };
                }
            } : {}
        });
    }
    strip() {
        return new ZodObject3({
            ...this._def,
            unknownKeys: "strip"
        });
    }
    passthrough() {
        return new ZodObject3({
            ...this._def,
            unknownKeys: "passthrough"
        });
    }
    setKey(key, schema) {
        return this.augment({
            [key]: schema
        });
    }
    merge(merging) {
        const merged = new ZodObject3({
            unknownKeys: merging._def.unknownKeys,
            catchall: merging._def.catchall,
            shape: ()=>objectUtil3.mergeShapes(this._def.shape(), merging._def.shape()),
            typeName: ZodFirstPartyTypeKind3.ZodObject
        });
        return merged;
    }
    catchall(index) {
        return new ZodObject3({
            ...this._def,
            catchall: index
        });
    }
    pick(mask) {
        const shape = {};
        util3.objectKeys(mask).map((key)=>{
            if (this.shape[key]) shape[key] = this.shape[key];
        });
        return new ZodObject3({
            ...this._def,
            shape: ()=>shape
        });
    }
    omit(mask) {
        const shape = {};
        util3.objectKeys(this.shape).map((key)=>{
            if (util3.objectKeys(mask).indexOf(key) === -1) {
                shape[key] = this.shape[key];
            }
        });
        return new ZodObject3({
            ...this._def,
            shape: ()=>shape
        });
    }
    deepPartial() {
        return deepPartialify3(this);
    }
    partial(mask) {
        const newShape = {};
        if (mask) {
            util3.objectKeys(this.shape).map((key)=>{
                if (util3.objectKeys(mask).indexOf(key) === -1) {
                    newShape[key] = this.shape[key];
                } else {
                    newShape[key] = this.shape[key].optional();
                }
            });
            return new ZodObject3({
                ...this._def,
                shape: ()=>newShape
            });
        } else {
            for(const key in this.shape){
                const fieldSchema = this.shape[key];
                newShape[key] = fieldSchema.optional();
            }
        }
        return new ZodObject3({
            ...this._def,
            shape: ()=>newShape
        });
    }
    required() {
        const newShape = {};
        for(const key in this.shape){
            const fieldSchema = this.shape[key];
            let newField = fieldSchema;
            while(newField instanceof ZodOptional3){
                newField = newField._def.innerType;
            }
            newShape[key] = newField;
        }
        return new ZodObject3({
            ...this._def,
            shape: ()=>newShape
        });
    }
};
ZodObject3.create = (shape, params)=>{
    return new ZodObject3({
        shape: ()=>shape,
        unknownKeys: "strip",
        catchall: ZodNever3.create(),
        typeName: ZodFirstPartyTypeKind3.ZodObject,
        ...processCreateParams3(params)
    });
};
ZodObject3.strictCreate = (shape, params)=>{
    return new ZodObject3({
        shape: ()=>shape,
        unknownKeys: "strict",
        catchall: ZodNever3.create(),
        typeName: ZodFirstPartyTypeKind3.ZodObject,
        ...processCreateParams3(params)
    });
};
ZodObject3.lazycreate = (shape, params)=>{
    return new ZodObject3({
        shape,
        unknownKeys: "strip",
        catchall: ZodNever3.create(),
        typeName: ZodFirstPartyTypeKind3.ZodObject,
        ...processCreateParams3(params)
    });
};
var ZodUnion3 = class extends ZodType3 {
    _parse(input) {
        const { ctx  } = this._processInputParams(input);
        const options = this._def.options;
        function handleResults(results) {
            for (const result of results){
                if (result.result.status === "valid") {
                    return result.result;
                }
            }
            for (const result1 of results){
                if (result1.result.status === "dirty") {
                    ctx.common.issues.push(...result1.ctx.common.issues);
                    return result1.result;
                }
            }
            const unionErrors = results.map((result)=>new ZodError3(result.ctx.common.issues));
            addIssueToContext3(ctx, {
                code: ZodIssueCode3.invalid_union,
                unionErrors
            });
            return INVALID6;
        }
        if (ctx.common.async) {
            return Promise.all(options.map(async (option)=>{
                const childCtx = {
                    ...ctx,
                    common: {
                        ...ctx.common,
                        issues: []
                    },
                    parent: null
                };
                return {
                    result: await option._parseAsync({
                        data: ctx.data,
                        path: ctx.path,
                        parent: childCtx
                    }),
                    ctx: childCtx
                };
            })).then(handleResults);
        } else {
            let dirty = void 0;
            const issues = [];
            for (const option of options){
                const childCtx = {
                    ...ctx,
                    common: {
                        ...ctx.common,
                        issues: []
                    },
                    parent: null
                };
                const result = option._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: childCtx
                });
                if (result.status === "valid") {
                    return result;
                } else if (result.status === "dirty" && !dirty) {
                    dirty = {
                        result,
                        ctx: childCtx
                    };
                }
                if (childCtx.common.issues.length) {
                    issues.push(childCtx.common.issues);
                }
            }
            if (dirty) {
                ctx.common.issues.push(...dirty.ctx.common.issues);
                return dirty.result;
            }
            const unionErrors = issues.map((issues2)=>new ZodError3(issues2));
            addIssueToContext3(ctx, {
                code: ZodIssueCode3.invalid_union,
                unionErrors
            });
            return INVALID6;
        }
    }
    get options() {
        return this._def.options;
    }
};
ZodUnion3.create = (types, params)=>{
    return new ZodUnion3({
        options: types,
        typeName: ZodFirstPartyTypeKind3.ZodUnion,
        ...processCreateParams3(params)
    });
};
var ZodDiscriminatedUnion3 = class extends ZodType3 {
    _parse(input) {
        const { ctx  } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType3.object) {
            addIssueToContext3(ctx, {
                code: ZodIssueCode3.invalid_type,
                expected: ZodParsedType3.object,
                received: ctx.parsedType
            });
            return INVALID6;
        }
        const discriminator = this.discriminator;
        const discriminatorValue = ctx.data[discriminator];
        const option = this.options.get(discriminatorValue);
        if (!option) {
            addIssueToContext3(ctx, {
                code: ZodIssueCode3.invalid_union_discriminator,
                options: this.validDiscriminatorValues,
                path: [
                    discriminator
                ]
            });
            return INVALID6;
        }
        if (ctx.common.async) {
            return option._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
            });
        } else {
            return option._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
            });
        }
    }
    get discriminator() {
        return this._def.discriminator;
    }
    get validDiscriminatorValues() {
        return Array.from(this.options.keys());
    }
    get options() {
        return this._def.options;
    }
    static create(discriminator, types, params) {
        const options = /* @__PURE__ */ new Map();
        try {
            types.forEach((type)=>{
                const discriminatorValue = type.shape[discriminator].value;
                options.set(discriminatorValue, type);
            });
        } catch (e) {
            throw new Error("The discriminator value could not be extracted from all the provided schemas");
        }
        if (options.size !== types.length) {
            throw new Error("Some of the discriminator values are not unique");
        }
        return new ZodDiscriminatedUnion3({
            typeName: ZodFirstPartyTypeKind3.ZodDiscriminatedUnion,
            discriminator,
            options,
            ...processCreateParams3(params)
        });
    }
};
function mergeValues3(a, b) {
    const aType = getParsedType3(a);
    const bType = getParsedType3(b);
    if (a === b) {
        return {
            valid: true,
            data: a
        };
    } else if (aType === ZodParsedType3.object && bType === ZodParsedType3.object) {
        const bKeys = util3.objectKeys(b);
        const sharedKeys = util3.objectKeys(a).filter((key)=>bKeys.indexOf(key) !== -1);
        const newObj = {
            ...a,
            ...b
        };
        for (const key of sharedKeys){
            const sharedValue = mergeValues3(a[key], b[key]);
            if (!sharedValue.valid) {
                return {
                    valid: false
                };
            }
            newObj[key] = sharedValue.data;
        }
        return {
            valid: true,
            data: newObj
        };
    } else if (aType === ZodParsedType3.array && bType === ZodParsedType3.array) {
        if (a.length !== b.length) {
            return {
                valid: false
            };
        }
        const newArray = [];
        for(let index = 0; index < a.length; index++){
            const itemA = a[index];
            const itemB = b[index];
            const sharedValue1 = mergeValues3(itemA, itemB);
            if (!sharedValue1.valid) {
                return {
                    valid: false
                };
            }
            newArray.push(sharedValue1.data);
        }
        return {
            valid: true,
            data: newArray
        };
    } else if (aType === ZodParsedType3.date && bType === ZodParsedType3.date && +a === +b) {
        return {
            valid: true,
            data: a
        };
    } else {
        return {
            valid: false
        };
    }
}
var ZodIntersection3 = class extends ZodType3 {
    _parse(input) {
        const { status , ctx  } = this._processInputParams(input);
        const handleParsed = (parsedLeft, parsedRight)=>{
            if (isAborted3(parsedLeft) || isAborted3(parsedRight)) {
                return INVALID6;
            }
            const merged = mergeValues3(parsedLeft.value, parsedRight.value);
            if (!merged.valid) {
                addIssueToContext3(ctx, {
                    code: ZodIssueCode3.invalid_intersection_types
                });
                return INVALID6;
            }
            if (isDirty3(parsedLeft) || isDirty3(parsedRight)) {
                status.dirty();
            }
            return {
                status: status.value,
                value: merged.data
            };
        };
        if (ctx.common.async) {
            return Promise.all([
                this._def.left._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx
                }),
                this._def.right._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx
                })
            ]).then(([left, right])=>handleParsed(left, right));
        } else {
            return handleParsed(this._def.left._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
            }), this._def.right._parseSync({
                data: ctx.data,
                path: ctx.path,
                parent: ctx
            }));
        }
    }
};
ZodIntersection3.create = (left, right, params)=>{
    return new ZodIntersection3({
        left,
        right,
        typeName: ZodFirstPartyTypeKind3.ZodIntersection,
        ...processCreateParams3(params)
    });
};
var ZodTuple3 = class extends ZodType3 {
    _parse(input) {
        const { status , ctx  } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType3.array) {
            addIssueToContext3(ctx, {
                code: ZodIssueCode3.invalid_type,
                expected: ZodParsedType3.array,
                received: ctx.parsedType
            });
            return INVALID6;
        }
        if (ctx.data.length < this._def.items.length) {
            addIssueToContext3(ctx, {
                code: ZodIssueCode3.too_small,
                minimum: this._def.items.length,
                inclusive: true,
                type: "array"
            });
            return INVALID6;
        }
        const rest = this._def.rest;
        if (!rest && ctx.data.length > this._def.items.length) {
            addIssueToContext3(ctx, {
                code: ZodIssueCode3.too_big,
                maximum: this._def.items.length,
                inclusive: true,
                type: "array"
            });
            status.dirty();
        }
        const items = ctx.data.map((item, itemIndex)=>{
            const schema = this._def.items[itemIndex] || this._def.rest;
            if (!schema) return null;
            return schema._parse(new ParseInputLazyPath3(ctx, item, ctx.path, itemIndex));
        }).filter((x)=>!!x);
        if (ctx.common.async) {
            return Promise.all(items).then((results)=>{
                return ParseStatus3.mergeArray(status, results);
            });
        } else {
            return ParseStatus3.mergeArray(status, items);
        }
    }
    get items() {
        return this._def.items;
    }
    rest(rest) {
        return new ZodTuple3({
            ...this._def,
            rest
        });
    }
};
ZodTuple3.create = (schemas, params)=>{
    return new ZodTuple3({
        items: schemas,
        typeName: ZodFirstPartyTypeKind3.ZodTuple,
        rest: null,
        ...processCreateParams3(params)
    });
};
var ZodRecord3 = class extends ZodType3 {
    get keySchema() {
        return this._def.keyType;
    }
    get valueSchema() {
        return this._def.valueType;
    }
    _parse(input) {
        const { status , ctx  } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType3.object) {
            addIssueToContext3(ctx, {
                code: ZodIssueCode3.invalid_type,
                expected: ZodParsedType3.object,
                received: ctx.parsedType
            });
            return INVALID6;
        }
        const pairs = [];
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        for(const key in ctx.data){
            pairs.push({
                key: keyType._parse(new ParseInputLazyPath3(ctx, key, ctx.path, key)),
                value: valueType._parse(new ParseInputLazyPath3(ctx, ctx.data[key], ctx.path, key))
            });
        }
        if (ctx.common.async) {
            return ParseStatus3.mergeObjectAsync(status, pairs);
        } else {
            return ParseStatus3.mergeObjectSync(status, pairs);
        }
    }
    get element() {
        return this._def.valueType;
    }
    static create(first, second, third) {
        if (second instanceof ZodType3) {
            return new ZodRecord3({
                keyType: first,
                valueType: second,
                typeName: ZodFirstPartyTypeKind3.ZodRecord,
                ...processCreateParams3(third)
            });
        }
        return new ZodRecord3({
            keyType: ZodString3.create(),
            valueType: first,
            typeName: ZodFirstPartyTypeKind3.ZodRecord,
            ...processCreateParams3(second)
        });
    }
};
var ZodMap3 = class extends ZodType3 {
    _parse(input) {
        const { status , ctx  } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType3.map) {
            addIssueToContext3(ctx, {
                code: ZodIssueCode3.invalid_type,
                expected: ZodParsedType3.map,
                received: ctx.parsedType
            });
            return INVALID6;
        }
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        const pairs = [
            ...ctx.data.entries()
        ].map(([key, value], index)=>{
            return {
                key: keyType._parse(new ParseInputLazyPath3(ctx, key, ctx.path, [
                    index,
                    "key"
                ])),
                value: valueType._parse(new ParseInputLazyPath3(ctx, value, ctx.path, [
                    index,
                    "value"
                ]))
            };
        });
        if (ctx.common.async) {
            const finalMap = /* @__PURE__ */ new Map();
            return Promise.resolve().then(async ()=>{
                for (const pair of pairs){
                    const key = await pair.key;
                    const value = await pair.value;
                    if (key.status === "aborted" || value.status === "aborted") {
                        return INVALID6;
                    }
                    if (key.status === "dirty" || value.status === "dirty") {
                        status.dirty();
                    }
                    finalMap.set(key.value, value.value);
                }
                return {
                    status: status.value,
                    value: finalMap
                };
            });
        } else {
            const finalMap1 = /* @__PURE__ */ new Map();
            for (const pair of pairs){
                const key = pair.key;
                const value = pair.value;
                if (key.status === "aborted" || value.status === "aborted") {
                    return INVALID6;
                }
                if (key.status === "dirty" || value.status === "dirty") {
                    status.dirty();
                }
                finalMap1.set(key.value, value.value);
            }
            return {
                status: status.value,
                value: finalMap1
            };
        }
    }
};
ZodMap3.create = (keyType, valueType, params)=>{
    return new ZodMap3({
        valueType,
        keyType,
        typeName: ZodFirstPartyTypeKind3.ZodMap,
        ...processCreateParams3(params)
    });
};
var ZodSet3 = class extends ZodType3 {
    _parse(input) {
        const { status , ctx  } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType3.set) {
            addIssueToContext3(ctx, {
                code: ZodIssueCode3.invalid_type,
                expected: ZodParsedType3.set,
                received: ctx.parsedType
            });
            return INVALID6;
        }
        const def = this._def;
        if (def.minSize !== null) {
            if (ctx.data.size < def.minSize.value) {
                addIssueToContext3(ctx, {
                    code: ZodIssueCode3.too_small,
                    minimum: def.minSize.value,
                    type: "set",
                    inclusive: true,
                    message: def.minSize.message
                });
                status.dirty();
            }
        }
        if (def.maxSize !== null) {
            if (ctx.data.size > def.maxSize.value) {
                addIssueToContext3(ctx, {
                    code: ZodIssueCode3.too_big,
                    maximum: def.maxSize.value,
                    type: "set",
                    inclusive: true,
                    message: def.maxSize.message
                });
                status.dirty();
            }
        }
        const valueType = this._def.valueType;
        function finalizeSet(elements2) {
            const parsedSet = /* @__PURE__ */ new Set();
            for (const element of elements2){
                if (element.status === "aborted") return INVALID6;
                if (element.status === "dirty") status.dirty();
                parsedSet.add(element.value);
            }
            return {
                status: status.value,
                value: parsedSet
            };
        }
        const elements = [
            ...ctx.data.values()
        ].map((item, i)=>valueType._parse(new ParseInputLazyPath3(ctx, item, ctx.path, i)));
        if (ctx.common.async) {
            return Promise.all(elements).then((elements2)=>finalizeSet(elements2));
        } else {
            return finalizeSet(elements);
        }
    }
    min(minSize, message) {
        return new ZodSet3({
            ...this._def,
            minSize: {
                value: minSize,
                message: errorUtil3.toString(message)
            }
        });
    }
    max(maxSize, message) {
        return new ZodSet3({
            ...this._def,
            maxSize: {
                value: maxSize,
                message: errorUtil3.toString(message)
            }
        });
    }
    size(size, message) {
        return this.min(size, message).max(size, message);
    }
    nonempty(message) {
        return this.min(1, message);
    }
};
ZodSet3.create = (valueType, params)=>{
    return new ZodSet3({
        valueType,
        minSize: null,
        maxSize: null,
        typeName: ZodFirstPartyTypeKind3.ZodSet,
        ...processCreateParams3(params)
    });
};
var ZodFunction3 = class extends ZodType3 {
    constructor(){
        super(...arguments);
        this.validate = this.implement;
    }
    _parse(input) {
        const { ctx  } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType3.function) {
            addIssueToContext3(ctx, {
                code: ZodIssueCode3.invalid_type,
                expected: ZodParsedType3.function,
                received: ctx.parsedType
            });
            return INVALID6;
        }
        function makeArgsIssue(args, error) {
            return makeIssue3({
                data: args,
                path: ctx.path,
                errorMaps: [
                    ctx.common.contextualErrorMap,
                    ctx.schemaErrorMap,
                    overrideErrorMap3,
                    defaultErrorMap3
                ].filter((x)=>!!x),
                issueData: {
                    code: ZodIssueCode3.invalid_arguments,
                    argumentsError: error
                }
            });
        }
        function makeReturnsIssue(returns, error) {
            return makeIssue3({
                data: returns,
                path: ctx.path,
                errorMaps: [
                    ctx.common.contextualErrorMap,
                    ctx.schemaErrorMap,
                    overrideErrorMap3,
                    defaultErrorMap3
                ].filter((x)=>!!x),
                issueData: {
                    code: ZodIssueCode3.invalid_return_type,
                    returnTypeError: error
                }
            });
        }
        const params = {
            errorMap: ctx.common.contextualErrorMap
        };
        const fn = ctx.data;
        if (this._def.returns instanceof ZodPromise3) {
            return OK3(async (...args)=>{
                const error = new ZodError3([]);
                const parsedArgs = await this._def.args.parseAsync(args, params).catch((e)=>{
                    error.addIssue(makeArgsIssue(args, e));
                    throw error;
                });
                const result = await fn(...parsedArgs);
                const parsedReturns = await this._def.returns._def.type.parseAsync(result, params).catch((e)=>{
                    error.addIssue(makeReturnsIssue(result, e));
                    throw error;
                });
                return parsedReturns;
            });
        } else {
            return OK3((...args)=>{
                const parsedArgs = this._def.args.safeParse(args, params);
                if (!parsedArgs.success) {
                    throw new ZodError3([
                        makeArgsIssue(args, parsedArgs.error)
                    ]);
                }
                const result = fn(...parsedArgs.data);
                const parsedReturns = this._def.returns.safeParse(result, params);
                if (!parsedReturns.success) {
                    throw new ZodError3([
                        makeReturnsIssue(result, parsedReturns.error)
                    ]);
                }
                return parsedReturns.data;
            });
        }
    }
    parameters() {
        return this._def.args;
    }
    returnType() {
        return this._def.returns;
    }
    args(...items) {
        return new ZodFunction3({
            ...this._def,
            args: ZodTuple3.create(items).rest(ZodUnknown3.create())
        });
    }
    returns(returnType) {
        return new ZodFunction3({
            ...this._def,
            returns: returnType
        });
    }
    implement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
    }
    strictImplement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
    }
};
ZodFunction3.create = (args, returns, params)=>{
    return new ZodFunction3({
        args: args ? args.rest(ZodUnknown3.create()) : ZodTuple3.create([]).rest(ZodUnknown3.create()),
        returns: returns || ZodUnknown3.create(),
        typeName: ZodFirstPartyTypeKind3.ZodFunction,
        ...processCreateParams3(params)
    });
};
var ZodLazy3 = class extends ZodType3 {
    get schema() {
        return this._def.getter();
    }
    _parse(input) {
        const { ctx  } = this._processInputParams(input);
        const lazySchema = this._def.getter();
        return lazySchema._parse({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
        });
    }
};
ZodLazy3.create = (getter, params)=>{
    return new ZodLazy3({
        getter,
        typeName: ZodFirstPartyTypeKind3.ZodLazy,
        ...processCreateParams3(params)
    });
};
var ZodLiteral3 = class extends ZodType3 {
    _parse(input) {
        if (input.data !== this._def.value) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext3(ctx, {
                code: ZodIssueCode3.invalid_literal,
                expected: this._def.value
            });
            return INVALID6;
        }
        return {
            status: "valid",
            value: input.data
        };
    }
    get value() {
        return this._def.value;
    }
};
ZodLiteral3.create = (value, params)=>{
    return new ZodLiteral3({
        value,
        typeName: ZodFirstPartyTypeKind3.ZodLiteral,
        ...processCreateParams3(params)
    });
};
function createZodEnum3(values, params) {
    return new ZodEnum3({
        values,
        typeName: ZodFirstPartyTypeKind3.ZodEnum,
        ...processCreateParams3(params)
    });
}
var ZodEnum3 = class extends ZodType3 {
    _parse(input) {
        if (typeof input.data !== "string") {
            const ctx = this._getOrReturnCtx(input);
            const expectedValues = this._def.values;
            addIssueToContext3(ctx, {
                expected: util3.joinValues(expectedValues),
                received: ctx.parsedType,
                code: ZodIssueCode3.invalid_type
            });
            return INVALID6;
        }
        if (this._def.values.indexOf(input.data) === -1) {
            const ctx1 = this._getOrReturnCtx(input);
            const expectedValues1 = this._def.values;
            addIssueToContext3(ctx1, {
                received: ctx1.data,
                code: ZodIssueCode3.invalid_enum_value,
                options: expectedValues1
            });
            return INVALID6;
        }
        return OK3(input.data);
    }
    get options() {
        return this._def.values;
    }
    get enum() {
        const enumValues = {};
        for (const val of this._def.values){
            enumValues[val] = val;
        }
        return enumValues;
    }
    get Values() {
        const enumValues = {};
        for (const val of this._def.values){
            enumValues[val] = val;
        }
        return enumValues;
    }
    get Enum() {
        const enumValues = {};
        for (const val of this._def.values){
            enumValues[val] = val;
        }
        return enumValues;
    }
};
ZodEnum3.create = createZodEnum3;
var ZodNativeEnum3 = class extends ZodType3 {
    _parse(input) {
        const nativeEnumValues = util3.getValidEnumValues(this._def.values);
        const ctx = this._getOrReturnCtx(input);
        if (ctx.parsedType !== ZodParsedType3.string && ctx.parsedType !== ZodParsedType3.number) {
            const expectedValues = util3.objectValues(nativeEnumValues);
            addIssueToContext3(ctx, {
                expected: util3.joinValues(expectedValues),
                received: ctx.parsedType,
                code: ZodIssueCode3.invalid_type
            });
            return INVALID6;
        }
        if (nativeEnumValues.indexOf(input.data) === -1) {
            const expectedValues1 = util3.objectValues(nativeEnumValues);
            addIssueToContext3(ctx, {
                received: ctx.data,
                code: ZodIssueCode3.invalid_enum_value,
                options: expectedValues1
            });
            return INVALID6;
        }
        return OK3(input.data);
    }
    get enum() {
        return this._def.values;
    }
};
ZodNativeEnum3.create = (values, params)=>{
    return new ZodNativeEnum3({
        values,
        typeName: ZodFirstPartyTypeKind3.ZodNativeEnum,
        ...processCreateParams3(params)
    });
};
var ZodPromise3 = class extends ZodType3 {
    _parse(input) {
        const { ctx  } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType3.promise && ctx.common.async === false) {
            addIssueToContext3(ctx, {
                code: ZodIssueCode3.invalid_type,
                expected: ZodParsedType3.promise,
                received: ctx.parsedType
            });
            return INVALID6;
        }
        const promisified = ctx.parsedType === ZodParsedType3.promise ? ctx.data : Promise.resolve(ctx.data);
        return OK3(promisified.then((data)=>{
            return this._def.type.parseAsync(data, {
                path: ctx.path,
                errorMap: ctx.common.contextualErrorMap
            });
        }));
    }
};
ZodPromise3.create = (schema, params)=>{
    return new ZodPromise3({
        type: schema,
        typeName: ZodFirstPartyTypeKind3.ZodPromise,
        ...processCreateParams3(params)
    });
};
var ZodEffects3 = class extends ZodType3 {
    innerType() {
        return this._def.schema;
    }
    _parse(input) {
        const { status , ctx  } = this._processInputParams(input);
        const effect = this._def.effect || null;
        if (effect.type === "preprocess") {
            const processed = effect.transform(ctx.data);
            if (ctx.common.async) {
                return Promise.resolve(processed).then((processed2)=>{
                    return this._def.schema._parseAsync({
                        data: processed2,
                        path: ctx.path,
                        parent: ctx
                    });
                });
            } else {
                return this._def.schema._parseSync({
                    data: processed,
                    path: ctx.path,
                    parent: ctx
                });
            }
        }
        const checkCtx = {
            addIssue: (arg)=>{
                addIssueToContext3(ctx, arg);
                if (arg.fatal) {
                    status.abort();
                } else {
                    status.dirty();
                }
            },
            get path () {
                return ctx.path;
            }
        };
        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
        if (effect.type === "refinement") {
            const executeRefinement = (acc)=>{
                const result = effect.refinement(acc, checkCtx);
                if (ctx.common.async) {
                    return Promise.resolve(result);
                }
                if (result instanceof Promise) {
                    throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
                }
                return acc;
            };
            if (ctx.common.async === false) {
                const inner = this._def.schema._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx
                });
                if (inner.status === "aborted") return INVALID6;
                if (inner.status === "dirty") status.dirty();
                executeRefinement(inner.value);
                return {
                    status: status.value,
                    value: inner.value
                };
            } else {
                return this._def.schema._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx
                }).then((inner)=>{
                    if (inner.status === "aborted") return INVALID6;
                    if (inner.status === "dirty") status.dirty();
                    return executeRefinement(inner.value).then(()=>{
                        return {
                            status: status.value,
                            value: inner.value
                        };
                    });
                });
            }
        }
        if (effect.type === "transform") {
            if (ctx.common.async === false) {
                const base = this._def.schema._parseSync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx
                });
                if (!isValid3(base)) return base;
                const result = effect.transform(base.value, checkCtx);
                if (result instanceof Promise) {
                    throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
                }
                return {
                    status: status.value,
                    value: result
                };
            } else {
                return this._def.schema._parseAsync({
                    data: ctx.data,
                    path: ctx.path,
                    parent: ctx
                }).then((base)=>{
                    if (!isValid3(base)) return base;
                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result)=>({
                            status: status.value,
                            value: result
                        }));
                });
            }
        }
        util3.assertNever(effect);
    }
};
ZodEffects3.create = (schema, effect, params)=>{
    return new ZodEffects3({
        schema,
        typeName: ZodFirstPartyTypeKind3.ZodEffects,
        effect,
        ...processCreateParams3(params)
    });
};
ZodEffects3.createWithPreprocess = (preprocess, schema, params)=>{
    return new ZodEffects3({
        schema,
        effect: {
            type: "preprocess",
            transform: preprocess
        },
        typeName: ZodFirstPartyTypeKind3.ZodEffects,
        ...processCreateParams3(params)
    });
};
var ZodOptional3 = class extends ZodType3 {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === ZodParsedType3.undefined) {
            return OK3(void 0);
        }
        return this._def.innerType._parse(input);
    }
    unwrap() {
        return this._def.innerType;
    }
};
ZodOptional3.create = (type, params)=>{
    return new ZodOptional3({
        innerType: type,
        typeName: ZodFirstPartyTypeKind3.ZodOptional,
        ...processCreateParams3(params)
    });
};
var ZodNullable3 = class extends ZodType3 {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === ZodParsedType3.null) {
            return OK3(null);
        }
        return this._def.innerType._parse(input);
    }
    unwrap() {
        return this._def.innerType;
    }
};
ZodNullable3.create = (type, params)=>{
    return new ZodNullable3({
        innerType: type,
        typeName: ZodFirstPartyTypeKind3.ZodNullable,
        ...processCreateParams3(params)
    });
};
var ZodDefault3 = class extends ZodType3 {
    _parse(input) {
        const { ctx  } = this._processInputParams(input);
        let data = ctx.data;
        if (ctx.parsedType === ZodParsedType3.undefined) {
            data = this._def.defaultValue();
        }
        return this._def.innerType._parse({
            data,
            path: ctx.path,
            parent: ctx
        });
    }
    removeDefault() {
        return this._def.innerType;
    }
};
ZodDefault3.create = (type, params)=>{
    return new ZodOptional3({
        innerType: type,
        typeName: ZodFirstPartyTypeKind3.ZodOptional,
        ...processCreateParams3(params)
    });
};
var ZodNaN3 = class extends ZodType3 {
    _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType3.nan) {
            const ctx = this._getOrReturnCtx(input);
            addIssueToContext3(ctx, {
                code: ZodIssueCode3.invalid_type,
                expected: ZodParsedType3.nan,
                received: ctx.parsedType
            });
            return INVALID6;
        }
        return {
            status: "valid",
            value: input.data
        };
    }
};
ZodNaN3.create = (params)=>{
    return new ZodNaN3({
        typeName: ZodFirstPartyTypeKind3.ZodNaN,
        ...processCreateParams3(params)
    });
};
var custom3 = (check, params = {}, fatal)=>{
    if (check) return ZodAny3.create().superRefine((data, ctx)=>{
        if (!check(data)) {
            const p = typeof params === "function" ? params(data) : params;
            const p2 = typeof p === "string" ? {
                message: p
            } : p;
            ctx.addIssue({
                code: "custom",
                ...p2,
                fatal
            });
        }
    });
    return ZodAny3.create();
};
var late3 = {
    object: ZodObject3.lazycreate
};
var ZodFirstPartyTypeKind3;
(function(ZodFirstPartyTypeKind22) {
    ZodFirstPartyTypeKind22["ZodString"] = "ZodString";
    ZodFirstPartyTypeKind22["ZodNumber"] = "ZodNumber";
    ZodFirstPartyTypeKind22["ZodNaN"] = "ZodNaN";
    ZodFirstPartyTypeKind22["ZodBigInt"] = "ZodBigInt";
    ZodFirstPartyTypeKind22["ZodBoolean"] = "ZodBoolean";
    ZodFirstPartyTypeKind22["ZodDate"] = "ZodDate";
    ZodFirstPartyTypeKind22["ZodUndefined"] = "ZodUndefined";
    ZodFirstPartyTypeKind22["ZodNull"] = "ZodNull";
    ZodFirstPartyTypeKind22["ZodAny"] = "ZodAny";
    ZodFirstPartyTypeKind22["ZodUnknown"] = "ZodUnknown";
    ZodFirstPartyTypeKind22["ZodNever"] = "ZodNever";
    ZodFirstPartyTypeKind22["ZodVoid"] = "ZodVoid";
    ZodFirstPartyTypeKind22["ZodArray"] = "ZodArray";
    ZodFirstPartyTypeKind22["ZodObject"] = "ZodObject";
    ZodFirstPartyTypeKind22["ZodUnion"] = "ZodUnion";
    ZodFirstPartyTypeKind22["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
    ZodFirstPartyTypeKind22["ZodIntersection"] = "ZodIntersection";
    ZodFirstPartyTypeKind22["ZodTuple"] = "ZodTuple";
    ZodFirstPartyTypeKind22["ZodRecord"] = "ZodRecord";
    ZodFirstPartyTypeKind22["ZodMap"] = "ZodMap";
    ZodFirstPartyTypeKind22["ZodSet"] = "ZodSet";
    ZodFirstPartyTypeKind22["ZodFunction"] = "ZodFunction";
    ZodFirstPartyTypeKind22["ZodLazy"] = "ZodLazy";
    ZodFirstPartyTypeKind22["ZodLiteral"] = "ZodLiteral";
    ZodFirstPartyTypeKind22["ZodEnum"] = "ZodEnum";
    ZodFirstPartyTypeKind22["ZodEffects"] = "ZodEffects";
    ZodFirstPartyTypeKind22["ZodNativeEnum"] = "ZodNativeEnum";
    ZodFirstPartyTypeKind22["ZodOptional"] = "ZodOptional";
    ZodFirstPartyTypeKind22["ZodNullable"] = "ZodNullable";
    ZodFirstPartyTypeKind22["ZodDefault"] = "ZodDefault";
    ZodFirstPartyTypeKind22["ZodPromise"] = "ZodPromise";
})(ZodFirstPartyTypeKind3 || (ZodFirstPartyTypeKind3 = {}));
var instanceOfType3 = (cls, params = {
    message: `Input not instance of ${cls.name}`
})=>custom3((data)=>data instanceof cls, params, true);
var stringType3 = ZodString3.create;
var numberType3 = ZodNumber3.create;
var nanType3 = ZodNaN3.create;
var bigIntType3 = ZodBigInt3.create;
var booleanType3 = ZodBoolean3.create;
var dateType3 = ZodDate3.create;
var undefinedType3 = ZodUndefined3.create;
var nullType3 = ZodNull3.create;
var anyType3 = ZodAny3.create;
var unknownType3 = ZodUnknown3.create;
var neverType3 = ZodNever3.create;
var voidType3 = ZodVoid3.create;
var arrayType3 = ZodArray3.create;
var objectType3 = ZodObject3.create;
var strictObjectType3 = ZodObject3.strictCreate;
var unionType3 = ZodUnion3.create;
var discriminatedUnionType3 = ZodDiscriminatedUnion3.create;
var intersectionType3 = ZodIntersection3.create;
var tupleType3 = ZodTuple3.create;
var recordType3 = ZodRecord3.create;
var mapType3 = ZodMap3.create;
var setType3 = ZodSet3.create;
var functionType3 = ZodFunction3.create;
var lazyType3 = ZodLazy3.create;
var literalType3 = ZodLiteral3.create;
var enumType3 = ZodEnum3.create;
var nativeEnumType3 = ZodNativeEnum3.create;
var promiseType3 = ZodPromise3.create;
var effectsType3 = ZodEffects3.create;
var optionalType3 = ZodOptional3.create;
var nullableType3 = ZodNullable3.create;
var preprocessType3 = ZodEffects3.createWithPreprocess;
var ostring3 = ()=>stringType3().optional();
var onumber3 = ()=>numberType3().optional();
var oboolean3 = ()=>booleanType3().optional();
var mod3 = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    getParsedType: getParsedType3,
    ZodParsedType: ZodParsedType3,
    makeIssue: makeIssue3,
    EMPTY_PATH: EMPTY_PATH3,
    addIssueToContext: addIssueToContext3,
    ParseStatus: ParseStatus3,
    INVALID: INVALID6,
    DIRTY: DIRTY3,
    OK: OK3,
    isAborted: isAborted3,
    isDirty: isDirty3,
    isValid: isValid3,
    isAsync: isAsync3,
    ZodType: ZodType3,
    ZodString: ZodString3,
    ZodNumber: ZodNumber3,
    ZodBigInt: ZodBigInt3,
    ZodBoolean: ZodBoolean3,
    ZodDate: ZodDate3,
    ZodUndefined: ZodUndefined3,
    ZodNull: ZodNull3,
    ZodAny: ZodAny3,
    ZodUnknown: ZodUnknown3,
    ZodNever: ZodNever3,
    ZodVoid: ZodVoid3,
    ZodArray: ZodArray3,
    get objectUtil () {
        return objectUtil3;
    },
    ZodObject: ZodObject3,
    ZodUnion: ZodUnion3,
    ZodDiscriminatedUnion: ZodDiscriminatedUnion3,
    ZodIntersection: ZodIntersection3,
    ZodTuple: ZodTuple3,
    ZodRecord: ZodRecord3,
    ZodMap: ZodMap3,
    ZodSet: ZodSet3,
    ZodFunction: ZodFunction3,
    ZodLazy: ZodLazy3,
    ZodLiteral: ZodLiteral3,
    ZodEnum: ZodEnum3,
    ZodNativeEnum: ZodNativeEnum3,
    ZodPromise: ZodPromise3,
    ZodEffects: ZodEffects3,
    ZodTransformer: ZodEffects3,
    ZodOptional: ZodOptional3,
    ZodNullable: ZodNullable3,
    ZodDefault: ZodDefault3,
    ZodNaN: ZodNaN3,
    custom: custom3,
    Schema: ZodType3,
    ZodSchema: ZodType3,
    late: late3,
    get ZodFirstPartyTypeKind () {
        return ZodFirstPartyTypeKind3;
    },
    any: anyType3,
    array: arrayType3,
    bigint: bigIntType3,
    boolean: booleanType3,
    date: dateType3,
    discriminatedUnion: discriminatedUnionType3,
    effect: effectsType3,
    enum: enumType3,
    function: functionType3,
    instanceof: instanceOfType3,
    intersection: intersectionType3,
    lazy: lazyType3,
    literal: literalType3,
    map: mapType3,
    nan: nanType3,
    nativeEnum: nativeEnumType3,
    never: neverType3,
    null: nullType3,
    nullable: nullableType3,
    number: numberType3,
    object: objectType3,
    oboolean: oboolean3,
    onumber: onumber3,
    optional: optionalType3,
    ostring: ostring3,
    preprocess: preprocessType3,
    promise: promiseType3,
    record: recordType3,
    set: setType3,
    strictObject: strictObjectType3,
    string: stringType3,
    transformer: effectsType3,
    tuple: tupleType3,
    undefined: undefinedType3,
    union: unionType3,
    unknown: unknownType3,
    void: voidType3,
    ZodIssueCode: ZodIssueCode3,
    quotelessJson: quotelessJson3,
    ZodError: ZodError3,
    defaultErrorMap: defaultErrorMap3,
    get overrideErrorMap () {
        return overrideErrorMap3;
    },
    setErrorMap: setErrorMap3
});
var LEAF_NODE_PREFIX = new Uint8Array([
    0
]);
var INNER_NODE_PREFIX = new Uint8Array([
    1
]);
var HASH_FUNCTION_NAMES = [
    "sha224",
    "sha256",
    "sha384",
    "sha512",
    "sha512_256",
    "sha3_224",
    "sha3_256",
    "sha3_384",
    "sha3_512"
];
var REGEX_HASH_HEX_20_642 = /^(([a-f0-9]{2}){20,64})$/i;
var REGEX_HASH_HEX = /^(([a-f0-9]{2})+)$/i;
var MerkleRoot = mod3.instanceof(Uint8Array).refine((val)=>val.length >= 20 && val.length <= 64, {
    message: "Merkle root must be a Uint8Array with length between 20 and 64 bytes"
});
var ProofBinary = mod3.instanceof(Uint8Array).refine((val)=>val.length <= 1024 * 1024, {
    message: "Binary inclusion proof must be a Uint8Array with length <= 1,048,576 bytes"
});
var HashFunction = mod3.function().args(mod3.instanceof(Uint8Array)).returns(mod3.instanceof(Uint8Array));
var TreeHashFunctionName = mod3.string().refine((val)=>HASH_FUNCTION_NAMES.includes(val), {
    message: `Tree hash function name must be one of the following: ${HASH_FUNCTION_NAMES.join(",")}`
});
var TreeData = mod3.array(mod3.instanceof(Uint8Array)).min(1);
var TreeOptions = mod3.object({
    requireBalanced: mod3.optional(mod3.boolean()),
    debug: mod3.optional(mod3.boolean())
});
var ProofHex = mod3.string().regex(REGEX_HASH_HEX);
var ProofObjectLayer2 = mod3.tuple([
    mod3.number().int().min(0).max(1),
    mod3.string().regex(REGEX_HASH_HEX_20_642)
]);
var UnionProofHashTypes2 = mod3.union([
    mod3.literal("sha224"),
    mod3.literal("sha256"),
    mod3.literal("sha384"),
    mod3.literal("sha512"),
    mod3.literal("sha512_256"),
    mod3.literal("sha3_224"),
    mod3.literal("sha3_256"),
    mod3.literal("sha3_384"),
    mod3.literal("sha3_512")
]);
var ProofObject2 = mod3.object({
    v: mod3.number().int().min(1).max(1),
    h: UnionProofHashTypes2,
    p: mod3.array(ProofObjectLayer2)
});
var TreeTree = mod3.array(mod3.array(mod3.instanceof(Uint8Array)));
var ResolvedHashName = mod3.object({
    name: mod3.string(),
    length: mod3.number().int().min(20).max(64),
    fn: HashFunction
});
var import_hex = __toESM3(require_hex(), 1);
var import_constant_time2 = __toESM3(require_constant_time2(), 1);
var import_bytes = __toESM3(require_bytes(), 1);
var import_sha224 = __toESM3(require_sha224(), 1);
var import_sha2562 = __toESM3(require_sha2562(), 1);
var import_sha384 = __toESM3(require_sha384(), 1);
var import_sha512 = __toESM3(require_sha512(), 1);
var import_sha512_256 = __toESM3(require_sha512_256(), 1);
var import_sha3 = __toESM3(require_sha3(), 1);
function compare(a, b) {
    return (0, import_constant_time2.equal)(a, b);
}
function concat(...arrays) {
    return (0, import_bytes.concat)(...arrays);
}
function decodeHex(s2) {
    return (0, import_hex.decode)(s2);
}
function encodeHex(u) {
    return (0, import_hex.encode)(u, true);
}
function powerOfTwo(x) {
    return Math.log2(x) % 1 === 0;
}
function sha224(data) {
    return (0, import_sha224.hash)(data);
}
function sha256(data) {
    return (0, import_sha2562.hash)(data);
}
function sha384(data) {
    return (0, import_sha384.hash)(data);
}
function sha512(data) {
    return (0, import_sha512.hash)(data);
}
function sha512_256(data) {
    return (0, import_sha512_256.hash)(data);
}
function sha3_224(data) {
    return (0, import_sha3.hash224)(data);
}
function sha3_256(data) {
    return (0, import_sha3.hash256)(data);
}
function sha3_384(data) {
    return (0, import_sha3.hash384)(data);
}
function sha3_512(data) {
    return (0, import_sha3.hash512)(data);
}
function hexToProof(proofHex) {
    ProofHex.parse(proofHex);
    const proof = decodeHex(proofHex);
    ProofBinary.parse(proof);
    return proof;
}
function objectToProof(proofObj) {
    ProofObject2.parse(proofObj);
    const firstProofLayerHashByteLen = proofObj.p[0][1].length / 2;
    for (const layer of proofObj.p){
        if (layer[1].length / 2 !== firstProofLayerHashByteLen) {
            throw new Error("all object proof hashes must be the same length");
        }
    }
    const proofLayers = proofObj.p;
    const proof = new Uint8Array(proofLayers.length * (1 + firstProofLayerHashByteLen));
    for(let i = 0; i < proofLayers.length; i++){
        const [order, hash] = proofLayers[i];
        proof[i * (1 + firstProofLayerHashByteLen)] = order;
        proof.set(decodeHex(hash), i * (1 + firstProofLayerHashByteLen) + 1);
    }
    ProofBinary.parse(proof);
    return proof;
}
function verify(root, proof, data, hashFunction) {
    MerkleRoot.parse(root);
    ProofBinary.parse(proof);
    HashFunction.parse(hashFunction);
    const hashFuncOutLen = hashFunction(new Uint8Array([
        0
    ])).length;
    if (compare(root, data) && proof.length === 0) {
        return true;
    }
    if (data.length !== hashFuncOutLen) {
        return false;
    }
    const intermediateStepLen = data.length + 1;
    if (proof.length % intermediateStepLen !== 0) {
        return false;
    }
    for(let i = 0; i < proof.length; i += intermediateStepLen){
        const intermediateHash = proof.subarray(i + 1, i + intermediateStepLen);
        const prefix = i === 0 ? LEAF_NODE_PREFIX : INNER_NODE_PREFIX;
        data = hashFunction(proof[i] ? concat(prefix, concat(intermediateHash, data)) : concat(prefix, concat(data, intermediateHash)));
    }
    return compare(root, data);
}
function treeDataHasExpectedLength(data, length) {
    for (const d of data){
        if (d.length !== length) {
            throw new Error("argument 'data' array contains items that don't match the hash function output length");
        }
    }
}
function debugLog(message, enabled) {
    if (enabled) {
        console.debug(message);
    }
}
function resolveHashName(hashName) {
    try {
        TreeHashFunctionName.parse(hashName);
    } catch (error) {
        if (error instanceof mod3.ZodError) {
            throw new Error(`invalid hash function name: '${hashName}'`);
        }
    }
    let foundHashFunction;
    switch(hashName){
        case "sha224":
            foundHashFunction = sha224;
            break;
        case "sha256":
            foundHashFunction = sha256;
            break;
        case "sha384":
            foundHashFunction = sha384;
            break;
        case "sha512":
            foundHashFunction = sha512;
            break;
        case "sha512_256":
            foundHashFunction = sha512_256;
            break;
        case "sha3_224":
            foundHashFunction = sha3_224;
            break;
        case "sha3_256":
            foundHashFunction = sha3_256;
            break;
        case "sha3_384":
            foundHashFunction = sha3_384;
            break;
        case "sha3_512":
            foundHashFunction = sha3_512;
            break;
        default:
            throw new Error(`unknown hash function name: ${hashName}`);
    }
    HashFunction.parse(foundHashFunction);
    return ResolvedHashName.parse({
        name: hashName,
        length: foundHashFunction(new Uint8Array([
            0
        ])).length,
        fn: foundHashFunction
    });
}
var Tree = class {
    constructor(data, hashName = "sha256", options = {
        requireBalanced: false,
        debug: false
    }){
        __publicField(this, "data");
        __publicField(this, "tree", []);
        __publicField(this, "hashFunction");
        __publicField(this, "hashName");
        __publicField(this, "hashLength");
        __publicField(this, "debug");
        __publicField(this, "requireBalanced");
        var _a, _b;
        TreeData.parse(data);
        TreeOptions.parse(options);
        const resolvedHash = resolveHashName(hashName);
        this.hashName = resolvedHash.name;
        this.hashLength = resolvedHash.length;
        this.hashFunction = resolvedHash.fn;
        this.requireBalanced = (_a = options.requireBalanced) != null ? _a : false;
        this.debug = (_b = options.debug) != null ? _b : false;
        if (this.requireBalanced && !powerOfTwo(data.length)) {
            throw new Error("argument 'data' array length must be a power of two (or set 'requireBalanced' to false)");
        }
        treeDataHasExpectedLength(data, this.hashLength);
        this.data = data;
        this.build(this.data);
        debugLog(`constructor options: ${JSON.stringify(options)}`, this.debug);
        debugLog(`constructor hashFuncOutLen: ${JSON.stringify(this.hashLength)}`, this.debug);
        debugLog(`constructor data: ${JSON.stringify(this.data)}`, this.debug);
    }
    root() {
        const root = this.tree[this.tree.length - 1][0];
        return MerkleRoot.parse(root);
    }
    height() {
        return this.tree.length - 1;
    }
    proof(dataItem) {
        for(let i = 0; i < this.data.length; i++){
            if (compare(this.data[i], dataItem)) {
                debugLog(`proof dataItem found: ${JSON.stringify(dataItem)}`, this.debug);
                return this.proofForIndex(i);
            }
        }
        throw new Error("proof dataItem not found");
    }
    proofHex(dataItem) {
        const proof = this.proof(dataItem);
        const proofHex = encodeHex(proof);
        return ProofHex.parse(proofHex);
    }
    proofObject(dataItem) {
        const proof = this.proof(dataItem);
        const layerHashLengthPlusOne = this.hashLength + 1;
        const proofLength = proof.byteLength;
        const proofLayers = [];
        for(let i = 0; i < proofLength; i += layerHashLengthPlusOne){
            const order = proof.subarray(i, i + 1);
            const hash = proof.subarray(i + 1, i + layerHashLengthPlusOne);
            proofLayers.push([
                parseInt(encodeHex(order), 16),
                encodeHex(hash)
            ]);
        }
        return ProofObject2.parse({
            v: 1,
            h: this.hashName,
            p: proofLayers
        });
    }
    static verify(root, proof, data, hashName) {
        const binaryProof = ProofBinary.safeParse(proof);
        if (binaryProof.success) {
            if (!hashName) {
                throw new Error("hashName is required if providing a binary encoded proof which has no hash function name embedded");
            }
            const resolvedHash = resolveHashName(hashName);
            return verify(root, binaryProof.data, data, resolvedHash.fn);
        }
        const hexProof = ProofHex.safeParse(proof);
        if (hexProof.success) {
            if (!hashName) {
                throw new Error("hashName is required if providing a hex encoded proof which has no hash function name embedded");
            }
            const resolvedHash1 = resolveHashName(hashName);
            return verify(root, hexToProof(hexProof.data), data, resolvedHash1.fn);
        }
        const objectProof = ProofObject2.safeParse(proof);
        if (objectProof.success) {
            const resolvedHash2 = resolveHashName(objectProof.data.h);
            return verify(root, objectToProof(objectProof.data), data, resolvedHash2.fn);
        }
        throw new Error("invalid or corrupted proof provided");
    }
    build(data, leaves = true) {
        this.tree.push(data);
        if (data.length === 1) return;
        const newLevel = [];
        for(let i = 0; i < data.length; i += 2){
            const prefix = leaves ? LEAF_NODE_PREFIX : INNER_NODE_PREFIX;
            const d1 = data[i];
            const d2 = data[i + 1] || d1;
            newLevel.push(this.hashFunction(concat(prefix, concat(d1, d2))));
        }
        this.build(newLevel, false);
    }
    proofForIndex(i) {
        var _a;
        const height = this.height();
        let level = 0;
        let isRightSideElement = Math.floor(i % 2);
        let index = i - isRightSideElement;
        debugLog(`proofForIndex i: ${i}, isRightSideElement: ${isRightSideElement}, index: ${index}`, this.debug);
        const proof = [];
        while(level < height){
            const currentLevelHashes = this.tree[level];
            debugLog(`proofForIndex entering while : level ${level} isRightSideElement: ${isRightSideElement} index: ${index}`, this.debug);
            const otherElement = isRightSideElement ? currentLevelHashes[index] : (_a = currentLevelHashes[index + 1]) != null ? _a : currentLevelHashes[index];
            proof.push(isRightSideElement);
            for (const byte of otherElement){
                proof.push(byte);
            }
            isRightSideElement = Math.floor(index / 2 % 2);
            index = Math.floor(index / 2) - isRightSideElement;
            debugLog(`proofForIndex exiting while : level ${level} isRightSideElement: ${isRightSideElement} index: ${index}`, this.debug);
            level++;
        }
        debugLog(`proofForIndex proof data : ${JSON.stringify(proof)}`, this.debug);
        const proofUint8Array = new Uint8Array(proof);
        return ProofBinary.parse(proofUint8Array);
    }
};
var import_hex4 = __toESM(require_hex2(), 1);
var import_base644 = __toESM(require_base64(), 1);
var import_ed255192 = __toESM(require_ed25519(), 1);
function hasComma(num) {
    return num === 0 ? "" : ",";
}
function canonify(object) {
    if (object === null || typeof object === "undefined" || typeof object === "boolean" || typeof object === "number" || typeof object === "string") {
        return JSON.stringify(object);
    }
    if (typeof object === "bigint") {
        throw new TypeError("BigInt value can't be serialized in JSON");
    }
    if (typeof object === "function" || typeof object === "symbol") {
        return canonify(void 0);
    }
    if (object.toJSON instanceof Function) {
        return canonify(object.toJSON());
    }
    if (Array.isArray(object)) {
        const values2 = object.reduce((t, cv, ci)=>{
            const value = cv === void 0 || typeof cv === "symbol" || typeof cv === "function" ? null : cv;
            return `${t}${hasComma(ci)}${canonify(value)}`;
        }, "");
        return `[${values2}]`;
    }
    const values = Object.keys(object).sort().reduce((t, cv)=>{
        if (object[cv] === void 0 || typeof object[cv] === "symbol" || typeof object[cv] === "function") {
            return t;
        }
        return `${t}${hasComma(t.length)}${canonify(cv)}:${canonify(object[cv])}`;
    }, "");
    return `{${values}}`;
}
var import_sha2563 = __toESM(require_sha2563(), 1);
var import_constant_time3 = __toESM(require_constant_time3(), 1);
var import_hex2 = __toESM(require_hex2(), 1);
var import_base642 = __toESM(require_base64(), 1);
var import_ed25519 = __toESM(require_ed25519(), 1);
var import_isomorphic_unfetch = __toESM(require_browser2(), 1);
var ENTROPY_SERVER_BASE_URL = "https://entropy.truestamp.com";
var KEY_SERVER_BASE_URL = "https://keys.truestamp.com";
var BACKUP_PUBLIC_KEYS = [
    {
        handle: "a56faa2b",
        type: "ed25519",
        publicKey: "K546EiGp4vsAvvOLYA1m0XKyqc4RoJ+7qPoXZs4Z+NU=",
        environment: "development",
        expired: false,
        selfSignature: "Vj0A4kNa2a4tRLxOEPFwV7irNIGUoe7Q8SX1JfkRHeNea9M+3Q3vT+9n640mMJhm2nUIDvbCtmtB2xqGoqpmCQ=="
    },
    {
        handle: "f36947d3",
        type: "ed25519",
        publicKey: "2/N8KtnOq46WOvQay/cun/3vin7dYU0jtwliVf6g83s=",
        environment: "staging",
        expired: false,
        selfSignature: "lWxD/ujp9UdGkk2MsUUla1oAR3FopK8jCeE4eNfeS6HS/ue6dUk+vhoNI3zUNsGFlNXUzwskET/VtS8i5KgQCA=="
    },
    {
        handle: "b3395500",
        type: "ed25519",
        publicKey: "BnE/2AYhgMd0KY7tXdMfmRJPoPY4I5h7rhQf+9nswAQ=",
        environment: "production",
        expired: false,
        selfSignature: "yZG0mJUpeWdaayZMF70bHrBnjIYihmoZoiEbfciGxARvocmLp0JlKXaP5MtQGCd73yqjOHX1aZqHGOPise7fAw=="
    }
];
async function getEntropyFromHash(hash) {
    try {
        const entropyUrl = `${ENTROPY_SERVER_BASE_URL}/hash/${hash}`;
        const entropyResp = await (0, import_isomorphic_unfetch.default)(entropyUrl);
        if (entropyResp.ok) {
            return EntropyResponse.parse(await entropyResp.json());
        }
    } catch (error) {}
    return void 0;
}
function timestampMicrosecondsToISO(timestamp) {
    const timestampMicroseconds = typeof timestamp === "string" ? BigInt(timestamp) : timestamp;
    const timestampMilliseconds = Number(timestampMicroseconds / BigInt(1e3));
    return DateTime.fromMillis(Math.floor(timestampMilliseconds)).toUTC().toISO();
}
function getHandleForPublicKey(publicKey) {
    return (0, import_hex2.encode)(sha256(publicKey)).slice(0, 8).toLowerCase();
}
async function getKeyByHandle(handle, keys) {
    const keysParseResponse = SignedKeys.safeParse(keys);
    if (keysParseResponse.success) {
        return keysParseResponse.data.find((key)=>key.handle === handle);
    }
    try {
        const response = await fetch(`${KEY_SERVER_BASE_URL}/${handle}`);
        if (response.ok) {
            return SignedKey.parse(await response.json());
        }
        return BACKUP_PUBLIC_KEYS.find((key)=>key.handle === handle);
    } catch (error) {
        return void 0;
    }
}
async function publicKeyMatchesKnownPublicKey(publicKey, keys) {
    try {
        const handle = getHandleForPublicKey(publicKey);
        let key = void 0;
        key = await getKeyByHandle(handle, keys);
        if (key === void 0) {
            return false;
        }
        const foundPublicKey = (0, import_base642.decode)(key.publicKey);
        if (!(0, import_constant_time3.equal)(foundPublicKey, publicKey)) {
            return false;
        }
        if (handle !== getHandleForPublicKey(foundPublicKey) || handle !== key.handle) {
            return false;
        }
        const foundKeySelfSignature = (0, import_base642.decode)(key.selfSignature);
        const unsignedKey = {
            environment: key.environment,
            expired: key.expired,
            handle: key.handle,
            publicKey: key.publicKey,
            type: key.type
        };
        const canonicalHashedUnsignedKey = canonicalizeAndHashData(unsignedKey);
        const isKeySelfSignatureVerified = (0, import_ed25519.verify)(foundPublicKey, canonicalHashedUnsignedKey.hash, foundKeySelfSignature);
        if (!isKeySelfSignatureVerified) {
            return false;
        }
        return true;
    } catch (error) {
        return false;
    }
}
function canonicalizeAndHashData(data) {
    const canonicalData = canonify(data);
    const canonicalDataUint8Array = new TextEncoder().encode(canonicalData);
    const hash = (0, import_sha2563.hash)(canonicalDataUint8Array);
    const hashUint8Array = new Uint8Array(hash);
    const hashHex = (0, import_hex2.encode)(hashUint8Array, true);
    return {
        hash: hashUint8Array,
        hashHex,
        hashType: "sha-256",
        canonicalData
    };
}
var import_hex3 = __toESM(require_hex2(), 1);
var import_constant_time4 = __toESM(require_constant_time3(), 1);
var import_base643 = __toESM(require_base64(), 1);
var import_isomorphic_unfetch2 = __toESM(require_browser2(), 1);
var HorizonTransactionResponse = mod.object({
    memo: mod.string().regex(/^(?:[A-Za-z\d+/]{4})*(?:[A-Za-z\d+/]{3}=|[A-Za-z\d+/]{2}==)?$/),
    memo_type: mod.string().refine((v)=>v === "hash", {
        message: "Transaction failed : memo_type field is not hash"
    }),
    ledger: mod.number(),
    successful: mod.boolean().refine((v)=>v === true, {
        message: "Transaction failed : success field is not true"
    })
});
var HorizonLedgerResponse = mod.object({
    closed_at: mod.string(),
    sequence: mod.number()
});
async function verifyStellar(inputTx, testing) {
    const machineBaseUrl = testing ? "https://horizon-testnet.stellar.org" : "https://horizon.stellar.org";
    const machineUrl = `${machineBaseUrl}/transactions/${inputTx.hash}`;
    const foundTxResp = await (0, import_isomorphic_unfetch2.default)(machineUrl);
    if (!foundTxResp.ok) {
        throw new Error(`Stellar : failed to fetch transaction hash '${inputTx.hash}' : status ${foundTxResp.status} : ${foundTxResp.statusText}`);
    }
    const foundTx = await foundTxResp.json();
    try {
        HorizonTransactionResponse.parse(foundTx);
    } catch (error) {
        if (error instanceof mod.ZodError) {
            const joinedIssues = error.issues.map((issue)=>{
                return `${issue.code} : [${issue.path.join(", ")}] : ${issue.message}`;
            }).join("; ");
            throw new Error(`Stellar : failed to parse transaction hash '${inputTx.hash}' : ${joinedIssues}`);
        } else if (error instanceof Error) {
            throw new Error(`Stellar : failed to parse transaction hash '${inputTx.hash}' : ${error.message}`);
        }
    }
    const foundTxMemoDecoded = (0, import_base643.decode)(foundTx.memo);
    if (!(0, import_constant_time4.equal)(foundTxMemoDecoded, (0, import_hex3.decode)(inputTx.inputHash))) {
        throw new Error(`Stellar : on-chain 'memo' did not match recorded 'memo'. Expected '${inputTx.inputHash}' but received '${(0, import_hex3.encode)(foundTxMemoDecoded).toLowerCase()}' for transaction hash '${inputTx.hash}'`);
    }
    if (foundTx.ledger !== inputTx.ledger) {
        throw new Error(`Stellar : on-chain transaction 'ledger' did not match recorded 'ledger' for transaction hash '${inputTx.hash}'`);
    }
    const ledgerResp = await (0, import_isomorphic_unfetch2.default)(`${machineBaseUrl}/ledgers/${inputTx.ledger}`);
    if (!ledgerResp.ok) {
        throw new Error(`Stellar : failed to fetch ledger '${inputTx.ledger}'`);
    }
    const ledger = await ledgerResp.json();
    try {
        HorizonLedgerResponse.parse(ledger);
    } catch (error1) {
        if (error1 instanceof mod.ZodError) {
            const joinedIssues1 = error1.issues.map((issue)=>{
                return `${issue.code} : [${issue.path.join(", ")}] : ${issue.message}`;
            }).join("; ");
            throw new Error(`Stellar : failed to parse ledger '${inputTx.ledger}' : ${joinedIssues1}`);
        } else if (error1 instanceof Error) {
            throw new Error(`Stellar : failed to parse ledger '${inputTx.ledger}' : ${error1.message}`);
        }
    }
    const urlHumanBase = "https://stellar.expert/explorer";
    const urlHumanEnv = testing ? "testnet" : "public";
    const urlHuman = `${urlHumanBase}/${urlHumanEnv}/tx/${inputTx.hash}`;
    const vt = {
        verified: true,
        intent: "stellar",
        transaction: inputTx,
        timestamp: ledger.closed_at,
        urls: {
            human: [
                urlHuman
            ],
            machine: [
                machineUrl
            ]
        }
    };
    return VerificationTransaction.parse(vt);
}
function createCommitmentVerificationError(errorMessage) {
    return {
        verified: false,
        error: `Commitment invalid : ${errorMessage}`
    };
}
async function verifier(commitment, keys = void 0, entropyFromHashFunction, skipItemSignatureVerification = false, skipCommitmentSignatureVerification = false) {
    var _a;
    try {
        Commitment.parse(commitment);
        const { commitmentData , commitmentDataSignatures  } = commitment;
        const { id , itemData , itemDataSignatures , itemSignals , proofs , transactions  } = commitmentData;
        const decodedId = decodeUnsafely(id);
        if (!itemData) {
            throw new Error("Commitment is missing itemData.");
        }
        const canonicalItemDataHash = canonicalizeAndHashData(itemData);
        if (!skipItemSignatureVerification) {
            for (const sig of itemDataSignatures != null ? itemDataSignatures : []){
                const { publicKey , signature  } = sig;
                const publicKeyDecoded = (0, import_base644.decode)(publicKey);
                const signatureIsVerified = (0, import_ed255192.verify)(publicKeyDecoded, canonicalItemDataHash.hash, (0, import_base644.decode)(signature));
                if (!signatureIsVerified) {
                    throw new Error(`ItemData signature verification failed for public key ${publicKey}.`);
                }
            }
        }
        const itemDataHashes = [];
        for (const element of itemData != null ? itemData : []){
            const { hash , hashType  } = element;
            if (hash !== void 0) {
                itemDataHashes.push({
                    hash,
                    hashType
                });
            }
        }
        const item = {
            itemData,
            itemDataSignatures,
            itemSignals
        };
        const canonicalItemHash = canonicalizeAndHashData(item);
        let observableEntropyCreatedAt = void 0;
        if (itemSignals == null ? void 0 : itemSignals.observableEntropy) {
            let entropy;
            if (entropyFromHashFunction) {
                entropy = await entropyFromHashFunction(itemSignals == null ? void 0 : itemSignals.observableEntropy);
            } else {
                entropy = await getEntropyFromHash(itemSignals == null ? void 0 : itemSignals.observableEntropy);
            }
            if (entropy) {
                observableEntropyCreatedAt = new Date(entropy.createdAt);
            }
        }
        const canonicalCommitmentDataHash = canonicalizeAndHashData(commitmentData);
        if (!skipCommitmentSignatureVerification) {
            for (const sig1 of commitmentDataSignatures){
                const { publicKey: publicKey1 , signature: signature1  } = sig1;
                const publicKeyDecoded1 = (0, import_base644.decode)(publicKey1);
                const signatureVerified = (0, import_ed255192.verify)(publicKeyDecoded1, canonicalCommitmentDataHash.hash, (0, import_base644.decode)(signature1));
                if (!signatureVerified) {
                    throw new Error(`CommitmentData signature verification failed for public key '${publicKey1}'`);
                }
                const publicKeyVerified = await publicKeyMatchesKnownPublicKey(publicKeyDecoded1, keys);
                if (!publicKeyVerified) {
                    throw new Error(`CommitmentData signature public key verification failed for public key '${publicKey1}'`);
                }
            }
        }
        if (!proofs || !Array.isArray(proofs) || proofs.length === 0) {
            throw new Error("Commitment is missing proofs");
        }
        const verificationProofs = [];
        for(let i = 0; i < proofs.length; i++){
            CommitProof.parse(proofs[i]);
            const proof = proofs[i];
            const vp = {
                inputHash: proof.inputHash,
                merkleRoot: proof.merkleRoot
            };
            if (i === 0) {
                if (proof.inputHash !== canonicalItemHash.hashHex) {
                    throw new Error(`Proof [${i}] inputHash '${proof.inputHash}' must match hash of canonical itemData, itemSignatures, itemSignals [${canonicalItemHash.hashHex}]`);
                }
            }
            if (i >= 1) {
                const previousProofIndex = i - 1;
                const previousProof = proofs[previousProofIndex];
                if (proof.inputHash !== previousProof.merkleRoot) {
                    throw new Error(`Proof [${i}] inputHash '${proof.inputHash}' must match previous proof [${previousProofIndex}] merkleRoot '${previousProof.merkleRoot}'`);
                }
            }
            try {
                const isTreeVerified = Tree.verify((0, import_hex4.decode)(proof.merkleRoot), proof.inclusionProof, (0, import_hex4.decode)(proof.inputHash));
                if (!isTreeVerified) {
                    throw new Error(`Proof [${i}] is not valid for the given data, inclusion proof, and Merkle root.`);
                }
            } catch (error) {
                if (error instanceof Error) {
                    throw new Error(`Proof [${i}] is not valid for the given data, inclusion proof, and Merkle root: ${error.message}`);
                }
            }
            verificationProofs.push(vp);
        }
        const proofMerkleRoots = proofs.map((proof)=>{
            return proof.merkleRoot;
        });
        if (!proofMerkleRoots || !Array.isArray(proofMerkleRoots) || proofMerkleRoots.length === 0) {
            throw new Error("Commitment is missing proof Merkle roots.");
        }
        const verificationTransactions = [];
        for (const merkleRoot of proofMerkleRoots){
            const transactionsForMerkleRoot = transactions[merkleRoot] || [];
            for(let i1 = 0; i1 < transactionsForMerkleRoot.length; i1++){
                try {
                    const transaction = transactionsForMerkleRoot[i1];
                    let verificationResult2;
                    switch(transaction.intent){
                        case "bitcoin":
                            break;
                        case "ethereum":
                            break;
                        case "stellar":
                            verificationResult2 = await verifyStellar(transaction, decodedId.test);
                            break;
                        case "twitter":
                            break;
                        default:
                            const invalidCommitTransaction = transaction;
                            throw new Error(`Unknown transaction discriminant`);
                    }
                    verificationTransactions.push(VerificationTransaction.parse(verificationResult2));
                } catch (error1) {
                    if (error1 instanceof mod.ZodError) {
                        const joinedIssues = error1.issues.map((issue)=>{
                            return `${issue.code} : [${issue.path.join(", ")}] : ${issue.message}`;
                        }).join("; ");
                        const v = {
                            verified: false,
                            intent: transactionsForMerkleRoot[i1].intent,
                            transaction: transactionsForMerkleRoot[0],
                            error: `Transaction verification for '${transactionsForMerkleRoot[0].intent}' inputHash '${transactionsForMerkleRoot[i1].inputHash}' failed : ${joinedIssues}`
                        };
                        verificationTransactions.push(v);
                    } else if (error1 instanceof Error) {
                        const v1 = {
                            verified: false,
                            intent: transactionsForMerkleRoot[i1].intent,
                            transaction: transactionsForMerkleRoot[0],
                            error: `Transaction verification for '${transactionsForMerkleRoot[0].intent}' inputHash '${transactionsForMerkleRoot[i1].inputHash}' failed : ${error1.message}`
                        };
                        verificationTransactions.push(v1);
                    }
                }
            }
        }
        const anyTransactionsVerified = verificationTransactions.some((v)=>{
            return v.verified === true;
        });
        const allVerifiedTransactionTimestamps = [];
        verificationTransactions.forEach((tx)=>{
            if (tx.verified && tx.timestamp) {
                allVerifiedTransactionTimestamps.push(tx.timestamp);
            }
        });
        const allVerifiedTransactionTimestampsSorted = allVerifiedTransactionTimestamps.sort((a, b)=>+new Date(a) - +new Date(b));
        const verificationResult = {
            id,
            idData: decodedId,
            verified: anyTransactionsVerified,
            itemData: {
                hash: canonicalItemDataHash.hashHex,
                hashType: canonicalItemDataHash.hashType,
                signaturesCount: itemDataSignatures ? itemDataSignatures.length : 0
            },
            item: {
                hash: canonicalItemHash.hashHex,
                hashType: "sha-256"
            },
            commitmentData: {
                hash: canonicalCommitmentDataHash.hashHex,
                hashType: "sha-256",
                signaturesCount: commitmentDataSignatures ? commitmentDataSignatures.length : 0
            },
            proofs: verificationProofs,
            transactions: verificationTransactions
        };
        if (anyTransactionsVerified) {
            verificationResult.commitsTo = {
                hashes: itemDataHashes,
                observableEntropy: observableEntropyCreatedAt ? (_a = item.itemSignals) == null ? void 0 : _a.observableEntropy : void 0,
                timestamps: {
                    submittedAfter: observableEntropyCreatedAt == null ? void 0 : observableEntropyCreatedAt.toISOString(),
                    submittedAt: timestampMicrosecondsToISO(decodedId.timestamp),
                    submittedBefore: allVerifiedTransactionTimestampsSorted,
                    submitWindowMilliseconds: observableEntropyCreatedAt && allVerifiedTransactionTimestampsSorted[0] ? +new Date(allVerifiedTransactionTimestampsSorted[0]) - +new Date(observableEntropyCreatedAt) : void 0
                }
            };
        }
        return CommitmentVerification.parse(verificationResult);
    } catch (error2) {
        if (error2 instanceof mod.ZodError) {
            const joinedIssues1 = error2.issues.map((issue)=>{
                return `${issue.code} : [${issue.path.join(", ")}] : ${issue.message}`;
            }).join("; ");
            return createCommitmentVerificationError(joinedIssues1);
        } else if (error2 instanceof Error) {
            return createCommitmentVerificationError(error2.message);
        } else {
            return createCommitmentVerificationError("Unknown error");
        }
    }
}
async function verify2(commitment, options) {
    var _a, _b, _c;
    return await verifier(commitment, (_a = options == null ? void 0 : options.keys) != null ? _a : [], options == null ? void 0 : options.entropyFromHashFunction, (_b = options == null ? void 0 : options.skipItemSignatureVerification) != null ? _b : false, (_c = options == null ? void 0 : options.skipCommitmentSignatureVerification) != null ? _c : false);
}
async function isVerified(commitment, options) {
    var _a, _b, _c;
    try {
        const verification = await verifier(commitment, (_a = options == null ? void 0 : options.keys) != null ? _a : [], options == null ? void 0 : options.entropyFromHashFunction, (_b = options == null ? void 0 : options.skipItemSignatureVerification) != null ? _b : false, (_c = options == null ? void 0 : options.skipCommitmentSignatureVerification) != null ? _c : false);
        return verification.verified;
    } catch (error) {
        return false;
    }
}
async function assertVerified(commitment, options) {
    var _a, _b, _c;
    const verification = await verifier(commitment, (_a = options == null ? void 0 : options.keys) != null ? _a : [], options == null ? void 0 : options.entropyFromHashFunction, (_b = options == null ? void 0 : options.skipItemSignatureVerification) != null ? _b : false, (_c = options == null ? void 0 : options.skipCommitmentSignatureVerification) != null ? _c : false);
    if (!verification.verified) {
        throw new Error(verification.error);
    }
}
/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */ export { Commitment, CommitmentVerification, SignedKey, SignedKeys, assertVerified, isVerified, verify2 as verify };
export default null;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vY2RuLnNreXBhY2suZGV2Ly0vQHRydWVzdGFtcC92ZXJpZnlAdjAuMy4wLWNsRERHV1YzZGJKNkxDd21KQVRRL2Rpc3Q9ZXMyMDE5LG1vZGU9aW1wb3J0cy9vcHRpbWl6ZWQvQHRydWVzdGFtcC92ZXJpZnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fZGVmUHJvcCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX3B1YmxpY0ZpZWxkID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4ge1xuICBpZiAodHlwZW9mIGtleSAhPT0gXCJzeW1ib2xcIilcbiAgICBrZXkgKz0gXCJcIjtcbiAgaWYgKGtleSBpbiBvYmopXG4gICAgcmV0dXJuIF9fZGVmUHJvcChvYmosIGtleSwge2VudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIHZhbHVlfSk7XG4gIHJldHVybiBvYmpba2V5XSA9IHZhbHVlO1xufTtcbnZhciBfX2NyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XG52YXIgX19kZWZQcm9wMiA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9fZ2V0UHJvdG9PZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fcmVxdWlyZSA9IC8qIEBfX1BVUkVfXyAqLyAoKHgpID0+IHR5cGVvZiByZXF1aXJlICE9PSBcInVuZGVmaW5lZFwiID8gcmVxdWlyZSA6IHR5cGVvZiBQcm94eSAhPT0gXCJ1bmRlZmluZWRcIiA/IG5ldyBQcm94eSh4LCB7XG4gIGdldDogKGEsIGIpID0+ICh0eXBlb2YgcmVxdWlyZSAhPT0gXCJ1bmRlZmluZWRcIiA/IHJlcXVpcmUgOiBhKVtiXVxufSkgOiB4KShmdW5jdGlvbih4KSB7XG4gIGlmICh0eXBlb2YgcmVxdWlyZSAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICByZXR1cm4gcmVxdWlyZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB0aHJvdyBuZXcgRXJyb3IoJ0R5bmFtaWMgcmVxdWlyZSBvZiBcIicgKyB4ICsgJ1wiIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn0pO1xudmFyIF9fY29tbW9uSlMgPSAoY2IsIG1vZDQpID0+IGZ1bmN0aW9uIF9fcmVxdWlyZTIoKSB7XG4gIHJldHVybiBtb2Q0IHx8ICgwLCBjYltfX2dldE93blByb3BOYW1lcyhjYilbMF1dKSgobW9kNCA9IHtleHBvcnRzOiB7fX0pLmV4cG9ydHMsIG1vZDQpLCBtb2Q0LmV4cG9ydHM7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcDIodG8sIGtleSwge2dldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZX0pO1xuICB9XG4gIHJldHVybiB0bztcbn07XG52YXIgX190b0VTTSA9IChtb2Q0LCBpc05vZGVNb2RlLCB0YXJnZXQpID0+ICh0YXJnZXQgPSBtb2Q0ICE9IG51bGwgPyBfX2NyZWF0ZShfX2dldFByb3RvT2YobW9kNCkpIDoge30sIF9fY29weVByb3BzKGlzTm9kZU1vZGUgfHwgIW1vZDQgfHwgIW1vZDQuX19lc01vZHVsZSA/IF9fZGVmUHJvcDIodGFyZ2V0LCBcImRlZmF1bHRcIiwge3ZhbHVlOiBtb2Q0LCBlbnVtZXJhYmxlOiB0cnVlfSkgOiB0YXJnZXQsIG1vZDQpKTtcbnZhciByZXF1aXJlX2Jhc2U2NCA9IF9fY29tbW9uSlMoe1xuICBcIm5vZGVfbW9kdWxlcy9Ac3RhYmxlbGliL2Jhc2U2NC9saWIvYmFzZTY0LmpzXCIoZXhwb3J0cykge1xuICAgIHZhciBfX2V4dGVuZHMgPSBleHBvcnRzICYmIGV4cG9ydHMuX19leHRlbmRzIHx8IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwge19fcHJvdG9fXzogW119IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24oZDIsIGIyKSB7XG4gICAgICAgICAgZDIuX19wcm90b19fID0gYjI7XG4gICAgICAgIH0gfHwgZnVuY3Rpb24oZDIsIGIyKSB7XG4gICAgICAgICAgZm9yICh2YXIgcCBpbiBiMilcbiAgICAgICAgICAgIGlmIChiMi5oYXNPd25Qcm9wZXJ0eShwKSlcbiAgICAgICAgICAgICAgZDJbcF0gPSBiMltwXTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7XG4gICAgICAgICAgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7XG4gICAgICAgIH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgICAgfTtcbiAgICB9KCk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7dmFsdWU6IHRydWV9KTtcbiAgICB2YXIgSU5WQUxJRF9CWVRFID0gMjU2O1xuICAgIHZhciBDb2RlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgZnVuY3Rpb24gQ29kZXIyKF9wYWRkaW5nQ2hhcmFjdGVyKSB7XG4gICAgICAgIGlmIChfcGFkZGluZ0NoYXJhY3RlciA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgX3BhZGRpbmdDaGFyYWN0ZXIgPSBcIj1cIjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wYWRkaW5nQ2hhcmFjdGVyID0gX3BhZGRpbmdDaGFyYWN0ZXI7XG4gICAgICB9XG4gICAgICBDb2RlcjIucHJvdG90eXBlLmVuY29kZWRMZW5ndGggPSBmdW5jdGlvbihsZW5ndGgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9wYWRkaW5nQ2hhcmFjdGVyKSB7XG4gICAgICAgICAgcmV0dXJuIChsZW5ndGggKiA4ICsgNSkgLyA2IHwgMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKGxlbmd0aCArIDIpIC8gMyAqIDQgfCAwO1xuICAgICAgfTtcbiAgICAgIENvZGVyMi5wcm90b3R5cGUuZW5jb2RlID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICB2YXIgb3V0ID0gXCJcIjtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICBmb3IgKDsgaSA8IGRhdGEubGVuZ3RoIC0gMjsgaSArPSAzKSB7XG4gICAgICAgICAgdmFyIGMgPSBkYXRhW2ldIDw8IDE2IHwgZGF0YVtpICsgMV0gPDwgOCB8IGRhdGFbaSArIDJdO1xuICAgICAgICAgIG91dCArPSB0aGlzLl9lbmNvZGVCeXRlKGMgPj4+IDMgKiA2ICYgNjMpO1xuICAgICAgICAgIG91dCArPSB0aGlzLl9lbmNvZGVCeXRlKGMgPj4+IDIgKiA2ICYgNjMpO1xuICAgICAgICAgIG91dCArPSB0aGlzLl9lbmNvZGVCeXRlKGMgPj4+IDEgKiA2ICYgNjMpO1xuICAgICAgICAgIG91dCArPSB0aGlzLl9lbmNvZGVCeXRlKGMgPj4+IDAgKiA2ICYgNjMpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBsZWZ0ID0gZGF0YS5sZW5ndGggLSBpO1xuICAgICAgICBpZiAobGVmdCA+IDApIHtcbiAgICAgICAgICB2YXIgYyA9IGRhdGFbaV0gPDwgMTYgfCAobGVmdCA9PT0gMiA/IGRhdGFbaSArIDFdIDw8IDggOiAwKTtcbiAgICAgICAgICBvdXQgKz0gdGhpcy5fZW5jb2RlQnl0ZShjID4+PiAzICogNiAmIDYzKTtcbiAgICAgICAgICBvdXQgKz0gdGhpcy5fZW5jb2RlQnl0ZShjID4+PiAyICogNiAmIDYzKTtcbiAgICAgICAgICBpZiAobGVmdCA9PT0gMikge1xuICAgICAgICAgICAgb3V0ICs9IHRoaXMuX2VuY29kZUJ5dGUoYyA+Pj4gMSAqIDYgJiA2Myk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG91dCArPSB0aGlzLl9wYWRkaW5nQ2hhcmFjdGVyIHx8IFwiXCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIG91dCArPSB0aGlzLl9wYWRkaW5nQ2hhcmFjdGVyIHx8IFwiXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICAgIH07XG4gICAgICBDb2RlcjIucHJvdG90eXBlLm1heERlY29kZWRMZW5ndGggPSBmdW5jdGlvbihsZW5ndGgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9wYWRkaW5nQ2hhcmFjdGVyKSB7XG4gICAgICAgICAgcmV0dXJuIChsZW5ndGggKiA2ICsgNykgLyA4IHwgMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGVuZ3RoIC8gNCAqIDMgfCAwO1xuICAgICAgfTtcbiAgICAgIENvZGVyMi5wcm90b3R5cGUuZGVjb2RlZExlbmd0aCA9IGZ1bmN0aW9uKHMyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1heERlY29kZWRMZW5ndGgoczIubGVuZ3RoIC0gdGhpcy5fZ2V0UGFkZGluZ0xlbmd0aChzMikpO1xuICAgICAgfTtcbiAgICAgIENvZGVyMi5wcm90b3R5cGUuZGVjb2RlID0gZnVuY3Rpb24oczIpIHtcbiAgICAgICAgaWYgKHMyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheSgwKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcGFkZGluZ0xlbmd0aCA9IHRoaXMuX2dldFBhZGRpbmdMZW5ndGgoczIpO1xuICAgICAgICB2YXIgbGVuZ3RoID0gczIubGVuZ3RoIC0gcGFkZGluZ0xlbmd0aDtcbiAgICAgICAgdmFyIG91dCA9IG5ldyBVaW50OEFycmF5KHRoaXMubWF4RGVjb2RlZExlbmd0aChsZW5ndGgpKTtcbiAgICAgICAgdmFyIG9wID0gMDtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB2YXIgaGF2ZUJhZCA9IDA7XG4gICAgICAgIHZhciB2MCA9IDAsIHYxID0gMCwgdjIgPSAwLCB2MyA9IDA7XG4gICAgICAgIGZvciAoOyBpIDwgbGVuZ3RoIC0gNDsgaSArPSA0KSB7XG4gICAgICAgICAgdjAgPSB0aGlzLl9kZWNvZGVDaGFyKHMyLmNoYXJDb2RlQXQoaSArIDApKTtcbiAgICAgICAgICB2MSA9IHRoaXMuX2RlY29kZUNoYXIoczIuY2hhckNvZGVBdChpICsgMSkpO1xuICAgICAgICAgIHYyID0gdGhpcy5fZGVjb2RlQ2hhcihzMi5jaGFyQ29kZUF0KGkgKyAyKSk7XG4gICAgICAgICAgdjMgPSB0aGlzLl9kZWNvZGVDaGFyKHMyLmNoYXJDb2RlQXQoaSArIDMpKTtcbiAgICAgICAgICBvdXRbb3ArK10gPSB2MCA8PCAyIHwgdjEgPj4+IDQ7XG4gICAgICAgICAgb3V0W29wKytdID0gdjEgPDwgNCB8IHYyID4+PiAyO1xuICAgICAgICAgIG91dFtvcCsrXSA9IHYyIDw8IDYgfCB2MztcbiAgICAgICAgICBoYXZlQmFkIHw9IHYwICYgSU5WQUxJRF9CWVRFO1xuICAgICAgICAgIGhhdmVCYWQgfD0gdjEgJiBJTlZBTElEX0JZVEU7XG4gICAgICAgICAgaGF2ZUJhZCB8PSB2MiAmIElOVkFMSURfQllURTtcbiAgICAgICAgICBoYXZlQmFkIHw9IHYzICYgSU5WQUxJRF9CWVRFO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpIDwgbGVuZ3RoIC0gMSkge1xuICAgICAgICAgIHYwID0gdGhpcy5fZGVjb2RlQ2hhcihzMi5jaGFyQ29kZUF0KGkpKTtcbiAgICAgICAgICB2MSA9IHRoaXMuX2RlY29kZUNoYXIoczIuY2hhckNvZGVBdChpICsgMSkpO1xuICAgICAgICAgIG91dFtvcCsrXSA9IHYwIDw8IDIgfCB2MSA+Pj4gNDtcbiAgICAgICAgICBoYXZlQmFkIHw9IHYwICYgSU5WQUxJRF9CWVRFO1xuICAgICAgICAgIGhhdmVCYWQgfD0gdjEgJiBJTlZBTElEX0JZVEU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGkgPCBsZW5ndGggLSAyKSB7XG4gICAgICAgICAgdjIgPSB0aGlzLl9kZWNvZGVDaGFyKHMyLmNoYXJDb2RlQXQoaSArIDIpKTtcbiAgICAgICAgICBvdXRbb3ArK10gPSB2MSA8PCA0IHwgdjIgPj4+IDI7XG4gICAgICAgICAgaGF2ZUJhZCB8PSB2MiAmIElOVkFMSURfQllURTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaSA8IGxlbmd0aCAtIDMpIHtcbiAgICAgICAgICB2MyA9IHRoaXMuX2RlY29kZUNoYXIoczIuY2hhckNvZGVBdChpICsgMykpO1xuICAgICAgICAgIG91dFtvcCsrXSA9IHYyIDw8IDYgfCB2MztcbiAgICAgICAgICBoYXZlQmFkIHw9IHYzICYgSU5WQUxJRF9CWVRFO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoYXZlQmFkICE9PSAwKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQmFzZTY0Q29kZXI6IGluY29ycmVjdCBjaGFyYWN0ZXJzIGZvciBkZWNvZGluZ1wiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0O1xuICAgICAgfTtcbiAgICAgIENvZGVyMi5wcm90b3R5cGUuX2VuY29kZUJ5dGUgPSBmdW5jdGlvbihiKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBiO1xuICAgICAgICByZXN1bHQgKz0gNjU7XG4gICAgICAgIHJlc3VsdCArPSAyNSAtIGIgPj4+IDggJiAwIC0gNjUgLSAyNiArIDk3O1xuICAgICAgICByZXN1bHQgKz0gNTEgLSBiID4+PiA4ICYgMjYgLSA5NyAtIDUyICsgNDg7XG4gICAgICAgIHJlc3VsdCArPSA2MSAtIGIgPj4+IDggJiA1MiAtIDQ4IC0gNjIgKyA0MztcbiAgICAgICAgcmVzdWx0ICs9IDYyIC0gYiA+Pj4gOCAmIDYyIC0gNDMgLSA2MyArIDQ3O1xuICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShyZXN1bHQpO1xuICAgICAgfTtcbiAgICAgIENvZGVyMi5wcm90b3R5cGUuX2RlY29kZUNoYXIgPSBmdW5jdGlvbihjKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBJTlZBTElEX0JZVEU7XG4gICAgICAgIHJlc3VsdCArPSAoNDIgLSBjICYgYyAtIDQ0KSA+Pj4gOCAmIC1JTlZBTElEX0JZVEUgKyBjIC0gNDMgKyA2MjtcbiAgICAgICAgcmVzdWx0ICs9ICg0NiAtIGMgJiBjIC0gNDgpID4+PiA4ICYgLUlOVkFMSURfQllURSArIGMgLSA0NyArIDYzO1xuICAgICAgICByZXN1bHQgKz0gKDQ3IC0gYyAmIGMgLSA1OCkgPj4+IDggJiAtSU5WQUxJRF9CWVRFICsgYyAtIDQ4ICsgNTI7XG4gICAgICAgIHJlc3VsdCArPSAoNjQgLSBjICYgYyAtIDkxKSA+Pj4gOCAmIC1JTlZBTElEX0JZVEUgKyBjIC0gNjUgKyAwO1xuICAgICAgICByZXN1bHQgKz0gKDk2IC0gYyAmIGMgLSAxMjMpID4+PiA4ICYgLUlOVkFMSURfQllURSArIGMgLSA5NyArIDI2O1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICAgIENvZGVyMi5wcm90b3R5cGUuX2dldFBhZGRpbmdMZW5ndGggPSBmdW5jdGlvbihzMikge1xuICAgICAgICB2YXIgcGFkZGluZ0xlbmd0aCA9IDA7XG4gICAgICAgIGlmICh0aGlzLl9wYWRkaW5nQ2hhcmFjdGVyKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IHMyLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBpZiAoczJbaV0gIT09IHRoaXMuX3BhZGRpbmdDaGFyYWN0ZXIpIHtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYWRkaW5nTGVuZ3RoKys7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzMi5sZW5ndGggPCA0IHx8IHBhZGRpbmdMZW5ndGggPiAyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJCYXNlNjRDb2RlcjogaW5jb3JyZWN0IHBhZGRpbmdcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYWRkaW5nTGVuZ3RoO1xuICAgICAgfTtcbiAgICAgIHJldHVybiBDb2RlcjI7XG4gICAgfSgpO1xuICAgIGV4cG9ydHMuQ29kZXIgPSBDb2RlcjtcbiAgICB2YXIgc3RkQ29kZXIgPSBuZXcgQ29kZXIoKTtcbiAgICBmdW5jdGlvbiBlbmNvZGUoZGF0YSkge1xuICAgICAgcmV0dXJuIHN0ZENvZGVyLmVuY29kZShkYXRhKTtcbiAgICB9XG4gICAgZXhwb3J0cy5lbmNvZGUgPSBlbmNvZGU7XG4gICAgZnVuY3Rpb24gZGVjb2RlKHMyKSB7XG4gICAgICByZXR1cm4gc3RkQ29kZXIuZGVjb2RlKHMyKTtcbiAgICB9XG4gICAgZXhwb3J0cy5kZWNvZGUgPSBkZWNvZGU7XG4gICAgdmFyIFVSTFNhZmVDb2RlciA9IGZ1bmN0aW9uKF9zdXBlcikge1xuICAgICAgX19leHRlbmRzKFVSTFNhZmVDb2RlcjIsIF9zdXBlcik7XG4gICAgICBmdW5jdGlvbiBVUkxTYWZlQ29kZXIyKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICB9XG4gICAgICBVUkxTYWZlQ29kZXIyLnByb3RvdHlwZS5fZW5jb2RlQnl0ZSA9IGZ1bmN0aW9uKGIpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGI7XG4gICAgICAgIHJlc3VsdCArPSA2NTtcbiAgICAgICAgcmVzdWx0ICs9IDI1IC0gYiA+Pj4gOCAmIDAgLSA2NSAtIDI2ICsgOTc7XG4gICAgICAgIHJlc3VsdCArPSA1MSAtIGIgPj4+IDggJiAyNiAtIDk3IC0gNTIgKyA0ODtcbiAgICAgICAgcmVzdWx0ICs9IDYxIC0gYiA+Pj4gOCAmIDUyIC0gNDggLSA2MiArIDQ1O1xuICAgICAgICByZXN1bHQgKz0gNjIgLSBiID4+PiA4ICYgNjIgLSA0NSAtIDYzICsgOTU7XG4gICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKHJlc3VsdCk7XG4gICAgICB9O1xuICAgICAgVVJMU2FmZUNvZGVyMi5wcm90b3R5cGUuX2RlY29kZUNoYXIgPSBmdW5jdGlvbihjKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBJTlZBTElEX0JZVEU7XG4gICAgICAgIHJlc3VsdCArPSAoNDQgLSBjICYgYyAtIDQ2KSA+Pj4gOCAmIC1JTlZBTElEX0JZVEUgKyBjIC0gNDUgKyA2MjtcbiAgICAgICAgcmVzdWx0ICs9ICg5NCAtIGMgJiBjIC0gOTYpID4+PiA4ICYgLUlOVkFMSURfQllURSArIGMgLSA5NSArIDYzO1xuICAgICAgICByZXN1bHQgKz0gKDQ3IC0gYyAmIGMgLSA1OCkgPj4+IDggJiAtSU5WQUxJRF9CWVRFICsgYyAtIDQ4ICsgNTI7XG4gICAgICAgIHJlc3VsdCArPSAoNjQgLSBjICYgYyAtIDkxKSA+Pj4gOCAmIC1JTlZBTElEX0JZVEUgKyBjIC0gNjUgKyAwO1xuICAgICAgICByZXN1bHQgKz0gKDk2IC0gYyAmIGMgLSAxMjMpID4+PiA4ICYgLUlOVkFMSURfQllURSArIGMgLSA5NyArIDI2O1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICAgIHJldHVybiBVUkxTYWZlQ29kZXIyO1xuICAgIH0oQ29kZXIpO1xuICAgIGV4cG9ydHMuVVJMU2FmZUNvZGVyID0gVVJMU2FmZUNvZGVyO1xuICAgIHZhciB1cmxTYWZlQ29kZXIgPSBuZXcgVVJMU2FmZUNvZGVyKCk7XG4gICAgZnVuY3Rpb24gZW5jb2RlVVJMU2FmZShkYXRhKSB7XG4gICAgICByZXR1cm4gdXJsU2FmZUNvZGVyLmVuY29kZShkYXRhKTtcbiAgICB9XG4gICAgZXhwb3J0cy5lbmNvZGVVUkxTYWZlID0gZW5jb2RlVVJMU2FmZTtcbiAgICBmdW5jdGlvbiBkZWNvZGVVUkxTYWZlKHMyKSB7XG4gICAgICByZXR1cm4gdXJsU2FmZUNvZGVyLmRlY29kZShzMik7XG4gICAgfVxuICAgIGV4cG9ydHMuZGVjb2RlVVJMU2FmZSA9IGRlY29kZVVSTFNhZmU7XG4gICAgZXhwb3J0cy5lbmNvZGVkTGVuZ3RoID0gZnVuY3Rpb24obGVuZ3RoKSB7XG4gICAgICByZXR1cm4gc3RkQ29kZXIuZW5jb2RlZExlbmd0aChsZW5ndGgpO1xuICAgIH07XG4gICAgZXhwb3J0cy5tYXhEZWNvZGVkTGVuZ3RoID0gZnVuY3Rpb24obGVuZ3RoKSB7XG4gICAgICByZXR1cm4gc3RkQ29kZXIubWF4RGVjb2RlZExlbmd0aChsZW5ndGgpO1xuICAgIH07XG4gICAgZXhwb3J0cy5kZWNvZGVkTGVuZ3RoID0gZnVuY3Rpb24oczIpIHtcbiAgICAgIHJldHVybiBzdGRDb2Rlci5kZWNvZGVkTGVuZ3RoKHMyKTtcbiAgICB9O1xuICB9XG59KTtcbnZhciByZXF1aXJlX2Rpc3QgPSBfX2NvbW1vbkpTKHtcbiAgXCJub2RlX21vZHVsZXMvaXNvLTMxNjYtdHMvZGlzdC9pbmRleC5qc1wiKGV4cG9ydHMpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHt2YWx1ZTogdHJ1ZX0pO1xuICAgIGV4cG9ydHMuZ2V0SXNvMzE2NkNvdW50cnlOYW1lID0gZXhwb3J0cy5pc0lzbzMxNjZBbHBoYTJDb2RlID0gZXhwb3J0cy5JU09fMzE2Nl9BTFBIQV8yID0gZXhwb3J0cy5JU09fMzE2Nl9BTFBIQV8yX01BUFBJTkdTID0gdm9pZCAwO1xuICAgIGV4cG9ydHMuSVNPXzMxNjZfQUxQSEFfMl9NQVBQSU5HUyA9IHtcbiAgICAgIEFEOiBcIkFuZG9ycmFcIixcbiAgICAgIEFFOiBcIlVuaXRlZCBBcmFiIEVtaXJhdGVzXCIsXG4gICAgICBBRjogXCJBZmdoYW5pc3RhblwiLFxuICAgICAgQUc6IFwiQW50aWd1YSBhbmQgQmFyYnVkYVwiLFxuICAgICAgQUk6IFwiQW5ndWlsbGFcIixcbiAgICAgIEFMOiBcIkFsYmFuaWFcIixcbiAgICAgIEFNOiBcIkFybWVuaWFcIixcbiAgICAgIEFPOiBcIkFuZ29sYVwiLFxuICAgICAgQVE6IFwiQW50YXJjdGljYVwiLFxuICAgICAgQVI6IFwiQXJnZW50aW5hXCIsXG4gICAgICBBUzogXCJBbWVyaWNhbiBTYW1vYVwiLFxuICAgICAgQVQ6IFwiQXVzdHJpYVwiLFxuICAgICAgQVU6IFwiQXVzdHJhbGlhXCIsXG4gICAgICBBVzogXCJBcnViYVwiLFxuICAgICAgQVg6IFwiXFx4QzVsYW5kIElzbGFuZHNcIixcbiAgICAgIEFaOiBcIkF6ZXJiYWlqYW5cIixcbiAgICAgIEJBOiBcIkJvc25pYSBhbmQgSGVyemVnb3ZpbmFcIixcbiAgICAgIEJCOiBcIkJhcmJhZG9zXCIsXG4gICAgICBCRDogXCJCYW5nbGFkZXNoXCIsXG4gICAgICBCRTogXCJCZWxnaXVtXCIsXG4gICAgICBCRjogXCJCdXJraW5hIEZhc29cIixcbiAgICAgIEJHOiBcIkJ1bGdhcmlhXCIsXG4gICAgICBCSDogXCJCYWhyYWluXCIsXG4gICAgICBCSTogXCJCdXJ1bmRpXCIsXG4gICAgICBCSjogXCJCZW5pblwiLFxuICAgICAgQkw6IFwiU2FpbnQgQmFydGhcXHhDM1xceEE5bGVteVwiLFxuICAgICAgQk06IFwiQmVybXVkYVwiLFxuICAgICAgQk46IFwiQnJ1bmVpIERhcnVzc2FsYW1cIixcbiAgICAgIEJPOiBcIkJvbGl2aWEgKFBsdXJpbmF0aW9uYWwgU3RhdGUgb2YpXCIsXG4gICAgICBCUTogXCJCb25haXJlLCBTaW50IEV1c3RhdGl1cyBhbmQgU2FiYVwiLFxuICAgICAgQlI6IFwiQnJhemlsXCIsXG4gICAgICBCUzogXCJCYWhhbWFzXCIsXG4gICAgICBCVDogXCJCaHV0YW5cIixcbiAgICAgIEJWOiBcIkJvdXZldCBJc2xhbmRcIixcbiAgICAgIEJXOiBcIkJvdHN3YW5hXCIsXG4gICAgICBCWTogXCJCZWxhcnVzXCIsXG4gICAgICBCWjogXCJCZWxpemVcIixcbiAgICAgIENBOiBcIkNhbmFkYVwiLFxuICAgICAgQ0M6IFwiQ29jb3MgKEtlZWxpbmcpIElzbGFuZHNcIixcbiAgICAgIENEOiBcIkNvbmdvLCBEZW1vY3JhdGljIFJlcHVibGljIG9mIHRoZVwiLFxuICAgICAgQ0Y6IFwiQ2VudHJhbCBBZnJpY2FuIFJlcHVibGljXCIsXG4gICAgICBDRzogXCJDb25nb1wiLFxuICAgICAgQ0g6IFwiU3dpdHplcmxhbmRcIixcbiAgICAgIENJOiBcIkNcXHhGM3RlIGQnSXZvaXJlXCIsXG4gICAgICBDSzogXCJDb29rIElzbGFuZHNcIixcbiAgICAgIENMOiBcIkNoaWxlXCIsXG4gICAgICBDTTogXCJDYW1lcm9vblwiLFxuICAgICAgQ046IFwiQ2hpbmFcIixcbiAgICAgIENPOiBcIkNvbG9tYmlhXCIsXG4gICAgICBDUjogXCJDb3N0YSBSaWNhXCIsXG4gICAgICBDVTogXCJDdWJhXCIsXG4gICAgICBDVjogXCJDYWJvIFZlcmRlXCIsXG4gICAgICBDVzogXCJDdXJhXFx4QzNcXHhBN2FvXCIsXG4gICAgICBDWDogXCJDaHJpc3RtYXMgSXNsYW5kXCIsXG4gICAgICBDWTogXCJDeXBydXNcIixcbiAgICAgIENaOiBcIkN6ZWNoaWFcIixcbiAgICAgIERFOiBcIkdlcm1hbnlcIixcbiAgICAgIERKOiBcIkRqaWJvdXRpXCIsXG4gICAgICBESzogXCJEZW5tYXJrXCIsXG4gICAgICBETTogXCJEb21pbmljYVwiLFxuICAgICAgRE86IFwiRG9taW5pY2FuIFJlcHVibGljXCIsXG4gICAgICBEWjogXCJBbGdlcmlhXCIsXG4gICAgICBFQzogXCJFY3VhZG9yXCIsXG4gICAgICBFRTogXCJFc3RvbmlhXCIsXG4gICAgICBFRzogXCJFZ3lwdFwiLFxuICAgICAgRUg6IFwiV2VzdGVybiBTYWhhcmFcIixcbiAgICAgIEVSOiBcIkVyaXRyZWFcIixcbiAgICAgIEVTOiBcIlNwYWluXCIsXG4gICAgICBFVDogXCJFdGhpb3BpYVwiLFxuICAgICAgRkk6IFwiRmlubGFuZFwiLFxuICAgICAgRko6IFwiRmlqaVwiLFxuICAgICAgRks6IFwiRmFsa2xhbmQgSXNsYW5kcyAoTWFsdmluYXMpXCIsXG4gICAgICBGTTogXCJNaWNyb25lc2lhIChGZWRlcmF0ZWQgU3RhdGVzIG9mKVwiLFxuICAgICAgRk86IFwiRmFyb2UgSXNsYW5kc1wiLFxuICAgICAgRlI6IFwiRnJhbmNlXCIsXG4gICAgICBHQTogXCJHYWJvblwiLFxuICAgICAgR0I6IFwiVW5pdGVkIEtpbmdkb20gb2YgR3JlYXQgQnJpdGFpbiBhbmQgTm9ydGhlcm4gSXJlbGFuZFwiLFxuICAgICAgR0Q6IFwiR3JlbmFkYVwiLFxuICAgICAgR0U6IFwiR2VvcmdpYVwiLFxuICAgICAgR0Y6IFwiRnJlbmNoIEd1aWFuYVwiLFxuICAgICAgR0c6IFwiR3Vlcm5zZXlcIixcbiAgICAgIEdIOiBcIkdoYW5hXCIsXG4gICAgICBHSTogXCJHaWJyYWx0YXJcIixcbiAgICAgIEdMOiBcIkdyZWVubGFuZFwiLFxuICAgICAgR006IFwiR2FtYmlhXCIsXG4gICAgICBHTjogXCJHdWluZWFcIixcbiAgICAgIEdQOiBcIkd1YWRlbG91cGVcIixcbiAgICAgIEdROiBcIkVxdWF0b3JpYWwgR3VpbmVhXCIsXG4gICAgICBHUjogXCJHcmVlY2VcIixcbiAgICAgIEdTOiBcIlNvdXRoIEdlb3JnaWEgYW5kIHRoZSBTb3V0aCBTYW5kd2ljaCBJc2xhbmRzXCIsXG4gICAgICBHVDogXCJHdWF0ZW1hbGFcIixcbiAgICAgIEdVOiBcIkd1YW1cIixcbiAgICAgIEdXOiBcIkd1aW5lYS1CaXNzYXVcIixcbiAgICAgIEdZOiBcIkd1eWFuYVwiLFxuICAgICAgSEs6IFwiSG9uZyBLb25nXCIsXG4gICAgICBITTogXCJIZWFyZCBJc2xhbmQgYW5kIE1jRG9uYWxkIElzbGFuZHNcIixcbiAgICAgIEhOOiBcIkhvbmR1cmFzXCIsXG4gICAgICBIUjogXCJDcm9hdGlhXCIsXG4gICAgICBIVDogXCJIYWl0aVwiLFxuICAgICAgSFU6IFwiSHVuZ2FyeVwiLFxuICAgICAgSUQ6IFwiSW5kb25lc2lhXCIsXG4gICAgICBJRTogXCJJcmVsYW5kXCIsXG4gICAgICBJTDogXCJJc3JhZWxcIixcbiAgICAgIElNOiBcIklzbGUgb2YgTWFuXCIsXG4gICAgICBJTjogXCJJbmRpYVwiLFxuICAgICAgSU86IFwiQnJpdGlzaCBJbmRpYW4gT2NlYW4gVGVycml0b3J5XCIsXG4gICAgICBJUTogXCJJcmFxXCIsXG4gICAgICBJUjogXCJJcmFuIChJc2xhbWljIFJlcHVibGljIG9mKVwiLFxuICAgICAgSVM6IFwiSWNlbGFuZFwiLFxuICAgICAgSVQ6IFwiSXRhbHlcIixcbiAgICAgIEpFOiBcIkplcnNleVwiLFxuICAgICAgSk06IFwiSmFtYWljYVwiLFxuICAgICAgSk86IFwiSm9yZGFuXCIsXG4gICAgICBKUDogXCJKYXBhblwiLFxuICAgICAgS0U6IFwiS2VueWFcIixcbiAgICAgIEtHOiBcIkt5cmd5enN0YW5cIixcbiAgICAgIEtIOiBcIkNhbWJvZGlhXCIsXG4gICAgICBLSTogXCJLaXJpYmF0aVwiLFxuICAgICAgS006IFwiQ29tb3Jvc1wiLFxuICAgICAgS046IFwiU2FpbnQgS2l0dHMgYW5kIE5ldmlzXCIsXG4gICAgICBLUDogXCJLb3JlYSAoRGVtb2NyYXRpYyBQZW9wbGUncyBSZXB1YmxpYyBvZikgXCIsXG4gICAgICBLUjogXCJLb3JlYSwgUmVwdWJsaWMgb2ZcIixcbiAgICAgIEtXOiBcIkt1d2FpdFwiLFxuICAgICAgS1k6IFwiQ2F5bWFuIElzbGFuZHNcIixcbiAgICAgIEtaOiBcIkthemFraHN0YW5cIixcbiAgICAgIExBOiBcIkxhbyBQZW9wbGUncyBEZW1vY3JhdGljIFJlcHVibGljXCIsXG4gICAgICBMQjogXCJMZWJhbm9uXCIsXG4gICAgICBMQzogXCJTYWludCBMdWNpYVwiLFxuICAgICAgTEk6IFwiTGllY2h0ZW5zdGVpblwiLFxuICAgICAgTEs6IFwiU3JpIExhbmthXCIsXG4gICAgICBMUjogXCJMaWJlcmlhXCIsXG4gICAgICBMUzogXCJMZXNvdGhvXCIsXG4gICAgICBMVDogXCJMaXRodWFuaWFcIixcbiAgICAgIExVOiBcIkx1eGVtYm91cmdcIixcbiAgICAgIExWOiBcIkxhdHZpYVwiLFxuICAgICAgTFk6IFwiTGlieWFcIixcbiAgICAgIE1BOiBcIk1vcm9jY29cIixcbiAgICAgIE1DOiBcIk1vbmFjb1wiLFxuICAgICAgTUQ6IFwiTW9sZG92YSwgUmVwdWJsaWMgb2ZcIixcbiAgICAgIE1FOiBcIk1vbnRlbmVncm9cIixcbiAgICAgIE1GOiBcIlNhaW50IE1hcnRpbiAoRnJlbmNoIHBhcnQpXCIsXG4gICAgICBNRzogXCJNYWRhZ2FzY2FyXCIsXG4gICAgICBNSDogXCJNYXJzaGFsbCBJc2xhbmRzXCIsXG4gICAgICBNSzogXCJOb3J0aCBNYWNlZG9uaWFcIixcbiAgICAgIE1MOiBcIk1hbGlcIixcbiAgICAgIE1NOiBcIk15YW5tYXJcIixcbiAgICAgIE1OOiBcIk1vbmdvbGlhXCIsXG4gICAgICBNTzogXCJNYWNhb1wiLFxuICAgICAgTVA6IFwiTm9ydGhlcm4gTWFyaWFuYSBJc2xhbmRzXCIsXG4gICAgICBNUTogXCJNYXJ0aW5pcXVlXCIsXG4gICAgICBNUjogXCJNYXVyaXRhbmlhXCIsXG4gICAgICBNUzogXCJNb250c2VycmF0XCIsXG4gICAgICBNVDogXCJNYWx0YVwiLFxuICAgICAgTVU6IFwiTWF1cml0aXVzXCIsXG4gICAgICBNVjogXCJNYWxkaXZlc1wiLFxuICAgICAgTVc6IFwiTWFsYXdpXCIsXG4gICAgICBNWDogXCJNZXhpY29cIixcbiAgICAgIE1ZOiBcIk1hbGF5c2lhXCIsXG4gICAgICBNWjogXCJNb3phbWJpcXVlXCIsXG4gICAgICBOQTogXCJOYW1pYmlhXCIsXG4gICAgICBOQzogXCJOZXcgQ2FsZWRvbmlhXCIsXG4gICAgICBORTogXCJOaWdlclwiLFxuICAgICAgTkY6IFwiTm9yZm9sayBJc2xhbmRcIixcbiAgICAgIE5HOiBcIk5pZ2VyaWFcIixcbiAgICAgIE5JOiBcIk5pY2FyYWd1YVwiLFxuICAgICAgTkw6IFwiTmV0aGVybGFuZHNcIixcbiAgICAgIE5POiBcIk5vcndheVwiLFxuICAgICAgTlA6IFwiTmVwYWxcIixcbiAgICAgIE5SOiBcIk5hdXJ1XCIsXG4gICAgICBOVTogXCJOaXVlXCIsXG4gICAgICBOWjogXCJOZXcgWmVhbGFuZFwiLFxuICAgICAgT006IFwiT21hblwiLFxuICAgICAgUEE6IFwiUGFuYW1hXCIsXG4gICAgICBQRTogXCJQZXJ1XCIsXG4gICAgICBQRjogXCJGcmVuY2ggUG9seW5lc2lhXCIsXG4gICAgICBQRzogXCJQYXB1YSBOZXcgR3VpbmVhXCIsXG4gICAgICBQSDogXCJQaGlsaXBwaW5lc1wiLFxuICAgICAgUEs6IFwiUGFraXN0YW5cIixcbiAgICAgIFBMOiBcIlBvbGFuZFwiLFxuICAgICAgUE06IFwiU2FpbnQgUGllcnJlIGFuZCBNaXF1ZWxvblwiLFxuICAgICAgUE46IFwiUGl0Y2Fpcm5cIixcbiAgICAgIFBSOiBcIlB1ZXJ0byBSaWNvXCIsXG4gICAgICBQUzogXCJQYWxlc3RpbmUsIFN0YXRlIG9mXCIsXG4gICAgICBQVDogXCJQb3J0dWdhbFwiLFxuICAgICAgUFc6IFwiUGFsYXVcIixcbiAgICAgIFBZOiBcIlBhcmFndWF5XCIsXG4gICAgICBRQTogXCJRYXRhclwiLFxuICAgICAgUkU6IFwiUlxceEU5dW5pb25cIixcbiAgICAgIFJPOiBcIlJvbWFuaWFcIixcbiAgICAgIFJTOiBcIlNlcmJpYVwiLFxuICAgICAgUlU6IFwiUnVzc2lhbiBGZWRlcmF0aW9uXCIsXG4gICAgICBSVzogXCJSd2FuZGFcIixcbiAgICAgIFNBOiBcIlNhdWRpIEFyYWJpYVwiLFxuICAgICAgU0I6IFwiU29sb21vbiBJc2xhbmRzXCIsXG4gICAgICBTQzogXCJTZXljaGVsbGVzXCIsXG4gICAgICBTRDogXCJTdWRhblwiLFxuICAgICAgU0U6IFwiU3dlZGVuXCIsXG4gICAgICBTRzogXCJTaW5nYXBvcmVcIixcbiAgICAgIFNIOiBcIlNhaW50IEhlbGVuYSwgQXNjZW5zaW9uIGFuZCBUcmlzdGFuIGRhIEN1bmhhXCIsXG4gICAgICBTSTogXCJTbG92ZW5pYVwiLFxuICAgICAgU0o6IFwiU3ZhbGJhcmQgYW5kIEphbiBNYXllblwiLFxuICAgICAgU0s6IFwiU2xvdmFraWFcIixcbiAgICAgIFNMOiBcIlNpZXJyYSBMZW9uZVwiLFxuICAgICAgU006IFwiU2FuIE1hcmlub1wiLFxuICAgICAgU046IFwiU2VuZWdhbFwiLFxuICAgICAgU086IFwiU29tYWxpYVwiLFxuICAgICAgU1I6IFwiU3VyaW5hbWVcIixcbiAgICAgIFNTOiBcIlNvdXRoIFN1ZGFuXCIsXG4gICAgICBTVDogXCJTYW8gVG9tZSBhbmQgUHJpbmNpcGVcIixcbiAgICAgIFNWOiBcIkVsIFNhbHZhZG9yXCIsXG4gICAgICBTWDogXCJTaW50IE1hYXJ0ZW4gKER1dGNoIHBhcnQpXCIsXG4gICAgICBTWTogXCJTeXJpYW4gQXJhYiBSZXB1YmxpY1wiLFxuICAgICAgU1o6IFwiRXN3YXRpbmlcIixcbiAgICAgIFRDOiBcIlR1cmtzIGFuZCBDYWljb3MgSXNsYW5kc1wiLFxuICAgICAgVEQ6IFwiQ2hhZFwiLFxuICAgICAgVEY6IFwiRnJlbmNoIFNvdXRoZXJuIFRlcnJpdG9yaWVzXCIsXG4gICAgICBURzogXCJUb2dvXCIsXG4gICAgICBUSDogXCJUaGFpbGFuZFwiLFxuICAgICAgVEo6IFwiVGFqaWtpc3RhblwiLFxuICAgICAgVEs6IFwiVG9rZWxhdVwiLFxuICAgICAgVEw6IFwiVGltb3ItTGVzdGVcIixcbiAgICAgIFRNOiBcIlR1cmttZW5pc3RhblwiLFxuICAgICAgVE46IFwiVHVuaXNpYVwiLFxuICAgICAgVE86IFwiVG9uZ2FcIixcbiAgICAgIFRSOiBcIlR1cmtleVwiLFxuICAgICAgVFQ6IFwiVHJpbmlkYWQgYW5kIFRvYmFnb1wiLFxuICAgICAgVFY6IFwiVHV2YWx1XCIsXG4gICAgICBUVzogXCJUYWl3YW4sIFByb3ZpbmNlIG9mIENoaW5hXCIsXG4gICAgICBUWjogXCJUYW56YW5pYSwgVW5pdGVkIFJlcHVibGljIG9mXCIsXG4gICAgICBVQTogXCJVa3JhaW5lXCIsXG4gICAgICBVRzogXCJVZ2FuZGFcIixcbiAgICAgIFVNOiBcIlVuaXRlZCBTdGF0ZXMgTWlub3IgT3V0bHlpbmcgSXNsYW5kc1wiLFxuICAgICAgVVM6IFwiVW5pdGVkIFN0YXRlcyBvZiBBbWVyaWNhXCIsXG4gICAgICBVWTogXCJVcnVndWF5XCIsXG4gICAgICBVWjogXCJVemJla2lzdGFuXCIsXG4gICAgICBWQTogXCJIb2x5IFNlZVwiLFxuICAgICAgVkM6IFwiU2FpbnQgVmluY2VudCBhbmQgdGhlIEdyZW5hZGluZXNcIixcbiAgICAgIFZFOiBcIlZlbmV6dWVsYSAoQm9saXZhcmlhbiBSZXB1YmxpYyBvZilcIixcbiAgICAgIFZHOiBcIlZpcmdpbiBJc2xhbmRzIChCcml0aXNoKVwiLFxuICAgICAgVkk6IFwiVmlyZ2luIElzbGFuZHMgKFUuUy4pXCIsXG4gICAgICBWTjogXCJWaWV0IE5hbVwiLFxuICAgICAgVlU6IFwiVmFudWF0dVwiLFxuICAgICAgV0Y6IFwiV2FsbGlzIGFuZCBGdXR1bmFcIixcbiAgICAgIFdTOiBcIlNhbW9hXCIsXG4gICAgICBYSzogXCJLb3Nvdm9cIixcbiAgICAgIFlFOiBcIlllbWVuXCIsXG4gICAgICBZVDogXCJNYXlvdHRlXCIsXG4gICAgICBaQTogXCJTb3V0aCBBZnJpY2FcIixcbiAgICAgIFpNOiBcIlphbWJpYVwiLFxuICAgICAgWlc6IFwiWmltYmFid2VcIlxuICAgIH07XG4gICAgZXhwb3J0cy5JU09fMzE2Nl9BTFBIQV8yID0gT2JqZWN0LmtleXMoZXhwb3J0cy5JU09fMzE2Nl9BTFBIQV8yX01BUFBJTkdTKTtcbiAgICBmdW5jdGlvbiBpc0lzbzMxNjZBbHBoYTJDb2RlMihpc28zMTY2QWxwaGEyQ291bnRyeUNvZGUpIHtcbiAgICAgIHJldHVybiBleHBvcnRzLklTT18zMTY2X0FMUEhBXzIuaW5kZXhPZihpc28zMTY2QWxwaGEyQ291bnRyeUNvZGUpICE9IC0xO1xuICAgIH1cbiAgICBleHBvcnRzLmlzSXNvMzE2NkFscGhhMkNvZGUgPSBpc0lzbzMxNjZBbHBoYTJDb2RlMjtcbiAgICBmdW5jdGlvbiBnZXRJc28zMTY2Q291bnRyeU5hbWUoaXNvMzE2NkFscGhhMkNvdW50cnlDb2RlKSB7XG4gICAgICBpZiAoaXNJc28zMTY2QWxwaGEyQ29kZTIoaXNvMzE2NkFscGhhMkNvdW50cnlDb2RlKSkge1xuICAgICAgICByZXR1cm4gZXhwb3J0cy5JU09fMzE2Nl9BTFBIQV8yX01BUFBJTkdTW2lzbzMxNjZBbHBoYTJDb3VudHJ5Q29kZV07XG4gICAgICB9XG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIH1cbiAgICBleHBvcnRzLmdldElzbzMxNjZDb3VudHJ5TmFtZSA9IGdldElzbzMxNjZDb3VudHJ5TmFtZTtcbiAgfVxufSk7XG52YXIgcmVxdWlyZV9oZXgyID0gX19jb21tb25KUyh7XG4gIFwibm9kZV9tb2R1bGVzL0BzdGFibGVsaWIvaGV4L2xpYi9oZXguanNcIihleHBvcnRzKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7dmFsdWU6IHRydWV9KTtcbiAgICBmdW5jdGlvbiBlbmNvZGVOaWJibGUoYikge1xuICAgICAgdmFyIHJlc3VsdCA9IGIgKyA0ODtcbiAgICAgIHJlc3VsdCArPSA5IC0gYiA+Pj4gOCAmIC00OCArIDY1IC0gMTA7XG4gICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShyZXN1bHQpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBlbmNvZGVOaWJibGVMb3dlcihiKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gYiArIDQ4O1xuICAgICAgcmVzdWx0ICs9IDkgLSBiID4+PiA4ICYgLTQ4ICsgOTcgLSAxMDtcbiAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKHJlc3VsdCk7XG4gICAgfVxuICAgIHZhciBJTlZBTElEX0hFWF9OSUJCTEUgPSAyNTY7XG4gICAgZnVuY3Rpb24gZGVjb2RlTmliYmxlKGMpIHtcbiAgICAgIHZhciByZXN1bHQgPSBJTlZBTElEX0hFWF9OSUJCTEU7XG4gICAgICByZXN1bHQgKz0gKDQ3IC0gYyAmIGMgLSA1OCkgPj4gOCAmIC1JTlZBTElEX0hFWF9OSUJCTEUgKyBjIC0gNDg7XG4gICAgICByZXN1bHQgKz0gKDY0IC0gYyAmIGMgLSA3MSkgPj4gOCAmIC1JTlZBTElEX0hFWF9OSUJCTEUgKyBjIC0gNjUgKyAxMDtcbiAgICAgIHJlc3VsdCArPSAoOTYgLSBjICYgYyAtIDEwMykgPj4gOCAmIC1JTlZBTElEX0hFWF9OSUJCTEUgKyBjIC0gOTcgKyAxMDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGVuY29kZShkYXRhLCBsb3dlckNhc2UpIHtcbiAgICAgIGlmIChsb3dlckNhc2UgPT09IHZvaWQgMCkge1xuICAgICAgICBsb3dlckNhc2UgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBlbmMgPSBsb3dlckNhc2UgPyBlbmNvZGVOaWJibGVMb3dlciA6IGVuY29kZU5pYmJsZTtcbiAgICAgIHZhciBzMiA9IFwiXCI7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgczIgKz0gZW5jKGRhdGFbaV0gPj4+IDQpO1xuICAgICAgICBzMiArPSBlbmMoZGF0YVtpXSAmIDE1KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzMjtcbiAgICB9XG4gICAgZXhwb3J0cy5lbmNvZGUgPSBlbmNvZGU7XG4gICAgZnVuY3Rpb24gZGVjb2RlKGhleCkge1xuICAgICAgaWYgKGhleC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KDApO1xuICAgICAgfVxuICAgICAgaWYgKGhleC5sZW5ndGggJSAyICE9PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImhleDogaW5wdXQgc3RyaW5nIG11c3QgYmUgZGl2aXNpYmxlIGJ5IHR3b1wiKTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBuZXcgVWludDhBcnJheShoZXgubGVuZ3RoIC8gMik7XG4gICAgICB2YXIgaGF2ZUJhZCA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhleC5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICB2YXIgdjAgPSBkZWNvZGVOaWJibGUoaGV4LmNoYXJDb2RlQXQoaSkpO1xuICAgICAgICB2YXIgdjEgPSBkZWNvZGVOaWJibGUoaGV4LmNoYXJDb2RlQXQoaSArIDEpKTtcbiAgICAgICAgcmVzdWx0W2kgLyAyXSA9IHYwIDw8IDQgfCB2MTtcbiAgICAgICAgaGF2ZUJhZCB8PSB2MCAmIElOVkFMSURfSEVYX05JQkJMRTtcbiAgICAgICAgaGF2ZUJhZCB8PSB2MSAmIElOVkFMSURfSEVYX05JQkJMRTtcbiAgICAgIH1cbiAgICAgIGlmIChoYXZlQmFkICE9PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImhleDogaW5jb3JyZWN0IGNoYXJhY3RlcnMgZm9yIGRlY29kaW5nXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgZXhwb3J0cy5kZWNvZGUgPSBkZWNvZGU7XG4gIH1cbn0pO1xudmFyIHJlcXVpcmVfYnJvd3NlciA9IF9fY29tbW9uSlMoe1xuICBcIm5vZGVfbW9kdWxlcy9Ac3RhYmxlbGliL3JhbmRvbS9saWIvc291cmNlL2Jyb3dzZXIuanNcIihleHBvcnRzKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7dmFsdWU6IHRydWV9KTtcbiAgICB2YXIgUVVPVEEgPSA2NTUzNjtcbiAgICB2YXIgQnJvd3NlclJhbmRvbVNvdXJjZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgZnVuY3Rpb24gQnJvd3NlclJhbmRvbVNvdXJjZTIoKSB7XG4gICAgICAgIHRoaXMuaXNBdmFpbGFibGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc0luc3RhbnRpYXRlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgYnJvd3NlckNyeXB0byA9IHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZi5jcnlwdG8gfHwgc2VsZi5tc0NyeXB0byA6IG51bGw7XG4gICAgICAgIGlmIChicm93c2VyQ3J5cHRvICYmIGJyb3dzZXJDcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgICAgICAgdGhpcy5fY3J5cHRvID0gYnJvd3NlckNyeXB0bztcbiAgICAgICAgICB0aGlzLmlzQXZhaWxhYmxlID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLmlzSW5zdGFudGlhdGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgQnJvd3NlclJhbmRvbVNvdXJjZTIucHJvdG90eXBlLnJhbmRvbUJ5dGVzID0gZnVuY3Rpb24obGVuZ3RoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc0F2YWlsYWJsZSB8fCAhdGhpcy5fY3J5cHRvKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQnJvd3NlciByYW5kb20gYnl0ZSBnZW5lcmF0b3IgaXMgbm90IGF2YWlsYWJsZS5cIik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG91dCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3V0Lmxlbmd0aDsgaSArPSBRVU9UQSkge1xuICAgICAgICAgIHRoaXMuX2NyeXB0by5nZXRSYW5kb21WYWx1ZXMob3V0LnN1YmFycmF5KGksIGkgKyBNYXRoLm1pbihvdXQubGVuZ3RoIC0gaSwgUVVPVEEpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICAgIH07XG4gICAgICByZXR1cm4gQnJvd3NlclJhbmRvbVNvdXJjZTI7XG4gICAgfSgpO1xuICAgIGV4cG9ydHMuQnJvd3NlclJhbmRvbVNvdXJjZSA9IEJyb3dzZXJSYW5kb21Tb3VyY2U7XG4gIH1cbn0pO1xudmFyIHJlcXVpcmVfd2lwZTMgPSBfX2NvbW1vbkpTKHtcbiAgXCJub2RlX21vZHVsZXMvQHN0YWJsZWxpYi93aXBlL2xpYi93aXBlLmpzXCIoZXhwb3J0cykge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge3ZhbHVlOiB0cnVlfSk7XG4gICAgZnVuY3Rpb24gd2lwZShhcnJheSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICBhcnJheVtpXSA9IDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuICAgIGV4cG9ydHMud2lwZSA9IHdpcGU7XG4gIH1cbn0pO1xudmFyIHJlcXVpcmVfY3J5cHRvID0gX19jb21tb25KUyh7XG4gIFwiKGRpc2FibGVkKTpjcnlwdG9cIigpIHtcbiAgfVxufSk7XG52YXIgcmVxdWlyZV9ub2RlID0gX19jb21tb25KUyh7XG4gIFwibm9kZV9tb2R1bGVzL0BzdGFibGVsaWIvcmFuZG9tL2xpYi9zb3VyY2Uvbm9kZS5qc1wiKGV4cG9ydHMpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHt2YWx1ZTogdHJ1ZX0pO1xuICAgIHZhciB3aXBlXzEgPSByZXF1aXJlX3dpcGUzKCk7XG4gICAgdmFyIE5vZGVSYW5kb21Tb3VyY2UgPSBmdW5jdGlvbigpIHtcbiAgICAgIGZ1bmN0aW9uIE5vZGVSYW5kb21Tb3VyY2UyKCkge1xuICAgICAgICB0aGlzLmlzQXZhaWxhYmxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNJbnN0YW50aWF0ZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKHR5cGVvZiBfX3JlcXVpcmUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICB2YXIgbm9kZUNyeXB0byA9IHJlcXVpcmVfY3J5cHRvKCk7XG4gICAgICAgICAgaWYgKG5vZGVDcnlwdG8gJiYgbm9kZUNyeXB0by5yYW5kb21CeXRlcykge1xuICAgICAgICAgICAgdGhpcy5fY3J5cHRvID0gbm9kZUNyeXB0bztcbiAgICAgICAgICAgIHRoaXMuaXNBdmFpbGFibGUgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5pc0luc3RhbnRpYXRlZCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBOb2RlUmFuZG9tU291cmNlMi5wcm90b3R5cGUucmFuZG9tQnl0ZXMgPSBmdW5jdGlvbihsZW5ndGgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzQXZhaWxhYmxlIHx8ICF0aGlzLl9jcnlwdG8pIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOb2RlLmpzIHJhbmRvbSBieXRlIGdlbmVyYXRvciBpcyBub3QgYXZhaWxhYmxlLlwiKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYnVmZmVyID0gdGhpcy5fY3J5cHRvLnJhbmRvbUJ5dGVzKGxlbmd0aCk7XG4gICAgICAgIGlmIChidWZmZXIubGVuZ3RoICE9PSBsZW5ndGgpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOb2RlUmFuZG9tU291cmNlOiBnb3QgZmV3ZXIgYnl0ZXMgdGhhbiByZXF1ZXN0ZWRcIik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG91dCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3V0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgb3V0W2ldID0gYnVmZmVyW2ldO1xuICAgICAgICB9XG4gICAgICAgIHdpcGVfMS53aXBlKGJ1ZmZlcik7XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIE5vZGVSYW5kb21Tb3VyY2UyO1xuICAgIH0oKTtcbiAgICBleHBvcnRzLk5vZGVSYW5kb21Tb3VyY2UgPSBOb2RlUmFuZG9tU291cmNlO1xuICB9XG59KTtcbnZhciByZXF1aXJlX3N5c3RlbSA9IF9fY29tbW9uSlMoe1xuICBcIm5vZGVfbW9kdWxlcy9Ac3RhYmxlbGliL3JhbmRvbS9saWIvc291cmNlL3N5c3RlbS5qc1wiKGV4cG9ydHMpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHt2YWx1ZTogdHJ1ZX0pO1xuICAgIHZhciBicm93c2VyXzEgPSByZXF1aXJlX2Jyb3dzZXIoKTtcbiAgICB2YXIgbm9kZV8xID0gcmVxdWlyZV9ub2RlKCk7XG4gICAgdmFyIFN5c3RlbVJhbmRvbVNvdXJjZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgZnVuY3Rpb24gU3lzdGVtUmFuZG9tU291cmNlMigpIHtcbiAgICAgICAgdGhpcy5pc0F2YWlsYWJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIlwiO1xuICAgICAgICB0aGlzLl9zb3VyY2UgPSBuZXcgYnJvd3Nlcl8xLkJyb3dzZXJSYW5kb21Tb3VyY2UoKTtcbiAgICAgICAgaWYgKHRoaXMuX3NvdXJjZS5pc0F2YWlsYWJsZSkge1xuICAgICAgICAgIHRoaXMuaXNBdmFpbGFibGUgPSB0cnVlO1xuICAgICAgICAgIHRoaXMubmFtZSA9IFwiQnJvd3NlclwiO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zb3VyY2UgPSBuZXcgbm9kZV8xLk5vZGVSYW5kb21Tb3VyY2UoKTtcbiAgICAgICAgaWYgKHRoaXMuX3NvdXJjZS5pc0F2YWlsYWJsZSkge1xuICAgICAgICAgIHRoaXMuaXNBdmFpbGFibGUgPSB0cnVlO1xuICAgICAgICAgIHRoaXMubmFtZSA9IFwiTm9kZVwiO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgU3lzdGVtUmFuZG9tU291cmNlMi5wcm90b3R5cGUucmFuZG9tQnl0ZXMgPSBmdW5jdGlvbihsZW5ndGgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzQXZhaWxhYmxlKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU3lzdGVtIHJhbmRvbSBieXRlIGdlbmVyYXRvciBpcyBub3QgYXZhaWxhYmxlLlwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fc291cmNlLnJhbmRvbUJ5dGVzKGxlbmd0aCk7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIFN5c3RlbVJhbmRvbVNvdXJjZTI7XG4gICAgfSgpO1xuICAgIGV4cG9ydHMuU3lzdGVtUmFuZG9tU291cmNlID0gU3lzdGVtUmFuZG9tU291cmNlO1xuICB9XG59KTtcbnZhciByZXF1aXJlX2ludDMgPSBfX2NvbW1vbkpTKHtcbiAgXCJub2RlX21vZHVsZXMvQHN0YWJsZWxpYi9pbnQvbGliL2ludC5qc1wiKGV4cG9ydHMpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHt2YWx1ZTogdHJ1ZX0pO1xuICAgIGZ1bmN0aW9uIGltdWxTaGltKGEsIGIpIHtcbiAgICAgIHZhciBhaCA9IGEgPj4+IDE2ICYgNjU1MzUsIGFsID0gYSAmIDY1NTM1O1xuICAgICAgdmFyIGJoID0gYiA+Pj4gMTYgJiA2NTUzNSwgYmwgPSBiICYgNjU1MzU7XG4gICAgICByZXR1cm4gYWwgKiBibCArIChhaCAqIGJsICsgYWwgKiBiaCA8PCAxNiA+Pj4gMCkgfCAwO1xuICAgIH1cbiAgICBleHBvcnRzLm11bCA9IE1hdGguaW11bCB8fCBpbXVsU2hpbTtcbiAgICBmdW5jdGlvbiBhZGQoYSwgYikge1xuICAgICAgcmV0dXJuIGEgKyBiIHwgMDtcbiAgICB9XG4gICAgZXhwb3J0cy5hZGQgPSBhZGQ7XG4gICAgZnVuY3Rpb24gc3ViKGEsIGIpIHtcbiAgICAgIHJldHVybiBhIC0gYiB8IDA7XG4gICAgfVxuICAgIGV4cG9ydHMuc3ViID0gc3ViO1xuICAgIGZ1bmN0aW9uIHJvdGwoeCwgbjIpIHtcbiAgICAgIHJldHVybiB4IDw8IG4yIHwgeCA+Pj4gMzIgLSBuMjtcbiAgICB9XG4gICAgZXhwb3J0cy5yb3RsID0gcm90bDtcbiAgICBmdW5jdGlvbiByb3RyKHgsIG4yKSB7XG4gICAgICByZXR1cm4geCA8PCAzMiAtIG4yIHwgeCA+Pj4gbjI7XG4gICAgfVxuICAgIGV4cG9ydHMucm90ciA9IHJvdHI7XG4gICAgZnVuY3Rpb24gaXNJbnRlZ2VyU2hpbShuMikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBuMiA9PT0gXCJudW1iZXJcIiAmJiBpc0Zpbml0ZShuMikgJiYgTWF0aC5mbG9vcihuMikgPT09IG4yO1xuICAgIH1cbiAgICBleHBvcnRzLmlzSW50ZWdlciA9IE51bWJlci5pc0ludGVnZXIgfHwgaXNJbnRlZ2VyU2hpbTtcbiAgICBleHBvcnRzLk1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuICAgIGV4cG9ydHMuaXNTYWZlSW50ZWdlciA9IGZ1bmN0aW9uKG4yKSB7XG4gICAgICByZXR1cm4gZXhwb3J0cy5pc0ludGVnZXIobjIpICYmIChuMiA+PSAtZXhwb3J0cy5NQVhfU0FGRV9JTlRFR0VSICYmIG4yIDw9IGV4cG9ydHMuTUFYX1NBRkVfSU5URUdFUik7XG4gICAgfTtcbiAgfVxufSk7XG52YXIgcmVxdWlyZV9iaW5hcnkzID0gX19jb21tb25KUyh7XG4gIFwibm9kZV9tb2R1bGVzL0BzdGFibGVsaWIvYmluYXJ5L2xpYi9iaW5hcnkuanNcIihleHBvcnRzKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7dmFsdWU6IHRydWV9KTtcbiAgICB2YXIgaW50XzEgPSByZXF1aXJlX2ludDMoKTtcbiAgICBmdW5jdGlvbiByZWFkSW50MTZCRShhcnJheSwgb2Zmc2V0Mikge1xuICAgICAgaWYgKG9mZnNldDIgPT09IHZvaWQgMCkge1xuICAgICAgICBvZmZzZXQyID0gMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAoYXJyYXlbb2Zmc2V0MiArIDBdIDw8IDggfCBhcnJheVtvZmZzZXQyICsgMV0pIDw8IDE2ID4+IDE2O1xuICAgIH1cbiAgICBleHBvcnRzLnJlYWRJbnQxNkJFID0gcmVhZEludDE2QkU7XG4gICAgZnVuY3Rpb24gcmVhZFVpbnQxNkJFKGFycmF5LCBvZmZzZXQyKSB7XG4gICAgICBpZiAob2Zmc2V0MiA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG9mZnNldDIgPSAwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChhcnJheVtvZmZzZXQyICsgMF0gPDwgOCB8IGFycmF5W29mZnNldDIgKyAxXSkgPj4+IDA7XG4gICAgfVxuICAgIGV4cG9ydHMucmVhZFVpbnQxNkJFID0gcmVhZFVpbnQxNkJFO1xuICAgIGZ1bmN0aW9uIHJlYWRJbnQxNkxFKGFycmF5LCBvZmZzZXQyKSB7XG4gICAgICBpZiAob2Zmc2V0MiA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG9mZnNldDIgPSAwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChhcnJheVtvZmZzZXQyICsgMV0gPDwgOCB8IGFycmF5W29mZnNldDJdKSA8PCAxNiA+PiAxNjtcbiAgICB9XG4gICAgZXhwb3J0cy5yZWFkSW50MTZMRSA9IHJlYWRJbnQxNkxFO1xuICAgIGZ1bmN0aW9uIHJlYWRVaW50MTZMRShhcnJheSwgb2Zmc2V0Mikge1xuICAgICAgaWYgKG9mZnNldDIgPT09IHZvaWQgMCkge1xuICAgICAgICBvZmZzZXQyID0gMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAoYXJyYXlbb2Zmc2V0MiArIDFdIDw8IDggfCBhcnJheVtvZmZzZXQyXSkgPj4+IDA7XG4gICAgfVxuICAgIGV4cG9ydHMucmVhZFVpbnQxNkxFID0gcmVhZFVpbnQxNkxFO1xuICAgIGZ1bmN0aW9uIHdyaXRlVWludDE2QkUodmFsdWUsIG91dCwgb2Zmc2V0Mikge1xuICAgICAgaWYgKG91dCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG91dCA9IG5ldyBVaW50OEFycmF5KDIpO1xuICAgICAgfVxuICAgICAgaWYgKG9mZnNldDIgPT09IHZvaWQgMCkge1xuICAgICAgICBvZmZzZXQyID0gMDtcbiAgICAgIH1cbiAgICAgIG91dFtvZmZzZXQyICsgMF0gPSB2YWx1ZSA+Pj4gODtcbiAgICAgIG91dFtvZmZzZXQyICsgMV0gPSB2YWx1ZSA+Pj4gMDtcbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIGV4cG9ydHMud3JpdGVVaW50MTZCRSA9IHdyaXRlVWludDE2QkU7XG4gICAgZXhwb3J0cy53cml0ZUludDE2QkUgPSB3cml0ZVVpbnQxNkJFO1xuICAgIGZ1bmN0aW9uIHdyaXRlVWludDE2TEUodmFsdWUsIG91dCwgb2Zmc2V0Mikge1xuICAgICAgaWYgKG91dCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG91dCA9IG5ldyBVaW50OEFycmF5KDIpO1xuICAgICAgfVxuICAgICAgaWYgKG9mZnNldDIgPT09IHZvaWQgMCkge1xuICAgICAgICBvZmZzZXQyID0gMDtcbiAgICAgIH1cbiAgICAgIG91dFtvZmZzZXQyICsgMF0gPSB2YWx1ZSA+Pj4gMDtcbiAgICAgIG91dFtvZmZzZXQyICsgMV0gPSB2YWx1ZSA+Pj4gODtcbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIGV4cG9ydHMud3JpdGVVaW50MTZMRSA9IHdyaXRlVWludDE2TEU7XG4gICAgZXhwb3J0cy53cml0ZUludDE2TEUgPSB3cml0ZVVpbnQxNkxFO1xuICAgIGZ1bmN0aW9uIHJlYWRJbnQzMkJFKGFycmF5LCBvZmZzZXQyKSB7XG4gICAgICBpZiAob2Zmc2V0MiA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG9mZnNldDIgPSAwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5W29mZnNldDJdIDw8IDI0IHwgYXJyYXlbb2Zmc2V0MiArIDFdIDw8IDE2IHwgYXJyYXlbb2Zmc2V0MiArIDJdIDw8IDggfCBhcnJheVtvZmZzZXQyICsgM107XG4gICAgfVxuICAgIGV4cG9ydHMucmVhZEludDMyQkUgPSByZWFkSW50MzJCRTtcbiAgICBmdW5jdGlvbiByZWFkVWludDMyQkUoYXJyYXksIG9mZnNldDIpIHtcbiAgICAgIGlmIChvZmZzZXQyID09PSB2b2lkIDApIHtcbiAgICAgICAgb2Zmc2V0MiA9IDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gKGFycmF5W29mZnNldDJdIDw8IDI0IHwgYXJyYXlbb2Zmc2V0MiArIDFdIDw8IDE2IHwgYXJyYXlbb2Zmc2V0MiArIDJdIDw8IDggfCBhcnJheVtvZmZzZXQyICsgM10pID4+PiAwO1xuICAgIH1cbiAgICBleHBvcnRzLnJlYWRVaW50MzJCRSA9IHJlYWRVaW50MzJCRTtcbiAgICBmdW5jdGlvbiByZWFkSW50MzJMRShhcnJheSwgb2Zmc2V0Mikge1xuICAgICAgaWYgKG9mZnNldDIgPT09IHZvaWQgMCkge1xuICAgICAgICBvZmZzZXQyID0gMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheVtvZmZzZXQyICsgM10gPDwgMjQgfCBhcnJheVtvZmZzZXQyICsgMl0gPDwgMTYgfCBhcnJheVtvZmZzZXQyICsgMV0gPDwgOCB8IGFycmF5W29mZnNldDJdO1xuICAgIH1cbiAgICBleHBvcnRzLnJlYWRJbnQzMkxFID0gcmVhZEludDMyTEU7XG4gICAgZnVuY3Rpb24gcmVhZFVpbnQzMkxFKGFycmF5LCBvZmZzZXQyKSB7XG4gICAgICBpZiAob2Zmc2V0MiA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG9mZnNldDIgPSAwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChhcnJheVtvZmZzZXQyICsgM10gPDwgMjQgfCBhcnJheVtvZmZzZXQyICsgMl0gPDwgMTYgfCBhcnJheVtvZmZzZXQyICsgMV0gPDwgOCB8IGFycmF5W29mZnNldDJdKSA+Pj4gMDtcbiAgICB9XG4gICAgZXhwb3J0cy5yZWFkVWludDMyTEUgPSByZWFkVWludDMyTEU7XG4gICAgZnVuY3Rpb24gd3JpdGVVaW50MzJCRSh2YWx1ZSwgb3V0LCBvZmZzZXQyKSB7XG4gICAgICBpZiAob3V0ID09PSB2b2lkIDApIHtcbiAgICAgICAgb3V0ID0gbmV3IFVpbnQ4QXJyYXkoNCk7XG4gICAgICB9XG4gICAgICBpZiAob2Zmc2V0MiA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG9mZnNldDIgPSAwO1xuICAgICAgfVxuICAgICAgb3V0W29mZnNldDIgKyAwXSA9IHZhbHVlID4+PiAyNDtcbiAgICAgIG91dFtvZmZzZXQyICsgMV0gPSB2YWx1ZSA+Pj4gMTY7XG4gICAgICBvdXRbb2Zmc2V0MiArIDJdID0gdmFsdWUgPj4+IDg7XG4gICAgICBvdXRbb2Zmc2V0MiArIDNdID0gdmFsdWUgPj4+IDA7XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICBleHBvcnRzLndyaXRlVWludDMyQkUgPSB3cml0ZVVpbnQzMkJFO1xuICAgIGV4cG9ydHMud3JpdGVJbnQzMkJFID0gd3JpdGVVaW50MzJCRTtcbiAgICBmdW5jdGlvbiB3cml0ZVVpbnQzMkxFKHZhbHVlLCBvdXQsIG9mZnNldDIpIHtcbiAgICAgIGlmIChvdXQgPT09IHZvaWQgMCkge1xuICAgICAgICBvdXQgPSBuZXcgVWludDhBcnJheSg0KTtcbiAgICAgIH1cbiAgICAgIGlmIChvZmZzZXQyID09PSB2b2lkIDApIHtcbiAgICAgICAgb2Zmc2V0MiA9IDA7XG4gICAgICB9XG4gICAgICBvdXRbb2Zmc2V0MiArIDBdID0gdmFsdWUgPj4+IDA7XG4gICAgICBvdXRbb2Zmc2V0MiArIDFdID0gdmFsdWUgPj4+IDg7XG4gICAgICBvdXRbb2Zmc2V0MiArIDJdID0gdmFsdWUgPj4+IDE2O1xuICAgICAgb3V0W29mZnNldDIgKyAzXSA9IHZhbHVlID4+PiAyNDtcbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIGV4cG9ydHMud3JpdGVVaW50MzJMRSA9IHdyaXRlVWludDMyTEU7XG4gICAgZXhwb3J0cy53cml0ZUludDMyTEUgPSB3cml0ZVVpbnQzMkxFO1xuICAgIGZ1bmN0aW9uIHJlYWRJbnQ2NEJFKGFycmF5LCBvZmZzZXQyKSB7XG4gICAgICBpZiAob2Zmc2V0MiA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG9mZnNldDIgPSAwO1xuICAgICAgfVxuICAgICAgdmFyIGhpID0gcmVhZEludDMyQkUoYXJyYXksIG9mZnNldDIpO1xuICAgICAgdmFyIGxvID0gcmVhZEludDMyQkUoYXJyYXksIG9mZnNldDIgKyA0KTtcbiAgICAgIHJldHVybiBoaSAqIDQyOTQ5NjcyOTYgKyBsbyAtIChsbyA+PiAzMSkgKiA0Mjk0OTY3Mjk2O1xuICAgIH1cbiAgICBleHBvcnRzLnJlYWRJbnQ2NEJFID0gcmVhZEludDY0QkU7XG4gICAgZnVuY3Rpb24gcmVhZFVpbnQ2NEJFKGFycmF5LCBvZmZzZXQyKSB7XG4gICAgICBpZiAob2Zmc2V0MiA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG9mZnNldDIgPSAwO1xuICAgICAgfVxuICAgICAgdmFyIGhpID0gcmVhZFVpbnQzMkJFKGFycmF5LCBvZmZzZXQyKTtcbiAgICAgIHZhciBsbyA9IHJlYWRVaW50MzJCRShhcnJheSwgb2Zmc2V0MiArIDQpO1xuICAgICAgcmV0dXJuIGhpICogNDI5NDk2NzI5NiArIGxvO1xuICAgIH1cbiAgICBleHBvcnRzLnJlYWRVaW50NjRCRSA9IHJlYWRVaW50NjRCRTtcbiAgICBmdW5jdGlvbiByZWFkSW50NjRMRShhcnJheSwgb2Zmc2V0Mikge1xuICAgICAgaWYgKG9mZnNldDIgPT09IHZvaWQgMCkge1xuICAgICAgICBvZmZzZXQyID0gMDtcbiAgICAgIH1cbiAgICAgIHZhciBsbyA9IHJlYWRJbnQzMkxFKGFycmF5LCBvZmZzZXQyKTtcbiAgICAgIHZhciBoaSA9IHJlYWRJbnQzMkxFKGFycmF5LCBvZmZzZXQyICsgNCk7XG4gICAgICByZXR1cm4gaGkgKiA0Mjk0OTY3Mjk2ICsgbG8gLSAobG8gPj4gMzEpICogNDI5NDk2NzI5NjtcbiAgICB9XG4gICAgZXhwb3J0cy5yZWFkSW50NjRMRSA9IHJlYWRJbnQ2NExFO1xuICAgIGZ1bmN0aW9uIHJlYWRVaW50NjRMRShhcnJheSwgb2Zmc2V0Mikge1xuICAgICAgaWYgKG9mZnNldDIgPT09IHZvaWQgMCkge1xuICAgICAgICBvZmZzZXQyID0gMDtcbiAgICAgIH1cbiAgICAgIHZhciBsbyA9IHJlYWRVaW50MzJMRShhcnJheSwgb2Zmc2V0Mik7XG4gICAgICB2YXIgaGkgPSByZWFkVWludDMyTEUoYXJyYXksIG9mZnNldDIgKyA0KTtcbiAgICAgIHJldHVybiBoaSAqIDQyOTQ5NjcyOTYgKyBsbztcbiAgICB9XG4gICAgZXhwb3J0cy5yZWFkVWludDY0TEUgPSByZWFkVWludDY0TEU7XG4gICAgZnVuY3Rpb24gd3JpdGVVaW50NjRCRSh2YWx1ZSwgb3V0LCBvZmZzZXQyKSB7XG4gICAgICBpZiAob3V0ID09PSB2b2lkIDApIHtcbiAgICAgICAgb3V0ID0gbmV3IFVpbnQ4QXJyYXkoOCk7XG4gICAgICB9XG4gICAgICBpZiAob2Zmc2V0MiA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG9mZnNldDIgPSAwO1xuICAgICAgfVxuICAgICAgd3JpdGVVaW50MzJCRSh2YWx1ZSAvIDQyOTQ5NjcyOTYgPj4+IDAsIG91dCwgb2Zmc2V0Mik7XG4gICAgICB3cml0ZVVpbnQzMkJFKHZhbHVlID4+PiAwLCBvdXQsIG9mZnNldDIgKyA0KTtcbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIGV4cG9ydHMud3JpdGVVaW50NjRCRSA9IHdyaXRlVWludDY0QkU7XG4gICAgZXhwb3J0cy53cml0ZUludDY0QkUgPSB3cml0ZVVpbnQ2NEJFO1xuICAgIGZ1bmN0aW9uIHdyaXRlVWludDY0TEUodmFsdWUsIG91dCwgb2Zmc2V0Mikge1xuICAgICAgaWYgKG91dCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG91dCA9IG5ldyBVaW50OEFycmF5KDgpO1xuICAgICAgfVxuICAgICAgaWYgKG9mZnNldDIgPT09IHZvaWQgMCkge1xuICAgICAgICBvZmZzZXQyID0gMDtcbiAgICAgIH1cbiAgICAgIHdyaXRlVWludDMyTEUodmFsdWUgPj4+IDAsIG91dCwgb2Zmc2V0Mik7XG4gICAgICB3cml0ZVVpbnQzMkxFKHZhbHVlIC8gNDI5NDk2NzI5NiA+Pj4gMCwgb3V0LCBvZmZzZXQyICsgNCk7XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICBleHBvcnRzLndyaXRlVWludDY0TEUgPSB3cml0ZVVpbnQ2NExFO1xuICAgIGV4cG9ydHMud3JpdGVJbnQ2NExFID0gd3JpdGVVaW50NjRMRTtcbiAgICBmdW5jdGlvbiByZWFkVWludEJFKGJpdExlbmd0aCwgYXJyYXksIG9mZnNldDIpIHtcbiAgICAgIGlmIChvZmZzZXQyID09PSB2b2lkIDApIHtcbiAgICAgICAgb2Zmc2V0MiA9IDA7XG4gICAgICB9XG4gICAgICBpZiAoYml0TGVuZ3RoICUgOCAhPT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJyZWFkVWludEJFIHN1cHBvcnRzIG9ubHkgYml0TGVuZ3RocyBkaXZpc2libGUgYnkgOFwiKTtcbiAgICAgIH1cbiAgICAgIGlmIChiaXRMZW5ndGggLyA4ID4gYXJyYXkubGVuZ3RoIC0gb2Zmc2V0Mikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJyZWFkVWludEJFOiBhcnJheSBpcyB0b28gc2hvcnQgZm9yIHRoZSBnaXZlbiBiaXRMZW5ndGhcIik7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gMDtcbiAgICAgIHZhciBtdWwgPSAxO1xuICAgICAgZm9yICh2YXIgaSA9IGJpdExlbmd0aCAvIDggKyBvZmZzZXQyIC0gMTsgaSA+PSBvZmZzZXQyOyBpLS0pIHtcbiAgICAgICAgcmVzdWx0ICs9IGFycmF5W2ldICogbXVsO1xuICAgICAgICBtdWwgKj0gMjU2O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgZXhwb3J0cy5yZWFkVWludEJFID0gcmVhZFVpbnRCRTtcbiAgICBmdW5jdGlvbiByZWFkVWludExFKGJpdExlbmd0aCwgYXJyYXksIG9mZnNldDIpIHtcbiAgICAgIGlmIChvZmZzZXQyID09PSB2b2lkIDApIHtcbiAgICAgICAgb2Zmc2V0MiA9IDA7XG4gICAgICB9XG4gICAgICBpZiAoYml0TGVuZ3RoICUgOCAhPT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJyZWFkVWludExFIHN1cHBvcnRzIG9ubHkgYml0TGVuZ3RocyBkaXZpc2libGUgYnkgOFwiKTtcbiAgICAgIH1cbiAgICAgIGlmIChiaXRMZW5ndGggLyA4ID4gYXJyYXkubGVuZ3RoIC0gb2Zmc2V0Mikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJyZWFkVWludExFOiBhcnJheSBpcyB0b28gc2hvcnQgZm9yIHRoZSBnaXZlbiBiaXRMZW5ndGhcIik7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gMDtcbiAgICAgIHZhciBtdWwgPSAxO1xuICAgICAgZm9yICh2YXIgaSA9IG9mZnNldDI7IGkgPCBvZmZzZXQyICsgYml0TGVuZ3RoIC8gODsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCArPSBhcnJheVtpXSAqIG11bDtcbiAgICAgICAgbXVsICo9IDI1NjtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGV4cG9ydHMucmVhZFVpbnRMRSA9IHJlYWRVaW50TEU7XG4gICAgZnVuY3Rpb24gd3JpdGVVaW50QkUoYml0TGVuZ3RoLCB2YWx1ZSwgb3V0LCBvZmZzZXQyKSB7XG4gICAgICBpZiAob3V0ID09PSB2b2lkIDApIHtcbiAgICAgICAgb3V0ID0gbmV3IFVpbnQ4QXJyYXkoYml0TGVuZ3RoIC8gOCk7XG4gICAgICB9XG4gICAgICBpZiAob2Zmc2V0MiA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG9mZnNldDIgPSAwO1xuICAgICAgfVxuICAgICAgaWYgKGJpdExlbmd0aCAlIDggIT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwid3JpdGVVaW50QkUgc3VwcG9ydHMgb25seSBiaXRMZW5ndGhzIGRpdmlzaWJsZSBieSA4XCIpO1xuICAgICAgfVxuICAgICAgaWYgKCFpbnRfMS5pc1NhZmVJbnRlZ2VyKHZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ3cml0ZVVpbnRCRSB2YWx1ZSBtdXN0IGJlIGFuIGludGVnZXJcIik7XG4gICAgICB9XG4gICAgICB2YXIgZGl2ID0gMTtcbiAgICAgIGZvciAodmFyIGkgPSBiaXRMZW5ndGggLyA4ICsgb2Zmc2V0MiAtIDE7IGkgPj0gb2Zmc2V0MjsgaS0tKSB7XG4gICAgICAgIG91dFtpXSA9IHZhbHVlIC8gZGl2ICYgMjU1O1xuICAgICAgICBkaXYgKj0gMjU2O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG4gICAgZXhwb3J0cy53cml0ZVVpbnRCRSA9IHdyaXRlVWludEJFO1xuICAgIGZ1bmN0aW9uIHdyaXRlVWludExFKGJpdExlbmd0aCwgdmFsdWUsIG91dCwgb2Zmc2V0Mikge1xuICAgICAgaWYgKG91dCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG91dCA9IG5ldyBVaW50OEFycmF5KGJpdExlbmd0aCAvIDgpO1xuICAgICAgfVxuICAgICAgaWYgKG9mZnNldDIgPT09IHZvaWQgMCkge1xuICAgICAgICBvZmZzZXQyID0gMDtcbiAgICAgIH1cbiAgICAgIGlmIChiaXRMZW5ndGggJSA4ICE9PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIndyaXRlVWludExFIHN1cHBvcnRzIG9ubHkgYml0TGVuZ3RocyBkaXZpc2libGUgYnkgOFwiKTtcbiAgICAgIH1cbiAgICAgIGlmICghaW50XzEuaXNTYWZlSW50ZWdlcih2YWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwid3JpdGVVaW50TEUgdmFsdWUgbXVzdCBiZSBhbiBpbnRlZ2VyXCIpO1xuICAgICAgfVxuICAgICAgdmFyIGRpdiA9IDE7XG4gICAgICBmb3IgKHZhciBpID0gb2Zmc2V0MjsgaSA8IG9mZnNldDIgKyBiaXRMZW5ndGggLyA4OyBpKyspIHtcbiAgICAgICAgb3V0W2ldID0gdmFsdWUgLyBkaXYgJiAyNTU7XG4gICAgICAgIGRpdiAqPSAyNTY7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICBleHBvcnRzLndyaXRlVWludExFID0gd3JpdGVVaW50TEU7XG4gICAgZnVuY3Rpb24gcmVhZEZsb2F0MzJCRShhcnJheSwgb2Zmc2V0Mikge1xuICAgICAgaWYgKG9mZnNldDIgPT09IHZvaWQgMCkge1xuICAgICAgICBvZmZzZXQyID0gMDtcbiAgICAgIH1cbiAgICAgIHZhciB2aWV3ID0gbmV3IERhdGFWaWV3KGFycmF5LmJ1ZmZlciwgYXJyYXkuYnl0ZU9mZnNldCwgYXJyYXkuYnl0ZUxlbmd0aCk7XG4gICAgICByZXR1cm4gdmlldy5nZXRGbG9hdDMyKG9mZnNldDIpO1xuICAgIH1cbiAgICBleHBvcnRzLnJlYWRGbG9hdDMyQkUgPSByZWFkRmxvYXQzMkJFO1xuICAgIGZ1bmN0aW9uIHJlYWRGbG9hdDMyTEUoYXJyYXksIG9mZnNldDIpIHtcbiAgICAgIGlmIChvZmZzZXQyID09PSB2b2lkIDApIHtcbiAgICAgICAgb2Zmc2V0MiA9IDA7XG4gICAgICB9XG4gICAgICB2YXIgdmlldyA9IG5ldyBEYXRhVmlldyhhcnJheS5idWZmZXIsIGFycmF5LmJ5dGVPZmZzZXQsIGFycmF5LmJ5dGVMZW5ndGgpO1xuICAgICAgcmV0dXJuIHZpZXcuZ2V0RmxvYXQzMihvZmZzZXQyLCB0cnVlKTtcbiAgICB9XG4gICAgZXhwb3J0cy5yZWFkRmxvYXQzMkxFID0gcmVhZEZsb2F0MzJMRTtcbiAgICBmdW5jdGlvbiByZWFkRmxvYXQ2NEJFKGFycmF5LCBvZmZzZXQyKSB7XG4gICAgICBpZiAob2Zmc2V0MiA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG9mZnNldDIgPSAwO1xuICAgICAgfVxuICAgICAgdmFyIHZpZXcgPSBuZXcgRGF0YVZpZXcoYXJyYXkuYnVmZmVyLCBhcnJheS5ieXRlT2Zmc2V0LCBhcnJheS5ieXRlTGVuZ3RoKTtcbiAgICAgIHJldHVybiB2aWV3LmdldEZsb2F0NjQob2Zmc2V0Mik7XG4gICAgfVxuICAgIGV4cG9ydHMucmVhZEZsb2F0NjRCRSA9IHJlYWRGbG9hdDY0QkU7XG4gICAgZnVuY3Rpb24gcmVhZEZsb2F0NjRMRShhcnJheSwgb2Zmc2V0Mikge1xuICAgICAgaWYgKG9mZnNldDIgPT09IHZvaWQgMCkge1xuICAgICAgICBvZmZzZXQyID0gMDtcbiAgICAgIH1cbiAgICAgIHZhciB2aWV3ID0gbmV3IERhdGFWaWV3KGFycmF5LmJ1ZmZlciwgYXJyYXkuYnl0ZU9mZnNldCwgYXJyYXkuYnl0ZUxlbmd0aCk7XG4gICAgICByZXR1cm4gdmlldy5nZXRGbG9hdDY0KG9mZnNldDIsIHRydWUpO1xuICAgIH1cbiAgICBleHBvcnRzLnJlYWRGbG9hdDY0TEUgPSByZWFkRmxvYXQ2NExFO1xuICAgIGZ1bmN0aW9uIHdyaXRlRmxvYXQzMkJFKHZhbHVlLCBvdXQsIG9mZnNldDIpIHtcbiAgICAgIGlmIChvdXQgPT09IHZvaWQgMCkge1xuICAgICAgICBvdXQgPSBuZXcgVWludDhBcnJheSg0KTtcbiAgICAgIH1cbiAgICAgIGlmIChvZmZzZXQyID09PSB2b2lkIDApIHtcbiAgICAgICAgb2Zmc2V0MiA9IDA7XG4gICAgICB9XG4gICAgICB2YXIgdmlldyA9IG5ldyBEYXRhVmlldyhvdXQuYnVmZmVyLCBvdXQuYnl0ZU9mZnNldCwgb3V0LmJ5dGVMZW5ndGgpO1xuICAgICAgdmlldy5zZXRGbG9hdDMyKG9mZnNldDIsIHZhbHVlKTtcbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIGV4cG9ydHMud3JpdGVGbG9hdDMyQkUgPSB3cml0ZUZsb2F0MzJCRTtcbiAgICBmdW5jdGlvbiB3cml0ZUZsb2F0MzJMRSh2YWx1ZSwgb3V0LCBvZmZzZXQyKSB7XG4gICAgICBpZiAob3V0ID09PSB2b2lkIDApIHtcbiAgICAgICAgb3V0ID0gbmV3IFVpbnQ4QXJyYXkoNCk7XG4gICAgICB9XG4gICAgICBpZiAob2Zmc2V0MiA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG9mZnNldDIgPSAwO1xuICAgICAgfVxuICAgICAgdmFyIHZpZXcgPSBuZXcgRGF0YVZpZXcob3V0LmJ1ZmZlciwgb3V0LmJ5dGVPZmZzZXQsIG91dC5ieXRlTGVuZ3RoKTtcbiAgICAgIHZpZXcuc2V0RmxvYXQzMihvZmZzZXQyLCB2YWx1ZSwgdHJ1ZSk7XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICBleHBvcnRzLndyaXRlRmxvYXQzMkxFID0gd3JpdGVGbG9hdDMyTEU7XG4gICAgZnVuY3Rpb24gd3JpdGVGbG9hdDY0QkUodmFsdWUsIG91dCwgb2Zmc2V0Mikge1xuICAgICAgaWYgKG91dCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG91dCA9IG5ldyBVaW50OEFycmF5KDgpO1xuICAgICAgfVxuICAgICAgaWYgKG9mZnNldDIgPT09IHZvaWQgMCkge1xuICAgICAgICBvZmZzZXQyID0gMDtcbiAgICAgIH1cbiAgICAgIHZhciB2aWV3ID0gbmV3IERhdGFWaWV3KG91dC5idWZmZXIsIG91dC5ieXRlT2Zmc2V0LCBvdXQuYnl0ZUxlbmd0aCk7XG4gICAgICB2aWV3LnNldEZsb2F0NjQob2Zmc2V0MiwgdmFsdWUpO1xuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG4gICAgZXhwb3J0cy53cml0ZUZsb2F0NjRCRSA9IHdyaXRlRmxvYXQ2NEJFO1xuICAgIGZ1bmN0aW9uIHdyaXRlRmxvYXQ2NExFKHZhbHVlLCBvdXQsIG9mZnNldDIpIHtcbiAgICAgIGlmIChvdXQgPT09IHZvaWQgMCkge1xuICAgICAgICBvdXQgPSBuZXcgVWludDhBcnJheSg4KTtcbiAgICAgIH1cbiAgICAgIGlmIChvZmZzZXQyID09PSB2b2lkIDApIHtcbiAgICAgICAgb2Zmc2V0MiA9IDA7XG4gICAgICB9XG4gICAgICB2YXIgdmlldyA9IG5ldyBEYXRhVmlldyhvdXQuYnVmZmVyLCBvdXQuYnl0ZU9mZnNldCwgb3V0LmJ5dGVMZW5ndGgpO1xuICAgICAgdmlldy5zZXRGbG9hdDY0KG9mZnNldDIsIHZhbHVlLCB0cnVlKTtcbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIGV4cG9ydHMud3JpdGVGbG9hdDY0TEUgPSB3cml0ZUZsb2F0NjRMRTtcbiAgfVxufSk7XG52YXIgcmVxdWlyZV9yYW5kb20gPSBfX2NvbW1vbkpTKHtcbiAgXCJub2RlX21vZHVsZXMvQHN0YWJsZWxpYi9yYW5kb20vbGliL3JhbmRvbS5qc1wiKGV4cG9ydHMpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHt2YWx1ZTogdHJ1ZX0pO1xuICAgIHZhciBzeXN0ZW1fMSA9IHJlcXVpcmVfc3lzdGVtKCk7XG4gICAgdmFyIGJpbmFyeV8xID0gcmVxdWlyZV9iaW5hcnkzKCk7XG4gICAgdmFyIHdpcGVfMSA9IHJlcXVpcmVfd2lwZTMoKTtcbiAgICBleHBvcnRzLmRlZmF1bHRSYW5kb21Tb3VyY2UgPSBuZXcgc3lzdGVtXzEuU3lzdGVtUmFuZG9tU291cmNlKCk7XG4gICAgZnVuY3Rpb24gcmFuZG9tQnl0ZXMobGVuZ3RoLCBwcm5nKSB7XG4gICAgICBpZiAocHJuZyA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHBybmcgPSBleHBvcnRzLmRlZmF1bHRSYW5kb21Tb3VyY2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJuZy5yYW5kb21CeXRlcyhsZW5ndGgpO1xuICAgIH1cbiAgICBleHBvcnRzLnJhbmRvbUJ5dGVzID0gcmFuZG9tQnl0ZXM7XG4gICAgZnVuY3Rpb24gcmFuZG9tVWludDMyKHBybmcpIHtcbiAgICAgIGlmIChwcm5nID09PSB2b2lkIDApIHtcbiAgICAgICAgcHJuZyA9IGV4cG9ydHMuZGVmYXVsdFJhbmRvbVNvdXJjZTtcbiAgICAgIH1cbiAgICAgIHZhciBidWYgPSByYW5kb21CeXRlcyg0LCBwcm5nKTtcbiAgICAgIHZhciByZXN1bHQgPSBiaW5hcnlfMS5yZWFkVWludDMyTEUoYnVmKTtcbiAgICAgIHdpcGVfMS53aXBlKGJ1Zik7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBleHBvcnRzLnJhbmRvbVVpbnQzMiA9IHJhbmRvbVVpbnQzMjtcbiAgICB2YXIgQUxQSEFOVU1FUklDID0gXCIwMTIzNDU2Nzg5QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5elwiO1xuICAgIGZ1bmN0aW9uIHJhbmRvbVN0cmluZyhsZW5ndGgsIGNoYXJzZXQsIHBybmcpIHtcbiAgICAgIGlmIChjaGFyc2V0ID09PSB2b2lkIDApIHtcbiAgICAgICAgY2hhcnNldCA9IEFMUEhBTlVNRVJJQztcbiAgICAgIH1cbiAgICAgIGlmIChwcm5nID09PSB2b2lkIDApIHtcbiAgICAgICAgcHJuZyA9IGV4cG9ydHMuZGVmYXVsdFJhbmRvbVNvdXJjZTtcbiAgICAgIH1cbiAgICAgIGlmIChjaGFyc2V0Lmxlbmd0aCA8IDIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmFuZG9tU3RyaW5nIGNoYXJzZXQgaXMgdG9vIHNob3J0XCIpO1xuICAgICAgfVxuICAgICAgaWYgKGNoYXJzZXQubGVuZ3RoID4gMjU2KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcInJhbmRvbVN0cmluZyBjaGFyc2V0IGlzIHRvbyBsb25nXCIpO1xuICAgICAgfVxuICAgICAgdmFyIG91dCA9IFwiXCI7XG4gICAgICB2YXIgY2hhcnNMZW4gPSBjaGFyc2V0Lmxlbmd0aDtcbiAgICAgIHZhciBtYXhCeXRlID0gMjU2IC0gMjU2ICUgY2hhcnNMZW47XG4gICAgICB3aGlsZSAobGVuZ3RoID4gMCkge1xuICAgICAgICB2YXIgYnVmID0gcmFuZG9tQnl0ZXMoTWF0aC5jZWlsKGxlbmd0aCAqIDI1NiAvIG1heEJ5dGUpLCBwcm5nKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBidWYubGVuZ3RoICYmIGxlbmd0aCA+IDA7IGkrKykge1xuICAgICAgICAgIHZhciByYW5kb21CeXRlID0gYnVmW2ldO1xuICAgICAgICAgIGlmIChyYW5kb21CeXRlIDwgbWF4Qnl0ZSkge1xuICAgICAgICAgICAgb3V0ICs9IGNoYXJzZXQuY2hhckF0KHJhbmRvbUJ5dGUgJSBjaGFyc0xlbik7XG4gICAgICAgICAgICBsZW5ndGgtLTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgd2lwZV8xLndpcGUoYnVmKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIGV4cG9ydHMucmFuZG9tU3RyaW5nID0gcmFuZG9tU3RyaW5nO1xuICAgIGZ1bmN0aW9uIHJhbmRvbVN0cmluZ0ZvckVudHJvcHkoYml0cywgY2hhcnNldCwgcHJuZykge1xuICAgICAgaWYgKGNoYXJzZXQgPT09IHZvaWQgMCkge1xuICAgICAgICBjaGFyc2V0ID0gQUxQSEFOVU1FUklDO1xuICAgICAgfVxuICAgICAgaWYgKHBybmcgPT09IHZvaWQgMCkge1xuICAgICAgICBwcm5nID0gZXhwb3J0cy5kZWZhdWx0UmFuZG9tU291cmNlO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IE1hdGguY2VpbChiaXRzIC8gKE1hdGgubG9nKGNoYXJzZXQubGVuZ3RoKSAvIE1hdGguTE4yKSk7XG4gICAgICByZXR1cm4gcmFuZG9tU3RyaW5nKGxlbmd0aCwgY2hhcnNldCwgcHJuZyk7XG4gICAgfVxuICAgIGV4cG9ydHMucmFuZG9tU3RyaW5nRm9yRW50cm9weSA9IHJhbmRvbVN0cmluZ0ZvckVudHJvcHk7XG4gIH1cbn0pO1xudmFyIHJlcXVpcmVfc2hhNTEyMiA9IF9fY29tbW9uSlMoe1xuICBcIm5vZGVfbW9kdWxlcy9Ac3RhYmxlbGliL3NoYTUxMi9saWIvc2hhNTEyLmpzXCIoZXhwb3J0cykge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge3ZhbHVlOiB0cnVlfSk7XG4gICAgdmFyIGJpbmFyeV8xID0gcmVxdWlyZV9iaW5hcnkzKCk7XG4gICAgdmFyIHdpcGVfMSA9IHJlcXVpcmVfd2lwZTMoKTtcbiAgICBleHBvcnRzLkRJR0VTVF9MRU5HVEggPSA2NDtcbiAgICBleHBvcnRzLkJMT0NLX1NJWkUgPSAxMjg7XG4gICAgdmFyIFNIQTUxMiA9IGZ1bmN0aW9uKCkge1xuICAgICAgZnVuY3Rpb24gU0hBNTEyMigpIHtcbiAgICAgICAgdGhpcy5kaWdlc3RMZW5ndGggPSBleHBvcnRzLkRJR0VTVF9MRU5HVEg7XG4gICAgICAgIHRoaXMuYmxvY2tTaXplID0gZXhwb3J0cy5CTE9DS19TSVpFO1xuICAgICAgICB0aGlzLl9zdGF0ZUhpID0gbmV3IEludDMyQXJyYXkoOCk7XG4gICAgICAgIHRoaXMuX3N0YXRlTG8gPSBuZXcgSW50MzJBcnJheSg4KTtcbiAgICAgICAgdGhpcy5fdGVtcEhpID0gbmV3IEludDMyQXJyYXkoMTYpO1xuICAgICAgICB0aGlzLl90ZW1wTG8gPSBuZXcgSW50MzJBcnJheSgxNik7XG4gICAgICAgIHRoaXMuX2J1ZmZlciA9IG5ldyBVaW50OEFycmF5KDI1Nik7XG4gICAgICAgIHRoaXMuX2J1ZmZlckxlbmd0aCA9IDA7XG4gICAgICAgIHRoaXMuX2J5dGVzSGFzaGVkID0gMDtcbiAgICAgICAgdGhpcy5fZmluaXNoZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgfVxuICAgICAgU0hBNTEyMi5wcm90b3R5cGUuX2luaXRTdGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLl9zdGF0ZUhpWzBdID0gMTc3OTAzMzcwMztcbiAgICAgICAgdGhpcy5fc3RhdGVIaVsxXSA9IDMxNDQxMzQyNzc7XG4gICAgICAgIHRoaXMuX3N0YXRlSGlbMl0gPSAxMDEzOTA0MjQyO1xuICAgICAgICB0aGlzLl9zdGF0ZUhpWzNdID0gMjc3MzQ4MDc2MjtcbiAgICAgICAgdGhpcy5fc3RhdGVIaVs0XSA9IDEzNTk4OTMxMTk7XG4gICAgICAgIHRoaXMuX3N0YXRlSGlbNV0gPSAyNjAwODIyOTI0O1xuICAgICAgICB0aGlzLl9zdGF0ZUhpWzZdID0gNTI4NzM0NjM1O1xuICAgICAgICB0aGlzLl9zdGF0ZUhpWzddID0gMTU0MTQ1OTIyNTtcbiAgICAgICAgdGhpcy5fc3RhdGVMb1swXSA9IDQwODkyMzU3MjA7XG4gICAgICAgIHRoaXMuX3N0YXRlTG9bMV0gPSAyMjI3ODczNTk1O1xuICAgICAgICB0aGlzLl9zdGF0ZUxvWzJdID0gNDI3MTE3NTcyMztcbiAgICAgICAgdGhpcy5fc3RhdGVMb1szXSA9IDE1OTU3NTAxMjk7XG4gICAgICAgIHRoaXMuX3N0YXRlTG9bNF0gPSAyOTE3NTY1MTM3O1xuICAgICAgICB0aGlzLl9zdGF0ZUxvWzVdID0gNzI1NTExMTk5O1xuICAgICAgICB0aGlzLl9zdGF0ZUxvWzZdID0gNDIxNTM4OTU0NztcbiAgICAgICAgdGhpcy5fc3RhdGVMb1s3XSA9IDMyNzAzMzIwOTtcbiAgICAgIH07XG4gICAgICBTSEE1MTIyLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLl9pbml0U3RhdGUoKTtcbiAgICAgICAgdGhpcy5fYnVmZmVyTGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5fYnl0ZXNIYXNoZWQgPSAwO1xuICAgICAgICB0aGlzLl9maW5pc2hlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH07XG4gICAgICBTSEE1MTIyLnByb3RvdHlwZS5jbGVhbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB3aXBlXzEud2lwZSh0aGlzLl9idWZmZXIpO1xuICAgICAgICB3aXBlXzEud2lwZSh0aGlzLl90ZW1wSGkpO1xuICAgICAgICB3aXBlXzEud2lwZSh0aGlzLl90ZW1wTG8pO1xuICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICB9O1xuICAgICAgU0hBNTEyMi5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oZGF0YSwgZGF0YUxlbmd0aCkge1xuICAgICAgICBpZiAoZGF0YUxlbmd0aCA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9maW5pc2hlZCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNIQTUxMjogY2FuJ3QgdXBkYXRlIGJlY2F1c2UgaGFzaCB3YXMgZmluaXNoZWQuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkYXRhUG9zID0gMDtcbiAgICAgICAgdGhpcy5fYnl0ZXNIYXNoZWQgKz0gZGF0YUxlbmd0aDtcbiAgICAgICAgaWYgKHRoaXMuX2J1ZmZlckxlbmd0aCA+IDApIHtcbiAgICAgICAgICB3aGlsZSAodGhpcy5fYnVmZmVyTGVuZ3RoIDwgZXhwb3J0cy5CTE9DS19TSVpFICYmIGRhdGFMZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLl9idWZmZXJbdGhpcy5fYnVmZmVyTGVuZ3RoKytdID0gZGF0YVtkYXRhUG9zKytdO1xuICAgICAgICAgICAgZGF0YUxlbmd0aC0tO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodGhpcy5fYnVmZmVyTGVuZ3RoID09PSB0aGlzLmJsb2NrU2l6ZSkge1xuICAgICAgICAgICAgaGFzaEJsb2Nrcyh0aGlzLl90ZW1wSGksIHRoaXMuX3RlbXBMbywgdGhpcy5fc3RhdGVIaSwgdGhpcy5fc3RhdGVMbywgdGhpcy5fYnVmZmVyLCAwLCB0aGlzLmJsb2NrU2l6ZSk7XG4gICAgICAgICAgICB0aGlzLl9idWZmZXJMZW5ndGggPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YUxlbmd0aCA+PSB0aGlzLmJsb2NrU2l6ZSkge1xuICAgICAgICAgIGRhdGFQb3MgPSBoYXNoQmxvY2tzKHRoaXMuX3RlbXBIaSwgdGhpcy5fdGVtcExvLCB0aGlzLl9zdGF0ZUhpLCB0aGlzLl9zdGF0ZUxvLCBkYXRhLCBkYXRhUG9zLCBkYXRhTGVuZ3RoKTtcbiAgICAgICAgICBkYXRhTGVuZ3RoICU9IHRoaXMuYmxvY2tTaXplO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChkYXRhTGVuZ3RoID4gMCkge1xuICAgICAgICAgIHRoaXMuX2J1ZmZlclt0aGlzLl9idWZmZXJMZW5ndGgrK10gPSBkYXRhW2RhdGFQb3MrK107XG4gICAgICAgICAgZGF0YUxlbmd0aC0tO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfTtcbiAgICAgIFNIQTUxMjIucHJvdG90eXBlLmZpbmlzaCA9IGZ1bmN0aW9uKG91dCkge1xuICAgICAgICBpZiAoIXRoaXMuX2ZpbmlzaGVkKSB7XG4gICAgICAgICAgdmFyIGJ5dGVzSGFzaGVkID0gdGhpcy5fYnl0ZXNIYXNoZWQ7XG4gICAgICAgICAgdmFyIGxlZnQgPSB0aGlzLl9idWZmZXJMZW5ndGg7XG4gICAgICAgICAgdmFyIGJpdExlbkhpID0gYnl0ZXNIYXNoZWQgLyA1MzY4NzA5MTIgfCAwO1xuICAgICAgICAgIHZhciBiaXRMZW5MbyA9IGJ5dGVzSGFzaGVkIDw8IDM7XG4gICAgICAgICAgdmFyIHBhZExlbmd0aCA9IGJ5dGVzSGFzaGVkICUgMTI4IDwgMTEyID8gMTI4IDogMjU2O1xuICAgICAgICAgIHRoaXMuX2J1ZmZlcltsZWZ0XSA9IDEyODtcbiAgICAgICAgICBmb3IgKHZhciBpID0gbGVmdCArIDE7IGkgPCBwYWRMZW5ndGggLSA4OyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuX2J1ZmZlcltpXSA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJpbmFyeV8xLndyaXRlVWludDMyQkUoYml0TGVuSGksIHRoaXMuX2J1ZmZlciwgcGFkTGVuZ3RoIC0gOCk7XG4gICAgICAgICAgYmluYXJ5XzEud3JpdGVVaW50MzJCRShiaXRMZW5MbywgdGhpcy5fYnVmZmVyLCBwYWRMZW5ndGggLSA0KTtcbiAgICAgICAgICBoYXNoQmxvY2tzKHRoaXMuX3RlbXBIaSwgdGhpcy5fdGVtcExvLCB0aGlzLl9zdGF0ZUhpLCB0aGlzLl9zdGF0ZUxvLCB0aGlzLl9idWZmZXIsIDAsIHBhZExlbmd0aCk7XG4gICAgICAgICAgdGhpcy5fZmluaXNoZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5kaWdlc3RMZW5ndGggLyA4OyBpKyspIHtcbiAgICAgICAgICBiaW5hcnlfMS53cml0ZVVpbnQzMkJFKHRoaXMuX3N0YXRlSGlbaV0sIG91dCwgaSAqIDgpO1xuICAgICAgICAgIGJpbmFyeV8xLndyaXRlVWludDMyQkUodGhpcy5fc3RhdGVMb1tpXSwgb3V0LCBpICogOCArIDQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfTtcbiAgICAgIFNIQTUxMjIucHJvdG90eXBlLmRpZ2VzdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgb3V0ID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5kaWdlc3RMZW5ndGgpO1xuICAgICAgICB0aGlzLmZpbmlzaChvdXQpO1xuICAgICAgICByZXR1cm4gb3V0O1xuICAgICAgfTtcbiAgICAgIFNIQTUxMjIucHJvdG90eXBlLnNhdmVTdGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5fZmluaXNoZWQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTSEEyNTY6IGNhbm5vdCBzYXZlIGZpbmlzaGVkIHN0YXRlXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc3RhdGVIaTogbmV3IEludDMyQXJyYXkodGhpcy5fc3RhdGVIaSksXG4gICAgICAgICAgc3RhdGVMbzogbmV3IEludDMyQXJyYXkodGhpcy5fc3RhdGVMbyksXG4gICAgICAgICAgYnVmZmVyOiB0aGlzLl9idWZmZXJMZW5ndGggPiAwID8gbmV3IFVpbnQ4QXJyYXkodGhpcy5fYnVmZmVyKSA6IHZvaWQgMCxcbiAgICAgICAgICBidWZmZXJMZW5ndGg6IHRoaXMuX2J1ZmZlckxlbmd0aCxcbiAgICAgICAgICBieXRlc0hhc2hlZDogdGhpcy5fYnl0ZXNIYXNoZWRcbiAgICAgICAgfTtcbiAgICAgIH07XG4gICAgICBTSEE1MTIyLnByb3RvdHlwZS5yZXN0b3JlU3RhdGUgPSBmdW5jdGlvbihzYXZlZFN0YXRlKSB7XG4gICAgICAgIHRoaXMuX3N0YXRlSGkuc2V0KHNhdmVkU3RhdGUuc3RhdGVIaSk7XG4gICAgICAgIHRoaXMuX3N0YXRlTG8uc2V0KHNhdmVkU3RhdGUuc3RhdGVMbyk7XG4gICAgICAgIHRoaXMuX2J1ZmZlckxlbmd0aCA9IHNhdmVkU3RhdGUuYnVmZmVyTGVuZ3RoO1xuICAgICAgICBpZiAoc2F2ZWRTdGF0ZS5idWZmZXIpIHtcbiAgICAgICAgICB0aGlzLl9idWZmZXIuc2V0KHNhdmVkU3RhdGUuYnVmZmVyKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9ieXRlc0hhc2hlZCA9IHNhdmVkU3RhdGUuYnl0ZXNIYXNoZWQ7XG4gICAgICAgIHRoaXMuX2ZpbmlzaGVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfTtcbiAgICAgIFNIQTUxMjIucHJvdG90eXBlLmNsZWFuU2F2ZWRTdGF0ZSA9IGZ1bmN0aW9uKHNhdmVkU3RhdGUpIHtcbiAgICAgICAgd2lwZV8xLndpcGUoc2F2ZWRTdGF0ZS5zdGF0ZUhpKTtcbiAgICAgICAgd2lwZV8xLndpcGUoc2F2ZWRTdGF0ZS5zdGF0ZUxvKTtcbiAgICAgICAgaWYgKHNhdmVkU3RhdGUuYnVmZmVyKSB7XG4gICAgICAgICAgd2lwZV8xLndpcGUoc2F2ZWRTdGF0ZS5idWZmZXIpO1xuICAgICAgICB9XG4gICAgICAgIHNhdmVkU3RhdGUuYnVmZmVyTGVuZ3RoID0gMDtcbiAgICAgICAgc2F2ZWRTdGF0ZS5ieXRlc0hhc2hlZCA9IDA7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIFNIQTUxMjI7XG4gICAgfSgpO1xuICAgIGV4cG9ydHMuU0hBNTEyID0gU0hBNTEyO1xuICAgIHZhciBLID0gbmV3IEludDMyQXJyYXkoW1xuICAgICAgMTExNjM1MjQwOCxcbiAgICAgIDM2MDk3Njc0NTgsXG4gICAgICAxODk5NDQ3NDQxLFxuICAgICAgNjAyODkxNzI1LFxuICAgICAgMzA0OTMyMzQ3MSxcbiAgICAgIDM5NjQ0ODQzOTksXG4gICAgICAzOTIxMDA5NTczLFxuICAgICAgMjE3MzI5NTU0OCxcbiAgICAgIDk2MTk4NzE2MyxcbiAgICAgIDQwODE2Mjg0NzIsXG4gICAgICAxNTA4OTcwOTkzLFxuICAgICAgMzA1MzgzNDI2NSxcbiAgICAgIDI0NTM2MzU3NDgsXG4gICAgICAyOTM3NjcxNTc5LFxuICAgICAgMjg3MDc2MzIyMSxcbiAgICAgIDM2NjQ2MDk1NjAsXG4gICAgICAzNjI0MzgxMDgwLFxuICAgICAgMjczNDg4MzM5NCxcbiAgICAgIDMxMDU5ODQwMSxcbiAgICAgIDExNjQ5OTY1NDIsXG4gICAgICA2MDcyMjUyNzgsXG4gICAgICAxMzIzNjEwNzY0LFxuICAgICAgMTQyNjg4MTk4NyxcbiAgICAgIDM1OTAzMDQ5OTQsXG4gICAgICAxOTI1MDc4Mzg4LFxuICAgICAgNDA2ODE4MjM4MyxcbiAgICAgIDIxNjIwNzgyMDYsXG4gICAgICA5OTEzMzYxMTMsXG4gICAgICAyNjE0ODg4MTAzLFxuICAgICAgNjMzODAzMzE3LFxuICAgICAgMzI0ODIyMjU4MCxcbiAgICAgIDM0Nzk3NzQ4NjgsXG4gICAgICAzODM1MzkwNDAxLFxuICAgICAgMjY2NjYxMzQ1OCxcbiAgICAgIDQwMjIyMjQ3NzQsXG4gICAgICA5NDQ3MTExMzksXG4gICAgICAyNjQzNDcwNzgsXG4gICAgICAyMzQxMjYyNzczLFxuICAgICAgNjA0ODA3NjI4LFxuICAgICAgMjAwNzgwMDkzMyxcbiAgICAgIDc3MDI1NTk4MyxcbiAgICAgIDE0OTU5OTA5MDEsXG4gICAgICAxMjQ5MTUwMTIyLFxuICAgICAgMTg1NjQzMTIzNSxcbiAgICAgIDE1NTUwODE2OTIsXG4gICAgICAzMTc1MjE4MTMyLFxuICAgICAgMTk5NjA2NDk4NixcbiAgICAgIDIxOTg5NTA4MzcsXG4gICAgICAyNTU0MjIwODgyLFxuICAgICAgMzk5OTcxOTMzOSxcbiAgICAgIDI4MjE4MzQzNDksXG4gICAgICA3NjY3ODQwMTYsXG4gICAgICAyOTUyOTk2ODA4LFxuICAgICAgMjU2NjU5NDg3OSxcbiAgICAgIDMyMTAzMTM2NzEsXG4gICAgICAzMjAzMzM3OTU2LFxuICAgICAgMzMzNjU3MTg5MSxcbiAgICAgIDEwMzQ0NTcwMjYsXG4gICAgICAzNTg0NTI4NzExLFxuICAgICAgMjQ2Njk0ODkwMSxcbiAgICAgIDExMzkyNjk5MyxcbiAgICAgIDM3NTgzMjYzODMsXG4gICAgICAzMzgyNDE4OTUsXG4gICAgICAxNjg3MTc5MzYsXG4gICAgICA2NjYzMDcyMDUsXG4gICAgICAxMTg4MTc5OTY0LFxuICAgICAgNzczNTI5OTEyLFxuICAgICAgMTU0NjA0NTczNCxcbiAgICAgIDEyOTQ3NTczNzIsXG4gICAgICAxNTIyODA1NDg1LFxuICAgICAgMTM5NjE4MjI5MSxcbiAgICAgIDI2NDM4MzM4MjMsXG4gICAgICAxNjk1MTgzNzAwLFxuICAgICAgMjM0MzUyNzM5MCxcbiAgICAgIDE5ODY2NjEwNTEsXG4gICAgICAxMDE0NDc3NDgwLFxuICAgICAgMjE3NzAyNjM1MCxcbiAgICAgIDEyMDY3NTkxNDIsXG4gICAgICAyNDU2OTU2MDM3LFxuICAgICAgMzQ0MDc3NjI3LFxuICAgICAgMjczMDQ4NTkyMSxcbiAgICAgIDEyOTA4NjM0NjAsXG4gICAgICAyODIwMzAyNDExLFxuICAgICAgMzE1ODQ1NDI3MyxcbiAgICAgIDMyNTk3MzA4MDAsXG4gICAgICAzNTA1OTUyNjU3LFxuICAgICAgMzM0NTc2NDc3MSxcbiAgICAgIDEwNjIxNzAwOCxcbiAgICAgIDM1MTYwNjU4MTcsXG4gICAgICAzNjA2MDA4MzQ0LFxuICAgICAgMzYwMDM1MjgwNCxcbiAgICAgIDE0MzI3MjU3NzYsXG4gICAgICA0MDk0NTcxOTA5LFxuICAgICAgMTQ2NzAzMTU5NCxcbiAgICAgIDI3NTQyMzM0NCxcbiAgICAgIDg1MTE2OTcyMCxcbiAgICAgIDQzMDIyNzczNCxcbiAgICAgIDMxMDA4MjM3NTIsXG4gICAgICA1MDY5NDg2MTYsXG4gICAgICAxMzYzMjU4MTk1LFxuICAgICAgNjU5MDYwNTU2LFxuICAgICAgMzc1MDY4NTU5MyxcbiAgICAgIDg4Mzk5Nzg3NyxcbiAgICAgIDM3ODUwNTAyODAsXG4gICAgICA5NTgxMzk1NzEsXG4gICAgICAzMzE4MzA3NDI3LFxuICAgICAgMTMyMjgyMjIxOCxcbiAgICAgIDM4MTI3MjM0MDMsXG4gICAgICAxNTM3MDAyMDYzLFxuICAgICAgMjAwMzAzNDk5NSxcbiAgICAgIDE3NDc4NzM3NzksXG4gICAgICAzNjAyMDM2ODk5LFxuICAgICAgMTk1NTU2MjIyMixcbiAgICAgIDE1NzU5OTAwMTIsXG4gICAgICAyMDI0MTA0ODE1LFxuICAgICAgMTEyNTU5MjkyOCxcbiAgICAgIDIyMjc3MzA0NTIsXG4gICAgICAyNzE2OTA0MzA2LFxuICAgICAgMjM2MTg1MjQyNCxcbiAgICAgIDQ0Mjc3NjA0NCxcbiAgICAgIDI0Mjg0MzY0NzQsXG4gICAgICA1OTM2OTgzNDQsXG4gICAgICAyNzU2NzM0MTg3LFxuICAgICAgMzczMzExMDI0OSxcbiAgICAgIDMyMDQwMzE0NzksXG4gICAgICAyOTk5MzUxNTczLFxuICAgICAgMzMyOTMyNTI5OCxcbiAgICAgIDM4MTU5MjA0MjcsXG4gICAgICAzMzkxNTY5NjE0LFxuICAgICAgMzkyODM4MzkwMCxcbiAgICAgIDM1MTUyNjcyNzEsXG4gICAgICA1NjYyODA3MTEsXG4gICAgICAzOTQwMTg3NjA2LFxuICAgICAgMzQ1NDA2OTUzNCxcbiAgICAgIDQxMTg2MzAyNzEsXG4gICAgICA0MDAwMjM5OTkyLFxuICAgICAgMTE2NDE4NDc0LFxuICAgICAgMTkxNDEzODU1NCxcbiAgICAgIDE3NDI5MjQyMSxcbiAgICAgIDI3MzEwNTUyNzAsXG4gICAgICAyODkzODAzNTYsXG4gICAgICAzMjAzOTkzMDA2LFxuICAgICAgNDYwMzkzMjY5LFxuICAgICAgMzIwNjIwMzE1LFxuICAgICAgNjg1NDcxNzMzLFxuICAgICAgNTg3NDk2ODM2LFxuICAgICAgODUyMTQyOTcxLFxuICAgICAgMTA4Njc5Mjg1MSxcbiAgICAgIDEwMTcwMzYyOTgsXG4gICAgICAzNjU1NDMxMDAsXG4gICAgICAxMTI2MDAwNTgwLFxuICAgICAgMjYxODI5NzY3NixcbiAgICAgIDEyODgwMzM0NzAsXG4gICAgICAzNDA5ODU1MTU4LFxuICAgICAgMTUwMTUwNTk0OCxcbiAgICAgIDQyMzQ1MDk4NjYsXG4gICAgICAxNjA3MTY3OTE1LFxuICAgICAgOTg3MTY3NDY4LFxuICAgICAgMTgxNjQwMjMxNixcbiAgICAgIDEyNDYxODk1OTFcbiAgICBdKTtcbiAgICBmdW5jdGlvbiBoYXNoQmxvY2tzKHdoLCB3bCwgaGgsIGhsLCBtLCBwb3MsIGxlbikge1xuICAgICAgdmFyIGFoMCA9IGhoWzBdLCBhaDEgPSBoaFsxXSwgYWgyID0gaGhbMl0sIGFoMyA9IGhoWzNdLCBhaDQgPSBoaFs0XSwgYWg1ID0gaGhbNV0sIGFoNiA9IGhoWzZdLCBhaDcgPSBoaFs3XSwgYWwwID0gaGxbMF0sIGFsMSA9IGhsWzFdLCBhbDIgPSBobFsyXSwgYWwzID0gaGxbM10sIGFsNCA9IGhsWzRdLCBhbDUgPSBobFs1XSwgYWw2ID0gaGxbNl0sIGFsNyA9IGhsWzddO1xuICAgICAgdmFyIGgsIGwyO1xuICAgICAgdmFyIHRoLCB0bDtcbiAgICAgIHZhciBhLCBiLCBjLCBkO1xuICAgICAgd2hpbGUgKGxlbiA+PSAxMjgpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XG4gICAgICAgICAgdmFyIGogPSA4ICogaSArIHBvcztcbiAgICAgICAgICB3aFtpXSA9IGJpbmFyeV8xLnJlYWRVaW50MzJCRShtLCBqKTtcbiAgICAgICAgICB3bFtpXSA9IGJpbmFyeV8xLnJlYWRVaW50MzJCRShtLCBqICsgNCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA4MDsgaSsrKSB7XG4gICAgICAgICAgdmFyIGJoMCA9IGFoMDtcbiAgICAgICAgICB2YXIgYmgxID0gYWgxO1xuICAgICAgICAgIHZhciBiaDIgPSBhaDI7XG4gICAgICAgICAgdmFyIGJoMyA9IGFoMztcbiAgICAgICAgICB2YXIgYmg0ID0gYWg0O1xuICAgICAgICAgIHZhciBiaDUgPSBhaDU7XG4gICAgICAgICAgdmFyIGJoNiA9IGFoNjtcbiAgICAgICAgICB2YXIgYmg3ID0gYWg3O1xuICAgICAgICAgIHZhciBibDAgPSBhbDA7XG4gICAgICAgICAgdmFyIGJsMSA9IGFsMTtcbiAgICAgICAgICB2YXIgYmwyID0gYWwyO1xuICAgICAgICAgIHZhciBibDMgPSBhbDM7XG4gICAgICAgICAgdmFyIGJsNCA9IGFsNDtcbiAgICAgICAgICB2YXIgYmw1ID0gYWw1O1xuICAgICAgICAgIHZhciBibDYgPSBhbDY7XG4gICAgICAgICAgdmFyIGJsNyA9IGFsNztcbiAgICAgICAgICBoID0gYWg3O1xuICAgICAgICAgIGwyID0gYWw3O1xuICAgICAgICAgIGEgPSBsMiAmIDY1NTM1O1xuICAgICAgICAgIGIgPSBsMiA+Pj4gMTY7XG4gICAgICAgICAgYyA9IGggJiA2NTUzNTtcbiAgICAgICAgICBkID0gaCA+Pj4gMTY7XG4gICAgICAgICAgaCA9IChhaDQgPj4+IDE0IHwgYWw0IDw8IDMyIC0gMTQpIF4gKGFoNCA+Pj4gMTggfCBhbDQgPDwgMzIgLSAxOCkgXiAoYWw0ID4+PiA0MSAtIDMyIHwgYWg0IDw8IDMyIC0gKDQxIC0gMzIpKTtcbiAgICAgICAgICBsMiA9IChhbDQgPj4+IDE0IHwgYWg0IDw8IDMyIC0gMTQpIF4gKGFsNCA+Pj4gMTggfCBhaDQgPDwgMzIgLSAxOCkgXiAoYWg0ID4+PiA0MSAtIDMyIHwgYWw0IDw8IDMyIC0gKDQxIC0gMzIpKTtcbiAgICAgICAgICBhICs9IGwyICYgNjU1MzU7XG4gICAgICAgICAgYiArPSBsMiA+Pj4gMTY7XG4gICAgICAgICAgYyArPSBoICYgNjU1MzU7XG4gICAgICAgICAgZCArPSBoID4+PiAxNjtcbiAgICAgICAgICBoID0gYWg0ICYgYWg1IF4gfmFoNCAmIGFoNjtcbiAgICAgICAgICBsMiA9IGFsNCAmIGFsNSBeIH5hbDQgJiBhbDY7XG4gICAgICAgICAgYSArPSBsMiAmIDY1NTM1O1xuICAgICAgICAgIGIgKz0gbDIgPj4+IDE2O1xuICAgICAgICAgIGMgKz0gaCAmIDY1NTM1O1xuICAgICAgICAgIGQgKz0gaCA+Pj4gMTY7XG4gICAgICAgICAgaCA9IEtbaSAqIDJdO1xuICAgICAgICAgIGwyID0gS1tpICogMiArIDFdO1xuICAgICAgICAgIGEgKz0gbDIgJiA2NTUzNTtcbiAgICAgICAgICBiICs9IGwyID4+PiAxNjtcbiAgICAgICAgICBjICs9IGggJiA2NTUzNTtcbiAgICAgICAgICBkICs9IGggPj4+IDE2O1xuICAgICAgICAgIGggPSB3aFtpICUgMTZdO1xuICAgICAgICAgIGwyID0gd2xbaSAlIDE2XTtcbiAgICAgICAgICBhICs9IGwyICYgNjU1MzU7XG4gICAgICAgICAgYiArPSBsMiA+Pj4gMTY7XG4gICAgICAgICAgYyArPSBoICYgNjU1MzU7XG4gICAgICAgICAgZCArPSBoID4+PiAxNjtcbiAgICAgICAgICBiICs9IGEgPj4+IDE2O1xuICAgICAgICAgIGMgKz0gYiA+Pj4gMTY7XG4gICAgICAgICAgZCArPSBjID4+PiAxNjtcbiAgICAgICAgICB0aCA9IGMgJiA2NTUzNSB8IGQgPDwgMTY7XG4gICAgICAgICAgdGwgPSBhICYgNjU1MzUgfCBiIDw8IDE2O1xuICAgICAgICAgIGggPSB0aDtcbiAgICAgICAgICBsMiA9IHRsO1xuICAgICAgICAgIGEgPSBsMiAmIDY1NTM1O1xuICAgICAgICAgIGIgPSBsMiA+Pj4gMTY7XG4gICAgICAgICAgYyA9IGggJiA2NTUzNTtcbiAgICAgICAgICBkID0gaCA+Pj4gMTY7XG4gICAgICAgICAgaCA9IChhaDAgPj4+IDI4IHwgYWwwIDw8IDMyIC0gMjgpIF4gKGFsMCA+Pj4gMzQgLSAzMiB8IGFoMCA8PCAzMiAtICgzNCAtIDMyKSkgXiAoYWwwID4+PiAzOSAtIDMyIHwgYWgwIDw8IDMyIC0gKDM5IC0gMzIpKTtcbiAgICAgICAgICBsMiA9IChhbDAgPj4+IDI4IHwgYWgwIDw8IDMyIC0gMjgpIF4gKGFoMCA+Pj4gMzQgLSAzMiB8IGFsMCA8PCAzMiAtICgzNCAtIDMyKSkgXiAoYWgwID4+PiAzOSAtIDMyIHwgYWwwIDw8IDMyIC0gKDM5IC0gMzIpKTtcbiAgICAgICAgICBhICs9IGwyICYgNjU1MzU7XG4gICAgICAgICAgYiArPSBsMiA+Pj4gMTY7XG4gICAgICAgICAgYyArPSBoICYgNjU1MzU7XG4gICAgICAgICAgZCArPSBoID4+PiAxNjtcbiAgICAgICAgICBoID0gYWgwICYgYWgxIF4gYWgwICYgYWgyIF4gYWgxICYgYWgyO1xuICAgICAgICAgIGwyID0gYWwwICYgYWwxIF4gYWwwICYgYWwyIF4gYWwxICYgYWwyO1xuICAgICAgICAgIGEgKz0gbDIgJiA2NTUzNTtcbiAgICAgICAgICBiICs9IGwyID4+PiAxNjtcbiAgICAgICAgICBjICs9IGggJiA2NTUzNTtcbiAgICAgICAgICBkICs9IGggPj4+IDE2O1xuICAgICAgICAgIGIgKz0gYSA+Pj4gMTY7XG4gICAgICAgICAgYyArPSBiID4+PiAxNjtcbiAgICAgICAgICBkICs9IGMgPj4+IDE2O1xuICAgICAgICAgIGJoNyA9IGMgJiA2NTUzNSB8IGQgPDwgMTY7XG4gICAgICAgICAgYmw3ID0gYSAmIDY1NTM1IHwgYiA8PCAxNjtcbiAgICAgICAgICBoID0gYmgzO1xuICAgICAgICAgIGwyID0gYmwzO1xuICAgICAgICAgIGEgPSBsMiAmIDY1NTM1O1xuICAgICAgICAgIGIgPSBsMiA+Pj4gMTY7XG4gICAgICAgICAgYyA9IGggJiA2NTUzNTtcbiAgICAgICAgICBkID0gaCA+Pj4gMTY7XG4gICAgICAgICAgaCA9IHRoO1xuICAgICAgICAgIGwyID0gdGw7XG4gICAgICAgICAgYSArPSBsMiAmIDY1NTM1O1xuICAgICAgICAgIGIgKz0gbDIgPj4+IDE2O1xuICAgICAgICAgIGMgKz0gaCAmIDY1NTM1O1xuICAgICAgICAgIGQgKz0gaCA+Pj4gMTY7XG4gICAgICAgICAgYiArPSBhID4+PiAxNjtcbiAgICAgICAgICBjICs9IGIgPj4+IDE2O1xuICAgICAgICAgIGQgKz0gYyA+Pj4gMTY7XG4gICAgICAgICAgYmgzID0gYyAmIDY1NTM1IHwgZCA8PCAxNjtcbiAgICAgICAgICBibDMgPSBhICYgNjU1MzUgfCBiIDw8IDE2O1xuICAgICAgICAgIGFoMSA9IGJoMDtcbiAgICAgICAgICBhaDIgPSBiaDE7XG4gICAgICAgICAgYWgzID0gYmgyO1xuICAgICAgICAgIGFoNCA9IGJoMztcbiAgICAgICAgICBhaDUgPSBiaDQ7XG4gICAgICAgICAgYWg2ID0gYmg1O1xuICAgICAgICAgIGFoNyA9IGJoNjtcbiAgICAgICAgICBhaDAgPSBiaDc7XG4gICAgICAgICAgYWwxID0gYmwwO1xuICAgICAgICAgIGFsMiA9IGJsMTtcbiAgICAgICAgICBhbDMgPSBibDI7XG4gICAgICAgICAgYWw0ID0gYmwzO1xuICAgICAgICAgIGFsNSA9IGJsNDtcbiAgICAgICAgICBhbDYgPSBibDU7XG4gICAgICAgICAgYWw3ID0gYmw2O1xuICAgICAgICAgIGFsMCA9IGJsNztcbiAgICAgICAgICBpZiAoaSAlIDE2ID09PSAxNSkge1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCAxNjsgaisrKSB7XG4gICAgICAgICAgICAgIGggPSB3aFtqXTtcbiAgICAgICAgICAgICAgbDIgPSB3bFtqXTtcbiAgICAgICAgICAgICAgYSA9IGwyICYgNjU1MzU7XG4gICAgICAgICAgICAgIGIgPSBsMiA+Pj4gMTY7XG4gICAgICAgICAgICAgIGMgPSBoICYgNjU1MzU7XG4gICAgICAgICAgICAgIGQgPSBoID4+PiAxNjtcbiAgICAgICAgICAgICAgaCA9IHdoWyhqICsgOSkgJSAxNl07XG4gICAgICAgICAgICAgIGwyID0gd2xbKGogKyA5KSAlIDE2XTtcbiAgICAgICAgICAgICAgYSArPSBsMiAmIDY1NTM1O1xuICAgICAgICAgICAgICBiICs9IGwyID4+PiAxNjtcbiAgICAgICAgICAgICAgYyArPSBoICYgNjU1MzU7XG4gICAgICAgICAgICAgIGQgKz0gaCA+Pj4gMTY7XG4gICAgICAgICAgICAgIHRoID0gd2hbKGogKyAxKSAlIDE2XTtcbiAgICAgICAgICAgICAgdGwgPSB3bFsoaiArIDEpICUgMTZdO1xuICAgICAgICAgICAgICBoID0gKHRoID4+PiAxIHwgdGwgPDwgMzIgLSAxKSBeICh0aCA+Pj4gOCB8IHRsIDw8IDMyIC0gOCkgXiB0aCA+Pj4gNztcbiAgICAgICAgICAgICAgbDIgPSAodGwgPj4+IDEgfCB0aCA8PCAzMiAtIDEpIF4gKHRsID4+PiA4IHwgdGggPDwgMzIgLSA4KSBeICh0bCA+Pj4gNyB8IHRoIDw8IDMyIC0gNyk7XG4gICAgICAgICAgICAgIGEgKz0gbDIgJiA2NTUzNTtcbiAgICAgICAgICAgICAgYiArPSBsMiA+Pj4gMTY7XG4gICAgICAgICAgICAgIGMgKz0gaCAmIDY1NTM1O1xuICAgICAgICAgICAgICBkICs9IGggPj4+IDE2O1xuICAgICAgICAgICAgICB0aCA9IHdoWyhqICsgMTQpICUgMTZdO1xuICAgICAgICAgICAgICB0bCA9IHdsWyhqICsgMTQpICUgMTZdO1xuICAgICAgICAgICAgICBoID0gKHRoID4+PiAxOSB8IHRsIDw8IDMyIC0gMTkpIF4gKHRsID4+PiA2MSAtIDMyIHwgdGggPDwgMzIgLSAoNjEgLSAzMikpIF4gdGggPj4+IDY7XG4gICAgICAgICAgICAgIGwyID0gKHRsID4+PiAxOSB8IHRoIDw8IDMyIC0gMTkpIF4gKHRoID4+PiA2MSAtIDMyIHwgdGwgPDwgMzIgLSAoNjEgLSAzMikpIF4gKHRsID4+PiA2IHwgdGggPDwgMzIgLSA2KTtcbiAgICAgICAgICAgICAgYSArPSBsMiAmIDY1NTM1O1xuICAgICAgICAgICAgICBiICs9IGwyID4+PiAxNjtcbiAgICAgICAgICAgICAgYyArPSBoICYgNjU1MzU7XG4gICAgICAgICAgICAgIGQgKz0gaCA+Pj4gMTY7XG4gICAgICAgICAgICAgIGIgKz0gYSA+Pj4gMTY7XG4gICAgICAgICAgICAgIGMgKz0gYiA+Pj4gMTY7XG4gICAgICAgICAgICAgIGQgKz0gYyA+Pj4gMTY7XG4gICAgICAgICAgICAgIHdoW2pdID0gYyAmIDY1NTM1IHwgZCA8PCAxNjtcbiAgICAgICAgICAgICAgd2xbal0gPSBhICYgNjU1MzUgfCBiIDw8IDE2O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBoID0gYWgwO1xuICAgICAgICBsMiA9IGFsMDtcbiAgICAgICAgYSA9IGwyICYgNjU1MzU7XG4gICAgICAgIGIgPSBsMiA+Pj4gMTY7XG4gICAgICAgIGMgPSBoICYgNjU1MzU7XG4gICAgICAgIGQgPSBoID4+PiAxNjtcbiAgICAgICAgaCA9IGhoWzBdO1xuICAgICAgICBsMiA9IGhsWzBdO1xuICAgICAgICBhICs9IGwyICYgNjU1MzU7XG4gICAgICAgIGIgKz0gbDIgPj4+IDE2O1xuICAgICAgICBjICs9IGggJiA2NTUzNTtcbiAgICAgICAgZCArPSBoID4+PiAxNjtcbiAgICAgICAgYiArPSBhID4+PiAxNjtcbiAgICAgICAgYyArPSBiID4+PiAxNjtcbiAgICAgICAgZCArPSBjID4+PiAxNjtcbiAgICAgICAgaGhbMF0gPSBhaDAgPSBjICYgNjU1MzUgfCBkIDw8IDE2O1xuICAgICAgICBobFswXSA9IGFsMCA9IGEgJiA2NTUzNSB8IGIgPDwgMTY7XG4gICAgICAgIGggPSBhaDE7XG4gICAgICAgIGwyID0gYWwxO1xuICAgICAgICBhID0gbDIgJiA2NTUzNTtcbiAgICAgICAgYiA9IGwyID4+PiAxNjtcbiAgICAgICAgYyA9IGggJiA2NTUzNTtcbiAgICAgICAgZCA9IGggPj4+IDE2O1xuICAgICAgICBoID0gaGhbMV07XG4gICAgICAgIGwyID0gaGxbMV07XG4gICAgICAgIGEgKz0gbDIgJiA2NTUzNTtcbiAgICAgICAgYiArPSBsMiA+Pj4gMTY7XG4gICAgICAgIGMgKz0gaCAmIDY1NTM1O1xuICAgICAgICBkICs9IGggPj4+IDE2O1xuICAgICAgICBiICs9IGEgPj4+IDE2O1xuICAgICAgICBjICs9IGIgPj4+IDE2O1xuICAgICAgICBkICs9IGMgPj4+IDE2O1xuICAgICAgICBoaFsxXSA9IGFoMSA9IGMgJiA2NTUzNSB8IGQgPDwgMTY7XG4gICAgICAgIGhsWzFdID0gYWwxID0gYSAmIDY1NTM1IHwgYiA8PCAxNjtcbiAgICAgICAgaCA9IGFoMjtcbiAgICAgICAgbDIgPSBhbDI7XG4gICAgICAgIGEgPSBsMiAmIDY1NTM1O1xuICAgICAgICBiID0gbDIgPj4+IDE2O1xuICAgICAgICBjID0gaCAmIDY1NTM1O1xuICAgICAgICBkID0gaCA+Pj4gMTY7XG4gICAgICAgIGggPSBoaFsyXTtcbiAgICAgICAgbDIgPSBobFsyXTtcbiAgICAgICAgYSArPSBsMiAmIDY1NTM1O1xuICAgICAgICBiICs9IGwyID4+PiAxNjtcbiAgICAgICAgYyArPSBoICYgNjU1MzU7XG4gICAgICAgIGQgKz0gaCA+Pj4gMTY7XG4gICAgICAgIGIgKz0gYSA+Pj4gMTY7XG4gICAgICAgIGMgKz0gYiA+Pj4gMTY7XG4gICAgICAgIGQgKz0gYyA+Pj4gMTY7XG4gICAgICAgIGhoWzJdID0gYWgyID0gYyAmIDY1NTM1IHwgZCA8PCAxNjtcbiAgICAgICAgaGxbMl0gPSBhbDIgPSBhICYgNjU1MzUgfCBiIDw8IDE2O1xuICAgICAgICBoID0gYWgzO1xuICAgICAgICBsMiA9IGFsMztcbiAgICAgICAgYSA9IGwyICYgNjU1MzU7XG4gICAgICAgIGIgPSBsMiA+Pj4gMTY7XG4gICAgICAgIGMgPSBoICYgNjU1MzU7XG4gICAgICAgIGQgPSBoID4+PiAxNjtcbiAgICAgICAgaCA9IGhoWzNdO1xuICAgICAgICBsMiA9IGhsWzNdO1xuICAgICAgICBhICs9IGwyICYgNjU1MzU7XG4gICAgICAgIGIgKz0gbDIgPj4+IDE2O1xuICAgICAgICBjICs9IGggJiA2NTUzNTtcbiAgICAgICAgZCArPSBoID4+PiAxNjtcbiAgICAgICAgYiArPSBhID4+PiAxNjtcbiAgICAgICAgYyArPSBiID4+PiAxNjtcbiAgICAgICAgZCArPSBjID4+PiAxNjtcbiAgICAgICAgaGhbM10gPSBhaDMgPSBjICYgNjU1MzUgfCBkIDw8IDE2O1xuICAgICAgICBobFszXSA9IGFsMyA9IGEgJiA2NTUzNSB8IGIgPDwgMTY7XG4gICAgICAgIGggPSBhaDQ7XG4gICAgICAgIGwyID0gYWw0O1xuICAgICAgICBhID0gbDIgJiA2NTUzNTtcbiAgICAgICAgYiA9IGwyID4+PiAxNjtcbiAgICAgICAgYyA9IGggJiA2NTUzNTtcbiAgICAgICAgZCA9IGggPj4+IDE2O1xuICAgICAgICBoID0gaGhbNF07XG4gICAgICAgIGwyID0gaGxbNF07XG4gICAgICAgIGEgKz0gbDIgJiA2NTUzNTtcbiAgICAgICAgYiArPSBsMiA+Pj4gMTY7XG4gICAgICAgIGMgKz0gaCAmIDY1NTM1O1xuICAgICAgICBkICs9IGggPj4+IDE2O1xuICAgICAgICBiICs9IGEgPj4+IDE2O1xuICAgICAgICBjICs9IGIgPj4+IDE2O1xuICAgICAgICBkICs9IGMgPj4+IDE2O1xuICAgICAgICBoaFs0XSA9IGFoNCA9IGMgJiA2NTUzNSB8IGQgPDwgMTY7XG4gICAgICAgIGhsWzRdID0gYWw0ID0gYSAmIDY1NTM1IHwgYiA8PCAxNjtcbiAgICAgICAgaCA9IGFoNTtcbiAgICAgICAgbDIgPSBhbDU7XG4gICAgICAgIGEgPSBsMiAmIDY1NTM1O1xuICAgICAgICBiID0gbDIgPj4+IDE2O1xuICAgICAgICBjID0gaCAmIDY1NTM1O1xuICAgICAgICBkID0gaCA+Pj4gMTY7XG4gICAgICAgIGggPSBoaFs1XTtcbiAgICAgICAgbDIgPSBobFs1XTtcbiAgICAgICAgYSArPSBsMiAmIDY1NTM1O1xuICAgICAgICBiICs9IGwyID4+PiAxNjtcbiAgICAgICAgYyArPSBoICYgNjU1MzU7XG4gICAgICAgIGQgKz0gaCA+Pj4gMTY7XG4gICAgICAgIGIgKz0gYSA+Pj4gMTY7XG4gICAgICAgIGMgKz0gYiA+Pj4gMTY7XG4gICAgICAgIGQgKz0gYyA+Pj4gMTY7XG4gICAgICAgIGhoWzVdID0gYWg1ID0gYyAmIDY1NTM1IHwgZCA8PCAxNjtcbiAgICAgICAgaGxbNV0gPSBhbDUgPSBhICYgNjU1MzUgfCBiIDw8IDE2O1xuICAgICAgICBoID0gYWg2O1xuICAgICAgICBsMiA9IGFsNjtcbiAgICAgICAgYSA9IGwyICYgNjU1MzU7XG4gICAgICAgIGIgPSBsMiA+Pj4gMTY7XG4gICAgICAgIGMgPSBoICYgNjU1MzU7XG4gICAgICAgIGQgPSBoID4+PiAxNjtcbiAgICAgICAgaCA9IGhoWzZdO1xuICAgICAgICBsMiA9IGhsWzZdO1xuICAgICAgICBhICs9IGwyICYgNjU1MzU7XG4gICAgICAgIGIgKz0gbDIgPj4+IDE2O1xuICAgICAgICBjICs9IGggJiA2NTUzNTtcbiAgICAgICAgZCArPSBoID4+PiAxNjtcbiAgICAgICAgYiArPSBhID4+PiAxNjtcbiAgICAgICAgYyArPSBiID4+PiAxNjtcbiAgICAgICAgZCArPSBjID4+PiAxNjtcbiAgICAgICAgaGhbNl0gPSBhaDYgPSBjICYgNjU1MzUgfCBkIDw8IDE2O1xuICAgICAgICBobFs2XSA9IGFsNiA9IGEgJiA2NTUzNSB8IGIgPDwgMTY7XG4gICAgICAgIGggPSBhaDc7XG4gICAgICAgIGwyID0gYWw3O1xuICAgICAgICBhID0gbDIgJiA2NTUzNTtcbiAgICAgICAgYiA9IGwyID4+PiAxNjtcbiAgICAgICAgYyA9IGggJiA2NTUzNTtcbiAgICAgICAgZCA9IGggPj4+IDE2O1xuICAgICAgICBoID0gaGhbN107XG4gICAgICAgIGwyID0gaGxbN107XG4gICAgICAgIGEgKz0gbDIgJiA2NTUzNTtcbiAgICAgICAgYiArPSBsMiA+Pj4gMTY7XG4gICAgICAgIGMgKz0gaCAmIDY1NTM1O1xuICAgICAgICBkICs9IGggPj4+IDE2O1xuICAgICAgICBiICs9IGEgPj4+IDE2O1xuICAgICAgICBjICs9IGIgPj4+IDE2O1xuICAgICAgICBkICs9IGMgPj4+IDE2O1xuICAgICAgICBoaFs3XSA9IGFoNyA9IGMgJiA2NTUzNSB8IGQgPDwgMTY7XG4gICAgICAgIGhsWzddID0gYWw3ID0gYSAmIDY1NTM1IHwgYiA8PCAxNjtcbiAgICAgICAgcG9zICs9IDEyODtcbiAgICAgICAgbGVuIC09IDEyODtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwb3M7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhc2goZGF0YSkge1xuICAgICAgdmFyIGggPSBuZXcgU0hBNTEyKCk7XG4gICAgICBoLnVwZGF0ZShkYXRhKTtcbiAgICAgIHZhciBkaWdlc3QgPSBoLmRpZ2VzdCgpO1xuICAgICAgaC5jbGVhbigpO1xuICAgICAgcmV0dXJuIGRpZ2VzdDtcbiAgICB9XG4gICAgZXhwb3J0cy5oYXNoID0gaGFzaDtcbiAgfVxufSk7XG52YXIgcmVxdWlyZV9lZDI1NTE5ID0gX19jb21tb25KUyh7XG4gIFwibm9kZV9tb2R1bGVzL0BzdGFibGVsaWIvZWQyNTUxOS9saWIvZWQyNTUxOS5qc1wiKGV4cG9ydHMpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHt2YWx1ZTogdHJ1ZX0pO1xuICAgIHZhciByYW5kb21fMSA9IHJlcXVpcmVfcmFuZG9tKCk7XG4gICAgdmFyIHNoYTUxMl8xID0gcmVxdWlyZV9zaGE1MTIyKCk7XG4gICAgdmFyIHdpcGVfMSA9IHJlcXVpcmVfd2lwZTMoKTtcbiAgICBleHBvcnRzLlNJR05BVFVSRV9MRU5HVEggPSA2NDtcbiAgICBleHBvcnRzLlBVQkxJQ19LRVlfTEVOR1RIID0gMzI7XG4gICAgZXhwb3J0cy5TRUNSRVRfS0VZX0xFTkdUSCA9IDY0O1xuICAgIGV4cG9ydHMuU0VFRF9MRU5HVEggPSAzMjtcbiAgICBmdW5jdGlvbiBnZihpbml0KSB7XG4gICAgICB2YXIgciA9IG5ldyBGbG9hdDY0QXJyYXkoMTYpO1xuICAgICAgaWYgKGluaXQpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbml0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgcltpXSA9IGluaXRbaV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByO1xuICAgIH1cbiAgICB2YXIgXzkgPSBuZXcgVWludDhBcnJheSgzMik7XG4gICAgXzlbMF0gPSA5O1xuICAgIHZhciBnZjAgPSBnZigpO1xuICAgIHZhciBnZjEgPSBnZihbMV0pO1xuICAgIHZhciBEID0gZ2YoW1xuICAgICAgMzA4ODMsXG4gICAgICA0OTUzLFxuICAgICAgMTk5MTQsXG4gICAgICAzMDE4NyxcbiAgICAgIDU1NDY3LFxuICAgICAgMTY3MDUsXG4gICAgICAyNjM3LFxuICAgICAgMTEyLFxuICAgICAgNTk1NDQsXG4gICAgICAzMDU4NSxcbiAgICAgIDE2NTA1LFxuICAgICAgMzYwMzksXG4gICAgICA2NTEzOSxcbiAgICAgIDExMTE5LFxuICAgICAgMjc4ODYsXG4gICAgICAyMDk5NVxuICAgIF0pO1xuICAgIHZhciBEMiA9IGdmKFtcbiAgICAgIDYxNzg1LFxuICAgICAgOTkwNixcbiAgICAgIDM5ODI4LFxuICAgICAgNjAzNzQsXG4gICAgICA0NTM5OCxcbiAgICAgIDMzNDExLFxuICAgICAgNTI3NCxcbiAgICAgIDIyNCxcbiAgICAgIDUzNTUyLFxuICAgICAgNjExNzEsXG4gICAgICAzMzAxMCxcbiAgICAgIDY1NDIsXG4gICAgICA2NDc0MyxcbiAgICAgIDIyMjM5LFxuICAgICAgNTU3NzIsXG4gICAgICA5MjIyXG4gICAgXSk7XG4gICAgdmFyIFggPSBnZihbXG4gICAgICA1NDU1NCxcbiAgICAgIDM2NjQ1LFxuICAgICAgMTE2MTYsXG4gICAgICA1MTU0MixcbiAgICAgIDQyOTMwLFxuICAgICAgMzgxODEsXG4gICAgICA1MTA0MCxcbiAgICAgIDI2OTI0LFxuICAgICAgNTY0MTIsXG4gICAgICA2NDk4MixcbiAgICAgIDU3OTA1LFxuICAgICAgNDkzMTYsXG4gICAgICAyMTUwMixcbiAgICAgIDUyNTkwLFxuICAgICAgMTQwMzUsXG4gICAgICA4NTUzXG4gICAgXSk7XG4gICAgdmFyIFkgPSBnZihbXG4gICAgICAyNjIwMCxcbiAgICAgIDI2MjE0LFxuICAgICAgMjYyMTQsXG4gICAgICAyNjIxNCxcbiAgICAgIDI2MjE0LFxuICAgICAgMjYyMTQsXG4gICAgICAyNjIxNCxcbiAgICAgIDI2MjE0LFxuICAgICAgMjYyMTQsXG4gICAgICAyNjIxNCxcbiAgICAgIDI2MjE0LFxuICAgICAgMjYyMTQsXG4gICAgICAyNjIxNCxcbiAgICAgIDI2MjE0LFxuICAgICAgMjYyMTQsXG4gICAgICAyNjIxNFxuICAgIF0pO1xuICAgIHZhciBJID0gZ2YoW1xuICAgICAgNDExMzYsXG4gICAgICAxODk1OCxcbiAgICAgIDY5NTEsXG4gICAgICA1MDQxNCxcbiAgICAgIDU4NDg4LFxuICAgICAgNDQzMzUsXG4gICAgICA2MTUwLFxuICAgICAgMTIwOTksXG4gICAgICA1NTIwNyxcbiAgICAgIDE1ODY3LFxuICAgICAgMTUzLFxuICAgICAgMTEwODUsXG4gICAgICA1NzA5OSxcbiAgICAgIDIwNDE3LFxuICAgICAgOTM0NCxcbiAgICAgIDExMTM5XG4gICAgXSk7XG4gICAgZnVuY3Rpb24gc2V0MjU1MTkociwgYSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XG4gICAgICAgIHJbaV0gPSBhW2ldIHwgMDtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gY2FyMjU1MTkobykge1xuICAgICAgdmFyIGMgPSAxO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XG4gICAgICAgIHZhciB2ID0gb1tpXSArIGMgKyA2NTUzNTtcbiAgICAgICAgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTtcbiAgICAgICAgb1tpXSA9IHYgLSBjICogNjU1MzY7XG4gICAgICB9XG4gICAgICBvWzBdICs9IGMgLSAxICsgMzcgKiAoYyAtIDEpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzZWwyNTUxOShwLCBxLCBiKSB7XG4gICAgICB2YXIgYyA9IH4oYiAtIDEpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XG4gICAgICAgIHZhciB0ID0gYyAmIChwW2ldIF4gcVtpXSk7XG4gICAgICAgIHBbaV0gXj0gdDtcbiAgICAgICAgcVtpXSBePSB0O1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBwYWNrMjU1MTkobywgbjIpIHtcbiAgICAgIHZhciBtID0gZ2YoKTtcbiAgICAgIHZhciB0ID0gZ2YoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7IGkrKykge1xuICAgICAgICB0W2ldID0gbjJbaV07XG4gICAgICB9XG4gICAgICBjYXIyNTUxOSh0KTtcbiAgICAgIGNhcjI1NTE5KHQpO1xuICAgICAgY2FyMjU1MTkodCk7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IDI7IGorKykge1xuICAgICAgICBtWzBdID0gdFswXSAtIDY1NTE3O1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IDE1OyBpKyspIHtcbiAgICAgICAgICBtW2ldID0gdFtpXSAtIDY1NTM1IC0gKG1baSAtIDFdID4+IDE2ICYgMSk7XG4gICAgICAgICAgbVtpIC0gMV0gJj0gNjU1MzU7XG4gICAgICAgIH1cbiAgICAgICAgbVsxNV0gPSB0WzE1XSAtIDMyNzY3IC0gKG1bMTRdID4+IDE2ICYgMSk7XG4gICAgICAgIHZhciBiID0gbVsxNV0gPj4gMTYgJiAxO1xuICAgICAgICBtWzE0XSAmPSA2NTUzNTtcbiAgICAgICAgc2VsMjU1MTkodCwgbSwgMSAtIGIpO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XG4gICAgICAgIG9bMiAqIGldID0gdFtpXSAmIDI1NTtcbiAgICAgICAgb1syICogaSArIDFdID0gdFtpXSA+PiA4O1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB2ZXJpZnkzMih4LCB5KSB7XG4gICAgICB2YXIgZCA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDMyOyBpKyspIHtcbiAgICAgICAgZCB8PSB4W2ldIF4geVtpXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAoMSAmIGQgLSAxID4+PiA4KSAtIDE7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG5lcTI1NTE5KGEsIGIpIHtcbiAgICAgIHZhciBjID0gbmV3IFVpbnQ4QXJyYXkoMzIpO1xuICAgICAgdmFyIGQgPSBuZXcgVWludDhBcnJheSgzMik7XG4gICAgICBwYWNrMjU1MTkoYywgYSk7XG4gICAgICBwYWNrMjU1MTkoZCwgYik7XG4gICAgICByZXR1cm4gdmVyaWZ5MzIoYywgZCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBhcjI1NTE5KGEpIHtcbiAgICAgIHZhciBkID0gbmV3IFVpbnQ4QXJyYXkoMzIpO1xuICAgICAgcGFjazI1NTE5KGQsIGEpO1xuICAgICAgcmV0dXJuIGRbMF0gJiAxO1xuICAgIH1cbiAgICBmdW5jdGlvbiB1bnBhY2syNTUxOShvLCBuMikge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XG4gICAgICAgIG9baV0gPSBuMlsyICogaV0gKyAobjJbMiAqIGkgKyAxXSA8PCA4KTtcbiAgICAgIH1cbiAgICAgIG9bMTVdICY9IDMyNzY3O1xuICAgIH1cbiAgICBmdW5jdGlvbiBhZGQobywgYSwgYikge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XG4gICAgICAgIG9baV0gPSBhW2ldICsgYltpXTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gc3ViKG8sIGEsIGIpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7IGkrKykge1xuICAgICAgICBvW2ldID0gYVtpXSAtIGJbaV07XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIG11bChvLCBhLCBiKSB7XG4gICAgICB2YXIgdiwgYywgdDAgPSAwLCB0MSA9IDAsIHQyID0gMCwgdDMgPSAwLCB0NCA9IDAsIHQ1ID0gMCwgdDYgPSAwLCB0NyA9IDAsIHQ4ID0gMCwgdDkgPSAwLCB0MTAgPSAwLCB0MTEgPSAwLCB0MTIgPSAwLCB0MTMgPSAwLCB0MTQgPSAwLCB0MTUgPSAwLCB0MTYgPSAwLCB0MTcgPSAwLCB0MTggPSAwLCB0MTkgPSAwLCB0MjAgPSAwLCB0MjEgPSAwLCB0MjIgPSAwLCB0MjMgPSAwLCB0MjQgPSAwLCB0MjUgPSAwLCB0MjYgPSAwLCB0MjcgPSAwLCB0MjggPSAwLCB0MjkgPSAwLCB0MzAgPSAwLCBiMCA9IGJbMF0sIGIxID0gYlsxXSwgYjIgPSBiWzJdLCBiMyA9IGJbM10sIGI0ID0gYls0XSwgYjUgPSBiWzVdLCBiNiA9IGJbNl0sIGI3ID0gYls3XSwgYjggPSBiWzhdLCBiOSA9IGJbOV0sIGIxMCA9IGJbMTBdLCBiMTEgPSBiWzExXSwgYjEyID0gYlsxMl0sIGIxMyA9IGJbMTNdLCBiMTQgPSBiWzE0XSwgYjE1ID0gYlsxNV07XG4gICAgICB2ID0gYVswXTtcbiAgICAgIHQwICs9IHYgKiBiMDtcbiAgICAgIHQxICs9IHYgKiBiMTtcbiAgICAgIHQyICs9IHYgKiBiMjtcbiAgICAgIHQzICs9IHYgKiBiMztcbiAgICAgIHQ0ICs9IHYgKiBiNDtcbiAgICAgIHQ1ICs9IHYgKiBiNTtcbiAgICAgIHQ2ICs9IHYgKiBiNjtcbiAgICAgIHQ3ICs9IHYgKiBiNztcbiAgICAgIHQ4ICs9IHYgKiBiODtcbiAgICAgIHQ5ICs9IHYgKiBiOTtcbiAgICAgIHQxMCArPSB2ICogYjEwO1xuICAgICAgdDExICs9IHYgKiBiMTE7XG4gICAgICB0MTIgKz0gdiAqIGIxMjtcbiAgICAgIHQxMyArPSB2ICogYjEzO1xuICAgICAgdDE0ICs9IHYgKiBiMTQ7XG4gICAgICB0MTUgKz0gdiAqIGIxNTtcbiAgICAgIHYgPSBhWzFdO1xuICAgICAgdDEgKz0gdiAqIGIwO1xuICAgICAgdDIgKz0gdiAqIGIxO1xuICAgICAgdDMgKz0gdiAqIGIyO1xuICAgICAgdDQgKz0gdiAqIGIzO1xuICAgICAgdDUgKz0gdiAqIGI0O1xuICAgICAgdDYgKz0gdiAqIGI1O1xuICAgICAgdDcgKz0gdiAqIGI2O1xuICAgICAgdDggKz0gdiAqIGI3O1xuICAgICAgdDkgKz0gdiAqIGI4O1xuICAgICAgdDEwICs9IHYgKiBiOTtcbiAgICAgIHQxMSArPSB2ICogYjEwO1xuICAgICAgdDEyICs9IHYgKiBiMTE7XG4gICAgICB0MTMgKz0gdiAqIGIxMjtcbiAgICAgIHQxNCArPSB2ICogYjEzO1xuICAgICAgdDE1ICs9IHYgKiBiMTQ7XG4gICAgICB0MTYgKz0gdiAqIGIxNTtcbiAgICAgIHYgPSBhWzJdO1xuICAgICAgdDIgKz0gdiAqIGIwO1xuICAgICAgdDMgKz0gdiAqIGIxO1xuICAgICAgdDQgKz0gdiAqIGIyO1xuICAgICAgdDUgKz0gdiAqIGIzO1xuICAgICAgdDYgKz0gdiAqIGI0O1xuICAgICAgdDcgKz0gdiAqIGI1O1xuICAgICAgdDggKz0gdiAqIGI2O1xuICAgICAgdDkgKz0gdiAqIGI3O1xuICAgICAgdDEwICs9IHYgKiBiODtcbiAgICAgIHQxMSArPSB2ICogYjk7XG4gICAgICB0MTIgKz0gdiAqIGIxMDtcbiAgICAgIHQxMyArPSB2ICogYjExO1xuICAgICAgdDE0ICs9IHYgKiBiMTI7XG4gICAgICB0MTUgKz0gdiAqIGIxMztcbiAgICAgIHQxNiArPSB2ICogYjE0O1xuICAgICAgdDE3ICs9IHYgKiBiMTU7XG4gICAgICB2ID0gYVszXTtcbiAgICAgIHQzICs9IHYgKiBiMDtcbiAgICAgIHQ0ICs9IHYgKiBiMTtcbiAgICAgIHQ1ICs9IHYgKiBiMjtcbiAgICAgIHQ2ICs9IHYgKiBiMztcbiAgICAgIHQ3ICs9IHYgKiBiNDtcbiAgICAgIHQ4ICs9IHYgKiBiNTtcbiAgICAgIHQ5ICs9IHYgKiBiNjtcbiAgICAgIHQxMCArPSB2ICogYjc7XG4gICAgICB0MTEgKz0gdiAqIGI4O1xuICAgICAgdDEyICs9IHYgKiBiOTtcbiAgICAgIHQxMyArPSB2ICogYjEwO1xuICAgICAgdDE0ICs9IHYgKiBiMTE7XG4gICAgICB0MTUgKz0gdiAqIGIxMjtcbiAgICAgIHQxNiArPSB2ICogYjEzO1xuICAgICAgdDE3ICs9IHYgKiBiMTQ7XG4gICAgICB0MTggKz0gdiAqIGIxNTtcbiAgICAgIHYgPSBhWzRdO1xuICAgICAgdDQgKz0gdiAqIGIwO1xuICAgICAgdDUgKz0gdiAqIGIxO1xuICAgICAgdDYgKz0gdiAqIGIyO1xuICAgICAgdDcgKz0gdiAqIGIzO1xuICAgICAgdDggKz0gdiAqIGI0O1xuICAgICAgdDkgKz0gdiAqIGI1O1xuICAgICAgdDEwICs9IHYgKiBiNjtcbiAgICAgIHQxMSArPSB2ICogYjc7XG4gICAgICB0MTIgKz0gdiAqIGI4O1xuICAgICAgdDEzICs9IHYgKiBiOTtcbiAgICAgIHQxNCArPSB2ICogYjEwO1xuICAgICAgdDE1ICs9IHYgKiBiMTE7XG4gICAgICB0MTYgKz0gdiAqIGIxMjtcbiAgICAgIHQxNyArPSB2ICogYjEzO1xuICAgICAgdDE4ICs9IHYgKiBiMTQ7XG4gICAgICB0MTkgKz0gdiAqIGIxNTtcbiAgICAgIHYgPSBhWzVdO1xuICAgICAgdDUgKz0gdiAqIGIwO1xuICAgICAgdDYgKz0gdiAqIGIxO1xuICAgICAgdDcgKz0gdiAqIGIyO1xuICAgICAgdDggKz0gdiAqIGIzO1xuICAgICAgdDkgKz0gdiAqIGI0O1xuICAgICAgdDEwICs9IHYgKiBiNTtcbiAgICAgIHQxMSArPSB2ICogYjY7XG4gICAgICB0MTIgKz0gdiAqIGI3O1xuICAgICAgdDEzICs9IHYgKiBiODtcbiAgICAgIHQxNCArPSB2ICogYjk7XG4gICAgICB0MTUgKz0gdiAqIGIxMDtcbiAgICAgIHQxNiArPSB2ICogYjExO1xuICAgICAgdDE3ICs9IHYgKiBiMTI7XG4gICAgICB0MTggKz0gdiAqIGIxMztcbiAgICAgIHQxOSArPSB2ICogYjE0O1xuICAgICAgdDIwICs9IHYgKiBiMTU7XG4gICAgICB2ID0gYVs2XTtcbiAgICAgIHQ2ICs9IHYgKiBiMDtcbiAgICAgIHQ3ICs9IHYgKiBiMTtcbiAgICAgIHQ4ICs9IHYgKiBiMjtcbiAgICAgIHQ5ICs9IHYgKiBiMztcbiAgICAgIHQxMCArPSB2ICogYjQ7XG4gICAgICB0MTEgKz0gdiAqIGI1O1xuICAgICAgdDEyICs9IHYgKiBiNjtcbiAgICAgIHQxMyArPSB2ICogYjc7XG4gICAgICB0MTQgKz0gdiAqIGI4O1xuICAgICAgdDE1ICs9IHYgKiBiOTtcbiAgICAgIHQxNiArPSB2ICogYjEwO1xuICAgICAgdDE3ICs9IHYgKiBiMTE7XG4gICAgICB0MTggKz0gdiAqIGIxMjtcbiAgICAgIHQxOSArPSB2ICogYjEzO1xuICAgICAgdDIwICs9IHYgKiBiMTQ7XG4gICAgICB0MjEgKz0gdiAqIGIxNTtcbiAgICAgIHYgPSBhWzddO1xuICAgICAgdDcgKz0gdiAqIGIwO1xuICAgICAgdDggKz0gdiAqIGIxO1xuICAgICAgdDkgKz0gdiAqIGIyO1xuICAgICAgdDEwICs9IHYgKiBiMztcbiAgICAgIHQxMSArPSB2ICogYjQ7XG4gICAgICB0MTIgKz0gdiAqIGI1O1xuICAgICAgdDEzICs9IHYgKiBiNjtcbiAgICAgIHQxNCArPSB2ICogYjc7XG4gICAgICB0MTUgKz0gdiAqIGI4O1xuICAgICAgdDE2ICs9IHYgKiBiOTtcbiAgICAgIHQxNyArPSB2ICogYjEwO1xuICAgICAgdDE4ICs9IHYgKiBiMTE7XG4gICAgICB0MTkgKz0gdiAqIGIxMjtcbiAgICAgIHQyMCArPSB2ICogYjEzO1xuICAgICAgdDIxICs9IHYgKiBiMTQ7XG4gICAgICB0MjIgKz0gdiAqIGIxNTtcbiAgICAgIHYgPSBhWzhdO1xuICAgICAgdDggKz0gdiAqIGIwO1xuICAgICAgdDkgKz0gdiAqIGIxO1xuICAgICAgdDEwICs9IHYgKiBiMjtcbiAgICAgIHQxMSArPSB2ICogYjM7XG4gICAgICB0MTIgKz0gdiAqIGI0O1xuICAgICAgdDEzICs9IHYgKiBiNTtcbiAgICAgIHQxNCArPSB2ICogYjY7XG4gICAgICB0MTUgKz0gdiAqIGI3O1xuICAgICAgdDE2ICs9IHYgKiBiODtcbiAgICAgIHQxNyArPSB2ICogYjk7XG4gICAgICB0MTggKz0gdiAqIGIxMDtcbiAgICAgIHQxOSArPSB2ICogYjExO1xuICAgICAgdDIwICs9IHYgKiBiMTI7XG4gICAgICB0MjEgKz0gdiAqIGIxMztcbiAgICAgIHQyMiArPSB2ICogYjE0O1xuICAgICAgdDIzICs9IHYgKiBiMTU7XG4gICAgICB2ID0gYVs5XTtcbiAgICAgIHQ5ICs9IHYgKiBiMDtcbiAgICAgIHQxMCArPSB2ICogYjE7XG4gICAgICB0MTEgKz0gdiAqIGIyO1xuICAgICAgdDEyICs9IHYgKiBiMztcbiAgICAgIHQxMyArPSB2ICogYjQ7XG4gICAgICB0MTQgKz0gdiAqIGI1O1xuICAgICAgdDE1ICs9IHYgKiBiNjtcbiAgICAgIHQxNiArPSB2ICogYjc7XG4gICAgICB0MTcgKz0gdiAqIGI4O1xuICAgICAgdDE4ICs9IHYgKiBiOTtcbiAgICAgIHQxOSArPSB2ICogYjEwO1xuICAgICAgdDIwICs9IHYgKiBiMTE7XG4gICAgICB0MjEgKz0gdiAqIGIxMjtcbiAgICAgIHQyMiArPSB2ICogYjEzO1xuICAgICAgdDIzICs9IHYgKiBiMTQ7XG4gICAgICB0MjQgKz0gdiAqIGIxNTtcbiAgICAgIHYgPSBhWzEwXTtcbiAgICAgIHQxMCArPSB2ICogYjA7XG4gICAgICB0MTEgKz0gdiAqIGIxO1xuICAgICAgdDEyICs9IHYgKiBiMjtcbiAgICAgIHQxMyArPSB2ICogYjM7XG4gICAgICB0MTQgKz0gdiAqIGI0O1xuICAgICAgdDE1ICs9IHYgKiBiNTtcbiAgICAgIHQxNiArPSB2ICogYjY7XG4gICAgICB0MTcgKz0gdiAqIGI3O1xuICAgICAgdDE4ICs9IHYgKiBiODtcbiAgICAgIHQxOSArPSB2ICogYjk7XG4gICAgICB0MjAgKz0gdiAqIGIxMDtcbiAgICAgIHQyMSArPSB2ICogYjExO1xuICAgICAgdDIyICs9IHYgKiBiMTI7XG4gICAgICB0MjMgKz0gdiAqIGIxMztcbiAgICAgIHQyNCArPSB2ICogYjE0O1xuICAgICAgdDI1ICs9IHYgKiBiMTU7XG4gICAgICB2ID0gYVsxMV07XG4gICAgICB0MTEgKz0gdiAqIGIwO1xuICAgICAgdDEyICs9IHYgKiBiMTtcbiAgICAgIHQxMyArPSB2ICogYjI7XG4gICAgICB0MTQgKz0gdiAqIGIzO1xuICAgICAgdDE1ICs9IHYgKiBiNDtcbiAgICAgIHQxNiArPSB2ICogYjU7XG4gICAgICB0MTcgKz0gdiAqIGI2O1xuICAgICAgdDE4ICs9IHYgKiBiNztcbiAgICAgIHQxOSArPSB2ICogYjg7XG4gICAgICB0MjAgKz0gdiAqIGI5O1xuICAgICAgdDIxICs9IHYgKiBiMTA7XG4gICAgICB0MjIgKz0gdiAqIGIxMTtcbiAgICAgIHQyMyArPSB2ICogYjEyO1xuICAgICAgdDI0ICs9IHYgKiBiMTM7XG4gICAgICB0MjUgKz0gdiAqIGIxNDtcbiAgICAgIHQyNiArPSB2ICogYjE1O1xuICAgICAgdiA9IGFbMTJdO1xuICAgICAgdDEyICs9IHYgKiBiMDtcbiAgICAgIHQxMyArPSB2ICogYjE7XG4gICAgICB0MTQgKz0gdiAqIGIyO1xuICAgICAgdDE1ICs9IHYgKiBiMztcbiAgICAgIHQxNiArPSB2ICogYjQ7XG4gICAgICB0MTcgKz0gdiAqIGI1O1xuICAgICAgdDE4ICs9IHYgKiBiNjtcbiAgICAgIHQxOSArPSB2ICogYjc7XG4gICAgICB0MjAgKz0gdiAqIGI4O1xuICAgICAgdDIxICs9IHYgKiBiOTtcbiAgICAgIHQyMiArPSB2ICogYjEwO1xuICAgICAgdDIzICs9IHYgKiBiMTE7XG4gICAgICB0MjQgKz0gdiAqIGIxMjtcbiAgICAgIHQyNSArPSB2ICogYjEzO1xuICAgICAgdDI2ICs9IHYgKiBiMTQ7XG4gICAgICB0MjcgKz0gdiAqIGIxNTtcbiAgICAgIHYgPSBhWzEzXTtcbiAgICAgIHQxMyArPSB2ICogYjA7XG4gICAgICB0MTQgKz0gdiAqIGIxO1xuICAgICAgdDE1ICs9IHYgKiBiMjtcbiAgICAgIHQxNiArPSB2ICogYjM7XG4gICAgICB0MTcgKz0gdiAqIGI0O1xuICAgICAgdDE4ICs9IHYgKiBiNTtcbiAgICAgIHQxOSArPSB2ICogYjY7XG4gICAgICB0MjAgKz0gdiAqIGI3O1xuICAgICAgdDIxICs9IHYgKiBiODtcbiAgICAgIHQyMiArPSB2ICogYjk7XG4gICAgICB0MjMgKz0gdiAqIGIxMDtcbiAgICAgIHQyNCArPSB2ICogYjExO1xuICAgICAgdDI1ICs9IHYgKiBiMTI7XG4gICAgICB0MjYgKz0gdiAqIGIxMztcbiAgICAgIHQyNyArPSB2ICogYjE0O1xuICAgICAgdDI4ICs9IHYgKiBiMTU7XG4gICAgICB2ID0gYVsxNF07XG4gICAgICB0MTQgKz0gdiAqIGIwO1xuICAgICAgdDE1ICs9IHYgKiBiMTtcbiAgICAgIHQxNiArPSB2ICogYjI7XG4gICAgICB0MTcgKz0gdiAqIGIzO1xuICAgICAgdDE4ICs9IHYgKiBiNDtcbiAgICAgIHQxOSArPSB2ICogYjU7XG4gICAgICB0MjAgKz0gdiAqIGI2O1xuICAgICAgdDIxICs9IHYgKiBiNztcbiAgICAgIHQyMiArPSB2ICogYjg7XG4gICAgICB0MjMgKz0gdiAqIGI5O1xuICAgICAgdDI0ICs9IHYgKiBiMTA7XG4gICAgICB0MjUgKz0gdiAqIGIxMTtcbiAgICAgIHQyNiArPSB2ICogYjEyO1xuICAgICAgdDI3ICs9IHYgKiBiMTM7XG4gICAgICB0MjggKz0gdiAqIGIxNDtcbiAgICAgIHQyOSArPSB2ICogYjE1O1xuICAgICAgdiA9IGFbMTVdO1xuICAgICAgdDE1ICs9IHYgKiBiMDtcbiAgICAgIHQxNiArPSB2ICogYjE7XG4gICAgICB0MTcgKz0gdiAqIGIyO1xuICAgICAgdDE4ICs9IHYgKiBiMztcbiAgICAgIHQxOSArPSB2ICogYjQ7XG4gICAgICB0MjAgKz0gdiAqIGI1O1xuICAgICAgdDIxICs9IHYgKiBiNjtcbiAgICAgIHQyMiArPSB2ICogYjc7XG4gICAgICB0MjMgKz0gdiAqIGI4O1xuICAgICAgdDI0ICs9IHYgKiBiOTtcbiAgICAgIHQyNSArPSB2ICogYjEwO1xuICAgICAgdDI2ICs9IHYgKiBiMTE7XG4gICAgICB0MjcgKz0gdiAqIGIxMjtcbiAgICAgIHQyOCArPSB2ICogYjEzO1xuICAgICAgdDI5ICs9IHYgKiBiMTQ7XG4gICAgICB0MzAgKz0gdiAqIGIxNTtcbiAgICAgIHQwICs9IDM4ICogdDE2O1xuICAgICAgdDEgKz0gMzggKiB0MTc7XG4gICAgICB0MiArPSAzOCAqIHQxODtcbiAgICAgIHQzICs9IDM4ICogdDE5O1xuICAgICAgdDQgKz0gMzggKiB0MjA7XG4gICAgICB0NSArPSAzOCAqIHQyMTtcbiAgICAgIHQ2ICs9IDM4ICogdDIyO1xuICAgICAgdDcgKz0gMzggKiB0MjM7XG4gICAgICB0OCArPSAzOCAqIHQyNDtcbiAgICAgIHQ5ICs9IDM4ICogdDI1O1xuICAgICAgdDEwICs9IDM4ICogdDI2O1xuICAgICAgdDExICs9IDM4ICogdDI3O1xuICAgICAgdDEyICs9IDM4ICogdDI4O1xuICAgICAgdDEzICs9IDM4ICogdDI5O1xuICAgICAgdDE0ICs9IDM4ICogdDMwO1xuICAgICAgYyA9IDE7XG4gICAgICB2ID0gdDAgKyBjICsgNjU1MzU7XG4gICAgICBjID0gTWF0aC5mbG9vcih2IC8gNjU1MzYpO1xuICAgICAgdDAgPSB2IC0gYyAqIDY1NTM2O1xuICAgICAgdiA9IHQxICsgYyArIDY1NTM1O1xuICAgICAgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTtcbiAgICAgIHQxID0gdiAtIGMgKiA2NTUzNjtcbiAgICAgIHYgPSB0MiArIGMgKyA2NTUzNTtcbiAgICAgIGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7XG4gICAgICB0MiA9IHYgLSBjICogNjU1MzY7XG4gICAgICB2ID0gdDMgKyBjICsgNjU1MzU7XG4gICAgICBjID0gTWF0aC5mbG9vcih2IC8gNjU1MzYpO1xuICAgICAgdDMgPSB2IC0gYyAqIDY1NTM2O1xuICAgICAgdiA9IHQ0ICsgYyArIDY1NTM1O1xuICAgICAgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTtcbiAgICAgIHQ0ID0gdiAtIGMgKiA2NTUzNjtcbiAgICAgIHYgPSB0NSArIGMgKyA2NTUzNTtcbiAgICAgIGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7XG4gICAgICB0NSA9IHYgLSBjICogNjU1MzY7XG4gICAgICB2ID0gdDYgKyBjICsgNjU1MzU7XG4gICAgICBjID0gTWF0aC5mbG9vcih2IC8gNjU1MzYpO1xuICAgICAgdDYgPSB2IC0gYyAqIDY1NTM2O1xuICAgICAgdiA9IHQ3ICsgYyArIDY1NTM1O1xuICAgICAgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTtcbiAgICAgIHQ3ID0gdiAtIGMgKiA2NTUzNjtcbiAgICAgIHYgPSB0OCArIGMgKyA2NTUzNTtcbiAgICAgIGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7XG4gICAgICB0OCA9IHYgLSBjICogNjU1MzY7XG4gICAgICB2ID0gdDkgKyBjICsgNjU1MzU7XG4gICAgICBjID0gTWF0aC5mbG9vcih2IC8gNjU1MzYpO1xuICAgICAgdDkgPSB2IC0gYyAqIDY1NTM2O1xuICAgICAgdiA9IHQxMCArIGMgKyA2NTUzNTtcbiAgICAgIGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7XG4gICAgICB0MTAgPSB2IC0gYyAqIDY1NTM2O1xuICAgICAgdiA9IHQxMSArIGMgKyA2NTUzNTtcbiAgICAgIGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7XG4gICAgICB0MTEgPSB2IC0gYyAqIDY1NTM2O1xuICAgICAgdiA9IHQxMiArIGMgKyA2NTUzNTtcbiAgICAgIGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7XG4gICAgICB0MTIgPSB2IC0gYyAqIDY1NTM2O1xuICAgICAgdiA9IHQxMyArIGMgKyA2NTUzNTtcbiAgICAgIGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7XG4gICAgICB0MTMgPSB2IC0gYyAqIDY1NTM2O1xuICAgICAgdiA9IHQxNCArIGMgKyA2NTUzNTtcbiAgICAgIGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7XG4gICAgICB0MTQgPSB2IC0gYyAqIDY1NTM2O1xuICAgICAgdiA9IHQxNSArIGMgKyA2NTUzNTtcbiAgICAgIGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7XG4gICAgICB0MTUgPSB2IC0gYyAqIDY1NTM2O1xuICAgICAgdDAgKz0gYyAtIDEgKyAzNyAqIChjIC0gMSk7XG4gICAgICBjID0gMTtcbiAgICAgIHYgPSB0MCArIGMgKyA2NTUzNTtcbiAgICAgIGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7XG4gICAgICB0MCA9IHYgLSBjICogNjU1MzY7XG4gICAgICB2ID0gdDEgKyBjICsgNjU1MzU7XG4gICAgICBjID0gTWF0aC5mbG9vcih2IC8gNjU1MzYpO1xuICAgICAgdDEgPSB2IC0gYyAqIDY1NTM2O1xuICAgICAgdiA9IHQyICsgYyArIDY1NTM1O1xuICAgICAgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTtcbiAgICAgIHQyID0gdiAtIGMgKiA2NTUzNjtcbiAgICAgIHYgPSB0MyArIGMgKyA2NTUzNTtcbiAgICAgIGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7XG4gICAgICB0MyA9IHYgLSBjICogNjU1MzY7XG4gICAgICB2ID0gdDQgKyBjICsgNjU1MzU7XG4gICAgICBjID0gTWF0aC5mbG9vcih2IC8gNjU1MzYpO1xuICAgICAgdDQgPSB2IC0gYyAqIDY1NTM2O1xuICAgICAgdiA9IHQ1ICsgYyArIDY1NTM1O1xuICAgICAgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTtcbiAgICAgIHQ1ID0gdiAtIGMgKiA2NTUzNjtcbiAgICAgIHYgPSB0NiArIGMgKyA2NTUzNTtcbiAgICAgIGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7XG4gICAgICB0NiA9IHYgLSBjICogNjU1MzY7XG4gICAgICB2ID0gdDcgKyBjICsgNjU1MzU7XG4gICAgICBjID0gTWF0aC5mbG9vcih2IC8gNjU1MzYpO1xuICAgICAgdDcgPSB2IC0gYyAqIDY1NTM2O1xuICAgICAgdiA9IHQ4ICsgYyArIDY1NTM1O1xuICAgICAgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTtcbiAgICAgIHQ4ID0gdiAtIGMgKiA2NTUzNjtcbiAgICAgIHYgPSB0OSArIGMgKyA2NTUzNTtcbiAgICAgIGMgPSBNYXRoLmZsb29yKHYgLyA2NTUzNik7XG4gICAgICB0OSA9IHYgLSBjICogNjU1MzY7XG4gICAgICB2ID0gdDEwICsgYyArIDY1NTM1O1xuICAgICAgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTtcbiAgICAgIHQxMCA9IHYgLSBjICogNjU1MzY7XG4gICAgICB2ID0gdDExICsgYyArIDY1NTM1O1xuICAgICAgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTtcbiAgICAgIHQxMSA9IHYgLSBjICogNjU1MzY7XG4gICAgICB2ID0gdDEyICsgYyArIDY1NTM1O1xuICAgICAgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTtcbiAgICAgIHQxMiA9IHYgLSBjICogNjU1MzY7XG4gICAgICB2ID0gdDEzICsgYyArIDY1NTM1O1xuICAgICAgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTtcbiAgICAgIHQxMyA9IHYgLSBjICogNjU1MzY7XG4gICAgICB2ID0gdDE0ICsgYyArIDY1NTM1O1xuICAgICAgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTtcbiAgICAgIHQxNCA9IHYgLSBjICogNjU1MzY7XG4gICAgICB2ID0gdDE1ICsgYyArIDY1NTM1O1xuICAgICAgYyA9IE1hdGguZmxvb3IodiAvIDY1NTM2KTtcbiAgICAgIHQxNSA9IHYgLSBjICogNjU1MzY7XG4gICAgICB0MCArPSBjIC0gMSArIDM3ICogKGMgLSAxKTtcbiAgICAgIG9bMF0gPSB0MDtcbiAgICAgIG9bMV0gPSB0MTtcbiAgICAgIG9bMl0gPSB0MjtcbiAgICAgIG9bM10gPSB0MztcbiAgICAgIG9bNF0gPSB0NDtcbiAgICAgIG9bNV0gPSB0NTtcbiAgICAgIG9bNl0gPSB0NjtcbiAgICAgIG9bN10gPSB0NztcbiAgICAgIG9bOF0gPSB0ODtcbiAgICAgIG9bOV0gPSB0OTtcbiAgICAgIG9bMTBdID0gdDEwO1xuICAgICAgb1sxMV0gPSB0MTE7XG4gICAgICBvWzEyXSA9IHQxMjtcbiAgICAgIG9bMTNdID0gdDEzO1xuICAgICAgb1sxNF0gPSB0MTQ7XG4gICAgICBvWzE1XSA9IHQxNTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc3F1YXJlKG8sIGEpIHtcbiAgICAgIG11bChvLCBhLCBhKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaW52MjU1MTkobywgaSkge1xuICAgICAgdmFyIGMgPSBnZigpO1xuICAgICAgdmFyIGE7XG4gICAgICBmb3IgKGEgPSAwOyBhIDwgMTY7IGErKykge1xuICAgICAgICBjW2FdID0gaVthXTtcbiAgICAgIH1cbiAgICAgIGZvciAoYSA9IDI1MzsgYSA+PSAwOyBhLS0pIHtcbiAgICAgICAgc3F1YXJlKGMsIGMpO1xuICAgICAgICBpZiAoYSAhPT0gMiAmJiBhICE9PSA0KSB7XG4gICAgICAgICAgbXVsKGMsIGMsIGkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmb3IgKGEgPSAwOyBhIDwgMTY7IGErKykge1xuICAgICAgICBvW2FdID0gY1thXTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gcG93MjUyMyhvLCBpKSB7XG4gICAgICB2YXIgYyA9IGdmKCk7XG4gICAgICB2YXIgYTtcbiAgICAgIGZvciAoYSA9IDA7IGEgPCAxNjsgYSsrKSB7XG4gICAgICAgIGNbYV0gPSBpW2FdO1xuICAgICAgfVxuICAgICAgZm9yIChhID0gMjUwOyBhID49IDA7IGEtLSkge1xuICAgICAgICBzcXVhcmUoYywgYyk7XG4gICAgICAgIGlmIChhICE9PSAxKSB7XG4gICAgICAgICAgbXVsKGMsIGMsIGkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmb3IgKGEgPSAwOyBhIDwgMTY7IGErKykge1xuICAgICAgICBvW2FdID0gY1thXTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gZWRhZGQocCwgcSkge1xuICAgICAgdmFyIGEgPSBnZigpLCBiID0gZ2YoKSwgYyA9IGdmKCksIGQgPSBnZigpLCBlID0gZ2YoKSwgZiA9IGdmKCksIGcgPSBnZigpLCBoID0gZ2YoKSwgdCA9IGdmKCk7XG4gICAgICBzdWIoYSwgcFsxXSwgcFswXSk7XG4gICAgICBzdWIodCwgcVsxXSwgcVswXSk7XG4gICAgICBtdWwoYSwgYSwgdCk7XG4gICAgICBhZGQoYiwgcFswXSwgcFsxXSk7XG4gICAgICBhZGQodCwgcVswXSwgcVsxXSk7XG4gICAgICBtdWwoYiwgYiwgdCk7XG4gICAgICBtdWwoYywgcFszXSwgcVszXSk7XG4gICAgICBtdWwoYywgYywgRDIpO1xuICAgICAgbXVsKGQsIHBbMl0sIHFbMl0pO1xuICAgICAgYWRkKGQsIGQsIGQpO1xuICAgICAgc3ViKGUsIGIsIGEpO1xuICAgICAgc3ViKGYsIGQsIGMpO1xuICAgICAgYWRkKGcsIGQsIGMpO1xuICAgICAgYWRkKGgsIGIsIGEpO1xuICAgICAgbXVsKHBbMF0sIGUsIGYpO1xuICAgICAgbXVsKHBbMV0sIGgsIGcpO1xuICAgICAgbXVsKHBbMl0sIGcsIGYpO1xuICAgICAgbXVsKHBbM10sIGUsIGgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjc3dhcChwLCBxLCBiKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgICAgICBzZWwyNTUxOShwW2ldLCBxW2ldLCBiKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gcGFjayhyLCBwKSB7XG4gICAgICB2YXIgdHggPSBnZigpLCB0eSA9IGdmKCksIHppID0gZ2YoKTtcbiAgICAgIGludjI1NTE5KHppLCBwWzJdKTtcbiAgICAgIG11bCh0eCwgcFswXSwgemkpO1xuICAgICAgbXVsKHR5LCBwWzFdLCB6aSk7XG4gICAgICBwYWNrMjU1MTkociwgdHkpO1xuICAgICAgclszMV0gXj0gcGFyMjU1MTkodHgpIDw8IDc7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNjYWxhcm11bHQocCwgcSwgczIpIHtcbiAgICAgIHNldDI1NTE5KHBbMF0sIGdmMCk7XG4gICAgICBzZXQyNTUxOShwWzFdLCBnZjEpO1xuICAgICAgc2V0MjU1MTkocFsyXSwgZ2YxKTtcbiAgICAgIHNldDI1NTE5KHBbM10sIGdmMCk7XG4gICAgICBmb3IgKHZhciBpID0gMjU1OyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgYiA9IHMyW2kgLyA4IHwgMF0gPj4gKGkgJiA3KSAmIDE7XG4gICAgICAgIGNzd2FwKHAsIHEsIGIpO1xuICAgICAgICBlZGFkZChxLCBwKTtcbiAgICAgICAgZWRhZGQocCwgcCk7XG4gICAgICAgIGNzd2FwKHAsIHEsIGIpO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBzY2FsYXJiYXNlKHAsIHMyKSB7XG4gICAgICB2YXIgcSA9IFtnZigpLCBnZigpLCBnZigpLCBnZigpXTtcbiAgICAgIHNldDI1NTE5KHFbMF0sIFgpO1xuICAgICAgc2V0MjU1MTkocVsxXSwgWSk7XG4gICAgICBzZXQyNTUxOShxWzJdLCBnZjEpO1xuICAgICAgbXVsKHFbM10sIFgsIFkpO1xuICAgICAgc2NhbGFybXVsdChwLCBxLCBzMik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdlbmVyYXRlS2V5UGFpckZyb21TZWVkKHNlZWQpIHtcbiAgICAgIGlmIChzZWVkLmxlbmd0aCAhPT0gZXhwb3J0cy5TRUVEX0xFTkdUSCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJlZDI1NTE5OiBzZWVkIG11c3QgYmUgXCIgKyBleHBvcnRzLlNFRURfTEVOR1RIICsgXCIgYnl0ZXNcIik7XG4gICAgICB9XG4gICAgICB2YXIgZCA9IHNoYTUxMl8xLmhhc2goc2VlZCk7XG4gICAgICBkWzBdICY9IDI0ODtcbiAgICAgIGRbMzFdICY9IDEyNztcbiAgICAgIGRbMzFdIHw9IDY0O1xuICAgICAgdmFyIHB1YmxpY0tleSA9IG5ldyBVaW50OEFycmF5KDMyKTtcbiAgICAgIHZhciBwID0gW2dmKCksIGdmKCksIGdmKCksIGdmKCldO1xuICAgICAgc2NhbGFyYmFzZShwLCBkKTtcbiAgICAgIHBhY2socHVibGljS2V5LCBwKTtcbiAgICAgIHZhciBzZWNyZXRLZXkgPSBuZXcgVWludDhBcnJheSg2NCk7XG4gICAgICBzZWNyZXRLZXkuc2V0KHNlZWQpO1xuICAgICAgc2VjcmV0S2V5LnNldChwdWJsaWNLZXksIDMyKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHB1YmxpY0tleSxcbiAgICAgICAgc2VjcmV0S2V5XG4gICAgICB9O1xuICAgIH1cbiAgICBleHBvcnRzLmdlbmVyYXRlS2V5UGFpckZyb21TZWVkID0gZ2VuZXJhdGVLZXlQYWlyRnJvbVNlZWQ7XG4gICAgZnVuY3Rpb24gZ2VuZXJhdGVLZXlQYWlyKHBybmcpIHtcbiAgICAgIHZhciBzZWVkID0gcmFuZG9tXzEucmFuZG9tQnl0ZXMoMzIsIHBybmcpO1xuICAgICAgdmFyIHJlc3VsdCA9IGdlbmVyYXRlS2V5UGFpckZyb21TZWVkKHNlZWQpO1xuICAgICAgd2lwZV8xLndpcGUoc2VlZCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBleHBvcnRzLmdlbmVyYXRlS2V5UGFpciA9IGdlbmVyYXRlS2V5UGFpcjtcbiAgICBmdW5jdGlvbiBleHRyYWN0UHVibGljS2V5RnJvbVNlY3JldEtleShzZWNyZXRLZXkpIHtcbiAgICAgIGlmIChzZWNyZXRLZXkubGVuZ3RoICE9PSBleHBvcnRzLlNFQ1JFVF9LRVlfTEVOR1RIKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImVkMjU1MTk6IHNlY3JldCBrZXkgbXVzdCBiZSBcIiArIGV4cG9ydHMuU0VDUkVUX0tFWV9MRU5HVEggKyBcIiBieXRlc1wiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShzZWNyZXRLZXkuc3ViYXJyYXkoMzIpKTtcbiAgICB9XG4gICAgZXhwb3J0cy5leHRyYWN0UHVibGljS2V5RnJvbVNlY3JldEtleSA9IGV4dHJhY3RQdWJsaWNLZXlGcm9tU2VjcmV0S2V5O1xuICAgIHZhciBMID0gbmV3IEZsb2F0NjRBcnJheShbXG4gICAgICAyMzcsXG4gICAgICAyMTEsXG4gICAgICAyNDUsXG4gICAgICA5MixcbiAgICAgIDI2LFxuICAgICAgOTksXG4gICAgICAxOCxcbiAgICAgIDg4LFxuICAgICAgMjE0LFxuICAgICAgMTU2LFxuICAgICAgMjQ3LFxuICAgICAgMTYyLFxuICAgICAgMjIyLFxuICAgICAgMjQ5LFxuICAgICAgMjIyLFxuICAgICAgMjAsXG4gICAgICAwLFxuICAgICAgMCxcbiAgICAgIDAsXG4gICAgICAwLFxuICAgICAgMCxcbiAgICAgIDAsXG4gICAgICAwLFxuICAgICAgMCxcbiAgICAgIDAsXG4gICAgICAwLFxuICAgICAgMCxcbiAgICAgIDAsXG4gICAgICAwLFxuICAgICAgMCxcbiAgICAgIDAsXG4gICAgICAxNlxuICAgIF0pO1xuICAgIGZ1bmN0aW9uIG1vZEwociwgeCkge1xuICAgICAgdmFyIGNhcnJ5O1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgajtcbiAgICAgIHZhciBrO1xuICAgICAgZm9yIChpID0gNjM7IGkgPj0gMzI7IC0taSkge1xuICAgICAgICBjYXJyeSA9IDA7XG4gICAgICAgIGZvciAoaiA9IGkgLSAzMiwgayA9IGkgLSAxMjsgaiA8IGs7ICsraikge1xuICAgICAgICAgIHhbal0gKz0gY2FycnkgLSAxNiAqIHhbaV0gKiBMW2ogLSAoaSAtIDMyKV07XG4gICAgICAgICAgY2FycnkgPSBNYXRoLmZsb29yKCh4W2pdICsgMTI4KSAvIDI1Nik7XG4gICAgICAgICAgeFtqXSAtPSBjYXJyeSAqIDI1NjtcbiAgICAgICAgfVxuICAgICAgICB4W2pdICs9IGNhcnJ5O1xuICAgICAgICB4W2ldID0gMDtcbiAgICAgIH1cbiAgICAgIGNhcnJ5ID0gMDtcbiAgICAgIGZvciAoaiA9IDA7IGogPCAzMjsgaisrKSB7XG4gICAgICAgIHhbal0gKz0gY2FycnkgLSAoeFszMV0gPj4gNCkgKiBMW2pdO1xuICAgICAgICBjYXJyeSA9IHhbal0gPj4gODtcbiAgICAgICAgeFtqXSAmPSAyNTU7XG4gICAgICB9XG4gICAgICBmb3IgKGogPSAwOyBqIDwgMzI7IGorKykge1xuICAgICAgICB4W2pdIC09IGNhcnJ5ICogTFtqXTtcbiAgICAgIH1cbiAgICAgIGZvciAoaSA9IDA7IGkgPCAzMjsgaSsrKSB7XG4gICAgICAgIHhbaSArIDFdICs9IHhbaV0gPj4gODtcbiAgICAgICAgcltpXSA9IHhbaV0gJiAyNTU7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlZHVjZShyKSB7XG4gICAgICB2YXIgeCA9IG5ldyBGbG9hdDY0QXJyYXkoNjQpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA2NDsgaSsrKSB7XG4gICAgICAgIHhbaV0gPSByW2ldO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA2NDsgaSsrKSB7XG4gICAgICAgIHJbaV0gPSAwO1xuICAgICAgfVxuICAgICAgbW9kTChyLCB4KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2lnbihzZWNyZXRLZXksIG1lc3NhZ2UpIHtcbiAgICAgIHZhciB4ID0gbmV3IEZsb2F0NjRBcnJheSg2NCk7XG4gICAgICB2YXIgcCA9IFtnZigpLCBnZigpLCBnZigpLCBnZigpXTtcbiAgICAgIHZhciBkID0gc2hhNTEyXzEuaGFzaChzZWNyZXRLZXkuc3ViYXJyYXkoMCwgMzIpKTtcbiAgICAgIGRbMF0gJj0gMjQ4O1xuICAgICAgZFszMV0gJj0gMTI3O1xuICAgICAgZFszMV0gfD0gNjQ7XG4gICAgICB2YXIgc2lnbmF0dXJlID0gbmV3IFVpbnQ4QXJyYXkoNjQpO1xuICAgICAgc2lnbmF0dXJlLnNldChkLnN1YmFycmF5KDMyKSwgMzIpO1xuICAgICAgdmFyIGhzID0gbmV3IHNoYTUxMl8xLlNIQTUxMigpO1xuICAgICAgaHMudXBkYXRlKHNpZ25hdHVyZS5zdWJhcnJheSgzMikpO1xuICAgICAgaHMudXBkYXRlKG1lc3NhZ2UpO1xuICAgICAgdmFyIHIgPSBocy5kaWdlc3QoKTtcbiAgICAgIGhzLmNsZWFuKCk7XG4gICAgICByZWR1Y2Uocik7XG4gICAgICBzY2FsYXJiYXNlKHAsIHIpO1xuICAgICAgcGFjayhzaWduYXR1cmUsIHApO1xuICAgICAgaHMucmVzZXQoKTtcbiAgICAgIGhzLnVwZGF0ZShzaWduYXR1cmUuc3ViYXJyYXkoMCwgMzIpKTtcbiAgICAgIGhzLnVwZGF0ZShzZWNyZXRLZXkuc3ViYXJyYXkoMzIpKTtcbiAgICAgIGhzLnVwZGF0ZShtZXNzYWdlKTtcbiAgICAgIHZhciBoID0gaHMuZGlnZXN0KCk7XG4gICAgICByZWR1Y2UoaCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDMyOyBpKyspIHtcbiAgICAgICAgeFtpXSA9IHJbaV07XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDMyOyBpKyspIHtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCAzMjsgaisrKSB7XG4gICAgICAgICAgeFtpICsgal0gKz0gaFtpXSAqIGRbal07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG1vZEwoc2lnbmF0dXJlLnN1YmFycmF5KDMyKSwgeCk7XG4gICAgICByZXR1cm4gc2lnbmF0dXJlO1xuICAgIH1cbiAgICBleHBvcnRzLnNpZ24gPSBzaWduO1xuICAgIGZ1bmN0aW9uIHVucGFja25lZyhyLCBwKSB7XG4gICAgICB2YXIgdCA9IGdmKCksIGNoayA9IGdmKCksIG51bSA9IGdmKCksIGRlbiA9IGdmKCksIGRlbjIgPSBnZigpLCBkZW40ID0gZ2YoKSwgZGVuNiA9IGdmKCk7XG4gICAgICBzZXQyNTUxOShyWzJdLCBnZjEpO1xuICAgICAgdW5wYWNrMjU1MTkoclsxXSwgcCk7XG4gICAgICBzcXVhcmUobnVtLCByWzFdKTtcbiAgICAgIG11bChkZW4sIG51bSwgRCk7XG4gICAgICBzdWIobnVtLCBudW0sIHJbMl0pO1xuICAgICAgYWRkKGRlbiwgclsyXSwgZGVuKTtcbiAgICAgIHNxdWFyZShkZW4yLCBkZW4pO1xuICAgICAgc3F1YXJlKGRlbjQsIGRlbjIpO1xuICAgICAgbXVsKGRlbjYsIGRlbjQsIGRlbjIpO1xuICAgICAgbXVsKHQsIGRlbjYsIG51bSk7XG4gICAgICBtdWwodCwgdCwgZGVuKTtcbiAgICAgIHBvdzI1MjModCwgdCk7XG4gICAgICBtdWwodCwgdCwgbnVtKTtcbiAgICAgIG11bCh0LCB0LCBkZW4pO1xuICAgICAgbXVsKHQsIHQsIGRlbik7XG4gICAgICBtdWwoclswXSwgdCwgZGVuKTtcbiAgICAgIHNxdWFyZShjaGssIHJbMF0pO1xuICAgICAgbXVsKGNoaywgY2hrLCBkZW4pO1xuICAgICAgaWYgKG5lcTI1NTE5KGNoaywgbnVtKSkge1xuICAgICAgICBtdWwoclswXSwgclswXSwgSSk7XG4gICAgICB9XG4gICAgICBzcXVhcmUoY2hrLCByWzBdKTtcbiAgICAgIG11bChjaGssIGNoaywgZGVuKTtcbiAgICAgIGlmIChuZXEyNTUxOShjaGssIG51bSkpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgaWYgKHBhcjI1NTE5KHJbMF0pID09PSBwWzMxXSA+PiA3KSB7XG4gICAgICAgIHN1YihyWzBdLCBnZjAsIHJbMF0pO1xuICAgICAgfVxuICAgICAgbXVsKHJbM10sIHJbMF0sIHJbMV0pO1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHZlcmlmeTMocHVibGljS2V5LCBtZXNzYWdlLCBzaWduYXR1cmUpIHtcbiAgICAgIHZhciB0ID0gbmV3IFVpbnQ4QXJyYXkoMzIpO1xuICAgICAgdmFyIHAgPSBbZ2YoKSwgZ2YoKSwgZ2YoKSwgZ2YoKV07XG4gICAgICB2YXIgcSA9IFtnZigpLCBnZigpLCBnZigpLCBnZigpXTtcbiAgICAgIGlmIChzaWduYXR1cmUubGVuZ3RoICE9PSBleHBvcnRzLlNJR05BVFVSRV9MRU5HVEgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZWQyNTUxOTogc2lnbmF0dXJlIG11c3QgYmUgXCIgKyBleHBvcnRzLlNJR05BVFVSRV9MRU5HVEggKyBcIiBieXRlc1wiKTtcbiAgICAgIH1cbiAgICAgIGlmICh1bnBhY2tuZWcocSwgcHVibGljS2V5KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgaHMgPSBuZXcgc2hhNTEyXzEuU0hBNTEyKCk7XG4gICAgICBocy51cGRhdGUoc2lnbmF0dXJlLnN1YmFycmF5KDAsIDMyKSk7XG4gICAgICBocy51cGRhdGUocHVibGljS2V5KTtcbiAgICAgIGhzLnVwZGF0ZShtZXNzYWdlKTtcbiAgICAgIHZhciBoID0gaHMuZGlnZXN0KCk7XG4gICAgICByZWR1Y2UoaCk7XG4gICAgICBzY2FsYXJtdWx0KHAsIHEsIGgpO1xuICAgICAgc2NhbGFyYmFzZShxLCBzaWduYXR1cmUuc3ViYXJyYXkoMzIpKTtcbiAgICAgIGVkYWRkKHAsIHEpO1xuICAgICAgcGFjayh0LCBwKTtcbiAgICAgIGlmICh2ZXJpZnkzMihzaWduYXR1cmUsIHQpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBleHBvcnRzLnZlcmlmeSA9IHZlcmlmeTM7XG4gICAgZnVuY3Rpb24gY29udmVydFB1YmxpY0tleVRvWDI1NTE5KHB1YmxpY0tleSkge1xuICAgICAgdmFyIHEgPSBbZ2YoKSwgZ2YoKSwgZ2YoKSwgZ2YoKV07XG4gICAgICBpZiAodW5wYWNrbmVnKHEsIHB1YmxpY0tleSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRWQyNTUxOTogaW52YWxpZCBwdWJsaWMga2V5XCIpO1xuICAgICAgfVxuICAgICAgdmFyIGEgPSBnZigpO1xuICAgICAgdmFyIGIgPSBnZigpO1xuICAgICAgdmFyIHkgPSBxWzFdO1xuICAgICAgYWRkKGEsIGdmMSwgeSk7XG4gICAgICBzdWIoYiwgZ2YxLCB5KTtcbiAgICAgIGludjI1NTE5KGIsIGIpO1xuICAgICAgbXVsKGEsIGEsIGIpO1xuICAgICAgdmFyIHogPSBuZXcgVWludDhBcnJheSgzMik7XG4gICAgICBwYWNrMjU1MTkoeiwgYSk7XG4gICAgICByZXR1cm4gejtcbiAgICB9XG4gICAgZXhwb3J0cy5jb252ZXJ0UHVibGljS2V5VG9YMjU1MTkgPSBjb252ZXJ0UHVibGljS2V5VG9YMjU1MTk7XG4gICAgZnVuY3Rpb24gY29udmVydFNlY3JldEtleVRvWDI1NTE5KHNlY3JldEtleSkge1xuICAgICAgdmFyIGQgPSBzaGE1MTJfMS5oYXNoKHNlY3JldEtleS5zdWJhcnJheSgwLCAzMikpO1xuICAgICAgZFswXSAmPSAyNDg7XG4gICAgICBkWzMxXSAmPSAxMjc7XG4gICAgICBkWzMxXSB8PSA2NDtcbiAgICAgIHZhciBvID0gbmV3IFVpbnQ4QXJyYXkoZC5zdWJhcnJheSgwLCAzMikpO1xuICAgICAgd2lwZV8xLndpcGUoZCk7XG4gICAgICByZXR1cm4gbztcbiAgICB9XG4gICAgZXhwb3J0cy5jb252ZXJ0U2VjcmV0S2V5VG9YMjU1MTkgPSBjb252ZXJ0U2VjcmV0S2V5VG9YMjU1MTk7XG4gIH1cbn0pO1xudmFyIHJlcXVpcmVfc2hhMjU2MyA9IF9fY29tbW9uSlMoe1xuICBcIm5vZGVfbW9kdWxlcy9Ac3RhYmxlbGliL3NoYTI1Ni9saWIvc2hhMjU2LmpzXCIoZXhwb3J0cykge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge3ZhbHVlOiB0cnVlfSk7XG4gICAgdmFyIGJpbmFyeV8xID0gcmVxdWlyZV9iaW5hcnkzKCk7XG4gICAgdmFyIHdpcGVfMSA9IHJlcXVpcmVfd2lwZTMoKTtcbiAgICBleHBvcnRzLkRJR0VTVF9MRU5HVEggPSAzMjtcbiAgICBleHBvcnRzLkJMT0NLX1NJWkUgPSA2NDtcbiAgICB2YXIgU0hBMjU2ID0gZnVuY3Rpb24oKSB7XG4gICAgICBmdW5jdGlvbiBTSEEyNTYyKCkge1xuICAgICAgICB0aGlzLmRpZ2VzdExlbmd0aCA9IGV4cG9ydHMuRElHRVNUX0xFTkdUSDtcbiAgICAgICAgdGhpcy5ibG9ja1NpemUgPSBleHBvcnRzLkJMT0NLX1NJWkU7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gbmV3IEludDMyQXJyYXkoOCk7XG4gICAgICAgIHRoaXMuX3RlbXAgPSBuZXcgSW50MzJBcnJheSg2NCk7XG4gICAgICAgIHRoaXMuX2J1ZmZlciA9IG5ldyBVaW50OEFycmF5KDEyOCk7XG4gICAgICAgIHRoaXMuX2J1ZmZlckxlbmd0aCA9IDA7XG4gICAgICAgIHRoaXMuX2J5dGVzSGFzaGVkID0gMDtcbiAgICAgICAgdGhpcy5fZmluaXNoZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgfVxuICAgICAgU0hBMjU2Mi5wcm90b3R5cGUuX2luaXRTdGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLl9zdGF0ZVswXSA9IDE3NzkwMzM3MDM7XG4gICAgICAgIHRoaXMuX3N0YXRlWzFdID0gMzE0NDEzNDI3NztcbiAgICAgICAgdGhpcy5fc3RhdGVbMl0gPSAxMDEzOTA0MjQyO1xuICAgICAgICB0aGlzLl9zdGF0ZVszXSA9IDI3NzM0ODA3NjI7XG4gICAgICAgIHRoaXMuX3N0YXRlWzRdID0gMTM1OTg5MzExOTtcbiAgICAgICAgdGhpcy5fc3RhdGVbNV0gPSAyNjAwODIyOTI0O1xuICAgICAgICB0aGlzLl9zdGF0ZVs2XSA9IDUyODczNDYzNTtcbiAgICAgICAgdGhpcy5fc3RhdGVbN10gPSAxNTQxNDU5MjI1O1xuICAgICAgfTtcbiAgICAgIFNIQTI1NjIucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuX2luaXRTdGF0ZSgpO1xuICAgICAgICB0aGlzLl9idWZmZXJMZW5ndGggPSAwO1xuICAgICAgICB0aGlzLl9ieXRlc0hhc2hlZCA9IDA7XG4gICAgICAgIHRoaXMuX2ZpbmlzaGVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfTtcbiAgICAgIFNIQTI1NjIucHJvdG90eXBlLmNsZWFuID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHdpcGVfMS53aXBlKHRoaXMuX2J1ZmZlcik7XG4gICAgICAgIHdpcGVfMS53aXBlKHRoaXMuX3RlbXApO1xuICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICB9O1xuICAgICAgU0hBMjU2Mi5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oZGF0YSwgZGF0YUxlbmd0aCkge1xuICAgICAgICBpZiAoZGF0YUxlbmd0aCA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9maW5pc2hlZCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNIQTI1NjogY2FuJ3QgdXBkYXRlIGJlY2F1c2UgaGFzaCB3YXMgZmluaXNoZWQuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkYXRhUG9zID0gMDtcbiAgICAgICAgdGhpcy5fYnl0ZXNIYXNoZWQgKz0gZGF0YUxlbmd0aDtcbiAgICAgICAgaWYgKHRoaXMuX2J1ZmZlckxlbmd0aCA+IDApIHtcbiAgICAgICAgICB3aGlsZSAodGhpcy5fYnVmZmVyTGVuZ3RoIDwgdGhpcy5ibG9ja1NpemUgJiYgZGF0YUxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuX2J1ZmZlclt0aGlzLl9idWZmZXJMZW5ndGgrK10gPSBkYXRhW2RhdGFQb3MrK107XG4gICAgICAgICAgICBkYXRhTGVuZ3RoLS07XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0aGlzLl9idWZmZXJMZW5ndGggPT09IHRoaXMuYmxvY2tTaXplKSB7XG4gICAgICAgICAgICBoYXNoQmxvY2tzKHRoaXMuX3RlbXAsIHRoaXMuX3N0YXRlLCB0aGlzLl9idWZmZXIsIDAsIHRoaXMuYmxvY2tTaXplKTtcbiAgICAgICAgICAgIHRoaXMuX2J1ZmZlckxlbmd0aCA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhTGVuZ3RoID49IHRoaXMuYmxvY2tTaXplKSB7XG4gICAgICAgICAgZGF0YVBvcyA9IGhhc2hCbG9ja3ModGhpcy5fdGVtcCwgdGhpcy5fc3RhdGUsIGRhdGEsIGRhdGFQb3MsIGRhdGFMZW5ndGgpO1xuICAgICAgICAgIGRhdGFMZW5ndGggJT0gdGhpcy5ibG9ja1NpemU7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGRhdGFMZW5ndGggPiAwKSB7XG4gICAgICAgICAgdGhpcy5fYnVmZmVyW3RoaXMuX2J1ZmZlckxlbmd0aCsrXSA9IGRhdGFbZGF0YVBvcysrXTtcbiAgICAgICAgICBkYXRhTGVuZ3RoLS07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9O1xuICAgICAgU0hBMjU2Mi5wcm90b3R5cGUuZmluaXNoID0gZnVuY3Rpb24ob3V0KSB7XG4gICAgICAgIGlmICghdGhpcy5fZmluaXNoZWQpIHtcbiAgICAgICAgICB2YXIgYnl0ZXNIYXNoZWQgPSB0aGlzLl9ieXRlc0hhc2hlZDtcbiAgICAgICAgICB2YXIgbGVmdCA9IHRoaXMuX2J1ZmZlckxlbmd0aDtcbiAgICAgICAgICB2YXIgYml0TGVuSGkgPSBieXRlc0hhc2hlZCAvIDUzNjg3MDkxMiB8IDA7XG4gICAgICAgICAgdmFyIGJpdExlbkxvID0gYnl0ZXNIYXNoZWQgPDwgMztcbiAgICAgICAgICB2YXIgcGFkTGVuZ3RoID0gYnl0ZXNIYXNoZWQgJSA2NCA8IDU2ID8gNjQgOiAxMjg7XG4gICAgICAgICAgdGhpcy5fYnVmZmVyW2xlZnRdID0gMTI4O1xuICAgICAgICAgIGZvciAodmFyIGkgPSBsZWZ0ICsgMTsgaSA8IHBhZExlbmd0aCAtIDg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5fYnVmZmVyW2ldID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgYmluYXJ5XzEud3JpdGVVaW50MzJCRShiaXRMZW5IaSwgdGhpcy5fYnVmZmVyLCBwYWRMZW5ndGggLSA4KTtcbiAgICAgICAgICBiaW5hcnlfMS53cml0ZVVpbnQzMkJFKGJpdExlbkxvLCB0aGlzLl9idWZmZXIsIHBhZExlbmd0aCAtIDQpO1xuICAgICAgICAgIGhhc2hCbG9ja3ModGhpcy5fdGVtcCwgdGhpcy5fc3RhdGUsIHRoaXMuX2J1ZmZlciwgMCwgcGFkTGVuZ3RoKTtcbiAgICAgICAgICB0aGlzLl9maW5pc2hlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmRpZ2VzdExlbmd0aCAvIDQ7IGkrKykge1xuICAgICAgICAgIGJpbmFyeV8xLndyaXRlVWludDMyQkUodGhpcy5fc3RhdGVbaV0sIG91dCwgaSAqIDQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfTtcbiAgICAgIFNIQTI1NjIucHJvdG90eXBlLmRpZ2VzdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgb3V0ID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5kaWdlc3RMZW5ndGgpO1xuICAgICAgICB0aGlzLmZpbmlzaChvdXQpO1xuICAgICAgICByZXR1cm4gb3V0O1xuICAgICAgfTtcbiAgICAgIFNIQTI1NjIucHJvdG90eXBlLnNhdmVTdGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5fZmluaXNoZWQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTSEEyNTY6IGNhbm5vdCBzYXZlIGZpbmlzaGVkIHN0YXRlXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc3RhdGU6IG5ldyBJbnQzMkFycmF5KHRoaXMuX3N0YXRlKSxcbiAgICAgICAgICBidWZmZXI6IHRoaXMuX2J1ZmZlckxlbmd0aCA+IDAgPyBuZXcgVWludDhBcnJheSh0aGlzLl9idWZmZXIpIDogdm9pZCAwLFxuICAgICAgICAgIGJ1ZmZlckxlbmd0aDogdGhpcy5fYnVmZmVyTGVuZ3RoLFxuICAgICAgICAgIGJ5dGVzSGFzaGVkOiB0aGlzLl9ieXRlc0hhc2hlZFxuICAgICAgICB9O1xuICAgICAgfTtcbiAgICAgIFNIQTI1NjIucHJvdG90eXBlLnJlc3RvcmVTdGF0ZSA9IGZ1bmN0aW9uKHNhdmVkU3RhdGUpIHtcbiAgICAgICAgdGhpcy5fc3RhdGUuc2V0KHNhdmVkU3RhdGUuc3RhdGUpO1xuICAgICAgICB0aGlzLl9idWZmZXJMZW5ndGggPSBzYXZlZFN0YXRlLmJ1ZmZlckxlbmd0aDtcbiAgICAgICAgaWYgKHNhdmVkU3RhdGUuYnVmZmVyKSB7XG4gICAgICAgICAgdGhpcy5fYnVmZmVyLnNldChzYXZlZFN0YXRlLmJ1ZmZlcik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fYnl0ZXNIYXNoZWQgPSBzYXZlZFN0YXRlLmJ5dGVzSGFzaGVkO1xuICAgICAgICB0aGlzLl9maW5pc2hlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH07XG4gICAgICBTSEEyNTYyLnByb3RvdHlwZS5jbGVhblNhdmVkU3RhdGUgPSBmdW5jdGlvbihzYXZlZFN0YXRlKSB7XG4gICAgICAgIHdpcGVfMS53aXBlKHNhdmVkU3RhdGUuc3RhdGUpO1xuICAgICAgICBpZiAoc2F2ZWRTdGF0ZS5idWZmZXIpIHtcbiAgICAgICAgICB3aXBlXzEud2lwZShzYXZlZFN0YXRlLmJ1ZmZlcik7XG4gICAgICAgIH1cbiAgICAgICAgc2F2ZWRTdGF0ZS5idWZmZXJMZW5ndGggPSAwO1xuICAgICAgICBzYXZlZFN0YXRlLmJ5dGVzSGFzaGVkID0gMDtcbiAgICAgIH07XG4gICAgICByZXR1cm4gU0hBMjU2MjtcbiAgICB9KCk7XG4gICAgZXhwb3J0cy5TSEEyNTYgPSBTSEEyNTY7XG4gICAgdmFyIEsgPSBuZXcgSW50MzJBcnJheShbXG4gICAgICAxMTE2MzUyNDA4LFxuICAgICAgMTg5OTQ0NzQ0MSxcbiAgICAgIDMwNDkzMjM0NzEsXG4gICAgICAzOTIxMDA5NTczLFxuICAgICAgOTYxOTg3MTYzLFxuICAgICAgMTUwODk3MDk5MyxcbiAgICAgIDI0NTM2MzU3NDgsXG4gICAgICAyODcwNzYzMjIxLFxuICAgICAgMzYyNDM4MTA4MCxcbiAgICAgIDMxMDU5ODQwMSxcbiAgICAgIDYwNzIyNTI3OCxcbiAgICAgIDE0MjY4ODE5ODcsXG4gICAgICAxOTI1MDc4Mzg4LFxuICAgICAgMjE2MjA3ODIwNixcbiAgICAgIDI2MTQ4ODgxMDMsXG4gICAgICAzMjQ4MjIyNTgwLFxuICAgICAgMzgzNTM5MDQwMSxcbiAgICAgIDQwMjIyMjQ3NzQsXG4gICAgICAyNjQzNDcwNzgsXG4gICAgICA2MDQ4MDc2MjgsXG4gICAgICA3NzAyNTU5ODMsXG4gICAgICAxMjQ5MTUwMTIyLFxuICAgICAgMTU1NTA4MTY5MixcbiAgICAgIDE5OTYwNjQ5ODYsXG4gICAgICAyNTU0MjIwODgyLFxuICAgICAgMjgyMTgzNDM0OSxcbiAgICAgIDI5NTI5OTY4MDgsXG4gICAgICAzMjEwMzEzNjcxLFxuICAgICAgMzMzNjU3MTg5MSxcbiAgICAgIDM1ODQ1Mjg3MTEsXG4gICAgICAxMTM5MjY5OTMsXG4gICAgICAzMzgyNDE4OTUsXG4gICAgICA2NjYzMDcyMDUsXG4gICAgICA3NzM1Mjk5MTIsXG4gICAgICAxMjk0NzU3MzcyLFxuICAgICAgMTM5NjE4MjI5MSxcbiAgICAgIDE2OTUxODM3MDAsXG4gICAgICAxOTg2NjYxMDUxLFxuICAgICAgMjE3NzAyNjM1MCxcbiAgICAgIDI0NTY5NTYwMzcsXG4gICAgICAyNzMwNDg1OTIxLFxuICAgICAgMjgyMDMwMjQxMSxcbiAgICAgIDMyNTk3MzA4MDAsXG4gICAgICAzMzQ1NzY0NzcxLFxuICAgICAgMzUxNjA2NTgxNyxcbiAgICAgIDM2MDAzNTI4MDQsXG4gICAgICA0MDk0NTcxOTA5LFxuICAgICAgMjc1NDIzMzQ0LFxuICAgICAgNDMwMjI3NzM0LFxuICAgICAgNTA2OTQ4NjE2LFxuICAgICAgNjU5MDYwNTU2LFxuICAgICAgODgzOTk3ODc3LFxuICAgICAgOTU4MTM5NTcxLFxuICAgICAgMTMyMjgyMjIxOCxcbiAgICAgIDE1MzcwMDIwNjMsXG4gICAgICAxNzQ3ODczNzc5LFxuICAgICAgMTk1NTU2MjIyMixcbiAgICAgIDIwMjQxMDQ4MTUsXG4gICAgICAyMjI3NzMwNDUyLFxuICAgICAgMjM2MTg1MjQyNCxcbiAgICAgIDI0Mjg0MzY0NzQsXG4gICAgICAyNzU2NzM0MTg3LFxuICAgICAgMzIwNDAzMTQ3OSxcbiAgICAgIDMzMjkzMjUyOThcbiAgICBdKTtcbiAgICBmdW5jdGlvbiBoYXNoQmxvY2tzKHcsIHYsIHAsIHBvcywgbGVuKSB7XG4gICAgICB3aGlsZSAobGVuID49IDY0KSB7XG4gICAgICAgIHZhciBhID0gdlswXTtcbiAgICAgICAgdmFyIGIgPSB2WzFdO1xuICAgICAgICB2YXIgYyA9IHZbMl07XG4gICAgICAgIHZhciBkID0gdlszXTtcbiAgICAgICAgdmFyIGUgPSB2WzRdO1xuICAgICAgICB2YXIgZiA9IHZbNV07XG4gICAgICAgIHZhciBnID0gdls2XTtcbiAgICAgICAgdmFyIGggPSB2WzddO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyBpKyspIHtcbiAgICAgICAgICB2YXIgaiA9IHBvcyArIGkgKiA0O1xuICAgICAgICAgIHdbaV0gPSBiaW5hcnlfMS5yZWFkVWludDMyQkUocCwgaik7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSA9IDE2OyBpIDwgNjQ7IGkrKykge1xuICAgICAgICAgIHZhciB1ID0gd1tpIC0gMl07XG4gICAgICAgICAgdmFyIHQxID0gKHUgPj4+IDE3IHwgdSA8PCAzMiAtIDE3KSBeICh1ID4+PiAxOSB8IHUgPDwgMzIgLSAxOSkgXiB1ID4+PiAxMDtcbiAgICAgICAgICB1ID0gd1tpIC0gMTVdO1xuICAgICAgICAgIHZhciB0MiA9ICh1ID4+PiA3IHwgdSA8PCAzMiAtIDcpIF4gKHUgPj4+IDE4IHwgdSA8PCAzMiAtIDE4KSBeIHUgPj4+IDM7XG4gICAgICAgICAgd1tpXSA9ICh0MSArIHdbaSAtIDddIHwgMCkgKyAodDIgKyB3W2kgLSAxNl0gfCAwKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDY0OyBpKyspIHtcbiAgICAgICAgICB2YXIgdDEgPSAoKChlID4+PiA2IHwgZSA8PCAzMiAtIDYpIF4gKGUgPj4+IDExIHwgZSA8PCAzMiAtIDExKSBeIChlID4+PiAyNSB8IGUgPDwgMzIgLSAyNSkpICsgKGUgJiBmIF4gfmUgJiBnKSB8IDApICsgKGggKyAoS1tpXSArIHdbaV0gfCAwKSB8IDApIHwgMDtcbiAgICAgICAgICB2YXIgdDIgPSAoKGEgPj4+IDIgfCBhIDw8IDMyIC0gMikgXiAoYSA+Pj4gMTMgfCBhIDw8IDMyIC0gMTMpIF4gKGEgPj4+IDIyIHwgYSA8PCAzMiAtIDIyKSkgKyAoYSAmIGIgXiBhICYgYyBeIGIgJiBjKSB8IDA7XG4gICAgICAgICAgaCA9IGc7XG4gICAgICAgICAgZyA9IGY7XG4gICAgICAgICAgZiA9IGU7XG4gICAgICAgICAgZSA9IGQgKyB0MSB8IDA7XG4gICAgICAgICAgZCA9IGM7XG4gICAgICAgICAgYyA9IGI7XG4gICAgICAgICAgYiA9IGE7XG4gICAgICAgICAgYSA9IHQxICsgdDIgfCAwO1xuICAgICAgICB9XG4gICAgICAgIHZbMF0gKz0gYTtcbiAgICAgICAgdlsxXSArPSBiO1xuICAgICAgICB2WzJdICs9IGM7XG4gICAgICAgIHZbM10gKz0gZDtcbiAgICAgICAgdls0XSArPSBlO1xuICAgICAgICB2WzVdICs9IGY7XG4gICAgICAgIHZbNl0gKz0gZztcbiAgICAgICAgdls3XSArPSBoO1xuICAgICAgICBwb3MgKz0gNjQ7XG4gICAgICAgIGxlbiAtPSA2NDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwb3M7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhc2goZGF0YSkge1xuICAgICAgdmFyIGggPSBuZXcgU0hBMjU2KCk7XG4gICAgICBoLnVwZGF0ZShkYXRhKTtcbiAgICAgIHZhciBkaWdlc3QgPSBoLmRpZ2VzdCgpO1xuICAgICAgaC5jbGVhbigpO1xuICAgICAgcmV0dXJuIGRpZ2VzdDtcbiAgICB9XG4gICAgZXhwb3J0cy5oYXNoID0gaGFzaDtcbiAgfVxufSk7XG52YXIgcmVxdWlyZV9jb25zdGFudF90aW1lMyA9IF9fY29tbW9uSlMoe1xuICBcIm5vZGVfbW9kdWxlcy9Ac3RhYmxlbGliL2NvbnN0YW50LXRpbWUvbGliL2NvbnN0YW50LXRpbWUuanNcIihleHBvcnRzKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7dmFsdWU6IHRydWV9KTtcbiAgICBmdW5jdGlvbiBzZWxlY3Qoc3ViamVjdCwgcmVzdWx0SWZPbmUsIHJlc3VsdElmWmVybykge1xuICAgICAgcmV0dXJuIH4oc3ViamVjdCAtIDEpICYgcmVzdWx0SWZPbmUgfCBzdWJqZWN0IC0gMSAmIHJlc3VsdElmWmVybztcbiAgICB9XG4gICAgZXhwb3J0cy5zZWxlY3QgPSBzZWxlY3Q7XG4gICAgZnVuY3Rpb24gbGVzc09yRXF1YWwoYSwgYikge1xuICAgICAgcmV0dXJuIChhIHwgMCkgLSAoYiB8IDApIC0gMSA+Pj4gMzEgJiAxO1xuICAgIH1cbiAgICBleHBvcnRzLmxlc3NPckVxdWFsID0gbGVzc09yRXF1YWw7XG4gICAgZnVuY3Rpb24gY29tcGFyZTIoYSwgYikge1xuICAgICAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCB8PSBhW2ldIF4gYltpXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAxICYgcmVzdWx0IC0gMSA+Pj4gODtcbiAgICB9XG4gICAgZXhwb3J0cy5jb21wYXJlID0gY29tcGFyZTI7XG4gICAgZnVuY3Rpb24gZXF1YWwzKGEsIGIpIHtcbiAgICAgIGlmIChhLmxlbmd0aCA9PT0gMCB8fCBiLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29tcGFyZTIoYSwgYikgIT09IDA7XG4gICAgfVxuICAgIGV4cG9ydHMuZXF1YWwgPSBlcXVhbDM7XG4gIH1cbn0pO1xudmFyIHJlcXVpcmVfdW5mZXRjaCA9IF9fY29tbW9uSlMoe1xuICBcIm5vZGVfbW9kdWxlcy91bmZldGNoL2Rpc3QvdW5mZXRjaC5qc1wiKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZSwgbjIpIHtcbiAgICAgIHJldHVybiBuMiA9IG4yIHx8IHt9LCBuZXcgUHJvbWlzZShmdW5jdGlvbih0LCByKSB7XG4gICAgICAgIHZhciBzMiA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpLCBvID0gW10sIHUgPSBbXSwgaSA9IHt9LCBhID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHtvazogKHMyLnN0YXR1cyAvIDEwMCB8IDApID09IDIsIHN0YXR1c1RleHQ6IHMyLnN0YXR1c1RleHQsIHN0YXR1czogczIuc3RhdHVzLCB1cmw6IHMyLnJlc3BvbnNlVVJMLCB0ZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoczIucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICB9LCBqc29uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoczIucmVzcG9uc2VUZXh0KS50aGVuKEpTT04ucGFyc2UpO1xuICAgICAgICAgIH0sIGJsb2I6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgQmxvYihbczIucmVzcG9uc2VdKSk7XG4gICAgICAgICAgfSwgY2xvbmU6IGEsIGhlYWRlcnM6IHtrZXlzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBvO1xuICAgICAgICAgIH0sIGVudHJpZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHU7XG4gICAgICAgICAgfSwgZ2V0OiBmdW5jdGlvbihlMikge1xuICAgICAgICAgICAgcmV0dXJuIGlbZTIudG9Mb3dlckNhc2UoKV07XG4gICAgICAgICAgfSwgaGFzOiBmdW5jdGlvbihlMikge1xuICAgICAgICAgICAgcmV0dXJuIGUyLnRvTG93ZXJDYXNlKCkgaW4gaTtcbiAgICAgICAgICB9fX07XG4gICAgICAgIH07XG4gICAgICAgIGZvciAodmFyIGwyIGluIHMyLm9wZW4objIubWV0aG9kIHx8IFwiZ2V0XCIsIGUsIHRydWUpLCBzMi5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICBzMi5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKS5yZXBsYWNlKC9eKC4qPyk6W15cXFNcXG5dKihbXFxzXFxTXSo/KSQvZ20sIGZ1bmN0aW9uKGUyLCBuMywgdDIpIHtcbiAgICAgICAgICAgIG8ucHVzaChuMyA9IG4zLnRvTG93ZXJDYXNlKCkpLCB1LnB1c2goW24zLCB0Ml0pLCBpW24zXSA9IGlbbjNdID8gaVtuM10gKyBcIixcIiArIHQyIDogdDI7XG4gICAgICAgICAgfSksIHQoYSgpKTtcbiAgICAgICAgfSwgczIub25lcnJvciA9IHIsIHMyLndpdGhDcmVkZW50aWFscyA9IG4yLmNyZWRlbnRpYWxzID09IFwiaW5jbHVkZVwiLCBuMi5oZWFkZXJzKVxuICAgICAgICAgIHMyLnNldFJlcXVlc3RIZWFkZXIobDIsIG4yLmhlYWRlcnNbbDJdKTtcbiAgICAgICAgczIuc2VuZChuMi5ib2R5IHx8IG51bGwpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfVxufSk7XG52YXIgcmVxdWlyZV9icm93c2VyMiA9IF9fY29tbW9uSlMoe1xuICBcIm5vZGVfbW9kdWxlcy9pc29tb3JwaGljLXVuZmV0Y2gvYnJvd3Nlci5qc1wiKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgIG1vZHVsZS5leHBvcnRzID0gc2VsZi5mZXRjaCB8fCAoc2VsZi5mZXRjaCA9IHJlcXVpcmVfdW5mZXRjaCgpLmRlZmF1bHQgfHwgcmVxdWlyZV91bmZldGNoKCkpO1xuICB9XG59KTtcbnZhciB1dGlsO1xuKGZ1bmN0aW9uKHV0aWw0KSB7XG4gIHV0aWw0LmFzc2VydEVxdWFsID0gKHZhbCkgPT4gdmFsO1xuICBmdW5jdGlvbiBhc3NlcnRJcyhfYXJnKSB7XG4gIH1cbiAgdXRpbDQuYXNzZXJ0SXMgPSBhc3NlcnRJcztcbiAgZnVuY3Rpb24gYXNzZXJ0TmV2ZXIoX3gpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgfVxuICB1dGlsNC5hc3NlcnROZXZlciA9IGFzc2VydE5ldmVyO1xuICB1dGlsNC5hcnJheVRvRW51bSA9IChpdGVtcykgPT4ge1xuICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgIGZvciAoY29uc3QgaXRlbSBvZiBpdGVtcykge1xuICAgICAgb2JqW2l0ZW1dID0gaXRlbTtcbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbiAgfTtcbiAgdXRpbDQuZ2V0VmFsaWRFbnVtVmFsdWVzID0gKG9iaikgPT4ge1xuICAgIGNvbnN0IHZhbGlkS2V5cyA9IHV0aWw0Lm9iamVjdEtleXMob2JqKS5maWx0ZXIoKGspID0+IHR5cGVvZiBvYmpbb2JqW2tdXSAhPT0gXCJudW1iZXJcIik7XG4gICAgY29uc3QgZmlsdGVyZWQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGsgb2YgdmFsaWRLZXlzKSB7XG4gICAgICBmaWx0ZXJlZFtrXSA9IG9ialtrXTtcbiAgICB9XG4gICAgcmV0dXJuIHV0aWw0Lm9iamVjdFZhbHVlcyhmaWx0ZXJlZCk7XG4gIH07XG4gIHV0aWw0Lm9iamVjdFZhbHVlcyA9IChvYmopID0+IHtcbiAgICByZXR1cm4gdXRpbDQub2JqZWN0S2V5cyhvYmopLm1hcChmdW5jdGlvbihlKSB7XG4gICAgICByZXR1cm4gb2JqW2VdO1xuICAgIH0pO1xuICB9O1xuICB1dGlsNC5vYmplY3RLZXlzID0gdHlwZW9mIE9iamVjdC5rZXlzID09PSBcImZ1bmN0aW9uXCIgPyAob2JqKSA9PiBPYmplY3Qua2V5cyhvYmopIDogKG9iamVjdCkgPT4ge1xuICAgIGNvbnN0IGtleXMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSB7XG4gICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ga2V5cztcbiAgfTtcbiAgdXRpbDQuZmluZCA9IChhcnIsIGNoZWNrZXIpID0+IHtcbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgYXJyKSB7XG4gICAgICBpZiAoY2hlY2tlcihpdGVtKSlcbiAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfVxuICAgIHJldHVybiB2b2lkIDA7XG4gIH07XG4gIHV0aWw0LmlzSW50ZWdlciA9IHR5cGVvZiBOdW1iZXIuaXNJbnRlZ2VyID09PSBcImZ1bmN0aW9uXCIgPyAodmFsKSA9PiBOdW1iZXIuaXNJbnRlZ2VyKHZhbCkgOiAodmFsKSA9PiB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICYmIGlzRmluaXRlKHZhbCkgJiYgTWF0aC5mbG9vcih2YWwpID09PSB2YWw7XG4gIGZ1bmN0aW9uIGpvaW5WYWx1ZXMoYXJyYXksIHNlcGFyYXRvciA9IFwiIHwgXCIpIHtcbiAgICByZXR1cm4gYXJyYXkubWFwKCh2YWwpID0+IHR5cGVvZiB2YWwgPT09IFwic3RyaW5nXCIgPyBgJyR7dmFsfSdgIDogdmFsKS5qb2luKHNlcGFyYXRvcik7XG4gIH1cbiAgdXRpbDQuam9pblZhbHVlcyA9IGpvaW5WYWx1ZXM7XG59KSh1dGlsIHx8ICh1dGlsID0ge30pKTtcbnZhciBab2RQYXJzZWRUeXBlID0gdXRpbC5hcnJheVRvRW51bShbXG4gIFwic3RyaW5nXCIsXG4gIFwibmFuXCIsXG4gIFwibnVtYmVyXCIsXG4gIFwiaW50ZWdlclwiLFxuICBcImZsb2F0XCIsXG4gIFwiYm9vbGVhblwiLFxuICBcImRhdGVcIixcbiAgXCJiaWdpbnRcIixcbiAgXCJzeW1ib2xcIixcbiAgXCJmdW5jdGlvblwiLFxuICBcInVuZGVmaW5lZFwiLFxuICBcIm51bGxcIixcbiAgXCJhcnJheVwiLFxuICBcIm9iamVjdFwiLFxuICBcInVua25vd25cIixcbiAgXCJwcm9taXNlXCIsXG4gIFwidm9pZFwiLFxuICBcIm5ldmVyXCIsXG4gIFwibWFwXCIsXG4gIFwic2V0XCJcbl0pO1xudmFyIGdldFBhcnNlZFR5cGUgPSAoZGF0YSkgPT4ge1xuICBjb25zdCB0ID0gdHlwZW9mIGRhdGE7XG4gIHN3aXRjaCAodCkge1xuICAgIGNhc2UgXCJ1bmRlZmluZWRcIjpcbiAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLnVuZGVmaW5lZDtcbiAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5zdHJpbmc7XG4gICAgY2FzZSBcIm51bWJlclwiOlxuICAgICAgcmV0dXJuIGlzTmFOKGRhdGEpID8gWm9kUGFyc2VkVHlwZS5uYW4gOiBab2RQYXJzZWRUeXBlLm51bWJlcjtcbiAgICBjYXNlIFwiYm9vbGVhblwiOlxuICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUuYm9vbGVhbjtcbiAgICBjYXNlIFwiZnVuY3Rpb25cIjpcbiAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLmZ1bmN0aW9uO1xuICAgIGNhc2UgXCJiaWdpbnRcIjpcbiAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLmJpZ2ludDtcbiAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5hcnJheTtcbiAgICAgIH1cbiAgICAgIGlmIChkYXRhID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLm51bGw7XG4gICAgICB9XG4gICAgICBpZiAoZGF0YS50aGVuICYmIHR5cGVvZiBkYXRhLnRoZW4gPT09IFwiZnVuY3Rpb25cIiAmJiBkYXRhLmNhdGNoICYmIHR5cGVvZiBkYXRhLmNhdGNoID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUucHJvbWlzZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgTWFwICE9PSBcInVuZGVmaW5lZFwiICYmIGRhdGEgaW5zdGFuY2VvZiBNYXApIHtcbiAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUubWFwO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBTZXQgIT09IFwidW5kZWZpbmVkXCIgJiYgZGF0YSBpbnN0YW5jZW9mIFNldCkge1xuICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZS5zZXQ7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIERhdGUgIT09IFwidW5kZWZpbmVkXCIgJiYgZGF0YSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUuZGF0ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlLm9iamVjdDtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUudW5rbm93bjtcbiAgfVxufTtcbnZhciBab2RJc3N1ZUNvZGUgPSB1dGlsLmFycmF5VG9FbnVtKFtcbiAgXCJpbnZhbGlkX3R5cGVcIixcbiAgXCJpbnZhbGlkX2xpdGVyYWxcIixcbiAgXCJjdXN0b21cIixcbiAgXCJpbnZhbGlkX3VuaW9uXCIsXG4gIFwiaW52YWxpZF91bmlvbl9kaXNjcmltaW5hdG9yXCIsXG4gIFwiaW52YWxpZF9lbnVtX3ZhbHVlXCIsXG4gIFwidW5yZWNvZ25pemVkX2tleXNcIixcbiAgXCJpbnZhbGlkX2FyZ3VtZW50c1wiLFxuICBcImludmFsaWRfcmV0dXJuX3R5cGVcIixcbiAgXCJpbnZhbGlkX2RhdGVcIixcbiAgXCJpbnZhbGlkX3N0cmluZ1wiLFxuICBcInRvb19zbWFsbFwiLFxuICBcInRvb19iaWdcIixcbiAgXCJpbnZhbGlkX2ludGVyc2VjdGlvbl90eXBlc1wiLFxuICBcIm5vdF9tdWx0aXBsZV9vZlwiXG5dKTtcbnZhciBxdW90ZWxlc3NKc29uID0gKG9iaikgPT4ge1xuICBjb25zdCBqc29uID0gSlNPTi5zdHJpbmdpZnkob2JqLCBudWxsLCAyKTtcbiAgcmV0dXJuIGpzb24ucmVwbGFjZSgvXCIoW15cIl0rKVwiOi9nLCBcIiQxOlwiKTtcbn07XG52YXIgWm9kRXJyb3IgPSBjbGFzcyBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IoaXNzdWVzKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmlzc3VlcyA9IFtdO1xuICAgIHRoaXMuYWRkSXNzdWUgPSAoc3ViKSA9PiB7XG4gICAgICB0aGlzLmlzc3VlcyA9IFsuLi50aGlzLmlzc3Vlcywgc3ViXTtcbiAgICB9O1xuICAgIHRoaXMuYWRkSXNzdWVzID0gKHN1YnMgPSBbXSkgPT4ge1xuICAgICAgdGhpcy5pc3N1ZXMgPSBbLi4udGhpcy5pc3N1ZXMsIC4uLnN1YnNdO1xuICAgIH07XG4gICAgY29uc3QgYWN0dWFsUHJvdG8gPSBuZXcudGFyZ2V0LnByb3RvdHlwZTtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgYWN0dWFsUHJvdG8pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9fcHJvdG9fXyA9IGFjdHVhbFByb3RvO1xuICAgIH1cbiAgICB0aGlzLm5hbWUgPSBcIlpvZEVycm9yXCI7XG4gICAgdGhpcy5pc3N1ZXMgPSBpc3N1ZXM7XG4gIH1cbiAgZ2V0IGVycm9ycygpIHtcbiAgICByZXR1cm4gdGhpcy5pc3N1ZXM7XG4gIH1cbiAgZm9ybWF0KF9tYXBwZXIpIHtcbiAgICBjb25zdCBtYXBwZXIgPSBfbWFwcGVyIHx8IGZ1bmN0aW9uKGlzc3VlKSB7XG4gICAgICByZXR1cm4gaXNzdWUubWVzc2FnZTtcbiAgICB9O1xuICAgIGNvbnN0IGZpZWxkRXJyb3JzID0ge19lcnJvcnM6IFtdfTtcbiAgICBjb25zdCBwcm9jZXNzRXJyb3IgPSAoZXJyb3IpID0+IHtcbiAgICAgIGZvciAoY29uc3QgaXNzdWUgb2YgZXJyb3IuaXNzdWVzKSB7XG4gICAgICAgIGlmIChpc3N1ZS5jb2RlID09PSBcImludmFsaWRfdW5pb25cIikge1xuICAgICAgICAgIGlzc3VlLnVuaW9uRXJyb3JzLm1hcChwcm9jZXNzRXJyb3IpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzc3VlLmNvZGUgPT09IFwiaW52YWxpZF9yZXR1cm5fdHlwZVwiKSB7XG4gICAgICAgICAgcHJvY2Vzc0Vycm9yKGlzc3VlLnJldHVyblR5cGVFcnJvcik7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNzdWUuY29kZSA9PT0gXCJpbnZhbGlkX2FyZ3VtZW50c1wiKSB7XG4gICAgICAgICAgcHJvY2Vzc0Vycm9yKGlzc3VlLmFyZ3VtZW50c0Vycm9yKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc3N1ZS5wYXRoLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGZpZWxkRXJyb3JzLl9lcnJvcnMucHVzaChtYXBwZXIoaXNzdWUpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsZXQgY3VyciA9IGZpZWxkRXJyb3JzO1xuICAgICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgICB3aGlsZSAoaSA8IGlzc3VlLnBhdGgubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBlbCA9IGlzc3VlLnBhdGhbaV07XG4gICAgICAgICAgICBjb25zdCB0ZXJtaW5hbCA9IGkgPT09IGlzc3VlLnBhdGgubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIGlmICghdGVybWluYWwpIHtcbiAgICAgICAgICAgICAgY3VycltlbF0gPSBjdXJyW2VsXSB8fCB7X2Vycm9yczogW119O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY3VycltlbF0gPSBjdXJyW2VsXSB8fCB7X2Vycm9yczogW119O1xuICAgICAgICAgICAgICBjdXJyW2VsXS5fZXJyb3JzLnB1c2gobWFwcGVyKGlzc3VlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJyID0gY3VycltlbF07XG4gICAgICAgICAgICBpKys7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBwcm9jZXNzRXJyb3IodGhpcyk7XG4gICAgcmV0dXJuIGZpZWxkRXJyb3JzO1xuICB9XG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1lc3NhZ2U7XG4gIH1cbiAgZ2V0IG1lc3NhZ2UoKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMuaXNzdWVzLCBqc29uU3RyaW5naWZ5UmVwbGFjZXIsIDIpO1xuICB9XG4gIGdldCBpc0VtcHR5KCkge1xuICAgIHJldHVybiB0aGlzLmlzc3Vlcy5sZW5ndGggPT09IDA7XG4gIH1cbiAgZmxhdHRlbihtYXBwZXIgPSAoaXNzdWUpID0+IGlzc3VlLm1lc3NhZ2UpIHtcbiAgICBjb25zdCBmaWVsZEVycm9ycyA9IHt9O1xuICAgIGNvbnN0IGZvcm1FcnJvcnMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHN1YiBvZiB0aGlzLmlzc3Vlcykge1xuICAgICAgaWYgKHN1Yi5wYXRoLmxlbmd0aCA+IDApIHtcbiAgICAgICAgZmllbGRFcnJvcnNbc3ViLnBhdGhbMF1dID0gZmllbGRFcnJvcnNbc3ViLnBhdGhbMF1dIHx8IFtdO1xuICAgICAgICBmaWVsZEVycm9yc1tzdWIucGF0aFswXV0ucHVzaChtYXBwZXIoc3ViKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3JtRXJyb3JzLnB1c2gobWFwcGVyKHN1YikpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge2Zvcm1FcnJvcnMsIGZpZWxkRXJyb3JzfTtcbiAgfVxuICBnZXQgZm9ybUVycm9ycygpIHtcbiAgICByZXR1cm4gdGhpcy5mbGF0dGVuKCk7XG4gIH1cbn07XG5ab2RFcnJvci5jcmVhdGUgPSAoaXNzdWVzKSA9PiB7XG4gIGNvbnN0IGVycm9yID0gbmV3IFpvZEVycm9yKGlzc3Vlcyk7XG4gIHJldHVybiBlcnJvcjtcbn07XG52YXIgZGVmYXVsdEVycm9yTWFwID0gKGlzc3VlLCBfY3R4KSA9PiB7XG4gIGxldCBtZXNzYWdlO1xuICBzd2l0Y2ggKGlzc3VlLmNvZGUpIHtcbiAgICBjYXNlIFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGU6XG4gICAgICBpZiAoaXNzdWUucmVjZWl2ZWQgPT09IFpvZFBhcnNlZFR5cGUudW5kZWZpbmVkKSB7XG4gICAgICAgIG1lc3NhZ2UgPSBcIlJlcXVpcmVkXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtZXNzYWdlID0gYEV4cGVjdGVkICR7aXNzdWUuZXhwZWN0ZWR9LCByZWNlaXZlZCAke2lzc3VlLnJlY2VpdmVkfWA7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIFpvZElzc3VlQ29kZS5pbnZhbGlkX2xpdGVyYWw6XG4gICAgICBtZXNzYWdlID0gYEludmFsaWQgbGl0ZXJhbCB2YWx1ZSwgZXhwZWN0ZWQgJHtKU09OLnN0cmluZ2lmeShpc3N1ZS5leHBlY3RlZCwganNvblN0cmluZ2lmeVJlcGxhY2VyKX1gO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBab2RJc3N1ZUNvZGUudW5yZWNvZ25pemVkX2tleXM6XG4gICAgICBtZXNzYWdlID0gYFVucmVjb2duaXplZCBrZXkocykgaW4gb2JqZWN0OiAke3V0aWwuam9pblZhbHVlcyhpc3N1ZS5rZXlzLCBcIiwgXCIpfWA7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFpvZElzc3VlQ29kZS5pbnZhbGlkX3VuaW9uOlxuICAgICAgbWVzc2FnZSA9IGBJbnZhbGlkIGlucHV0YDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgWm9kSXNzdWVDb2RlLmludmFsaWRfdW5pb25fZGlzY3JpbWluYXRvcjpcbiAgICAgIG1lc3NhZ2UgPSBgSW52YWxpZCBkaXNjcmltaW5hdG9yIHZhbHVlLiBFeHBlY3RlZCAke3V0aWwuam9pblZhbHVlcyhpc3N1ZS5vcHRpb25zKX1gO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBab2RJc3N1ZUNvZGUuaW52YWxpZF9lbnVtX3ZhbHVlOlxuICAgICAgbWVzc2FnZSA9IGBJbnZhbGlkIGVudW0gdmFsdWUuIEV4cGVjdGVkICR7dXRpbC5qb2luVmFsdWVzKGlzc3VlLm9wdGlvbnMpfSwgcmVjZWl2ZWQgJyR7aXNzdWUucmVjZWl2ZWR9J2A7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFpvZElzc3VlQ29kZS5pbnZhbGlkX2FyZ3VtZW50czpcbiAgICAgIG1lc3NhZ2UgPSBgSW52YWxpZCBmdW5jdGlvbiBhcmd1bWVudHNgO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBab2RJc3N1ZUNvZGUuaW52YWxpZF9yZXR1cm5fdHlwZTpcbiAgICAgIG1lc3NhZ2UgPSBgSW52YWxpZCBmdW5jdGlvbiByZXR1cm4gdHlwZWA7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFpvZElzc3VlQ29kZS5pbnZhbGlkX2RhdGU6XG4gICAgICBtZXNzYWdlID0gYEludmFsaWQgZGF0ZWA7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZzpcbiAgICAgIGlmICh0eXBlb2YgaXNzdWUudmFsaWRhdGlvbiA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBpZiAoXCJzdGFydHNXaXRoXCIgaW4gaXNzdWUudmFsaWRhdGlvbikge1xuICAgICAgICAgIG1lc3NhZ2UgPSBgSW52YWxpZCBpbnB1dDogbXVzdCBzdGFydCB3aXRoIFwiJHtpc3N1ZS52YWxpZGF0aW9uLnN0YXJ0c1dpdGh9XCJgO1xuICAgICAgICB9IGVsc2UgaWYgKFwiZW5kc1dpdGhcIiBpbiBpc3N1ZS52YWxpZGF0aW9uKSB7XG4gICAgICAgICAgbWVzc2FnZSA9IGBJbnZhbGlkIGlucHV0OiBtdXN0IGVuZCB3aXRoIFwiJHtpc3N1ZS52YWxpZGF0aW9uLmVuZHNXaXRofVwiYDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB1dGlsLmFzc2VydE5ldmVyKGlzc3VlLnZhbGlkYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlzc3VlLnZhbGlkYXRpb24gIT09IFwicmVnZXhcIikge1xuICAgICAgICBtZXNzYWdlID0gYEludmFsaWQgJHtpc3N1ZS52YWxpZGF0aW9ufWA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtZXNzYWdlID0gXCJJbnZhbGlkXCI7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIFpvZElzc3VlQ29kZS50b29fc21hbGw6XG4gICAgICBpZiAoaXNzdWUudHlwZSA9PT0gXCJhcnJheVwiKVxuICAgICAgICBtZXNzYWdlID0gYEFycmF5IG11c3QgY29udGFpbiAke2lzc3VlLmluY2x1c2l2ZSA/IGBhdCBsZWFzdGAgOiBgbW9yZSB0aGFuYH0gJHtpc3N1ZS5taW5pbXVtfSBlbGVtZW50KHMpYDtcbiAgICAgIGVsc2UgaWYgKGlzc3VlLnR5cGUgPT09IFwic3RyaW5nXCIpXG4gICAgICAgIG1lc3NhZ2UgPSBgU3RyaW5nIG11c3QgY29udGFpbiAke2lzc3VlLmluY2x1c2l2ZSA/IGBhdCBsZWFzdGAgOiBgb3ZlcmB9ICR7aXNzdWUubWluaW11bX0gY2hhcmFjdGVyKHMpYDtcbiAgICAgIGVsc2UgaWYgKGlzc3VlLnR5cGUgPT09IFwibnVtYmVyXCIpXG4gICAgICAgIG1lc3NhZ2UgPSBgTnVtYmVyIG11c3QgYmUgZ3JlYXRlciB0aGFuICR7aXNzdWUuaW5jbHVzaXZlID8gYG9yIGVxdWFsIHRvIGAgOiBgYH0ke2lzc3VlLm1pbmltdW19YDtcbiAgICAgIGVsc2UgaWYgKGlzc3VlLnR5cGUgPT09IFwiZGF0ZVwiKVxuICAgICAgICBtZXNzYWdlID0gYERhdGUgbXVzdCBiZSBncmVhdGVyIHRoYW4gJHtpc3N1ZS5pbmNsdXNpdmUgPyBgb3IgZXF1YWwgdG8gYCA6IGBgfSR7bmV3IERhdGUoaXNzdWUubWluaW11bSl9YDtcbiAgICAgIGVsc2VcbiAgICAgICAgbWVzc2FnZSA9IFwiSW52YWxpZCBpbnB1dFwiO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBab2RJc3N1ZUNvZGUudG9vX2JpZzpcbiAgICAgIGlmIChpc3N1ZS50eXBlID09PSBcImFycmF5XCIpXG4gICAgICAgIG1lc3NhZ2UgPSBgQXJyYXkgbXVzdCBjb250YWluICR7aXNzdWUuaW5jbHVzaXZlID8gYGF0IG1vc3RgIDogYGxlc3MgdGhhbmB9ICR7aXNzdWUubWF4aW11bX0gZWxlbWVudChzKWA7XG4gICAgICBlbHNlIGlmIChpc3N1ZS50eXBlID09PSBcInN0cmluZ1wiKVxuICAgICAgICBtZXNzYWdlID0gYFN0cmluZyBtdXN0IGNvbnRhaW4gJHtpc3N1ZS5pbmNsdXNpdmUgPyBgYXQgbW9zdGAgOiBgdW5kZXJgfSAke2lzc3VlLm1heGltdW19IGNoYXJhY3RlcihzKWA7XG4gICAgICBlbHNlIGlmIChpc3N1ZS50eXBlID09PSBcIm51bWJlclwiKVxuICAgICAgICBtZXNzYWdlID0gYE51bWJlciBtdXN0IGJlIGxlc3MgdGhhbiAke2lzc3VlLmluY2x1c2l2ZSA/IGBvciBlcXVhbCB0byBgIDogYGB9JHtpc3N1ZS5tYXhpbXVtfWA7XG4gICAgICBlbHNlIGlmIChpc3N1ZS50eXBlID09PSBcImRhdGVcIilcbiAgICAgICAgbWVzc2FnZSA9IGBEYXRlIG11c3QgYmUgc21hbGxlciB0aGFuICR7aXNzdWUuaW5jbHVzaXZlID8gYG9yIGVxdWFsIHRvIGAgOiBgYH0ke25ldyBEYXRlKGlzc3VlLm1heGltdW0pfWA7XG4gICAgICBlbHNlXG4gICAgICAgIG1lc3NhZ2UgPSBcIkludmFsaWQgaW5wdXRcIjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgWm9kSXNzdWVDb2RlLmN1c3RvbTpcbiAgICAgIG1lc3NhZ2UgPSBgSW52YWxpZCBpbnB1dGA7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFpvZElzc3VlQ29kZS5pbnZhbGlkX2ludGVyc2VjdGlvbl90eXBlczpcbiAgICAgIG1lc3NhZ2UgPSBgSW50ZXJzZWN0aW9uIHJlc3VsdHMgY291bGQgbm90IGJlIG1lcmdlZGA7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFpvZElzc3VlQ29kZS5ub3RfbXVsdGlwbGVfb2Y6XG4gICAgICBtZXNzYWdlID0gYE51bWJlciBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgJHtpc3N1ZS5tdWx0aXBsZU9mfWA7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgbWVzc2FnZSA9IF9jdHguZGVmYXVsdEVycm9yO1xuICAgICAgdXRpbC5hc3NlcnROZXZlcihpc3N1ZSk7XG4gIH1cbiAgcmV0dXJuIHttZXNzYWdlfTtcbn07XG52YXIgb3ZlcnJpZGVFcnJvck1hcCA9IGRlZmF1bHRFcnJvck1hcDtcbmZ1bmN0aW9uIHNldEVycm9yTWFwKG1hcCkge1xuICBvdmVycmlkZUVycm9yTWFwID0gbWFwO1xufVxuZnVuY3Rpb24gZ2V0RXJyb3JNYXAoKSB7XG4gIHJldHVybiBvdmVycmlkZUVycm9yTWFwO1xufVxudmFyIG1ha2VJc3N1ZSA9IChwYXJhbXMpID0+IHtcbiAgY29uc3Qge2RhdGEsIHBhdGgsIGVycm9yTWFwcywgaXNzdWVEYXRhfSA9IHBhcmFtcztcbiAgY29uc3QgZnVsbFBhdGggPSBbLi4ucGF0aCwgLi4uaXNzdWVEYXRhLnBhdGggfHwgW11dO1xuICBjb25zdCBmdWxsSXNzdWUgPSB7XG4gICAgLi4uaXNzdWVEYXRhLFxuICAgIHBhdGg6IGZ1bGxQYXRoXG4gIH07XG4gIGxldCBlcnJvck1lc3NhZ2UgPSBcIlwiO1xuICBjb25zdCBtYXBzID0gZXJyb3JNYXBzLmZpbHRlcigobSkgPT4gISFtKS5zbGljZSgpLnJldmVyc2UoKTtcbiAgZm9yIChjb25zdCBtYXAgb2YgbWFwcykge1xuICAgIGVycm9yTWVzc2FnZSA9IG1hcChmdWxsSXNzdWUsIHtkYXRhLCBkZWZhdWx0RXJyb3I6IGVycm9yTWVzc2FnZX0pLm1lc3NhZ2U7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICAuLi5pc3N1ZURhdGEsXG4gICAgcGF0aDogZnVsbFBhdGgsXG4gICAgbWVzc2FnZTogaXNzdWVEYXRhLm1lc3NhZ2UgfHwgZXJyb3JNZXNzYWdlXG4gIH07XG59O1xudmFyIEVNUFRZX1BBVEggPSBbXTtcbmZ1bmN0aW9uIGFkZElzc3VlVG9Db250ZXh0KGN0eCwgaXNzdWVEYXRhKSB7XG4gIGNvbnN0IGlzc3VlID0gbWFrZUlzc3VlKHtcbiAgICBpc3N1ZURhdGEsXG4gICAgZGF0YTogY3R4LmRhdGEsXG4gICAgcGF0aDogY3R4LnBhdGgsXG4gICAgZXJyb3JNYXBzOiBbXG4gICAgICBjdHguY29tbW9uLmNvbnRleHR1YWxFcnJvck1hcCxcbiAgICAgIGN0eC5zY2hlbWFFcnJvck1hcCxcbiAgICAgIGdldEVycm9yTWFwKCksXG4gICAgICBkZWZhdWx0RXJyb3JNYXBcbiAgICBdLmZpbHRlcigoeCkgPT4gISF4KVxuICB9KTtcbiAgY3R4LmNvbW1vbi5pc3N1ZXMucHVzaChpc3N1ZSk7XG59XG52YXIgUGFyc2VTdGF0dXMgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMudmFsdWUgPSBcInZhbGlkXCI7XG4gIH1cbiAgZGlydHkoKSB7XG4gICAgaWYgKHRoaXMudmFsdWUgPT09IFwidmFsaWRcIilcbiAgICAgIHRoaXMudmFsdWUgPSBcImRpcnR5XCI7XG4gIH1cbiAgYWJvcnQoKSB7XG4gICAgaWYgKHRoaXMudmFsdWUgIT09IFwiYWJvcnRlZFwiKVxuICAgICAgdGhpcy52YWx1ZSA9IFwiYWJvcnRlZFwiO1xuICB9XG4gIHN0YXRpYyBtZXJnZUFycmF5KHN0YXR1cywgcmVzdWx0cykge1xuICAgIGNvbnN0IGFycmF5VmFsdWUgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHMyIG9mIHJlc3VsdHMpIHtcbiAgICAgIGlmIChzMi5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKVxuICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgIGlmIChzMi5zdGF0dXMgPT09IFwiZGlydHlcIilcbiAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICBhcnJheVZhbHVlLnB1c2goczIudmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4ge3N0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogYXJyYXlWYWx1ZX07XG4gIH1cbiAgc3RhdGljIGFzeW5jIG1lcmdlT2JqZWN0QXN5bmMoc3RhdHVzLCBwYWlycykge1xuICAgIGNvbnN0IHN5bmNQYWlycyA9IFtdO1xuICAgIGZvciAoY29uc3QgcGFpciBvZiBwYWlycykge1xuICAgICAgc3luY1BhaXJzLnB1c2goe1xuICAgICAgICBrZXk6IGF3YWl0IHBhaXIua2V5LFxuICAgICAgICB2YWx1ZTogYXdhaXQgcGFpci52YWx1ZVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBQYXJzZVN0YXR1cy5tZXJnZU9iamVjdFN5bmMoc3RhdHVzLCBzeW5jUGFpcnMpO1xuICB9XG4gIHN0YXRpYyBtZXJnZU9iamVjdFN5bmMoc3RhdHVzLCBwYWlycykge1xuICAgIGNvbnN0IGZpbmFsT2JqZWN0ID0ge307XG4gICAgZm9yIChjb25zdCBwYWlyIG9mIHBhaXJzKSB7XG4gICAgICBjb25zdCB7a2V5LCB2YWx1ZX0gPSBwYWlyO1xuICAgICAgaWYgKGtleS5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKVxuICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgIGlmICh2YWx1ZS5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKVxuICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgIGlmIChrZXkuc3RhdHVzID09PSBcImRpcnR5XCIpXG4gICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgaWYgKHZhbHVlLnN0YXR1cyA9PT0gXCJkaXJ0eVwiKVxuICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUudmFsdWUgIT09IFwidW5kZWZpbmVkXCIgfHwgcGFpci5hbHdheXNTZXQpIHtcbiAgICAgICAgZmluYWxPYmplY3Rba2V5LnZhbHVlXSA9IHZhbHVlLnZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge3N0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogZmluYWxPYmplY3R9O1xuICB9XG59O1xudmFyIElOVkFMSUQgPSBPYmplY3QuZnJlZXplKHtcbiAgc3RhdHVzOiBcImFib3J0ZWRcIlxufSk7XG52YXIgRElSVFkgPSAodmFsdWUpID0+ICh7c3RhdHVzOiBcImRpcnR5XCIsIHZhbHVlfSk7XG52YXIgT0sgPSAodmFsdWUpID0+ICh7c3RhdHVzOiBcInZhbGlkXCIsIHZhbHVlfSk7XG52YXIgaXNBYm9ydGVkID0gKHgpID0+IHguc3RhdHVzID09PSBcImFib3J0ZWRcIjtcbnZhciBpc0RpcnR5ID0gKHgpID0+IHguc3RhdHVzID09PSBcImRpcnR5XCI7XG52YXIgaXNWYWxpZCA9ICh4KSA9PiB4LnN0YXR1cyA9PT0gXCJ2YWxpZFwiO1xudmFyIGlzQXN5bmMgPSAoeCkgPT4gdHlwZW9mIFByb21pc2UgIT09IHZvaWQgMCAmJiB4IGluc3RhbmNlb2YgUHJvbWlzZTtcbnZhciBqc29uU3RyaW5naWZ5UmVwbGFjZXIgPSAoXywgdmFsdWUpID0+IHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJiaWdpbnRcIikge1xuICAgIHJldHVybiB2YWx1ZS50b1N0cmluZygpO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn07XG52YXIgZXJyb3JVdGlsO1xuKGZ1bmN0aW9uKGVycm9yVXRpbDQpIHtcbiAgZXJyb3JVdGlsNC5lcnJUb09iaiA9IChtZXNzYWdlKSA9PiB0eXBlb2YgbWVzc2FnZSA9PT0gXCJzdHJpbmdcIiA/IHttZXNzYWdlfSA6IG1lc3NhZ2UgfHwge307XG4gIGVycm9yVXRpbDQudG9TdHJpbmcgPSAobWVzc2FnZSkgPT4gdHlwZW9mIG1lc3NhZ2UgPT09IFwic3RyaW5nXCIgPyBtZXNzYWdlIDogbWVzc2FnZSA9PT0gbnVsbCB8fCBtZXNzYWdlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBtZXNzYWdlLm1lc3NhZ2U7XG59KShlcnJvclV0aWwgfHwgKGVycm9yVXRpbCA9IHt9KSk7XG52YXIgUGFyc2VJbnB1dExhenlQYXRoID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihwYXJlbnQsIHZhbHVlLCBwYXRoLCBrZXkpIHtcbiAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICB0aGlzLmRhdGEgPSB2YWx1ZTtcbiAgICB0aGlzLl9wYXRoID0gcGF0aDtcbiAgICB0aGlzLl9rZXkgPSBrZXk7XG4gIH1cbiAgZ2V0IHBhdGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3BhdGguY29uY2F0KHRoaXMuX2tleSk7XG4gIH1cbn07XG52YXIgaGFuZGxlUmVzdWx0ID0gKGN0eCwgcmVzdWx0KSA9PiB7XG4gIGlmIChpc1ZhbGlkKHJlc3VsdCkpIHtcbiAgICByZXR1cm4ge3N1Y2Nlc3M6IHRydWUsIGRhdGE6IHJlc3VsdC52YWx1ZX07XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFjdHguY29tbW9uLmlzc3Vlcy5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlZhbGlkYXRpb24gZmFpbGVkIGJ1dCBubyBpc3N1ZXMgZGV0ZWN0ZWQuXCIpO1xuICAgIH1cbiAgICBjb25zdCBlcnJvciA9IG5ldyBab2RFcnJvcihjdHguY29tbW9uLmlzc3Vlcyk7XG4gICAgcmV0dXJuIHtzdWNjZXNzOiBmYWxzZSwgZXJyb3J9O1xuICB9XG59O1xuZnVuY3Rpb24gcHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpIHtcbiAgaWYgKCFwYXJhbXMpXG4gICAgcmV0dXJuIHt9O1xuICBjb25zdCB7ZXJyb3JNYXAsIGludmFsaWRfdHlwZV9lcnJvciwgcmVxdWlyZWRfZXJyb3IsIGRlc2NyaXB0aW9ufSA9IHBhcmFtcztcbiAgaWYgKGVycm9yTWFwICYmIChpbnZhbGlkX3R5cGVfZXJyb3IgfHwgcmVxdWlyZWRfZXJyb3IpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDYW4ndCB1c2UgXCJpbnZhbGlkXCIgb3IgXCJyZXF1aXJlZFwiIGluIGNvbmp1bmN0aW9uIHdpdGggY3VzdG9tIGVycm9yIG1hcC5gKTtcbiAgfVxuICBpZiAoZXJyb3JNYXApXG4gICAgcmV0dXJuIHtlcnJvck1hcCwgZGVzY3JpcHRpb259O1xuICBjb25zdCBjdXN0b21NYXAgPSAoaXNzLCBjdHgpID0+IHtcbiAgICBpZiAoaXNzLmNvZGUgIT09IFwiaW52YWxpZF90eXBlXCIpXG4gICAgICByZXR1cm4ge21lc3NhZ2U6IGN0eC5kZWZhdWx0RXJyb3J9O1xuICAgIGlmICh0eXBlb2YgY3R4LmRhdGEgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiB7bWVzc2FnZTogcmVxdWlyZWRfZXJyb3IgIT09IG51bGwgJiYgcmVxdWlyZWRfZXJyb3IgIT09IHZvaWQgMCA/IHJlcXVpcmVkX2Vycm9yIDogY3R4LmRlZmF1bHRFcnJvcn07XG4gICAgfVxuICAgIHJldHVybiB7bWVzc2FnZTogaW52YWxpZF90eXBlX2Vycm9yICE9PSBudWxsICYmIGludmFsaWRfdHlwZV9lcnJvciAhPT0gdm9pZCAwID8gaW52YWxpZF90eXBlX2Vycm9yIDogY3R4LmRlZmF1bHRFcnJvcn07XG4gIH07XG4gIHJldHVybiB7ZXJyb3JNYXA6IGN1c3RvbU1hcCwgZGVzY3JpcHRpb259O1xufVxudmFyIFpvZFR5cGUgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGRlZikge1xuICAgIHRoaXMuc3BhID0gdGhpcy5zYWZlUGFyc2VBc3luYztcbiAgICB0aGlzLnN1cGVyUmVmaW5lID0gdGhpcy5fcmVmaW5lbWVudDtcbiAgICB0aGlzLl9kZWYgPSBkZWY7XG4gICAgdGhpcy5wYXJzZSA9IHRoaXMucGFyc2UuYmluZCh0aGlzKTtcbiAgICB0aGlzLnNhZmVQYXJzZSA9IHRoaXMuc2FmZVBhcnNlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5wYXJzZUFzeW5jID0gdGhpcy5wYXJzZUFzeW5jLmJpbmQodGhpcyk7XG4gICAgdGhpcy5zYWZlUGFyc2VBc3luYyA9IHRoaXMuc2FmZVBhcnNlQXN5bmMuYmluZCh0aGlzKTtcbiAgICB0aGlzLnNwYSA9IHRoaXMuc3BhLmJpbmQodGhpcyk7XG4gICAgdGhpcy5yZWZpbmUgPSB0aGlzLnJlZmluZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMucmVmaW5lbWVudCA9IHRoaXMucmVmaW5lbWVudC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc3VwZXJSZWZpbmUgPSB0aGlzLnN1cGVyUmVmaW5lLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vcHRpb25hbCA9IHRoaXMub3B0aW9uYWwuYmluZCh0aGlzKTtcbiAgICB0aGlzLm51bGxhYmxlID0gdGhpcy5udWxsYWJsZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMubnVsbGlzaCA9IHRoaXMubnVsbGlzaC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuYXJyYXkgPSB0aGlzLmFycmF5LmJpbmQodGhpcyk7XG4gICAgdGhpcy5wcm9taXNlID0gdGhpcy5wcm9taXNlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vciA9IHRoaXMub3IuYmluZCh0aGlzKTtcbiAgICB0aGlzLmFuZCA9IHRoaXMuYW5kLmJpbmQodGhpcyk7XG4gICAgdGhpcy50cmFuc2Zvcm0gPSB0aGlzLnRyYW5zZm9ybS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuZGVmYXVsdCA9IHRoaXMuZGVmYXVsdC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuZGVzY3JpYmUgPSB0aGlzLmRlc2NyaWJlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5pc051bGxhYmxlID0gdGhpcy5pc051bGxhYmxlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5pc09wdGlvbmFsID0gdGhpcy5pc09wdGlvbmFsLmJpbmQodGhpcyk7XG4gIH1cbiAgZ2V0IGRlc2NyaXB0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9kZWYuZGVzY3JpcHRpb247XG4gIH1cbiAgX2dldFR5cGUoaW5wdXQpIHtcbiAgICByZXR1cm4gZ2V0UGFyc2VkVHlwZShpbnB1dC5kYXRhKTtcbiAgfVxuICBfZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCkge1xuICAgIHJldHVybiBjdHggfHwge1xuICAgICAgY29tbW9uOiBpbnB1dC5wYXJlbnQuY29tbW9uLFxuICAgICAgZGF0YTogaW5wdXQuZGF0YSxcbiAgICAgIHBhcnNlZFR5cGU6IGdldFBhcnNlZFR5cGUoaW5wdXQuZGF0YSksXG4gICAgICBzY2hlbWFFcnJvck1hcDogdGhpcy5fZGVmLmVycm9yTWFwLFxuICAgICAgcGF0aDogaW5wdXQucGF0aCxcbiAgICAgIHBhcmVudDogaW5wdXQucGFyZW50XG4gICAgfTtcbiAgfVxuICBfcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXR1czogbmV3IFBhcnNlU3RhdHVzKCksXG4gICAgICBjdHg6IHtcbiAgICAgICAgY29tbW9uOiBpbnB1dC5wYXJlbnQuY29tbW9uLFxuICAgICAgICBkYXRhOiBpbnB1dC5kYXRhLFxuICAgICAgICBwYXJzZWRUeXBlOiBnZXRQYXJzZWRUeXBlKGlucHV0LmRhdGEpLFxuICAgICAgICBzY2hlbWFFcnJvck1hcDogdGhpcy5fZGVmLmVycm9yTWFwLFxuICAgICAgICBwYXRoOiBpbnB1dC5wYXRoLFxuICAgICAgICBwYXJlbnQ6IGlucHV0LnBhcmVudFxuICAgICAgfVxuICAgIH07XG4gIH1cbiAgX3BhcnNlU3luYyhpbnB1dCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuX3BhcnNlKGlucHV0KTtcbiAgICBpZiAoaXNBc3luYyhyZXN1bHQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTeW5jaHJvbm91cyBwYXJzZSBlbmNvdW50ZXJlZCBwcm9taXNlLlwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBfcGFyc2VBc3luYyhpbnB1dCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuX3BhcnNlKGlucHV0KTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3VsdCk7XG4gIH1cbiAgcGFyc2UoZGF0YSwgcGFyYW1zKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gdGhpcy5zYWZlUGFyc2UoZGF0YSwgcGFyYW1zKTtcbiAgICBpZiAocmVzdWx0LnN1Y2Nlc3MpXG4gICAgICByZXR1cm4gcmVzdWx0LmRhdGE7XG4gICAgdGhyb3cgcmVzdWx0LmVycm9yO1xuICB9XG4gIHNhZmVQYXJzZShkYXRhLCBwYXJhbXMpIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QgY3R4ID0ge1xuICAgICAgY29tbW9uOiB7XG4gICAgICAgIGlzc3VlczogW10sXG4gICAgICAgIGFzeW5jOiAoX2EgPSBwYXJhbXMgPT09IG51bGwgfHwgcGFyYW1zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJhbXMuYXN5bmMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGZhbHNlLFxuICAgICAgICBjb250ZXh0dWFsRXJyb3JNYXA6IHBhcmFtcyA9PT0gbnVsbCB8fCBwYXJhbXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhcmFtcy5lcnJvck1hcFxuICAgICAgfSxcbiAgICAgIHBhdGg6IChwYXJhbXMgPT09IG51bGwgfHwgcGFyYW1zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJhbXMucGF0aCkgfHwgW10sXG4gICAgICBzY2hlbWFFcnJvck1hcDogdGhpcy5fZGVmLmVycm9yTWFwLFxuICAgICAgcGFyZW50OiBudWxsLFxuICAgICAgZGF0YSxcbiAgICAgIHBhcnNlZFR5cGU6IGdldFBhcnNlZFR5cGUoZGF0YSlcbiAgICB9O1xuICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuX3BhcnNlU3luYyh7ZGF0YSwgcGF0aDogY3R4LnBhdGgsIHBhcmVudDogY3R4fSk7XG4gICAgcmV0dXJuIGhhbmRsZVJlc3VsdChjdHgsIHJlc3VsdCk7XG4gIH1cbiAgYXN5bmMgcGFyc2VBc3luYyhkYXRhLCBwYXJhbXMpIHtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnNhZmVQYXJzZUFzeW5jKGRhdGEsIHBhcmFtcyk7XG4gICAgaWYgKHJlc3VsdC5zdWNjZXNzKVxuICAgICAgcmV0dXJuIHJlc3VsdC5kYXRhO1xuICAgIHRocm93IHJlc3VsdC5lcnJvcjtcbiAgfVxuICBhc3luYyBzYWZlUGFyc2VBc3luYyhkYXRhLCBwYXJhbXMpIHtcbiAgICBjb25zdCBjdHggPSB7XG4gICAgICBjb21tb246IHtcbiAgICAgICAgaXNzdWVzOiBbXSxcbiAgICAgICAgY29udGV4dHVhbEVycm9yTWFwOiBwYXJhbXMgPT09IG51bGwgfHwgcGFyYW1zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJhbXMuZXJyb3JNYXAsXG4gICAgICAgIGFzeW5jOiB0cnVlXG4gICAgICB9LFxuICAgICAgcGF0aDogKHBhcmFtcyA9PT0gbnVsbCB8fCBwYXJhbXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhcmFtcy5wYXRoKSB8fCBbXSxcbiAgICAgIHNjaGVtYUVycm9yTWFwOiB0aGlzLl9kZWYuZXJyb3JNYXAsXG4gICAgICBwYXJlbnQ6IG51bGwsXG4gICAgICBkYXRhLFxuICAgICAgcGFyc2VkVHlwZTogZ2V0UGFyc2VkVHlwZShkYXRhKVxuICAgIH07XG4gICAgY29uc3QgbWF5YmVBc3luY1Jlc3VsdCA9IHRoaXMuX3BhcnNlKHtkYXRhLCBwYXRoOiBbXSwgcGFyZW50OiBjdHh9KTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCAoaXNBc3luYyhtYXliZUFzeW5jUmVzdWx0KSA/IG1heWJlQXN5bmNSZXN1bHQgOiBQcm9taXNlLnJlc29sdmUobWF5YmVBc3luY1Jlc3VsdCkpO1xuICAgIHJldHVybiBoYW5kbGVSZXN1bHQoY3R4LCByZXN1bHQpO1xuICB9XG4gIHJlZmluZShjaGVjaywgbWVzc2FnZSkge1xuICAgIGNvbnN0IGdldElzc3VlUHJvcGVydGllcyA9ICh2YWwpID0+IHtcbiAgICAgIGlmICh0eXBlb2YgbWVzc2FnZSA9PT0gXCJzdHJpbmdcIiB8fCB0eXBlb2YgbWVzc2FnZSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICByZXR1cm4ge21lc3NhZ2V9O1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbWVzc2FnZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBtZXNzYWdlKHZhbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiB0aGlzLl9yZWZpbmVtZW50KCh2YWwsIGN0eCkgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0gY2hlY2sodmFsKTtcbiAgICAgIGNvbnN0IHNldEVycm9yID0gKCkgPT4gY3R4LmFkZElzc3VlKHtcbiAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmN1c3RvbSxcbiAgICAgICAgLi4uZ2V0SXNzdWVQcm9wZXJ0aWVzKHZhbClcbiAgICAgIH0pO1xuICAgICAgaWYgKHR5cGVvZiBQcm9taXNlICE9PSBcInVuZGVmaW5lZFwiICYmIHJlc3VsdCBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICBzZXRFcnJvcigpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgc2V0RXJyb3IoKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmVmaW5lbWVudChjaGVjaywgcmVmaW5lbWVudERhdGEpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVmaW5lbWVudCgodmFsLCBjdHgpID0+IHtcbiAgICAgIGlmICghY2hlY2sodmFsKSkge1xuICAgICAgICBjdHguYWRkSXNzdWUodHlwZW9mIHJlZmluZW1lbnREYXRhID09PSBcImZ1bmN0aW9uXCIgPyByZWZpbmVtZW50RGF0YSh2YWwsIGN0eCkgOiByZWZpbmVtZW50RGF0YSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIF9yZWZpbmVtZW50KHJlZmluZW1lbnQpIHtcbiAgICByZXR1cm4gbmV3IFpvZEVmZmVjdHMoe1xuICAgICAgc2NoZW1hOiB0aGlzLFxuICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RFZmZlY3RzLFxuICAgICAgZWZmZWN0OiB7dHlwZTogXCJyZWZpbmVtZW50XCIsIHJlZmluZW1lbnR9XG4gICAgfSk7XG4gIH1cbiAgb3B0aW9uYWwoKSB7XG4gICAgcmV0dXJuIFpvZE9wdGlvbmFsLmNyZWF0ZSh0aGlzKTtcbiAgfVxuICBudWxsYWJsZSgpIHtcbiAgICByZXR1cm4gWm9kTnVsbGFibGUuY3JlYXRlKHRoaXMpO1xuICB9XG4gIG51bGxpc2goKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9uYWwoKS5udWxsYWJsZSgpO1xuICB9XG4gIGFycmF5KCkge1xuICAgIHJldHVybiBab2RBcnJheS5jcmVhdGUodGhpcyk7XG4gIH1cbiAgcHJvbWlzZSgpIHtcbiAgICByZXR1cm4gWm9kUHJvbWlzZS5jcmVhdGUodGhpcyk7XG4gIH1cbiAgb3Iob3B0aW9uKSB7XG4gICAgcmV0dXJuIFpvZFVuaW9uLmNyZWF0ZShbdGhpcywgb3B0aW9uXSk7XG4gIH1cbiAgYW5kKGluY29taW5nKSB7XG4gICAgcmV0dXJuIFpvZEludGVyc2VjdGlvbi5jcmVhdGUodGhpcywgaW5jb21pbmcpO1xuICB9XG4gIHRyYW5zZm9ybSh0cmFuc2Zvcm0pIHtcbiAgICByZXR1cm4gbmV3IFpvZEVmZmVjdHMoe1xuICAgICAgc2NoZW1hOiB0aGlzLFxuICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RFZmZlY3RzLFxuICAgICAgZWZmZWN0OiB7dHlwZTogXCJ0cmFuc2Zvcm1cIiwgdHJhbnNmb3JtfVxuICAgIH0pO1xuICB9XG4gIGRlZmF1bHQoZGVmKSB7XG4gICAgY29uc3QgZGVmYXVsdFZhbHVlRnVuYyA9IHR5cGVvZiBkZWYgPT09IFwiZnVuY3Rpb25cIiA/IGRlZiA6ICgpID0+IGRlZjtcbiAgICByZXR1cm4gbmV3IFpvZERlZmF1bHQoe1xuICAgICAgaW5uZXJUeXBlOiB0aGlzLFxuICAgICAgZGVmYXVsdFZhbHVlOiBkZWZhdWx0VmFsdWVGdW5jLFxuICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2REZWZhdWx0XG4gICAgfSk7XG4gIH1cbiAgYnJhbmQoKSB7XG4gICAgcmV0dXJuIG5ldyBab2RCcmFuZGVkKHtcbiAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kQnJhbmRlZCxcbiAgICAgIHR5cGU6IHRoaXMsXG4gICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHZvaWQgMClcbiAgICB9KTtcbiAgfVxuICBkZXNjcmliZShkZXNjcmlwdGlvbikge1xuICAgIGNvbnN0IFRoaXMgPSB0aGlzLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBuZXcgVGhpcyh7XG4gICAgICAuLi50aGlzLl9kZWYsXG4gICAgICBkZXNjcmlwdGlvblxuICAgIH0pO1xuICB9XG4gIGlzT3B0aW9uYWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2FmZVBhcnNlKHZvaWQgMCkuc3VjY2VzcztcbiAgfVxuICBpc051bGxhYmxlKCkge1xuICAgIHJldHVybiB0aGlzLnNhZmVQYXJzZShudWxsKS5zdWNjZXNzO1xuICB9XG59O1xudmFyIGN1aWRSZWdleCA9IC9eY1teXFxzLV17OCx9JC9pO1xudmFyIHV1aWRSZWdleCA9IC9eKFthLWYwLTldezh9LVthLWYwLTldezR9LVsxLTVdW2EtZjAtOV17M30tW2EtZjAtOV17NH0tW2EtZjAtOV17MTJ9fDAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMCkkL2k7XG52YXIgZW1haWxSZWdleCA9IC9eKChbXjw+KClbXFxdXFwuLDs6XFxzQFxcXCJdKyhcXC5bXjw+KClbXFxdXFwuLDs6XFxzQFxcXCJdKykqKXwoXFxcIi4rXFxcIikpQCgoW148PigpW1xcXVxcLiw7Olxcc0BcXFwiXStcXC4pK1tePD4oKVtcXF1cXC4sOzpcXHNAXFxcIl17Mix9KSQvaTtcbnZhciBab2RTdHJpbmcgPSBjbGFzcyBleHRlbmRzIFpvZFR5cGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIHRoaXMuX3JlZ2V4ID0gKHJlZ2V4LCB2YWxpZGF0aW9uLCBtZXNzYWdlKSA9PiB0aGlzLnJlZmluZW1lbnQoKGRhdGEpID0+IHJlZ2V4LnRlc3QoZGF0YSksIHtcbiAgICAgIHZhbGlkYXRpb24sXG4gICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSlcbiAgICB9KTtcbiAgICB0aGlzLm5vbmVtcHR5ID0gKG1lc3NhZ2UpID0+IHRoaXMubWluKDEsIGVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKSk7XG4gICAgdGhpcy50cmltID0gKCkgPT4gbmV3IFpvZFN0cmluZyh7XG4gICAgICAuLi50aGlzLl9kZWYsXG4gICAgICBjaGVja3M6IFsuLi50aGlzLl9kZWYuY2hlY2tzLCB7a2luZDogXCJ0cmltXCJ9XVxuICAgIH0pO1xuICB9XG4gIF9wYXJzZShpbnB1dCkge1xuICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICBpZiAocGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5zdHJpbmcpIHtcbiAgICAgIGNvbnN0IGN0eDIgPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgyLCB7XG4gICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXG4gICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLnN0cmluZyxcbiAgICAgICAgcmVjZWl2ZWQ6IGN0eDIucGFyc2VkVHlwZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICB9XG4gICAgY29uc3Qgc3RhdHVzID0gbmV3IFBhcnNlU3RhdHVzKCk7XG4gICAgbGV0IGN0eCA9IHZvaWQgMDtcbiAgICBmb3IgKGNvbnN0IGNoZWNrIG9mIHRoaXMuX2RlZi5jaGVja3MpIHtcbiAgICAgIGlmIChjaGVjay5raW5kID09PSBcIm1pblwiKSB7XG4gICAgICAgIGlmIChpbnB1dC5kYXRhLmxlbmd0aCA8IGNoZWNrLnZhbHVlKSB7XG4gICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUudG9vX3NtYWxsLFxuICAgICAgICAgICAgbWluaW11bTogY2hlY2sudmFsdWUsXG4gICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxuICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwibWF4XCIpIHtcbiAgICAgICAgaWYgKGlucHV0LmRhdGEubGVuZ3RoID4gY2hlY2sudmFsdWUpIHtcbiAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS50b29fYmlnLFxuICAgICAgICAgICAgbWF4aW11bTogY2hlY2sudmFsdWUsXG4gICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxuICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwiZW1haWxcIikge1xuICAgICAgICBpZiAoIWVtYWlsUmVnZXgudGVzdChpbnB1dC5kYXRhKSkge1xuICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJlbWFpbFwiLFxuICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxuICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwidXVpZFwiKSB7XG4gICAgICAgIGlmICghdXVpZFJlZ2V4LnRlc3QoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgIHZhbGlkYXRpb246IFwidXVpZFwiLFxuICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxuICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwiY3VpZFwiKSB7XG4gICAgICAgIGlmICghY3VpZFJlZ2V4LnRlc3QoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgIHZhbGlkYXRpb246IFwiY3VpZFwiLFxuICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxuICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwidXJsXCIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBuZXcgVVJMKGlucHV0LmRhdGEpO1xuICAgICAgICB9IGNhdGNoIChfYSkge1xuICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJ1cmxcIixcbiAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjaGVjay5raW5kID09PSBcInJlZ2V4XCIpIHtcbiAgICAgICAgY2hlY2sucmVnZXgubGFzdEluZGV4ID0gMDtcbiAgICAgICAgY29uc3QgdGVzdFJlc3VsdCA9IGNoZWNrLnJlZ2V4LnRlc3QoaW5wdXQuZGF0YSk7XG4gICAgICAgIGlmICghdGVzdFJlc3VsdCkge1xuICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJyZWdleFwiLFxuICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfc3RyaW5nLFxuICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwidHJpbVwiKSB7XG4gICAgICAgIGlucHV0LmRhdGEgPSBpbnB1dC5kYXRhLnRyaW0oKTtcbiAgICAgIH0gZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJzdGFydHNXaXRoXCIpIHtcbiAgICAgICAgaWYgKCFpbnB1dC5kYXRhLnN0YXJ0c1dpdGgoY2hlY2sudmFsdWUpKSB7XG4gICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICB2YWxpZGF0aW9uOiB7c3RhcnRzV2l0aDogY2hlY2sudmFsdWV9LFxuICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwiZW5kc1dpdGhcIikge1xuICAgICAgICBpZiAoIWlucHV0LmRhdGEuZW5kc1dpdGgoY2hlY2sudmFsdWUpKSB7XG4gICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICB2YWxpZGF0aW9uOiB7ZW5kc1dpdGg6IGNoZWNrLnZhbHVlfSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXRpbC5hc3NlcnROZXZlcihjaGVjayk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7c3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiBpbnB1dC5kYXRhfTtcbiAgfVxuICBfYWRkQ2hlY2soY2hlY2spIHtcbiAgICByZXR1cm4gbmV3IFpvZFN0cmluZyh7XG4gICAgICAuLi50aGlzLl9kZWYsXG4gICAgICBjaGVja3M6IFsuLi50aGlzLl9kZWYuY2hlY2tzLCBjaGVja11cbiAgICB9KTtcbiAgfVxuICBlbWFpbChtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtraW5kOiBcImVtYWlsXCIsIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKX0pO1xuICB9XG4gIHVybChtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtraW5kOiBcInVybFwiLCAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSl9KTtcbiAgfVxuICB1dWlkKG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe2tpbmQ6IFwidXVpZFwiLCAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSl9KTtcbiAgfVxuICBjdWlkKG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe2tpbmQ6IFwiY3VpZFwiLCAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSl9KTtcbiAgfVxuICByZWdleChyZWdleCwgbWVzc2FnZSkge1xuICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICBraW5kOiBcInJlZ2V4XCIsXG4gICAgICByZWdleCxcbiAgICAgIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKVxuICAgIH0pO1xuICB9XG4gIHN0YXJ0c1dpdGgodmFsdWUsIG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAga2luZDogXCJzdGFydHNXaXRoXCIsXG4gICAgICB2YWx1ZSxcbiAgICAgIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKVxuICAgIH0pO1xuICB9XG4gIGVuZHNXaXRoKHZhbHVlLCBtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgIGtpbmQ6IFwiZW5kc1dpdGhcIixcbiAgICAgIHZhbHVlLFxuICAgICAgLi4uZXJyb3JVdGlsLmVyclRvT2JqKG1lc3NhZ2UpXG4gICAgfSk7XG4gIH1cbiAgbWluKG1pbkxlbmd0aCwgbWVzc2FnZSkge1xuICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICBraW5kOiBcIm1pblwiLFxuICAgICAgdmFsdWU6IG1pbkxlbmd0aCxcbiAgICAgIC4uLmVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKVxuICAgIH0pO1xuICB9XG4gIG1heChtYXhMZW5ndGgsIG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAga2luZDogXCJtYXhcIixcbiAgICAgIHZhbHVlOiBtYXhMZW5ndGgsXG4gICAgICAuLi5lcnJvclV0aWwuZXJyVG9PYmoobWVzc2FnZSlcbiAgICB9KTtcbiAgfVxuICBsZW5ndGgobGVuLCBtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMubWluKGxlbiwgbWVzc2FnZSkubWF4KGxlbiwgbWVzc2FnZSk7XG4gIH1cbiAgZ2V0IGlzRW1haWwoKSB7XG4gICAgcmV0dXJuICEhdGhpcy5fZGVmLmNoZWNrcy5maW5kKChjaCkgPT4gY2gua2luZCA9PT0gXCJlbWFpbFwiKTtcbiAgfVxuICBnZXQgaXNVUkwoKSB7XG4gICAgcmV0dXJuICEhdGhpcy5fZGVmLmNoZWNrcy5maW5kKChjaCkgPT4gY2gua2luZCA9PT0gXCJ1cmxcIik7XG4gIH1cbiAgZ2V0IGlzVVVJRCgpIHtcbiAgICByZXR1cm4gISF0aGlzLl9kZWYuY2hlY2tzLmZpbmQoKGNoKSA9PiBjaC5raW5kID09PSBcInV1aWRcIik7XG4gIH1cbiAgZ2V0IGlzQ1VJRCgpIHtcbiAgICByZXR1cm4gISF0aGlzLl9kZWYuY2hlY2tzLmZpbmQoKGNoKSA9PiBjaC5raW5kID09PSBcImN1aWRcIik7XG4gIH1cbiAgZ2V0IG1pbkxlbmd0aCgpIHtcbiAgICBsZXQgbWluID0gbnVsbDtcbiAgICBmb3IgKGNvbnN0IGNoIG9mIHRoaXMuX2RlZi5jaGVja3MpIHtcbiAgICAgIGlmIChjaC5raW5kID09PSBcIm1pblwiKSB7XG4gICAgICAgIGlmIChtaW4gPT09IG51bGwgfHwgY2gudmFsdWUgPiBtaW4pXG4gICAgICAgICAgbWluID0gY2gudmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtaW47XG4gIH1cbiAgZ2V0IG1heExlbmd0aCgpIHtcbiAgICBsZXQgbWF4ID0gbnVsbDtcbiAgICBmb3IgKGNvbnN0IGNoIG9mIHRoaXMuX2RlZi5jaGVja3MpIHtcbiAgICAgIGlmIChjaC5raW5kID09PSBcIm1heFwiKSB7XG4gICAgICAgIGlmIChtYXggPT09IG51bGwgfHwgY2gudmFsdWUgPCBtYXgpXG4gICAgICAgICAgbWF4ID0gY2gudmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtYXg7XG4gIH1cbn07XG5ab2RTdHJpbmcuY3JlYXRlID0gKHBhcmFtcykgPT4ge1xuICByZXR1cm4gbmV3IFpvZFN0cmluZyh7XG4gICAgY2hlY2tzOiBbXSxcbiAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFN0cmluZyxcbiAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcylcbiAgfSk7XG59O1xuZnVuY3Rpb24gZmxvYXRTYWZlUmVtYWluZGVyKHZhbCwgc3RlcCkge1xuICBjb25zdCB2YWxEZWNDb3VudCA9ICh2YWwudG9TdHJpbmcoKS5zcGxpdChcIi5cIilbMV0gfHwgXCJcIikubGVuZ3RoO1xuICBjb25zdCBzdGVwRGVjQ291bnQgPSAoc3RlcC50b1N0cmluZygpLnNwbGl0KFwiLlwiKVsxXSB8fCBcIlwiKS5sZW5ndGg7XG4gIGNvbnN0IGRlY0NvdW50ID0gdmFsRGVjQ291bnQgPiBzdGVwRGVjQ291bnQgPyB2YWxEZWNDb3VudCA6IHN0ZXBEZWNDb3VudDtcbiAgY29uc3QgdmFsSW50ID0gcGFyc2VJbnQodmFsLnRvRml4ZWQoZGVjQ291bnQpLnJlcGxhY2UoXCIuXCIsIFwiXCIpKTtcbiAgY29uc3Qgc3RlcEludCA9IHBhcnNlSW50KHN0ZXAudG9GaXhlZChkZWNDb3VudCkucmVwbGFjZShcIi5cIiwgXCJcIikpO1xuICByZXR1cm4gdmFsSW50ICUgc3RlcEludCAvIE1hdGgucG93KDEwLCBkZWNDb3VudCk7XG59XG52YXIgWm9kTnVtYmVyID0gY2xhc3MgZXh0ZW5kcyBab2RUeXBlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICB0aGlzLm1pbiA9IHRoaXMuZ3RlO1xuICAgIHRoaXMubWF4ID0gdGhpcy5sdGU7XG4gICAgdGhpcy5zdGVwID0gdGhpcy5tdWx0aXBsZU9mO1xuICB9XG4gIF9wYXJzZShpbnB1dCkge1xuICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICBpZiAocGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5udW1iZXIpIHtcbiAgICAgIGNvbnN0IGN0eDIgPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgyLCB7XG4gICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXG4gICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLm51bWJlcixcbiAgICAgICAgcmVjZWl2ZWQ6IGN0eDIucGFyc2VkVHlwZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICB9XG4gICAgbGV0IGN0eCA9IHZvaWQgMDtcbiAgICBjb25zdCBzdGF0dXMgPSBuZXcgUGFyc2VTdGF0dXMoKTtcbiAgICBmb3IgKGNvbnN0IGNoZWNrIG9mIHRoaXMuX2RlZi5jaGVja3MpIHtcbiAgICAgIGlmIChjaGVjay5raW5kID09PSBcImludFwiKSB7XG4gICAgICAgIGlmICghdXRpbC5pc0ludGVnZXIoaW5wdXQuZGF0YSkpIHtcbiAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXG4gICAgICAgICAgICBleHBlY3RlZDogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgICByZWNlaXZlZDogXCJmbG9hdFwiLFxuICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwibWluXCIpIHtcbiAgICAgICAgY29uc3QgdG9vU21hbGwgPSBjaGVjay5pbmNsdXNpdmUgPyBpbnB1dC5kYXRhIDwgY2hlY2sudmFsdWUgOiBpbnB1dC5kYXRhIDw9IGNoZWNrLnZhbHVlO1xuICAgICAgICBpZiAodG9vU21hbGwpIHtcbiAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS50b29fc21hbGwsXG4gICAgICAgICAgICBtaW5pbXVtOiBjaGVjay52YWx1ZSxcbiAgICAgICAgICAgIHR5cGU6IFwibnVtYmVyXCIsXG4gICAgICAgICAgICBpbmNsdXNpdmU6IGNoZWNrLmluY2x1c2l2ZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjaGVjay5raW5kID09PSBcIm1heFwiKSB7XG4gICAgICAgIGNvbnN0IHRvb0JpZyA9IGNoZWNrLmluY2x1c2l2ZSA/IGlucHV0LmRhdGEgPiBjaGVjay52YWx1ZSA6IGlucHV0LmRhdGEgPj0gY2hlY2sudmFsdWU7XG4gICAgICAgIGlmICh0b29CaWcpIHtcbiAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS50b29fYmlnLFxuICAgICAgICAgICAgbWF4aW11bTogY2hlY2sudmFsdWUsXG4gICAgICAgICAgICB0eXBlOiBcIm51bWJlclwiLFxuICAgICAgICAgICAgaW5jbHVzaXZlOiBjaGVjay5pbmNsdXNpdmUsXG4gICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJtdWx0aXBsZU9mXCIpIHtcbiAgICAgICAgaWYgKGZsb2F0U2FmZVJlbWFpbmRlcihpbnB1dC5kYXRhLCBjaGVjay52YWx1ZSkgIT09IDApIHtcbiAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5ub3RfbXVsdGlwbGVfb2YsXG4gICAgICAgICAgICBtdWx0aXBsZU9mOiBjaGVjay52YWx1ZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXRpbC5hc3NlcnROZXZlcihjaGVjayk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7c3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiBpbnB1dC5kYXRhfTtcbiAgfVxuICBndGUodmFsdWUsIG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5zZXRMaW1pdChcIm1pblwiLCB2YWx1ZSwgdHJ1ZSwgZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpKTtcbiAgfVxuICBndCh2YWx1ZSwgbWVzc2FnZSkge1xuICAgIHJldHVybiB0aGlzLnNldExpbWl0KFwibWluXCIsIHZhbHVlLCBmYWxzZSwgZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpKTtcbiAgfVxuICBsdGUodmFsdWUsIG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5zZXRMaW1pdChcIm1heFwiLCB2YWx1ZSwgdHJ1ZSwgZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpKTtcbiAgfVxuICBsdCh2YWx1ZSwgbWVzc2FnZSkge1xuICAgIHJldHVybiB0aGlzLnNldExpbWl0KFwibWF4XCIsIHZhbHVlLCBmYWxzZSwgZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpKTtcbiAgfVxuICBzZXRMaW1pdChraW5kLCB2YWx1ZSwgaW5jbHVzaXZlLCBtZXNzYWdlKSB7XG4gICAgcmV0dXJuIG5ldyBab2ROdW1iZXIoe1xuICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgY2hlY2tzOiBbXG4gICAgICAgIC4uLnRoaXMuX2RlZi5jaGVja3MsXG4gICAgICAgIHtcbiAgICAgICAgICBraW5kLFxuICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgIGluY2x1c2l2ZSxcbiAgICAgICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSlcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0pO1xuICB9XG4gIF9hZGRDaGVjayhjaGVjaykge1xuICAgIHJldHVybiBuZXcgWm9kTnVtYmVyKHtcbiAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgIGNoZWNrczogWy4uLnRoaXMuX2RlZi5jaGVja3MsIGNoZWNrXVxuICAgIH0pO1xuICB9XG4gIGludChtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgIGtpbmQ6IFwiaW50XCIsXG4gICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSlcbiAgICB9KTtcbiAgfVxuICBwb3NpdGl2ZShtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgIGtpbmQ6IFwibWluXCIsXG4gICAgICB2YWx1ZTogMCxcbiAgICAgIGluY2x1c2l2ZTogZmFsc2UsXG4gICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSlcbiAgICB9KTtcbiAgfVxuICBuZWdhdGl2ZShtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgIGtpbmQ6IFwibWF4XCIsXG4gICAgICB2YWx1ZTogMCxcbiAgICAgIGluY2x1c2l2ZTogZmFsc2UsXG4gICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSlcbiAgICB9KTtcbiAgfVxuICBub25wb3NpdGl2ZShtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgIGtpbmQ6IFwibWF4XCIsXG4gICAgICB2YWx1ZTogMCxcbiAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKVxuICAgIH0pO1xuICB9XG4gIG5vbm5lZ2F0aXZlKG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAga2luZDogXCJtaW5cIixcbiAgICAgIHZhbHVlOiAwLFxuICAgICAgaW5jbHVzaXZlOiB0cnVlLFxuICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpXG4gICAgfSk7XG4gIH1cbiAgbXVsdGlwbGVPZih2YWx1ZSwgbWVzc2FnZSkge1xuICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICBraW5kOiBcIm11bHRpcGxlT2ZcIixcbiAgICAgIHZhbHVlLFxuICAgICAgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpXG4gICAgfSk7XG4gIH1cbiAgZ2V0IG1pblZhbHVlKCkge1xuICAgIGxldCBtaW4gPSBudWxsO1xuICAgIGZvciAoY29uc3QgY2ggb2YgdGhpcy5fZGVmLmNoZWNrcykge1xuICAgICAgaWYgKGNoLmtpbmQgPT09IFwibWluXCIpIHtcbiAgICAgICAgaWYgKG1pbiA9PT0gbnVsbCB8fCBjaC52YWx1ZSA+IG1pbilcbiAgICAgICAgICBtaW4gPSBjaC52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1pbjtcbiAgfVxuICBnZXQgbWF4VmFsdWUoKSB7XG4gICAgbGV0IG1heCA9IG51bGw7XG4gICAgZm9yIChjb25zdCBjaCBvZiB0aGlzLl9kZWYuY2hlY2tzKSB7XG4gICAgICBpZiAoY2gua2luZCA9PT0gXCJtYXhcIikge1xuICAgICAgICBpZiAobWF4ID09PSBudWxsIHx8IGNoLnZhbHVlIDwgbWF4KVxuICAgICAgICAgIG1heCA9IGNoLnZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWF4O1xuICB9XG4gIGdldCBpc0ludCgpIHtcbiAgICByZXR1cm4gISF0aGlzLl9kZWYuY2hlY2tzLmZpbmQoKGNoKSA9PiBjaC5raW5kID09PSBcImludFwiKTtcbiAgfVxufTtcblpvZE51bWJlci5jcmVhdGUgPSAocGFyYW1zKSA9PiB7XG4gIHJldHVybiBuZXcgWm9kTnVtYmVyKHtcbiAgICBjaGVja3M6IFtdLFxuICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kTnVtYmVyLFxuICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKVxuICB9KTtcbn07XG52YXIgWm9kQmlnSW50ID0gY2xhc3MgZXh0ZW5kcyBab2RUeXBlIHtcbiAgX3BhcnNlKGlucHV0KSB7XG4gICAgY29uc3QgcGFyc2VkVHlwZSA9IHRoaXMuX2dldFR5cGUoaW5wdXQpO1xuICAgIGlmIChwYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLmJpZ2ludCkge1xuICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXG4gICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLmJpZ2ludCxcbiAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBJTlZBTElEO1xuICAgIH1cbiAgICByZXR1cm4gT0soaW5wdXQuZGF0YSk7XG4gIH1cbn07XG5ab2RCaWdJbnQuY3JlYXRlID0gKHBhcmFtcykgPT4ge1xuICByZXR1cm4gbmV3IFpvZEJpZ0ludCh7XG4gICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RCaWdJbnQsXG4gICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpXG4gIH0pO1xufTtcbnZhciBab2RCb29sZWFuID0gY2xhc3MgZXh0ZW5kcyBab2RUeXBlIHtcbiAgX3BhcnNlKGlucHV0KSB7XG4gICAgY29uc3QgcGFyc2VkVHlwZSA9IHRoaXMuX2dldFR5cGUoaW5wdXQpO1xuICAgIGlmIChwYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLmJvb2xlYW4pIHtcbiAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcbiAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5ib29sZWFuLFxuICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgfVxuICAgIHJldHVybiBPSyhpbnB1dC5kYXRhKTtcbiAgfVxufTtcblpvZEJvb2xlYW4uY3JlYXRlID0gKHBhcmFtcykgPT4ge1xuICByZXR1cm4gbmV3IFpvZEJvb2xlYW4oe1xuICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kQm9vbGVhbixcbiAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcylcbiAgfSk7XG59O1xudmFyIFpvZERhdGUgPSBjbGFzcyBleHRlbmRzIFpvZFR5cGUge1xuICBfcGFyc2UoaW5wdXQpIHtcbiAgICBjb25zdCBwYXJzZWRUeXBlID0gdGhpcy5fZ2V0VHlwZShpbnB1dCk7XG4gICAgaWYgKHBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUuZGF0ZSkge1xuICAgICAgY29uc3QgY3R4MiA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcbiAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eDIsIHtcbiAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUuZGF0ZSxcbiAgICAgICAgcmVjZWl2ZWQ6IGN0eDIucGFyc2VkVHlwZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICB9XG4gICAgaWYgKGlzTmFOKGlucHV0LmRhdGEuZ2V0VGltZSgpKSkge1xuICAgICAgY29uc3QgY3R4MiA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcbiAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eDIsIHtcbiAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfZGF0ZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICB9XG4gICAgY29uc3Qgc3RhdHVzID0gbmV3IFBhcnNlU3RhdHVzKCk7XG4gICAgbGV0IGN0eCA9IHZvaWQgMDtcbiAgICBmb3IgKGNvbnN0IGNoZWNrIG9mIHRoaXMuX2RlZi5jaGVja3MpIHtcbiAgICAgIGlmIChjaGVjay5raW5kID09PSBcIm1pblwiKSB7XG4gICAgICAgIGlmIChpbnB1dC5kYXRhLmdldFRpbWUoKSA8IGNoZWNrLnZhbHVlKSB7XG4gICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUudG9vX3NtYWxsLFxuICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZSxcbiAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgIG1pbmltdW06IGNoZWNrLnZhbHVlLFxuICAgICAgICAgICAgdHlwZTogXCJkYXRlXCJcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjaGVjay5raW5kID09PSBcIm1heFwiKSB7XG4gICAgICAgIGlmIChpbnB1dC5kYXRhLmdldFRpbWUoKSA+IGNoZWNrLnZhbHVlKSB7XG4gICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUudG9vX2JpZyxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2UsXG4gICAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgICBtYXhpbXVtOiBjaGVjay52YWx1ZSxcbiAgICAgICAgICAgIHR5cGU6IFwiZGF0ZVwiXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHV0aWwuYXNzZXJ0TmV2ZXIoY2hlY2spO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgc3RhdHVzOiBzdGF0dXMudmFsdWUsXG4gICAgICB2YWx1ZTogbmV3IERhdGUoaW5wdXQuZGF0YS5nZXRUaW1lKCkpXG4gICAgfTtcbiAgfVxuICBfYWRkQ2hlY2soY2hlY2spIHtcbiAgICByZXR1cm4gbmV3IFpvZERhdGUoe1xuICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgY2hlY2tzOiBbLi4udGhpcy5fZGVmLmNoZWNrcywgY2hlY2tdXG4gICAgfSk7XG4gIH1cbiAgbWluKG1pbkRhdGUsIG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAga2luZDogXCJtaW5cIixcbiAgICAgIHZhbHVlOiBtaW5EYXRlLmdldFRpbWUoKSxcbiAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbC50b1N0cmluZyhtZXNzYWdlKVxuICAgIH0pO1xuICB9XG4gIG1heChtYXhEYXRlLCBtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgIGtpbmQ6IFwibWF4XCIsXG4gICAgICB2YWx1ZTogbWF4RGF0ZS5nZXRUaW1lKCksXG4gICAgICBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSlcbiAgICB9KTtcbiAgfVxuICBnZXQgbWluRGF0ZSgpIHtcbiAgICBsZXQgbWluID0gbnVsbDtcbiAgICBmb3IgKGNvbnN0IGNoIG9mIHRoaXMuX2RlZi5jaGVja3MpIHtcbiAgICAgIGlmIChjaC5raW5kID09PSBcIm1pblwiKSB7XG4gICAgICAgIGlmIChtaW4gPT09IG51bGwgfHwgY2gudmFsdWUgPiBtaW4pXG4gICAgICAgICAgbWluID0gY2gudmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtaW4gIT0gbnVsbCA/IG5ldyBEYXRlKG1pbikgOiBudWxsO1xuICB9XG4gIGdldCBtYXhEYXRlKCkge1xuICAgIGxldCBtYXggPSBudWxsO1xuICAgIGZvciAoY29uc3QgY2ggb2YgdGhpcy5fZGVmLmNoZWNrcykge1xuICAgICAgaWYgKGNoLmtpbmQgPT09IFwibWF4XCIpIHtcbiAgICAgICAgaWYgKG1heCA9PT0gbnVsbCB8fCBjaC52YWx1ZSA8IG1heClcbiAgICAgICAgICBtYXggPSBjaC52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1heCAhPSBudWxsID8gbmV3IERhdGUobWF4KSA6IG51bGw7XG4gIH1cbn07XG5ab2REYXRlLmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2REYXRlKHtcbiAgICBjaGVja3M6IFtdLFxuICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kRGF0ZSxcbiAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcylcbiAgfSk7XG59O1xudmFyIFpvZFVuZGVmaW5lZCA9IGNsYXNzIGV4dGVuZHMgWm9kVHlwZSB7XG4gIF9wYXJzZShpbnB1dCkge1xuICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICBpZiAocGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS51bmRlZmluZWQpIHtcbiAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcbiAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS51bmRlZmluZWQsXG4gICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICB9XG4gICAgcmV0dXJuIE9LKGlucHV0LmRhdGEpO1xuICB9XG59O1xuWm9kVW5kZWZpbmVkLmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2RVbmRlZmluZWQoe1xuICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kVW5kZWZpbmVkLFxuICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKVxuICB9KTtcbn07XG52YXIgWm9kTnVsbCA9IGNsYXNzIGV4dGVuZHMgWm9kVHlwZSB7XG4gIF9wYXJzZShpbnB1dCkge1xuICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICBpZiAocGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5udWxsKSB7XG4gICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUubnVsbCxcbiAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBJTlZBTElEO1xuICAgIH1cbiAgICByZXR1cm4gT0soaW5wdXQuZGF0YSk7XG4gIH1cbn07XG5ab2ROdWxsLmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2ROdWxsKHtcbiAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZE51bGwsXG4gICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpXG4gIH0pO1xufTtcbnZhciBab2RBbnkgPSBjbGFzcyBleHRlbmRzIFpvZFR5cGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIHRoaXMuX2FueSA9IHRydWU7XG4gIH1cbiAgX3BhcnNlKGlucHV0KSB7XG4gICAgcmV0dXJuIE9LKGlucHV0LmRhdGEpO1xuICB9XG59O1xuWm9kQW55LmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2RBbnkoe1xuICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kQW55LFxuICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKVxuICB9KTtcbn07XG52YXIgWm9kVW5rbm93biA9IGNsYXNzIGV4dGVuZHMgWm9kVHlwZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgdGhpcy5fdW5rbm93biA9IHRydWU7XG4gIH1cbiAgX3BhcnNlKGlucHV0KSB7XG4gICAgcmV0dXJuIE9LKGlucHV0LmRhdGEpO1xuICB9XG59O1xuWm9kVW5rbm93bi5jcmVhdGUgPSAocGFyYW1zKSA9PiB7XG4gIHJldHVybiBuZXcgWm9kVW5rbm93bih7XG4gICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RVbmtub3duLFxuICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKVxuICB9KTtcbn07XG52YXIgWm9kTmV2ZXIgPSBjbGFzcyBleHRlbmRzIFpvZFR5cGUge1xuICBfcGFyc2UoaW5wdXQpIHtcbiAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUubmV2ZXIsXG4gICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGVcbiAgICB9KTtcbiAgICByZXR1cm4gSU5WQUxJRDtcbiAgfVxufTtcblpvZE5ldmVyLmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2ROZXZlcih7XG4gICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2ROZXZlcixcbiAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcylcbiAgfSk7XG59O1xudmFyIFpvZFZvaWQgPSBjbGFzcyBleHRlbmRzIFpvZFR5cGUge1xuICBfcGFyc2UoaW5wdXQpIHtcbiAgICBjb25zdCBwYXJzZWRUeXBlID0gdGhpcy5fZ2V0VHlwZShpbnB1dCk7XG4gICAgaWYgKHBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUudW5kZWZpbmVkKSB7XG4gICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUudm9pZCxcbiAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBJTlZBTElEO1xuICAgIH1cbiAgICByZXR1cm4gT0soaW5wdXQuZGF0YSk7XG4gIH1cbn07XG5ab2RWb2lkLmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2RWb2lkKHtcbiAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFZvaWQsXG4gICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpXG4gIH0pO1xufTtcbnZhciBab2RBcnJheSA9IGNsYXNzIGV4dGVuZHMgWm9kVHlwZSB7XG4gIF9wYXJzZShpbnB1dCkge1xuICAgIGNvbnN0IHtjdHgsIHN0YXR1c30gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgIGNvbnN0IGRlZiA9IHRoaXMuX2RlZjtcbiAgICBpZiAoY3R4LnBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUuYXJyYXkpIHtcbiAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5hcnJheSxcbiAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBJTlZBTElEO1xuICAgIH1cbiAgICBpZiAoZGVmLm1pbkxlbmd0aCAhPT0gbnVsbCkge1xuICAgICAgaWYgKGN0eC5kYXRhLmxlbmd0aCA8IGRlZi5taW5MZW5ndGgudmFsdWUpIHtcbiAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19zbWFsbCxcbiAgICAgICAgICBtaW5pbXVtOiBkZWYubWluTGVuZ3RoLnZhbHVlLFxuICAgICAgICAgIHR5cGU6IFwiYXJyYXlcIixcbiAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgbWVzc2FnZTogZGVmLm1pbkxlbmd0aC5tZXNzYWdlXG4gICAgICAgIH0pO1xuICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGRlZi5tYXhMZW5ndGggIT09IG51bGwpIHtcbiAgICAgIGlmIChjdHguZGF0YS5sZW5ndGggPiBkZWYubWF4TGVuZ3RoLnZhbHVlKSB7XG4gICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS50b29fYmlnLFxuICAgICAgICAgIG1heGltdW06IGRlZi5tYXhMZW5ndGgudmFsdWUsXG4gICAgICAgICAgdHlwZTogXCJhcnJheVwiLFxuICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICBtZXNzYWdlOiBkZWYubWF4TGVuZ3RoLm1lc3NhZ2VcbiAgICAgICAgfSk7XG4gICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoY3R4LmNvbW1vbi5hc3luYykge1xuICAgICAgcmV0dXJuIFByb21pc2UuYWxsKGN0eC5kYXRhLm1hcCgoaXRlbSwgaSkgPT4ge1xuICAgICAgICByZXR1cm4gZGVmLnR5cGUuX3BhcnNlQXN5bmMobmV3IFBhcnNlSW5wdXRMYXp5UGF0aChjdHgsIGl0ZW0sIGN0eC5wYXRoLCBpKSk7XG4gICAgICB9KSkudGhlbigocmVzdWx0MikgPT4ge1xuICAgICAgICByZXR1cm4gUGFyc2VTdGF0dXMubWVyZ2VBcnJheShzdGF0dXMsIHJlc3VsdDIpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IGN0eC5kYXRhLm1hcCgoaXRlbSwgaSkgPT4ge1xuICAgICAgcmV0dXJuIGRlZi50eXBlLl9wYXJzZVN5bmMobmV3IFBhcnNlSW5wdXRMYXp5UGF0aChjdHgsIGl0ZW0sIGN0eC5wYXRoLCBpKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIFBhcnNlU3RhdHVzLm1lcmdlQXJyYXkoc3RhdHVzLCByZXN1bHQpO1xuICB9XG4gIGdldCBlbGVtZW50KCkge1xuICAgIHJldHVybiB0aGlzLl9kZWYudHlwZTtcbiAgfVxuICBtaW4obWluTGVuZ3RoLCBtZXNzYWdlKSB7XG4gICAgcmV0dXJuIG5ldyBab2RBcnJheSh7XG4gICAgICAuLi50aGlzLl9kZWYsXG4gICAgICBtaW5MZW5ndGg6IHt2YWx1ZTogbWluTGVuZ3RoLCBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSl9XG4gICAgfSk7XG4gIH1cbiAgbWF4KG1heExlbmd0aCwgbWVzc2FnZSkge1xuICAgIHJldHVybiBuZXcgWm9kQXJyYXkoe1xuICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgbWF4TGVuZ3RoOiB7dmFsdWU6IG1heExlbmd0aCwgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpfVxuICAgIH0pO1xuICB9XG4gIGxlbmd0aChsZW4sIG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5taW4obGVuLCBtZXNzYWdlKS5tYXgobGVuLCBtZXNzYWdlKTtcbiAgfVxuICBub25lbXB0eShtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMubWluKDEsIG1lc3NhZ2UpO1xuICB9XG59O1xuWm9kQXJyYXkuY3JlYXRlID0gKHNjaGVtYSwgcGFyYW1zKSA9PiB7XG4gIHJldHVybiBuZXcgWm9kQXJyYXkoe1xuICAgIHR5cGU6IHNjaGVtYSxcbiAgICBtaW5MZW5ndGg6IG51bGwsXG4gICAgbWF4TGVuZ3RoOiBudWxsLFxuICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kQXJyYXksXG4gICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpXG4gIH0pO1xufTtcbnZhciBvYmplY3RVdGlsO1xuKGZ1bmN0aW9uKG9iamVjdFV0aWw0KSB7XG4gIG9iamVjdFV0aWw0Lm1lcmdlU2hhcGVzID0gKGZpcnN0LCBzZWNvbmQpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgLi4uZmlyc3QsXG4gICAgICAuLi5zZWNvbmRcbiAgICB9O1xuICB9O1xufSkob2JqZWN0VXRpbCB8fCAob2JqZWN0VXRpbCA9IHt9KSk7XG52YXIgQXVnbWVudEZhY3RvcnkgPSAoZGVmKSA9PiAoYXVnbWVudGF0aW9uKSA9PiB7XG4gIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAuLi5kZWYsXG4gICAgc2hhcGU6ICgpID0+ICh7XG4gICAgICAuLi5kZWYuc2hhcGUoKSxcbiAgICAgIC4uLmF1Z21lbnRhdGlvblxuICAgIH0pXG4gIH0pO1xufTtcbmZ1bmN0aW9uIGRlZXBQYXJ0aWFsaWZ5KHNjaGVtYSkge1xuICBpZiAoc2NoZW1hIGluc3RhbmNlb2YgWm9kT2JqZWN0KSB7XG4gICAgY29uc3QgbmV3U2hhcGUgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBzY2hlbWEuc2hhcGUpIHtcbiAgICAgIGNvbnN0IGZpZWxkU2NoZW1hID0gc2NoZW1hLnNoYXBlW2tleV07XG4gICAgICBuZXdTaGFwZVtrZXldID0gWm9kT3B0aW9uYWwuY3JlYXRlKGRlZXBQYXJ0aWFsaWZ5KGZpZWxkU2NoZW1hKSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAgIC4uLnNjaGVtYS5fZGVmLFxuICAgICAgc2hhcGU6ICgpID0+IG5ld1NoYXBlXG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoc2NoZW1hIGluc3RhbmNlb2YgWm9kQXJyYXkpIHtcbiAgICByZXR1cm4gWm9kQXJyYXkuY3JlYXRlKGRlZXBQYXJ0aWFsaWZ5KHNjaGVtYS5lbGVtZW50KSk7XG4gIH0gZWxzZSBpZiAoc2NoZW1hIGluc3RhbmNlb2YgWm9kT3B0aW9uYWwpIHtcbiAgICByZXR1cm4gWm9kT3B0aW9uYWwuY3JlYXRlKGRlZXBQYXJ0aWFsaWZ5KHNjaGVtYS51bndyYXAoKSkpO1xuICB9IGVsc2UgaWYgKHNjaGVtYSBpbnN0YW5jZW9mIFpvZE51bGxhYmxlKSB7XG4gICAgcmV0dXJuIFpvZE51bGxhYmxlLmNyZWF0ZShkZWVwUGFydGlhbGlmeShzY2hlbWEudW53cmFwKCkpKTtcbiAgfSBlbHNlIGlmIChzY2hlbWEgaW5zdGFuY2VvZiBab2RUdXBsZSkge1xuICAgIHJldHVybiBab2RUdXBsZS5jcmVhdGUoc2NoZW1hLml0ZW1zLm1hcCgoaXRlbSkgPT4gZGVlcFBhcnRpYWxpZnkoaXRlbSkpKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc2NoZW1hO1xuICB9XG59XG52YXIgWm9kT2JqZWN0ID0gY2xhc3MgZXh0ZW5kcyBab2RUeXBlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICB0aGlzLl9jYWNoZWQgPSBudWxsO1xuICAgIHRoaXMubm9uc3RyaWN0ID0gdGhpcy5wYXNzdGhyb3VnaDtcbiAgICB0aGlzLmF1Z21lbnQgPSBBdWdtZW50RmFjdG9yeSh0aGlzLl9kZWYpO1xuICAgIHRoaXMuZXh0ZW5kID0gQXVnbWVudEZhY3RvcnkodGhpcy5fZGVmKTtcbiAgfVxuICBfZ2V0Q2FjaGVkKCkge1xuICAgIGlmICh0aGlzLl9jYWNoZWQgIT09IG51bGwpXG4gICAgICByZXR1cm4gdGhpcy5fY2FjaGVkO1xuICAgIGNvbnN0IHNoYXBlID0gdGhpcy5fZGVmLnNoYXBlKCk7XG4gICAgY29uc3Qga2V5cyA9IHV0aWwub2JqZWN0S2V5cyhzaGFwZSk7XG4gICAgcmV0dXJuIHRoaXMuX2NhY2hlZCA9IHtzaGFwZSwga2V5c307XG4gIH1cbiAgX3BhcnNlKGlucHV0KSB7XG4gICAgY29uc3QgcGFyc2VkVHlwZSA9IHRoaXMuX2dldFR5cGUoaW5wdXQpO1xuICAgIGlmIChwYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLm9iamVjdCkge1xuICAgICAgY29uc3QgY3R4MiA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcbiAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eDIsIHtcbiAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUub2JqZWN0LFxuICAgICAgICByZWNlaXZlZDogY3R4Mi5wYXJzZWRUeXBlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBJTlZBTElEO1xuICAgIH1cbiAgICBjb25zdCB7c3RhdHVzLCBjdHh9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICBjb25zdCB7c2hhcGUsIGtleXM6IHNoYXBlS2V5c30gPSB0aGlzLl9nZXRDYWNoZWQoKTtcbiAgICBjb25zdCBleHRyYUtleXMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBjdHguZGF0YSkge1xuICAgICAgaWYgKCFzaGFwZUtleXMuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICBleHRyYUtleXMucHVzaChrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBwYWlycyA9IFtdO1xuICAgIGZvciAoY29uc3Qga2V5IG9mIHNoYXBlS2V5cykge1xuICAgICAgY29uc3Qga2V5VmFsaWRhdG9yID0gc2hhcGVba2V5XTtcbiAgICAgIGNvbnN0IHZhbHVlID0gY3R4LmRhdGFba2V5XTtcbiAgICAgIHBhaXJzLnB1c2goe1xuICAgICAgICBrZXk6IHtzdGF0dXM6IFwidmFsaWRcIiwgdmFsdWU6IGtleX0sXG4gICAgICAgIHZhbHVlOiBrZXlWYWxpZGF0b3IuX3BhcnNlKG5ldyBQYXJzZUlucHV0TGF6eVBhdGgoY3R4LCB2YWx1ZSwgY3R4LnBhdGgsIGtleSkpLFxuICAgICAgICBhbHdheXNTZXQ6IGtleSBpbiBjdHguZGF0YVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmICh0aGlzLl9kZWYuY2F0Y2hhbGwgaW5zdGFuY2VvZiBab2ROZXZlcikge1xuICAgICAgY29uc3QgdW5rbm93bktleXMgPSB0aGlzLl9kZWYudW5rbm93bktleXM7XG4gICAgICBpZiAodW5rbm93bktleXMgPT09IFwicGFzc3Rocm91Z2hcIikge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBleHRyYUtleXMpIHtcbiAgICAgICAgICBwYWlycy5wdXNoKHtcbiAgICAgICAgICAgIGtleToge3N0YXR1czogXCJ2YWxpZFwiLCB2YWx1ZToga2V5fSxcbiAgICAgICAgICAgIHZhbHVlOiB7c3RhdHVzOiBcInZhbGlkXCIsIHZhbHVlOiBjdHguZGF0YVtrZXldfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHVua25vd25LZXlzID09PSBcInN0cmljdFwiKSB7XG4gICAgICAgIGlmIChleHRyYUtleXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnVucmVjb2duaXplZF9rZXlzLFxuICAgICAgICAgICAga2V5czogZXh0cmFLZXlzXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodW5rbm93bktleXMgPT09IFwic3RyaXBcIilcbiAgICAgICAgO1xuICAgICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSW50ZXJuYWwgWm9kT2JqZWN0IGVycm9yOiBpbnZhbGlkIHVua25vd25LZXlzIHZhbHVlLmApO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBjYXRjaGFsbCA9IHRoaXMuX2RlZi5jYXRjaGFsbDtcbiAgICAgIGZvciAoY29uc3Qga2V5IG9mIGV4dHJhS2V5cykge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGN0eC5kYXRhW2tleV07XG4gICAgICAgIHBhaXJzLnB1c2goe1xuICAgICAgICAgIGtleToge3N0YXR1czogXCJ2YWxpZFwiLCB2YWx1ZToga2V5fSxcbiAgICAgICAgICB2YWx1ZTogY2F0Y2hhbGwuX3BhcnNlKG5ldyBQYXJzZUlucHV0TGF6eVBhdGgoY3R4LCB2YWx1ZSwgY3R4LnBhdGgsIGtleSkpLFxuICAgICAgICAgIGFsd2F5c1NldDoga2V5IGluIGN0eC5kYXRhXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoY3R4LmNvbW1vbi5hc3luYykge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBzeW5jUGFpcnMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBwYWlyIG9mIHBhaXJzKSB7XG4gICAgICAgICAgY29uc3Qga2V5ID0gYXdhaXQgcGFpci5rZXk7XG4gICAgICAgICAgc3luY1BhaXJzLnB1c2goe1xuICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgdmFsdWU6IGF3YWl0IHBhaXIudmFsdWUsXG4gICAgICAgICAgICBhbHdheXNTZXQ6IHBhaXIuYWx3YXlzU2V0XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN5bmNQYWlycztcbiAgICAgIH0pLnRoZW4oKHN5bmNQYWlycykgPT4ge1xuICAgICAgICByZXR1cm4gUGFyc2VTdGF0dXMubWVyZ2VPYmplY3RTeW5jKHN0YXR1cywgc3luY1BhaXJzKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gUGFyc2VTdGF0dXMubWVyZ2VPYmplY3RTeW5jKHN0YXR1cywgcGFpcnMpO1xuICAgIH1cbiAgfVxuICBnZXQgc2hhcGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RlZi5zaGFwZSgpO1xuICB9XG4gIHN0cmljdChtZXNzYWdlKSB7XG4gICAgZXJyb3JVdGlsLmVyclRvT2JqO1xuICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgIHVua25vd25LZXlzOiBcInN0cmljdFwiLFxuICAgICAgLi4ubWVzc2FnZSAhPT0gdm9pZCAwID8ge1xuICAgICAgICBlcnJvck1hcDogKGlzc3VlLCBjdHgpID0+IHtcbiAgICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgICAgICAgY29uc3QgZGVmYXVsdEVycm9yID0gKF9jID0gKF9iID0gKF9hID0gdGhpcy5fZGVmKS5lcnJvck1hcCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EsIGlzc3VlLCBjdHgpLm1lc3NhZ2UpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IGN0eC5kZWZhdWx0RXJyb3I7XG4gICAgICAgICAgaWYgKGlzc3VlLmNvZGUgPT09IFwidW5yZWNvZ25pemVkX2tleXNcIilcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIG1lc3NhZ2U6IChfZCA9IGVycm9yVXRpbC5lcnJUb09iaihtZXNzYWdlKS5tZXNzYWdlKSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiBkZWZhdWx0RXJyb3JcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1lc3NhZ2U6IGRlZmF1bHRFcnJvclxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0gOiB7fVxuICAgIH0pO1xuICB9XG4gIHN0cmlwKCkge1xuICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgIHVua25vd25LZXlzOiBcInN0cmlwXCJcbiAgICB9KTtcbiAgfVxuICBwYXNzdGhyb3VnaCgpIHtcbiAgICByZXR1cm4gbmV3IFpvZE9iamVjdCh7XG4gICAgICAuLi50aGlzLl9kZWYsXG4gICAgICB1bmtub3duS2V5czogXCJwYXNzdGhyb3VnaFwiXG4gICAgfSk7XG4gIH1cbiAgc2V0S2V5KGtleSwgc2NoZW1hKSB7XG4gICAgcmV0dXJuIHRoaXMuYXVnbWVudCh7W2tleV06IHNjaGVtYX0pO1xuICB9XG4gIG1lcmdlKG1lcmdpbmcpIHtcbiAgICBjb25zdCBtZXJnZWQgPSBuZXcgWm9kT2JqZWN0KHtcbiAgICAgIHVua25vd25LZXlzOiBtZXJnaW5nLl9kZWYudW5rbm93bktleXMsXG4gICAgICBjYXRjaGFsbDogbWVyZ2luZy5fZGVmLmNhdGNoYWxsLFxuICAgICAgc2hhcGU6ICgpID0+IG9iamVjdFV0aWwubWVyZ2VTaGFwZXModGhpcy5fZGVmLnNoYXBlKCksIG1lcmdpbmcuX2RlZi5zaGFwZSgpKSxcbiAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kT2JqZWN0XG4gICAgfSk7XG4gICAgcmV0dXJuIG1lcmdlZDtcbiAgfVxuICBjYXRjaGFsbChpbmRleCkge1xuICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgIGNhdGNoYWxsOiBpbmRleFxuICAgIH0pO1xuICB9XG4gIHBpY2sobWFzaykge1xuICAgIGNvbnN0IHNoYXBlID0ge307XG4gICAgdXRpbC5vYmplY3RLZXlzKG1hc2spLm1hcCgoa2V5KSA9PiB7XG4gICAgICBpZiAodGhpcy5zaGFwZVtrZXldKVxuICAgICAgICBzaGFwZVtrZXldID0gdGhpcy5zaGFwZVtrZXldO1xuICAgIH0pO1xuICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgIHNoYXBlOiAoKSA9PiBzaGFwZVxuICAgIH0pO1xuICB9XG4gIG9taXQobWFzaykge1xuICAgIGNvbnN0IHNoYXBlID0ge307XG4gICAgdXRpbC5vYmplY3RLZXlzKHRoaXMuc2hhcGUpLm1hcCgoa2V5KSA9PiB7XG4gICAgICBpZiAodXRpbC5vYmplY3RLZXlzKG1hc2spLmluZGV4T2Yoa2V5KSA9PT0gLTEpIHtcbiAgICAgICAgc2hhcGVba2V5XSA9IHRoaXMuc2hhcGVba2V5XTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gbmV3IFpvZE9iamVjdCh7XG4gICAgICAuLi50aGlzLl9kZWYsXG4gICAgICBzaGFwZTogKCkgPT4gc2hhcGVcbiAgICB9KTtcbiAgfVxuICBkZWVwUGFydGlhbCgpIHtcbiAgICByZXR1cm4gZGVlcFBhcnRpYWxpZnkodGhpcyk7XG4gIH1cbiAgcGFydGlhbChtYXNrKSB7XG4gICAgY29uc3QgbmV3U2hhcGUgPSB7fTtcbiAgICBpZiAobWFzaykge1xuICAgICAgdXRpbC5vYmplY3RLZXlzKHRoaXMuc2hhcGUpLm1hcCgoa2V5KSA9PiB7XG4gICAgICAgIGlmICh1dGlsLm9iamVjdEtleXMobWFzaykuaW5kZXhPZihrZXkpID09PSAtMSkge1xuICAgICAgICAgIG5ld1NoYXBlW2tleV0gPSB0aGlzLnNoYXBlW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3U2hhcGVba2V5XSA9IHRoaXMuc2hhcGVba2V5XS5vcHRpb25hbCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBuZXcgWm9kT2JqZWN0KHtcbiAgICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgICBzaGFwZTogKCkgPT4gbmV3U2hhcGVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLnNoYXBlKSB7XG4gICAgICAgIGNvbnN0IGZpZWxkU2NoZW1hID0gdGhpcy5zaGFwZVtrZXldO1xuICAgICAgICBuZXdTaGFwZVtrZXldID0gZmllbGRTY2hlbWEub3B0aW9uYWwoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ldyBab2RPYmplY3Qoe1xuICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgc2hhcGU6ICgpID0+IG5ld1NoYXBlXG4gICAgfSk7XG4gIH1cbiAgcmVxdWlyZWQoKSB7XG4gICAgY29uc3QgbmV3U2hhcGUgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLnNoYXBlKSB7XG4gICAgICBjb25zdCBmaWVsZFNjaGVtYSA9IHRoaXMuc2hhcGVba2V5XTtcbiAgICAgIGxldCBuZXdGaWVsZCA9IGZpZWxkU2NoZW1hO1xuICAgICAgd2hpbGUgKG5ld0ZpZWxkIGluc3RhbmNlb2YgWm9kT3B0aW9uYWwpIHtcbiAgICAgICAgbmV3RmllbGQgPSBuZXdGaWVsZC5fZGVmLmlubmVyVHlwZTtcbiAgICAgIH1cbiAgICAgIG5ld1NoYXBlW2tleV0gPSBuZXdGaWVsZDtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBab2RPYmplY3Qoe1xuICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgc2hhcGU6ICgpID0+IG5ld1NoYXBlXG4gICAgfSk7XG4gIH1cbiAga2V5b2YoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZVpvZEVudW0odXRpbC5vYmplY3RLZXlzKHRoaXMuc2hhcGUpKTtcbiAgfVxufTtcblpvZE9iamVjdC5jcmVhdGUgPSAoc2hhcGUsIHBhcmFtcykgPT4ge1xuICByZXR1cm4gbmV3IFpvZE9iamVjdCh7XG4gICAgc2hhcGU6ICgpID0+IHNoYXBlLFxuICAgIHVua25vd25LZXlzOiBcInN0cmlwXCIsXG4gICAgY2F0Y2hhbGw6IFpvZE5ldmVyLmNyZWF0ZSgpLFxuICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kT2JqZWN0LFxuICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKVxuICB9KTtcbn07XG5ab2RPYmplY3Quc3RyaWN0Q3JlYXRlID0gKHNoYXBlLCBwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2RPYmplY3Qoe1xuICAgIHNoYXBlOiAoKSA9PiBzaGFwZSxcbiAgICB1bmtub3duS2V5czogXCJzdHJpY3RcIixcbiAgICBjYXRjaGFsbDogWm9kTmV2ZXIuY3JlYXRlKCksXG4gICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RPYmplY3QsXG4gICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpXG4gIH0pO1xufTtcblpvZE9iamVjdC5sYXp5Y3JlYXRlID0gKHNoYXBlLCBwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2RPYmplY3Qoe1xuICAgIHNoYXBlLFxuICAgIHVua25vd25LZXlzOiBcInN0cmlwXCIsXG4gICAgY2F0Y2hhbGw6IFpvZE5ldmVyLmNyZWF0ZSgpLFxuICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kT2JqZWN0LFxuICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKVxuICB9KTtcbn07XG52YXIgWm9kVW5pb24gPSBjbGFzcyBleHRlbmRzIFpvZFR5cGUge1xuICBfcGFyc2UoaW5wdXQpIHtcbiAgICBjb25zdCB7Y3R4fSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuX2RlZi5vcHRpb25zO1xuICAgIGZ1bmN0aW9uIGhhbmRsZVJlc3VsdHMocmVzdWx0cykge1xuICAgICAgZm9yIChjb25zdCByZXN1bHQgb2YgcmVzdWx0cykge1xuICAgICAgICBpZiAocmVzdWx0LnJlc3VsdC5zdGF0dXMgPT09IFwidmFsaWRcIikge1xuICAgICAgICAgIHJldHVybiByZXN1bHQucmVzdWx0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmb3IgKGNvbnN0IHJlc3VsdCBvZiByZXN1bHRzKSB7XG4gICAgICAgIGlmIChyZXN1bHQucmVzdWx0LnN0YXR1cyA9PT0gXCJkaXJ0eVwiKSB7XG4gICAgICAgICAgY3R4LmNvbW1vbi5pc3N1ZXMucHVzaCguLi5yZXN1bHQuY3R4LmNvbW1vbi5pc3N1ZXMpO1xuICAgICAgICAgIHJldHVybiByZXN1bHQucmVzdWx0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCB1bmlvbkVycm9ycyA9IHJlc3VsdHMubWFwKChyZXN1bHQpID0+IG5ldyBab2RFcnJvcihyZXN1bHQuY3R4LmNvbW1vbi5pc3N1ZXMpKTtcbiAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF91bmlvbixcbiAgICAgICAgdW5pb25FcnJvcnNcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgfVxuICAgIGlmIChjdHguY29tbW9uLmFzeW5jKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5hbGwob3B0aW9ucy5tYXAoYXN5bmMgKG9wdGlvbikgPT4ge1xuICAgICAgICBjb25zdCBjaGlsZEN0eCA9IHtcbiAgICAgICAgICAuLi5jdHgsXG4gICAgICAgICAgY29tbW9uOiB7XG4gICAgICAgICAgICAuLi5jdHguY29tbW9uLFxuICAgICAgICAgICAgaXNzdWVzOiBbXVxuICAgICAgICAgIH0sXG4gICAgICAgICAgcGFyZW50OiBudWxsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcmVzdWx0OiBhd2FpdCBvcHRpb24uX3BhcnNlQXN5bmMoe1xuICAgICAgICAgICAgZGF0YTogY3R4LmRhdGEsXG4gICAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgICAgIHBhcmVudDogY2hpbGRDdHhcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBjdHg6IGNoaWxkQ3R4XG4gICAgICAgIH07XG4gICAgICB9KSkudGhlbihoYW5kbGVSZXN1bHRzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGRpcnR5ID0gdm9pZCAwO1xuICAgICAgY29uc3QgaXNzdWVzID0gW107XG4gICAgICBmb3IgKGNvbnN0IG9wdGlvbiBvZiBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkQ3R4ID0ge1xuICAgICAgICAgIC4uLmN0eCxcbiAgICAgICAgICBjb21tb246IHtcbiAgICAgICAgICAgIC4uLmN0eC5jb21tb24sXG4gICAgICAgICAgICBpc3N1ZXM6IFtdXG4gICAgICAgICAgfSxcbiAgICAgICAgICBwYXJlbnQ6IG51bGxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gb3B0aW9uLl9wYXJzZVN5bmMoe1xuICAgICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgIHBhcmVudDogY2hpbGRDdHhcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChyZXN1bHQuc3RhdHVzID09PSBcInZhbGlkXCIpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdC5zdGF0dXMgPT09IFwiZGlydHlcIiAmJiAhZGlydHkpIHtcbiAgICAgICAgICBkaXJ0eSA9IHtyZXN1bHQsIGN0eDogY2hpbGRDdHh9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaGlsZEN0eC5jb21tb24uaXNzdWVzLmxlbmd0aCkge1xuICAgICAgICAgIGlzc3Vlcy5wdXNoKGNoaWxkQ3R4LmNvbW1vbi5pc3N1ZXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZGlydHkpIHtcbiAgICAgICAgY3R4LmNvbW1vbi5pc3N1ZXMucHVzaCguLi5kaXJ0eS5jdHguY29tbW9uLmlzc3Vlcyk7XG4gICAgICAgIHJldHVybiBkaXJ0eS5yZXN1bHQ7XG4gICAgICB9XG4gICAgICBjb25zdCB1bmlvbkVycm9ycyA9IGlzc3Vlcy5tYXAoKGlzc3VlczIpID0+IG5ldyBab2RFcnJvcihpc3N1ZXMyKSk7XG4gICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdW5pb24sXG4gICAgICAgIHVuaW9uRXJyb3JzXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBJTlZBTElEO1xuICAgIH1cbiAgfVxuICBnZXQgb3B0aW9ucygpIHtcbiAgICByZXR1cm4gdGhpcy5fZGVmLm9wdGlvbnM7XG4gIH1cbn07XG5ab2RVbmlvbi5jcmVhdGUgPSAodHlwZXMsIHBhcmFtcykgPT4ge1xuICByZXR1cm4gbmV3IFpvZFVuaW9uKHtcbiAgICBvcHRpb25zOiB0eXBlcyxcbiAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFVuaW9uLFxuICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKVxuICB9KTtcbn07XG52YXIgWm9kRGlzY3JpbWluYXRlZFVuaW9uID0gY2xhc3MgZXh0ZW5kcyBab2RUeXBlIHtcbiAgX3BhcnNlKGlucHV0KSB7XG4gICAgY29uc3Qge2N0eH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgIGlmIChjdHgucGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5vYmplY3QpIHtcbiAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5vYmplY3QsXG4gICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICB9XG4gICAgY29uc3QgZGlzY3JpbWluYXRvciA9IHRoaXMuZGlzY3JpbWluYXRvcjtcbiAgICBjb25zdCBkaXNjcmltaW5hdG9yVmFsdWUgPSBjdHguZGF0YVtkaXNjcmltaW5hdG9yXTtcbiAgICBjb25zdCBvcHRpb24gPSB0aGlzLm9wdGlvbnMuZ2V0KGRpc2NyaW1pbmF0b3JWYWx1ZSk7XG4gICAgaWYgKCFvcHRpb24pIHtcbiAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF91bmlvbl9kaXNjcmltaW5hdG9yLFxuICAgICAgICBvcHRpb25zOiB0aGlzLnZhbGlkRGlzY3JpbWluYXRvclZhbHVlcyxcbiAgICAgICAgcGF0aDogW2Rpc2NyaW1pbmF0b3JdXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBJTlZBTElEO1xuICAgIH1cbiAgICBpZiAoY3R4LmNvbW1vbi5hc3luYykge1xuICAgICAgcmV0dXJuIG9wdGlvbi5fcGFyc2VBc3luYyh7XG4gICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgcGFyZW50OiBjdHhcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gb3B0aW9uLl9wYXJzZVN5bmMoe1xuICAgICAgICBkYXRhOiBjdHguZGF0YSxcbiAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgIHBhcmVudDogY3R4XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgZ2V0IGRpc2NyaW1pbmF0b3IoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RlZi5kaXNjcmltaW5hdG9yO1xuICB9XG4gIGdldCB2YWxpZERpc2NyaW1pbmF0b3JWYWx1ZXMoKSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5vcHRpb25zLmtleXMoKSk7XG4gIH1cbiAgZ2V0IG9wdGlvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RlZi5vcHRpb25zO1xuICB9XG4gIHN0YXRpYyBjcmVhdGUoZGlzY3JpbWluYXRvciwgdHlwZXMsIHBhcmFtcykge1xuICAgIGNvbnN0IG9wdGlvbnMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICAgIHRyeSB7XG4gICAgICB0eXBlcy5mb3JFYWNoKCh0eXBlKSA9PiB7XG4gICAgICAgIGNvbnN0IGRpc2NyaW1pbmF0b3JWYWx1ZSA9IHR5cGUuc2hhcGVbZGlzY3JpbWluYXRvcl0udmFsdWU7XG4gICAgICAgIG9wdGlvbnMuc2V0KGRpc2NyaW1pbmF0b3JWYWx1ZSwgdHlwZSk7XG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgZGlzY3JpbWluYXRvciB2YWx1ZSBjb3VsZCBub3QgYmUgZXh0cmFjdGVkIGZyb20gYWxsIHRoZSBwcm92aWRlZCBzY2hlbWFzXCIpO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5zaXplICE9PSB0eXBlcy5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlNvbWUgb2YgdGhlIGRpc2NyaW1pbmF0b3IgdmFsdWVzIGFyZSBub3QgdW5pcXVlXCIpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFpvZERpc2NyaW1pbmF0ZWRVbmlvbih7XG4gICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZERpc2NyaW1pbmF0ZWRVbmlvbixcbiAgICAgIGRpc2NyaW1pbmF0b3IsXG4gICAgICBvcHRpb25zLFxuICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpXG4gICAgfSk7XG4gIH1cbn07XG5mdW5jdGlvbiBtZXJnZVZhbHVlcyhhLCBiKSB7XG4gIGNvbnN0IGFUeXBlID0gZ2V0UGFyc2VkVHlwZShhKTtcbiAgY29uc3QgYlR5cGUgPSBnZXRQYXJzZWRUeXBlKGIpO1xuICBpZiAoYSA9PT0gYikge1xuICAgIHJldHVybiB7dmFsaWQ6IHRydWUsIGRhdGE6IGF9O1xuICB9IGVsc2UgaWYgKGFUeXBlID09PSBab2RQYXJzZWRUeXBlLm9iamVjdCAmJiBiVHlwZSA9PT0gWm9kUGFyc2VkVHlwZS5vYmplY3QpIHtcbiAgICBjb25zdCBiS2V5cyA9IHV0aWwub2JqZWN0S2V5cyhiKTtcbiAgICBjb25zdCBzaGFyZWRLZXlzID0gdXRpbC5vYmplY3RLZXlzKGEpLmZpbHRlcigoa2V5KSA9PiBiS2V5cy5pbmRleE9mKGtleSkgIT09IC0xKTtcbiAgICBjb25zdCBuZXdPYmogPSB7Li4uYSwgLi4uYn07XG4gICAgZm9yIChjb25zdCBrZXkgb2Ygc2hhcmVkS2V5cykge1xuICAgICAgY29uc3Qgc2hhcmVkVmFsdWUgPSBtZXJnZVZhbHVlcyhhW2tleV0sIGJba2V5XSk7XG4gICAgICBpZiAoIXNoYXJlZFZhbHVlLnZhbGlkKSB7XG4gICAgICAgIHJldHVybiB7dmFsaWQ6IGZhbHNlfTtcbiAgICAgIH1cbiAgICAgIG5ld09ialtrZXldID0gc2hhcmVkVmFsdWUuZGF0YTtcbiAgICB9XG4gICAgcmV0dXJuIHt2YWxpZDogdHJ1ZSwgZGF0YTogbmV3T2JqfTtcbiAgfSBlbHNlIGlmIChhVHlwZSA9PT0gWm9kUGFyc2VkVHlwZS5hcnJheSAmJiBiVHlwZSA9PT0gWm9kUGFyc2VkVHlwZS5hcnJheSkge1xuICAgIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB7dmFsaWQ6IGZhbHNlfTtcbiAgICB9XG4gICAgY29uc3QgbmV3QXJyYXkgPSBbXTtcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgYS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIGNvbnN0IGl0ZW1BID0gYVtpbmRleF07XG4gICAgICBjb25zdCBpdGVtQiA9IGJbaW5kZXhdO1xuICAgICAgY29uc3Qgc2hhcmVkVmFsdWUgPSBtZXJnZVZhbHVlcyhpdGVtQSwgaXRlbUIpO1xuICAgICAgaWYgKCFzaGFyZWRWYWx1ZS52YWxpZCkge1xuICAgICAgICByZXR1cm4ge3ZhbGlkOiBmYWxzZX07XG4gICAgICB9XG4gICAgICBuZXdBcnJheS5wdXNoKHNoYXJlZFZhbHVlLmRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4ge3ZhbGlkOiB0cnVlLCBkYXRhOiBuZXdBcnJheX07XG4gIH0gZWxzZSBpZiAoYVR5cGUgPT09IFpvZFBhcnNlZFR5cGUuZGF0ZSAmJiBiVHlwZSA9PT0gWm9kUGFyc2VkVHlwZS5kYXRlICYmICthID09PSArYikge1xuICAgIHJldHVybiB7dmFsaWQ6IHRydWUsIGRhdGE6IGF9O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB7dmFsaWQ6IGZhbHNlfTtcbiAgfVxufVxudmFyIFpvZEludGVyc2VjdGlvbiA9IGNsYXNzIGV4dGVuZHMgWm9kVHlwZSB7XG4gIF9wYXJzZShpbnB1dCkge1xuICAgIGNvbnN0IHtzdGF0dXMsIGN0eH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgIGNvbnN0IGhhbmRsZVBhcnNlZCA9IChwYXJzZWRMZWZ0LCBwYXJzZWRSaWdodCkgPT4ge1xuICAgICAgaWYgKGlzQWJvcnRlZChwYXJzZWRMZWZ0KSB8fCBpc0Fib3J0ZWQocGFyc2VkUmlnaHQpKSB7XG4gICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgfVxuICAgICAgY29uc3QgbWVyZ2VkID0gbWVyZ2VWYWx1ZXMocGFyc2VkTGVmdC52YWx1ZSwgcGFyc2VkUmlnaHQudmFsdWUpO1xuICAgICAgaWYgKCFtZXJnZWQudmFsaWQpIHtcbiAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfaW50ZXJzZWN0aW9uX3R5cGVzXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgIH1cbiAgICAgIGlmIChpc0RpcnR5KHBhcnNlZExlZnQpIHx8IGlzRGlydHkocGFyc2VkUmlnaHQpKSB7XG4gICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtzdGF0dXM6IHN0YXR1cy52YWx1ZSwgdmFsdWU6IG1lcmdlZC5kYXRhfTtcbiAgICB9O1xuICAgIGlmIChjdHguY29tbW9uLmFzeW5jKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5hbGwoW1xuICAgICAgICB0aGlzLl9kZWYubGVmdC5fcGFyc2VBc3luYyh7XG4gICAgICAgICAgZGF0YTogY3R4LmRhdGEsXG4gICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgcGFyZW50OiBjdHhcbiAgICAgICAgfSksXG4gICAgICAgIHRoaXMuX2RlZi5yaWdodC5fcGFyc2VBc3luYyh7XG4gICAgICAgICAgZGF0YTogY3R4LmRhdGEsXG4gICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgcGFyZW50OiBjdHhcbiAgICAgICAgfSlcbiAgICAgIF0pLnRoZW4oKFtsZWZ0LCByaWdodF0pID0+IGhhbmRsZVBhcnNlZChsZWZ0LCByaWdodCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gaGFuZGxlUGFyc2VkKHRoaXMuX2RlZi5sZWZ0Ll9wYXJzZVN5bmMoe1xuICAgICAgICBkYXRhOiBjdHguZGF0YSxcbiAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgIHBhcmVudDogY3R4XG4gICAgICB9KSwgdGhpcy5fZGVmLnJpZ2h0Ll9wYXJzZVN5bmMoe1xuICAgICAgICBkYXRhOiBjdHguZGF0YSxcbiAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgIHBhcmVudDogY3R4XG4gICAgICB9KSk7XG4gICAgfVxuICB9XG59O1xuWm9kSW50ZXJzZWN0aW9uLmNyZWF0ZSA9IChsZWZ0LCByaWdodCwgcGFyYW1zKSA9PiB7XG4gIHJldHVybiBuZXcgWm9kSW50ZXJzZWN0aW9uKHtcbiAgICBsZWZ0LFxuICAgIHJpZ2h0LFxuICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kSW50ZXJzZWN0aW9uLFxuICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKVxuICB9KTtcbn07XG52YXIgWm9kVHVwbGUgPSBjbGFzcyBleHRlbmRzIFpvZFR5cGUge1xuICBfcGFyc2UoaW5wdXQpIHtcbiAgICBjb25zdCB7c3RhdHVzLCBjdHh9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICBpZiAoY3R4LnBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUuYXJyYXkpIHtcbiAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5hcnJheSxcbiAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBJTlZBTElEO1xuICAgIH1cbiAgICBpZiAoY3R4LmRhdGEubGVuZ3RoIDwgdGhpcy5fZGVmLml0ZW1zLmxlbmd0aCkge1xuICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS50b29fc21hbGwsXG4gICAgICAgIG1pbmltdW06IHRoaXMuX2RlZi5pdGVtcy5sZW5ndGgsXG4gICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgdHlwZTogXCJhcnJheVwiXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBJTlZBTElEO1xuICAgIH1cbiAgICBjb25zdCByZXN0ID0gdGhpcy5fZGVmLnJlc3Q7XG4gICAgaWYgKCFyZXN0ICYmIGN0eC5kYXRhLmxlbmd0aCA+IHRoaXMuX2RlZi5pdGVtcy5sZW5ndGgpIHtcbiAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUudG9vX2JpZyxcbiAgICAgICAgbWF4aW11bTogdGhpcy5fZGVmLml0ZW1zLmxlbmd0aCxcbiAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxuICAgICAgICB0eXBlOiBcImFycmF5XCJcbiAgICAgIH0pO1xuICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgfVxuICAgIGNvbnN0IGl0ZW1zID0gY3R4LmRhdGEubWFwKChpdGVtLCBpdGVtSW5kZXgpID0+IHtcbiAgICAgIGNvbnN0IHNjaGVtYSA9IHRoaXMuX2RlZi5pdGVtc1tpdGVtSW5kZXhdIHx8IHRoaXMuX2RlZi5yZXN0O1xuICAgICAgaWYgKCFzY2hlbWEpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgcmV0dXJuIHNjaGVtYS5fcGFyc2UobmV3IFBhcnNlSW5wdXRMYXp5UGF0aChjdHgsIGl0ZW0sIGN0eC5wYXRoLCBpdGVtSW5kZXgpKTtcbiAgICB9KS5maWx0ZXIoKHgpID0+ICEheCk7XG4gICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLmFsbChpdGVtcykudGhlbigocmVzdWx0cykgPT4ge1xuICAgICAgICByZXR1cm4gUGFyc2VTdGF0dXMubWVyZ2VBcnJheShzdGF0dXMsIHJlc3VsdHMpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBQYXJzZVN0YXR1cy5tZXJnZUFycmF5KHN0YXR1cywgaXRlbXMpO1xuICAgIH1cbiAgfVxuICBnZXQgaXRlbXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RlZi5pdGVtcztcbiAgfVxuICByZXN0KHJlc3QpIHtcbiAgICByZXR1cm4gbmV3IFpvZFR1cGxlKHtcbiAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgIHJlc3RcbiAgICB9KTtcbiAgfVxufTtcblpvZFR1cGxlLmNyZWF0ZSA9IChzY2hlbWFzLCBwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2RUdXBsZSh7XG4gICAgaXRlbXM6IHNjaGVtYXMsXG4gICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RUdXBsZSxcbiAgICByZXN0OiBudWxsLFxuICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKVxuICB9KTtcbn07XG52YXIgWm9kUmVjb3JkID0gY2xhc3MgZXh0ZW5kcyBab2RUeXBlIHtcbiAgZ2V0IGtleVNjaGVtYSgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGVmLmtleVR5cGU7XG4gIH1cbiAgZ2V0IHZhbHVlU2NoZW1hKCkge1xuICAgIHJldHVybiB0aGlzLl9kZWYudmFsdWVUeXBlO1xuICB9XG4gIF9wYXJzZShpbnB1dCkge1xuICAgIGNvbnN0IHtzdGF0dXMsIGN0eH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgIGlmIChjdHgucGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5vYmplY3QpIHtcbiAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5vYmplY3QsXG4gICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICB9XG4gICAgY29uc3QgcGFpcnMgPSBbXTtcbiAgICBjb25zdCBrZXlUeXBlID0gdGhpcy5fZGVmLmtleVR5cGU7XG4gICAgY29uc3QgdmFsdWVUeXBlID0gdGhpcy5fZGVmLnZhbHVlVHlwZTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBjdHguZGF0YSkge1xuICAgICAgcGFpcnMucHVzaCh7XG4gICAgICAgIGtleToga2V5VHlwZS5fcGFyc2UobmV3IFBhcnNlSW5wdXRMYXp5UGF0aChjdHgsIGtleSwgY3R4LnBhdGgsIGtleSkpLFxuICAgICAgICB2YWx1ZTogdmFsdWVUeXBlLl9wYXJzZShuZXcgUGFyc2VJbnB1dExhenlQYXRoKGN0eCwgY3R4LmRhdGFba2V5XSwgY3R4LnBhdGgsIGtleSkpXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcbiAgICAgIHJldHVybiBQYXJzZVN0YXR1cy5tZXJnZU9iamVjdEFzeW5jKHN0YXR1cywgcGFpcnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gUGFyc2VTdGF0dXMubWVyZ2VPYmplY3RTeW5jKHN0YXR1cywgcGFpcnMpO1xuICAgIH1cbiAgfVxuICBnZXQgZWxlbWVudCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGVmLnZhbHVlVHlwZTtcbiAgfVxuICBzdGF0aWMgY3JlYXRlKGZpcnN0LCBzZWNvbmQsIHRoaXJkKSB7XG4gICAgaWYgKHNlY29uZCBpbnN0YW5jZW9mIFpvZFR5cGUpIHtcbiAgICAgIHJldHVybiBuZXcgWm9kUmVjb3JkKHtcbiAgICAgICAga2V5VHlwZTogZmlyc3QsXG4gICAgICAgIHZhbHVlVHlwZTogc2Vjb25kLFxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFJlY29yZCxcbiAgICAgICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyh0aGlyZClcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFpvZFJlY29yZCh7XG4gICAgICBrZXlUeXBlOiBab2RTdHJpbmcuY3JlYXRlKCksXG4gICAgICB2YWx1ZVR5cGU6IGZpcnN0LFxuICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RSZWNvcmQsXG4gICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHNlY29uZClcbiAgICB9KTtcbiAgfVxufTtcbnZhciBab2RNYXAgPSBjbGFzcyBleHRlbmRzIFpvZFR5cGUge1xuICBfcGFyc2UoaW5wdXQpIHtcbiAgICBjb25zdCB7c3RhdHVzLCBjdHh9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICBpZiAoY3R4LnBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUubWFwKSB7XG4gICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUubWFwLFxuICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgfVxuICAgIGNvbnN0IGtleVR5cGUgPSB0aGlzLl9kZWYua2V5VHlwZTtcbiAgICBjb25zdCB2YWx1ZVR5cGUgPSB0aGlzLl9kZWYudmFsdWVUeXBlO1xuICAgIGNvbnN0IHBhaXJzID0gWy4uLmN0eC5kYXRhLmVudHJpZXMoKV0ubWFwKChba2V5LCB2YWx1ZV0sIGluZGV4KSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBrZXk6IGtleVR5cGUuX3BhcnNlKG5ldyBQYXJzZUlucHV0TGF6eVBhdGgoY3R4LCBrZXksIGN0eC5wYXRoLCBbaW5kZXgsIFwia2V5XCJdKSksXG4gICAgICAgIHZhbHVlOiB2YWx1ZVR5cGUuX3BhcnNlKG5ldyBQYXJzZUlucHV0TGF6eVBhdGgoY3R4LCB2YWx1ZSwgY3R4LnBhdGgsIFtpbmRleCwgXCJ2YWx1ZVwiXSkpXG4gICAgICB9O1xuICAgIH0pO1xuICAgIGlmIChjdHguY29tbW9uLmFzeW5jKSB7XG4gICAgICBjb25zdCBmaW5hbE1hcCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihhc3luYyAoKSA9PiB7XG4gICAgICAgIGZvciAoY29uc3QgcGFpciBvZiBwYWlycykge1xuICAgICAgICAgIGNvbnN0IGtleSA9IGF3YWl0IHBhaXIua2V5O1xuICAgICAgICAgIGNvbnN0IHZhbHVlID0gYXdhaXQgcGFpci52YWx1ZTtcbiAgICAgICAgICBpZiAoa2V5LnN0YXR1cyA9PT0gXCJhYm9ydGVkXCIgfHwgdmFsdWUuc3RhdHVzID09PSBcImFib3J0ZWRcIikge1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChrZXkuc3RhdHVzID09PSBcImRpcnR5XCIgfHwgdmFsdWUuc3RhdHVzID09PSBcImRpcnR5XCIpIHtcbiAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmaW5hbE1hcC5zZXQoa2V5LnZhbHVlLCB2YWx1ZS52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtzdGF0dXM6IHN0YXR1cy52YWx1ZSwgdmFsdWU6IGZpbmFsTWFwfTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBmaW5hbE1hcCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gICAgICBmb3IgKGNvbnN0IHBhaXIgb2YgcGFpcnMpIHtcbiAgICAgICAgY29uc3Qga2V5ID0gcGFpci5rZXk7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gcGFpci52YWx1ZTtcbiAgICAgICAgaWYgKGtleS5zdGF0dXMgPT09IFwiYWJvcnRlZFwiIHx8IHZhbHVlLnN0YXR1cyA9PT0gXCJhYm9ydGVkXCIpIHtcbiAgICAgICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoa2V5LnN0YXR1cyA9PT0gXCJkaXJ0eVwiIHx8IHZhbHVlLnN0YXR1cyA9PT0gXCJkaXJ0eVwiKSB7XG4gICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxNYXAuc2V0KGtleS52YWx1ZSwgdmFsdWUudmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtzdGF0dXM6IHN0YXR1cy52YWx1ZSwgdmFsdWU6IGZpbmFsTWFwfTtcbiAgICB9XG4gIH1cbn07XG5ab2RNYXAuY3JlYXRlID0gKGtleVR5cGUsIHZhbHVlVHlwZSwgcGFyYW1zKSA9PiB7XG4gIHJldHVybiBuZXcgWm9kTWFwKHtcbiAgICB2YWx1ZVR5cGUsXG4gICAga2V5VHlwZSxcbiAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZE1hcCxcbiAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcylcbiAgfSk7XG59O1xudmFyIFpvZFNldCA9IGNsYXNzIGV4dGVuZHMgWm9kVHlwZSB7XG4gIF9wYXJzZShpbnB1dCkge1xuICAgIGNvbnN0IHtzdGF0dXMsIGN0eH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgIGlmIChjdHgucGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5zZXQpIHtcbiAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF90eXBlLFxuICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZS5zZXQsXG4gICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICB9XG4gICAgY29uc3QgZGVmID0gdGhpcy5fZGVmO1xuICAgIGlmIChkZWYubWluU2l6ZSAhPT0gbnVsbCkge1xuICAgICAgaWYgKGN0eC5kYXRhLnNpemUgPCBkZWYubWluU2l6ZS52YWx1ZSkge1xuICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUudG9vX3NtYWxsLFxuICAgICAgICAgIG1pbmltdW06IGRlZi5taW5TaXplLnZhbHVlLFxuICAgICAgICAgIHR5cGU6IFwic2V0XCIsXG4gICAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxuICAgICAgICAgIG1lc3NhZ2U6IGRlZi5taW5TaXplLm1lc3NhZ2VcbiAgICAgICAgfSk7XG4gICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZGVmLm1heFNpemUgIT09IG51bGwpIHtcbiAgICAgIGlmIChjdHguZGF0YS5zaXplID4gZGVmLm1heFNpemUudmFsdWUpIHtcbiAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLnRvb19iaWcsXG4gICAgICAgICAgbWF4aW11bTogZGVmLm1heFNpemUudmFsdWUsXG4gICAgICAgICAgdHlwZTogXCJzZXRcIixcbiAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgbWVzc2FnZTogZGVmLm1heFNpemUubWVzc2FnZVxuICAgICAgICB9KTtcbiAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHZhbHVlVHlwZSA9IHRoaXMuX2RlZi52YWx1ZVR5cGU7XG4gICAgZnVuY3Rpb24gZmluYWxpemVTZXQoZWxlbWVudHMyKSB7XG4gICAgICBjb25zdCBwYXJzZWRTZXQgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpO1xuICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIGVsZW1lbnRzMikge1xuICAgICAgICBpZiAoZWxlbWVudC5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKVxuICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICBpZiAoZWxlbWVudC5zdGF0dXMgPT09IFwiZGlydHlcIilcbiAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgcGFyc2VkU2V0LmFkZChlbGVtZW50LnZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7c3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiBwYXJzZWRTZXR9O1xuICAgIH1cbiAgICBjb25zdCBlbGVtZW50cyA9IFsuLi5jdHguZGF0YS52YWx1ZXMoKV0ubWFwKChpdGVtLCBpKSA9PiB2YWx1ZVR5cGUuX3BhcnNlKG5ldyBQYXJzZUlucHV0TGF6eVBhdGgoY3R4LCBpdGVtLCBjdHgucGF0aCwgaSkpKTtcbiAgICBpZiAoY3R4LmNvbW1vbi5hc3luYykge1xuICAgICAgcmV0dXJuIFByb21pc2UuYWxsKGVsZW1lbnRzKS50aGVuKChlbGVtZW50czIpID0+IGZpbmFsaXplU2V0KGVsZW1lbnRzMikpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmluYWxpemVTZXQoZWxlbWVudHMpO1xuICAgIH1cbiAgfVxuICBtaW4obWluU2l6ZSwgbWVzc2FnZSkge1xuICAgIHJldHVybiBuZXcgWm9kU2V0KHtcbiAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgIG1pblNpemU6IHt2YWx1ZTogbWluU2l6ZSwgbWVzc2FnZTogZXJyb3JVdGlsLnRvU3RyaW5nKG1lc3NhZ2UpfVxuICAgIH0pO1xuICB9XG4gIG1heChtYXhTaXplLCBtZXNzYWdlKSB7XG4gICAgcmV0dXJuIG5ldyBab2RTZXQoe1xuICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgbWF4U2l6ZToge3ZhbHVlOiBtYXhTaXplLCBtZXNzYWdlOiBlcnJvclV0aWwudG9TdHJpbmcobWVzc2FnZSl9XG4gICAgfSk7XG4gIH1cbiAgc2l6ZShzaXplLCBtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMubWluKHNpemUsIG1lc3NhZ2UpLm1heChzaXplLCBtZXNzYWdlKTtcbiAgfVxuICBub25lbXB0eShtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMubWluKDEsIG1lc3NhZ2UpO1xuICB9XG59O1xuWm9kU2V0LmNyZWF0ZSA9ICh2YWx1ZVR5cGUsIHBhcmFtcykgPT4ge1xuICByZXR1cm4gbmV3IFpvZFNldCh7XG4gICAgdmFsdWVUeXBlLFxuICAgIG1pblNpemU6IG51bGwsXG4gICAgbWF4U2l6ZTogbnVsbCxcbiAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZFNldCxcbiAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcylcbiAgfSk7XG59O1xudmFyIFpvZEZ1bmN0aW9uID0gY2xhc3MgZXh0ZW5kcyBab2RUeXBlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICB0aGlzLnZhbGlkYXRlID0gdGhpcy5pbXBsZW1lbnQ7XG4gIH1cbiAgX3BhcnNlKGlucHV0KSB7XG4gICAgY29uc3Qge2N0eH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgIGlmIChjdHgucGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5mdW5jdGlvbikge1xuICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXG4gICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLmZ1bmN0aW9uLFxuICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG1ha2VBcmdzSXNzdWUoYXJncywgZXJyb3IpIHtcbiAgICAgIHJldHVybiBtYWtlSXNzdWUoe1xuICAgICAgICBkYXRhOiBhcmdzLFxuICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgZXJyb3JNYXBzOiBbXG4gICAgICAgICAgY3R4LmNvbW1vbi5jb250ZXh0dWFsRXJyb3JNYXAsXG4gICAgICAgICAgY3R4LnNjaGVtYUVycm9yTWFwLFxuICAgICAgICAgIGdldEVycm9yTWFwKCksXG4gICAgICAgICAgZGVmYXVsdEVycm9yTWFwXG4gICAgICAgIF0uZmlsdGVyKCh4KSA9PiAhIXgpLFxuICAgICAgICBpc3N1ZURhdGE6IHtcbiAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9hcmd1bWVudHMsXG4gICAgICAgICAgYXJndW1lbnRzRXJyb3I6IGVycm9yXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBtYWtlUmV0dXJuc0lzc3VlKHJldHVybnMsIGVycm9yKSB7XG4gICAgICByZXR1cm4gbWFrZUlzc3VlKHtcbiAgICAgICAgZGF0YTogcmV0dXJucyxcbiAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgIGVycm9yTWFwczogW1xuICAgICAgICAgIGN0eC5jb21tb24uY29udGV4dHVhbEVycm9yTWFwLFxuICAgICAgICAgIGN0eC5zY2hlbWFFcnJvck1hcCxcbiAgICAgICAgICBnZXRFcnJvck1hcCgpLFxuICAgICAgICAgIGRlZmF1bHRFcnJvck1hcFxuICAgICAgICBdLmZpbHRlcigoeCkgPT4gISF4KSxcbiAgICAgICAgaXNzdWVEYXRhOiB7XG4gICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfcmV0dXJuX3R5cGUsXG4gICAgICAgICAgcmV0dXJuVHlwZUVycm9yOiBlcnJvclxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgcGFyYW1zID0ge2Vycm9yTWFwOiBjdHguY29tbW9uLmNvbnRleHR1YWxFcnJvck1hcH07XG4gICAgY29uc3QgZm4gPSBjdHguZGF0YTtcbiAgICBpZiAodGhpcy5fZGVmLnJldHVybnMgaW5zdGFuY2VvZiBab2RQcm9taXNlKSB7XG4gICAgICByZXR1cm4gT0soYXN5bmMgKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgWm9kRXJyb3IoW10pO1xuICAgICAgICBjb25zdCBwYXJzZWRBcmdzID0gYXdhaXQgdGhpcy5fZGVmLmFyZ3MucGFyc2VBc3luYyhhcmdzLCBwYXJhbXMpLmNhdGNoKChlKSA9PiB7XG4gICAgICAgICAgZXJyb3IuYWRkSXNzdWUobWFrZUFyZ3NJc3N1ZShhcmdzLCBlKSk7XG4gICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBmbiguLi5wYXJzZWRBcmdzKTtcbiAgICAgICAgY29uc3QgcGFyc2VkUmV0dXJucyA9IGF3YWl0IHRoaXMuX2RlZi5yZXR1cm5zLl9kZWYudHlwZS5wYXJzZUFzeW5jKHJlc3VsdCwgcGFyYW1zKS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICAgIGVycm9yLmFkZElzc3VlKG1ha2VSZXR1cm5zSXNzdWUocmVzdWx0LCBlKSk7XG4gICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcGFyc2VkUmV0dXJucztcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gT0soKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgY29uc3QgcGFyc2VkQXJncyA9IHRoaXMuX2RlZi5hcmdzLnNhZmVQYXJzZShhcmdzLCBwYXJhbXMpO1xuICAgICAgICBpZiAoIXBhcnNlZEFyZ3Muc3VjY2Vzcykge1xuICAgICAgICAgIHRocm93IG5ldyBab2RFcnJvcihbbWFrZUFyZ3NJc3N1ZShhcmdzLCBwYXJzZWRBcmdzLmVycm9yKV0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGZuKC4uLnBhcnNlZEFyZ3MuZGF0YSk7XG4gICAgICAgIGNvbnN0IHBhcnNlZFJldHVybnMgPSB0aGlzLl9kZWYucmV0dXJucy5zYWZlUGFyc2UocmVzdWx0LCBwYXJhbXMpO1xuICAgICAgICBpZiAoIXBhcnNlZFJldHVybnMuc3VjY2Vzcykge1xuICAgICAgICAgIHRocm93IG5ldyBab2RFcnJvcihbbWFrZVJldHVybnNJc3N1ZShyZXN1bHQsIHBhcnNlZFJldHVybnMuZXJyb3IpXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhcnNlZFJldHVybnMuZGF0YTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBwYXJhbWV0ZXJzKCkge1xuICAgIHJldHVybiB0aGlzLl9kZWYuYXJncztcbiAgfVxuICByZXR1cm5UeXBlKCkge1xuICAgIHJldHVybiB0aGlzLl9kZWYucmV0dXJucztcbiAgfVxuICBhcmdzKC4uLml0ZW1zKSB7XG4gICAgcmV0dXJuIG5ldyBab2RGdW5jdGlvbih7XG4gICAgICAuLi50aGlzLl9kZWYsXG4gICAgICBhcmdzOiBab2RUdXBsZS5jcmVhdGUoaXRlbXMpLnJlc3QoWm9kVW5rbm93bi5jcmVhdGUoKSlcbiAgICB9KTtcbiAgfVxuICByZXR1cm5zKHJldHVyblR5cGUpIHtcbiAgICByZXR1cm4gbmV3IFpvZEZ1bmN0aW9uKHtcbiAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgIHJldHVybnM6IHJldHVyblR5cGVcbiAgICB9KTtcbiAgfVxuICBpbXBsZW1lbnQoZnVuYykge1xuICAgIGNvbnN0IHZhbGlkYXRlZEZ1bmMgPSB0aGlzLnBhcnNlKGZ1bmMpO1xuICAgIHJldHVybiB2YWxpZGF0ZWRGdW5jO1xuICB9XG4gIHN0cmljdEltcGxlbWVudChmdW5jKSB7XG4gICAgY29uc3QgdmFsaWRhdGVkRnVuYyA9IHRoaXMucGFyc2UoZnVuYyk7XG4gICAgcmV0dXJuIHZhbGlkYXRlZEZ1bmM7XG4gIH1cbn07XG5ab2RGdW5jdGlvbi5jcmVhdGUgPSAoYXJncywgcmV0dXJucywgcGFyYW1zKSA9PiB7XG4gIHJldHVybiBuZXcgWm9kRnVuY3Rpb24oe1xuICAgIGFyZ3M6IGFyZ3MgPyBhcmdzLnJlc3QoWm9kVW5rbm93bi5jcmVhdGUoKSkgOiBab2RUdXBsZS5jcmVhdGUoW10pLnJlc3QoWm9kVW5rbm93bi5jcmVhdGUoKSksXG4gICAgcmV0dXJuczogcmV0dXJucyB8fCBab2RVbmtub3duLmNyZWF0ZSgpLFxuICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kRnVuY3Rpb24sXG4gICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpXG4gIH0pO1xufTtcbnZhciBab2RMYXp5ID0gY2xhc3MgZXh0ZW5kcyBab2RUeXBlIHtcbiAgZ2V0IHNjaGVtYSgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGVmLmdldHRlcigpO1xuICB9XG4gIF9wYXJzZShpbnB1dCkge1xuICAgIGNvbnN0IHtjdHh9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICBjb25zdCBsYXp5U2NoZW1hID0gdGhpcy5fZGVmLmdldHRlcigpO1xuICAgIHJldHVybiBsYXp5U2NoZW1hLl9wYXJzZSh7ZGF0YTogY3R4LmRhdGEsIHBhdGg6IGN0eC5wYXRoLCBwYXJlbnQ6IGN0eH0pO1xuICB9XG59O1xuWm9kTGF6eS5jcmVhdGUgPSAoZ2V0dGVyLCBwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2RMYXp5KHtcbiAgICBnZXR0ZXIsXG4gICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RMYXp5LFxuICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKVxuICB9KTtcbn07XG52YXIgWm9kTGl0ZXJhbCA9IGNsYXNzIGV4dGVuZHMgWm9kVHlwZSB7XG4gIF9wYXJzZShpbnB1dCkge1xuICAgIGlmIChpbnB1dC5kYXRhICE9PSB0aGlzLl9kZWYudmFsdWUpIHtcbiAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcbiAgICAgIGFkZElzc3VlVG9Db250ZXh0KGN0eCwge1xuICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9saXRlcmFsLFxuICAgICAgICBleHBlY3RlZDogdGhpcy5fZGVmLnZhbHVlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBJTlZBTElEO1xuICAgIH1cbiAgICByZXR1cm4ge3N0YXR1czogXCJ2YWxpZFwiLCB2YWx1ZTogaW5wdXQuZGF0YX07XG4gIH1cbiAgZ2V0IHZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLl9kZWYudmFsdWU7XG4gIH1cbn07XG5ab2RMaXRlcmFsLmNyZWF0ZSA9ICh2YWx1ZSwgcGFyYW1zKSA9PiB7XG4gIHJldHVybiBuZXcgWm9kTGl0ZXJhbCh7XG4gICAgdmFsdWUsXG4gICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RMaXRlcmFsLFxuICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKVxuICB9KTtcbn07XG5mdW5jdGlvbiBjcmVhdGVab2RFbnVtKHZhbHVlcywgcGFyYW1zKSB7XG4gIHJldHVybiBuZXcgWm9kRW51bSh7XG4gICAgdmFsdWVzLFxuICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kRW51bSxcbiAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcylcbiAgfSk7XG59XG52YXIgWm9kRW51bSA9IGNsYXNzIGV4dGVuZHMgWm9kVHlwZSB7XG4gIF9wYXJzZShpbnB1dCkge1xuICAgIGlmICh0eXBlb2YgaW5wdXQuZGF0YSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgY29uc3QgZXhwZWN0ZWRWYWx1ZXMgPSB0aGlzLl9kZWYudmFsdWVzO1xuICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgIGV4cGVjdGVkOiB1dGlsLmpvaW5WYWx1ZXMoZXhwZWN0ZWRWYWx1ZXMpLFxuICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgfVxuICAgIGlmICh0aGlzLl9kZWYudmFsdWVzLmluZGV4T2YoaW5wdXQuZGF0YSkgPT09IC0xKSB7XG4gICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICBjb25zdCBleHBlY3RlZFZhbHVlcyA9IHRoaXMuX2RlZi52YWx1ZXM7XG4gICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgcmVjZWl2ZWQ6IGN0eC5kYXRhLFxuICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9lbnVtX3ZhbHVlLFxuICAgICAgICBvcHRpb25zOiBleHBlY3RlZFZhbHVlc1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICB9XG4gICAgcmV0dXJuIE9LKGlucHV0LmRhdGEpO1xuICB9XG4gIGdldCBvcHRpb25zKCkge1xuICAgIHJldHVybiB0aGlzLl9kZWYudmFsdWVzO1xuICB9XG4gIGdldCBlbnVtKCkge1xuICAgIGNvbnN0IGVudW1WYWx1ZXMgPSB7fTtcbiAgICBmb3IgKGNvbnN0IHZhbCBvZiB0aGlzLl9kZWYudmFsdWVzKSB7XG4gICAgICBlbnVtVmFsdWVzW3ZhbF0gPSB2YWw7XG4gICAgfVxuICAgIHJldHVybiBlbnVtVmFsdWVzO1xuICB9XG4gIGdldCBWYWx1ZXMoKSB7XG4gICAgY29uc3QgZW51bVZhbHVlcyA9IHt9O1xuICAgIGZvciAoY29uc3QgdmFsIG9mIHRoaXMuX2RlZi52YWx1ZXMpIHtcbiAgICAgIGVudW1WYWx1ZXNbdmFsXSA9IHZhbDtcbiAgICB9XG4gICAgcmV0dXJuIGVudW1WYWx1ZXM7XG4gIH1cbiAgZ2V0IEVudW0oKSB7XG4gICAgY29uc3QgZW51bVZhbHVlcyA9IHt9O1xuICAgIGZvciAoY29uc3QgdmFsIG9mIHRoaXMuX2RlZi52YWx1ZXMpIHtcbiAgICAgIGVudW1WYWx1ZXNbdmFsXSA9IHZhbDtcbiAgICB9XG4gICAgcmV0dXJuIGVudW1WYWx1ZXM7XG4gIH1cbn07XG5ab2RFbnVtLmNyZWF0ZSA9IGNyZWF0ZVpvZEVudW07XG52YXIgWm9kTmF0aXZlRW51bSA9IGNsYXNzIGV4dGVuZHMgWm9kVHlwZSB7XG4gIF9wYXJzZShpbnB1dCkge1xuICAgIGNvbnN0IG5hdGl2ZUVudW1WYWx1ZXMgPSB1dGlsLmdldFZhbGlkRW51bVZhbHVlcyh0aGlzLl9kZWYudmFsdWVzKTtcbiAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgaWYgKGN0eC5wYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlLnN0cmluZyAmJiBjdHgucGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZS5udW1iZXIpIHtcbiAgICAgIGNvbnN0IGV4cGVjdGVkVmFsdWVzID0gdXRpbC5vYmplY3RWYWx1ZXMobmF0aXZlRW51bVZhbHVlcyk7XG4gICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgZXhwZWN0ZWQ6IHV0aWwuam9pblZhbHVlcyhleHBlY3RlZFZhbHVlcyksXG4gICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZSxcbiAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICB9XG4gICAgaWYgKG5hdGl2ZUVudW1WYWx1ZXMuaW5kZXhPZihpbnB1dC5kYXRhKSA9PT0gLTEpIHtcbiAgICAgIGNvbnN0IGV4cGVjdGVkVmFsdWVzID0gdXRpbC5vYmplY3RWYWx1ZXMobmF0aXZlRW51bVZhbHVlcyk7XG4gICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgcmVjZWl2ZWQ6IGN0eC5kYXRhLFxuICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUuaW52YWxpZF9lbnVtX3ZhbHVlLFxuICAgICAgICBvcHRpb25zOiBleHBlY3RlZFZhbHVlc1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICB9XG4gICAgcmV0dXJuIE9LKGlucHV0LmRhdGEpO1xuICB9XG4gIGdldCBlbnVtKCkge1xuICAgIHJldHVybiB0aGlzLl9kZWYudmFsdWVzO1xuICB9XG59O1xuWm9kTmF0aXZlRW51bS5jcmVhdGUgPSAodmFsdWVzLCBwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2ROYXRpdmVFbnVtKHtcbiAgICB2YWx1ZXMsXG4gICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2ROYXRpdmVFbnVtLFxuICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKVxuICB9KTtcbn07XG52YXIgWm9kUHJvbWlzZSA9IGNsYXNzIGV4dGVuZHMgWm9kVHlwZSB7XG4gIF9wYXJzZShpbnB1dCkge1xuICAgIGNvbnN0IHtjdHh9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICBpZiAoY3R4LnBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUucHJvbWlzZSAmJiBjdHguY29tbW9uLmFzeW5jID09PSBmYWxzZSkge1xuICAgICAgYWRkSXNzdWVUb0NvbnRleHQoY3R4LCB7XG4gICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZS5pbnZhbGlkX3R5cGUsXG4gICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlLnByb21pc2UsXG4gICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gSU5WQUxJRDtcbiAgICB9XG4gICAgY29uc3QgcHJvbWlzaWZpZWQgPSBjdHgucGFyc2VkVHlwZSA9PT0gWm9kUGFyc2VkVHlwZS5wcm9taXNlID8gY3R4LmRhdGEgOiBQcm9taXNlLnJlc29sdmUoY3R4LmRhdGEpO1xuICAgIHJldHVybiBPSyhwcm9taXNpZmllZC50aGVuKChkYXRhKSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5fZGVmLnR5cGUucGFyc2VBc3luYyhkYXRhLCB7XG4gICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICBlcnJvck1hcDogY3R4LmNvbW1vbi5jb250ZXh0dWFsRXJyb3JNYXBcbiAgICAgIH0pO1xuICAgIH0pKTtcbiAgfVxufTtcblpvZFByb21pc2UuY3JlYXRlID0gKHNjaGVtYSwgcGFyYW1zKSA9PiB7XG4gIHJldHVybiBuZXcgWm9kUHJvbWlzZSh7XG4gICAgdHlwZTogc2NoZW1hLFxuICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kUHJvbWlzZSxcbiAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcylcbiAgfSk7XG59O1xudmFyIFpvZEVmZmVjdHMgPSBjbGFzcyBleHRlbmRzIFpvZFR5cGUge1xuICBpbm5lclR5cGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RlZi5zY2hlbWE7XG4gIH1cbiAgX3BhcnNlKGlucHV0KSB7XG4gICAgY29uc3Qge3N0YXR1cywgY3R4fSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XG4gICAgY29uc3QgZWZmZWN0ID0gdGhpcy5fZGVmLmVmZmVjdCB8fCBudWxsO1xuICAgIGlmIChlZmZlY3QudHlwZSA9PT0gXCJwcmVwcm9jZXNzXCIpIHtcbiAgICAgIGNvbnN0IHByb2Nlc3NlZCA9IGVmZmVjdC50cmFuc2Zvcm0oY3R4LmRhdGEpO1xuICAgICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShwcm9jZXNzZWQpLnRoZW4oKHByb2Nlc3NlZDIpID0+IHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5fZGVmLnNjaGVtYS5fcGFyc2VBc3luYyh7XG4gICAgICAgICAgICBkYXRhOiBwcm9jZXNzZWQyLFxuICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICBwYXJlbnQ6IGN0eFxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYuc2NoZW1hLl9wYXJzZVN5bmMoe1xuICAgICAgICAgIGRhdGE6IHByb2Nlc3NlZCxcbiAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgICBwYXJlbnQ6IGN0eFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgY2hlY2tDdHggPSB7XG4gICAgICBhZGRJc3N1ZTogKGFyZykgPT4ge1xuICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIGFyZyk7XG4gICAgICAgIGlmIChhcmcuZmF0YWwpIHtcbiAgICAgICAgICBzdGF0dXMuYWJvcnQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGdldCBwYXRoKCkge1xuICAgICAgICByZXR1cm4gY3R4LnBhdGg7XG4gICAgICB9XG4gICAgfTtcbiAgICBjaGVja0N0eC5hZGRJc3N1ZSA9IGNoZWNrQ3R4LmFkZElzc3VlLmJpbmQoY2hlY2tDdHgpO1xuICAgIGlmIChlZmZlY3QudHlwZSA9PT0gXCJyZWZpbmVtZW50XCIpIHtcbiAgICAgIGNvbnN0IGV4ZWN1dGVSZWZpbmVtZW50ID0gKGFjYykgPT4ge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBlZmZlY3QucmVmaW5lbWVudChhY2MsIGNoZWNrQ3R4KTtcbiAgICAgICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBc3luYyByZWZpbmVtZW50IGVuY291bnRlcmVkIGR1cmluZyBzeW5jaHJvbm91cyBwYXJzZSBvcGVyYXRpb24uIFVzZSAucGFyc2VBc3luYyBpbnN0ZWFkLlwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfTtcbiAgICAgIGlmIChjdHguY29tbW9uLmFzeW5jID09PSBmYWxzZSkge1xuICAgICAgICBjb25zdCBpbm5lciA9IHRoaXMuX2RlZi5zY2hlbWEuX3BhcnNlU3luYyh7XG4gICAgICAgICAgZGF0YTogY3R4LmRhdGEsXG4gICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgcGFyZW50OiBjdHhcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChpbm5lci5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKVxuICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICBpZiAoaW5uZXIuc3RhdHVzID09PSBcImRpcnR5XCIpXG4gICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgIGV4ZWN1dGVSZWZpbmVtZW50KGlubmVyLnZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHtzdGF0dXM6IHN0YXR1cy52YWx1ZSwgdmFsdWU6IGlubmVyLnZhbHVlfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYuc2NoZW1hLl9wYXJzZUFzeW5jKHtkYXRhOiBjdHguZGF0YSwgcGF0aDogY3R4LnBhdGgsIHBhcmVudDogY3R4fSkudGhlbigoaW5uZXIpID0+IHtcbiAgICAgICAgICBpZiAoaW5uZXIuc3RhdHVzID09PSBcImFib3J0ZWRcIilcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgIGlmIChpbm5lci5zdGF0dXMgPT09IFwiZGlydHlcIilcbiAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgIHJldHVybiBleGVjdXRlUmVmaW5lbWVudChpbm5lci52YWx1ZSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4ge3N0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogaW5uZXIudmFsdWV9O1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVmZmVjdC50eXBlID09PSBcInRyYW5zZm9ybVwiKSB7XG4gICAgICBpZiAoY3R4LmNvbW1vbi5hc3luYyA9PT0gZmFsc2UpIHtcbiAgICAgICAgY29uc3QgYmFzZSA9IHRoaXMuX2RlZi5zY2hlbWEuX3BhcnNlU3luYyh7XG4gICAgICAgICAgZGF0YTogY3R4LmRhdGEsXG4gICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgcGFyZW50OiBjdHhcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghaXNWYWxpZChiYXNlKSlcbiAgICAgICAgICByZXR1cm4gYmFzZTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gZWZmZWN0LnRyYW5zZm9ybShiYXNlLnZhbHVlLCBjaGVja0N0eCk7XG4gICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBBc3luY2hyb25vdXMgdHJhbnNmb3JtIGVuY291bnRlcmVkIGR1cmluZyBzeW5jaHJvbm91cyBwYXJzZSBvcGVyYXRpb24uIFVzZSAucGFyc2VBc3luYyBpbnN0ZWFkLmApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7c3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiByZXN1bHR9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5zY2hlbWEuX3BhcnNlQXN5bmMoe2RhdGE6IGN0eC5kYXRhLCBwYXRoOiBjdHgucGF0aCwgcGFyZW50OiBjdHh9KS50aGVuKChiYXNlKSA9PiB7XG4gICAgICAgICAgaWYgKCFpc1ZhbGlkKGJhc2UpKVxuICAgICAgICAgICAgcmV0dXJuIGJhc2U7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShlZmZlY3QudHJhbnNmb3JtKGJhc2UudmFsdWUsIGNoZWNrQ3R4KSkudGhlbigocmVzdWx0KSA9PiAoe3N0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogcmVzdWx0fSkpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgdXRpbC5hc3NlcnROZXZlcihlZmZlY3QpO1xuICB9XG59O1xuWm9kRWZmZWN0cy5jcmVhdGUgPSAoc2NoZW1hLCBlZmZlY3QsIHBhcmFtcykgPT4ge1xuICByZXR1cm4gbmV3IFpvZEVmZmVjdHMoe1xuICAgIHNjaGVtYSxcbiAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZEVmZmVjdHMsXG4gICAgZWZmZWN0LFxuICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKVxuICB9KTtcbn07XG5ab2RFZmZlY3RzLmNyZWF0ZVdpdGhQcmVwcm9jZXNzID0gKHByZXByb2Nlc3MsIHNjaGVtYSwgcGFyYW1zKSA9PiB7XG4gIHJldHVybiBuZXcgWm9kRWZmZWN0cyh7XG4gICAgc2NoZW1hLFxuICAgIGVmZmVjdDoge3R5cGU6IFwicHJlcHJvY2Vzc1wiLCB0cmFuc2Zvcm06IHByZXByb2Nlc3N9LFxuICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kRWZmZWN0cyxcbiAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcylcbiAgfSk7XG59O1xudmFyIFpvZE9wdGlvbmFsID0gY2xhc3MgZXh0ZW5kcyBab2RUeXBlIHtcbiAgX3BhcnNlKGlucHV0KSB7XG4gICAgY29uc3QgcGFyc2VkVHlwZSA9IHRoaXMuX2dldFR5cGUoaW5wdXQpO1xuICAgIGlmIChwYXJzZWRUeXBlID09PSBab2RQYXJzZWRUeXBlLnVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIE9LKHZvaWQgMCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9kZWYuaW5uZXJUeXBlLl9wYXJzZShpbnB1dCk7XG4gIH1cbiAgdW53cmFwKCkge1xuICAgIHJldHVybiB0aGlzLl9kZWYuaW5uZXJUeXBlO1xuICB9XG59O1xuWm9kT3B0aW9uYWwuY3JlYXRlID0gKHR5cGUsIHBhcmFtcykgPT4ge1xuICByZXR1cm4gbmV3IFpvZE9wdGlvbmFsKHtcbiAgICBpbm5lclR5cGU6IHR5cGUsXG4gICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RPcHRpb25hbCxcbiAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcylcbiAgfSk7XG59O1xudmFyIFpvZE51bGxhYmxlID0gY2xhc3MgZXh0ZW5kcyBab2RUeXBlIHtcbiAgX3BhcnNlKGlucHV0KSB7XG4gICAgY29uc3QgcGFyc2VkVHlwZSA9IHRoaXMuX2dldFR5cGUoaW5wdXQpO1xuICAgIGlmIChwYXJzZWRUeXBlID09PSBab2RQYXJzZWRUeXBlLm51bGwpIHtcbiAgICAgIHJldHVybiBPSyhudWxsKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2RlZi5pbm5lclR5cGUuX3BhcnNlKGlucHV0KTtcbiAgfVxuICB1bndyYXAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RlZi5pbm5lclR5cGU7XG4gIH1cbn07XG5ab2ROdWxsYWJsZS5jcmVhdGUgPSAodHlwZSwgcGFyYW1zKSA9PiB7XG4gIHJldHVybiBuZXcgWm9kTnVsbGFibGUoe1xuICAgIGlubmVyVHlwZTogdHlwZSxcbiAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZE51bGxhYmxlLFxuICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMocGFyYW1zKVxuICB9KTtcbn07XG52YXIgWm9kRGVmYXVsdCA9IGNsYXNzIGV4dGVuZHMgWm9kVHlwZSB7XG4gIF9wYXJzZShpbnB1dCkge1xuICAgIGNvbnN0IHtjdHh9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICBsZXQgZGF0YSA9IGN0eC5kYXRhO1xuICAgIGlmIChjdHgucGFyc2VkVHlwZSA9PT0gWm9kUGFyc2VkVHlwZS51bmRlZmluZWQpIHtcbiAgICAgIGRhdGEgPSB0aGlzLl9kZWYuZGVmYXVsdFZhbHVlKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9kZWYuaW5uZXJUeXBlLl9wYXJzZSh7XG4gICAgICBkYXRhLFxuICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICBwYXJlbnQ6IGN0eFxuICAgIH0pO1xuICB9XG4gIHJlbW92ZURlZmF1bHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RlZi5pbm5lclR5cGU7XG4gIH1cbn07XG5ab2REZWZhdWx0LmNyZWF0ZSA9ICh0eXBlLCBwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2RPcHRpb25hbCh7XG4gICAgaW5uZXJUeXBlOiB0eXBlLFxuICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQuWm9kT3B0aW9uYWwsXG4gICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtcyhwYXJhbXMpXG4gIH0pO1xufTtcbnZhciBab2ROYU4gPSBjbGFzcyBleHRlbmRzIFpvZFR5cGUge1xuICBfcGFyc2UoaW5wdXQpIHtcbiAgICBjb25zdCBwYXJzZWRUeXBlID0gdGhpcy5fZ2V0VHlwZShpbnB1dCk7XG4gICAgaWYgKHBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUubmFuKSB7XG4gICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICBhZGRJc3N1ZVRvQ29udGV4dChjdHgsIHtcbiAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlLmludmFsaWRfdHlwZSxcbiAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUubmFuLFxuICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgfVxuICAgIHJldHVybiB7c3RhdHVzOiBcInZhbGlkXCIsIHZhbHVlOiBpbnB1dC5kYXRhfTtcbiAgfVxufTtcblpvZE5hTi5jcmVhdGUgPSAocGFyYW1zKSA9PiB7XG4gIHJldHVybiBuZXcgWm9kTmFOKHtcbiAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kLlpvZE5hTixcbiAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zKHBhcmFtcylcbiAgfSk7XG59O1xudmFyIEJSQU5EID0gU3ltYm9sKFwiem9kX2JyYW5kXCIpO1xudmFyIFpvZEJyYW5kZWQgPSBjbGFzcyBleHRlbmRzIFpvZFR5cGUge1xuICBfcGFyc2UoaW5wdXQpIHtcbiAgICBjb25zdCB7Y3R4fSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XG4gICAgY29uc3QgZGF0YSA9IGN0eC5kYXRhO1xuICAgIHJldHVybiB0aGlzLl9kZWYudHlwZS5fcGFyc2Uoe1xuICAgICAgZGF0YSxcbiAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgcGFyZW50OiBjdHhcbiAgICB9KTtcbiAgfVxuICB1bndyYXAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RlZi50eXBlO1xuICB9XG59O1xudmFyIGN1c3RvbSA9IChjaGVjaywgcGFyYW1zID0ge30sIGZhdGFsKSA9PiB7XG4gIGlmIChjaGVjaylcbiAgICByZXR1cm4gWm9kQW55LmNyZWF0ZSgpLnN1cGVyUmVmaW5lKChkYXRhLCBjdHgpID0+IHtcbiAgICAgIGlmICghY2hlY2soZGF0YSkpIHtcbiAgICAgICAgY29uc3QgcCA9IHR5cGVvZiBwYXJhbXMgPT09IFwiZnVuY3Rpb25cIiA/IHBhcmFtcyhkYXRhKSA6IHBhcmFtcztcbiAgICAgICAgY29uc3QgcDIgPSB0eXBlb2YgcCA9PT0gXCJzdHJpbmdcIiA/IHttZXNzYWdlOiBwfSA6IHA7XG4gICAgICAgIGN0eC5hZGRJc3N1ZSh7Y29kZTogXCJjdXN0b21cIiwgLi4ucDIsIGZhdGFsfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIHJldHVybiBab2RBbnkuY3JlYXRlKCk7XG59O1xudmFyIGxhdGUgPSB7XG4gIG9iamVjdDogWm9kT2JqZWN0LmxhenljcmVhdGVcbn07XG52YXIgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kO1xuKGZ1bmN0aW9uKFpvZEZpcnN0UGFydHlUeXBlS2luZDQpIHtcbiAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kNFtcIlpvZFN0cmluZ1wiXSA9IFwiWm9kU3RyaW5nXCI7XG4gIFpvZEZpcnN0UGFydHlUeXBlS2luZDRbXCJab2ROdW1iZXJcIl0gPSBcIlpvZE51bWJlclwiO1xuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQ0W1wiWm9kTmFOXCJdID0gXCJab2ROYU5cIjtcbiAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kNFtcIlpvZEJpZ0ludFwiXSA9IFwiWm9kQmlnSW50XCI7XG4gIFpvZEZpcnN0UGFydHlUeXBlS2luZDRbXCJab2RCb29sZWFuXCJdID0gXCJab2RCb29sZWFuXCI7XG4gIFpvZEZpcnN0UGFydHlUeXBlS2luZDRbXCJab2REYXRlXCJdID0gXCJab2REYXRlXCI7XG4gIFpvZEZpcnN0UGFydHlUeXBlS2luZDRbXCJab2RVbmRlZmluZWRcIl0gPSBcIlpvZFVuZGVmaW5lZFwiO1xuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQ0W1wiWm9kTnVsbFwiXSA9IFwiWm9kTnVsbFwiO1xuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQ0W1wiWm9kQW55XCJdID0gXCJab2RBbnlcIjtcbiAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kNFtcIlpvZFVua25vd25cIl0gPSBcIlpvZFVua25vd25cIjtcbiAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kNFtcIlpvZE5ldmVyXCJdID0gXCJab2ROZXZlclwiO1xuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQ0W1wiWm9kVm9pZFwiXSA9IFwiWm9kVm9pZFwiO1xuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQ0W1wiWm9kQXJyYXlcIl0gPSBcIlpvZEFycmF5XCI7XG4gIFpvZEZpcnN0UGFydHlUeXBlS2luZDRbXCJab2RPYmplY3RcIl0gPSBcIlpvZE9iamVjdFwiO1xuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQ0W1wiWm9kVW5pb25cIl0gPSBcIlpvZFVuaW9uXCI7XG4gIFpvZEZpcnN0UGFydHlUeXBlS2luZDRbXCJab2REaXNjcmltaW5hdGVkVW5pb25cIl0gPSBcIlpvZERpc2NyaW1pbmF0ZWRVbmlvblwiO1xuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQ0W1wiWm9kSW50ZXJzZWN0aW9uXCJdID0gXCJab2RJbnRlcnNlY3Rpb25cIjtcbiAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kNFtcIlpvZFR1cGxlXCJdID0gXCJab2RUdXBsZVwiO1xuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQ0W1wiWm9kUmVjb3JkXCJdID0gXCJab2RSZWNvcmRcIjtcbiAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kNFtcIlpvZE1hcFwiXSA9IFwiWm9kTWFwXCI7XG4gIFpvZEZpcnN0UGFydHlUeXBlS2luZDRbXCJab2RTZXRcIl0gPSBcIlpvZFNldFwiO1xuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQ0W1wiWm9kRnVuY3Rpb25cIl0gPSBcIlpvZEZ1bmN0aW9uXCI7XG4gIFpvZEZpcnN0UGFydHlUeXBlS2luZDRbXCJab2RMYXp5XCJdID0gXCJab2RMYXp5XCI7XG4gIFpvZEZpcnN0UGFydHlUeXBlS2luZDRbXCJab2RMaXRlcmFsXCJdID0gXCJab2RMaXRlcmFsXCI7XG4gIFpvZEZpcnN0UGFydHlUeXBlS2luZDRbXCJab2RFbnVtXCJdID0gXCJab2RFbnVtXCI7XG4gIFpvZEZpcnN0UGFydHlUeXBlS2luZDRbXCJab2RFZmZlY3RzXCJdID0gXCJab2RFZmZlY3RzXCI7XG4gIFpvZEZpcnN0UGFydHlUeXBlS2luZDRbXCJab2ROYXRpdmVFbnVtXCJdID0gXCJab2ROYXRpdmVFbnVtXCI7XG4gIFpvZEZpcnN0UGFydHlUeXBlS2luZDRbXCJab2RPcHRpb25hbFwiXSA9IFwiWm9kT3B0aW9uYWxcIjtcbiAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kNFtcIlpvZE51bGxhYmxlXCJdID0gXCJab2ROdWxsYWJsZVwiO1xuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQ0W1wiWm9kRGVmYXVsdFwiXSA9IFwiWm9kRGVmYXVsdFwiO1xuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQ0W1wiWm9kUHJvbWlzZVwiXSA9IFwiWm9kUHJvbWlzZVwiO1xuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQ0W1wiWm9kQnJhbmRlZFwiXSA9IFwiWm9kQnJhbmRlZFwiO1xufSkoWm9kRmlyc3RQYXJ0eVR5cGVLaW5kIHx8IChab2RGaXJzdFBhcnR5VHlwZUtpbmQgPSB7fSkpO1xudmFyIGluc3RhbmNlT2ZUeXBlID0gKGNscywgcGFyYW1zID0ge1xuICBtZXNzYWdlOiBgSW5wdXQgbm90IGluc3RhbmNlIG9mICR7Y2xzLm5hbWV9YFxufSkgPT4gY3VzdG9tKChkYXRhKSA9PiBkYXRhIGluc3RhbmNlb2YgY2xzLCBwYXJhbXMsIHRydWUpO1xudmFyIHN0cmluZ1R5cGUgPSBab2RTdHJpbmcuY3JlYXRlO1xudmFyIG51bWJlclR5cGUgPSBab2ROdW1iZXIuY3JlYXRlO1xudmFyIG5hblR5cGUgPSBab2ROYU4uY3JlYXRlO1xudmFyIGJpZ0ludFR5cGUgPSBab2RCaWdJbnQuY3JlYXRlO1xudmFyIGJvb2xlYW5UeXBlID0gWm9kQm9vbGVhbi5jcmVhdGU7XG52YXIgZGF0ZVR5cGUgPSBab2REYXRlLmNyZWF0ZTtcbnZhciB1bmRlZmluZWRUeXBlID0gWm9kVW5kZWZpbmVkLmNyZWF0ZTtcbnZhciBudWxsVHlwZSA9IFpvZE51bGwuY3JlYXRlO1xudmFyIGFueVR5cGUgPSBab2RBbnkuY3JlYXRlO1xudmFyIHVua25vd25UeXBlID0gWm9kVW5rbm93bi5jcmVhdGU7XG52YXIgbmV2ZXJUeXBlID0gWm9kTmV2ZXIuY3JlYXRlO1xudmFyIHZvaWRUeXBlID0gWm9kVm9pZC5jcmVhdGU7XG52YXIgYXJyYXlUeXBlID0gWm9kQXJyYXkuY3JlYXRlO1xudmFyIG9iamVjdFR5cGUgPSBab2RPYmplY3QuY3JlYXRlO1xudmFyIHN0cmljdE9iamVjdFR5cGUgPSBab2RPYmplY3Quc3RyaWN0Q3JlYXRlO1xudmFyIHVuaW9uVHlwZSA9IFpvZFVuaW9uLmNyZWF0ZTtcbnZhciBkaXNjcmltaW5hdGVkVW5pb25UeXBlID0gWm9kRGlzY3JpbWluYXRlZFVuaW9uLmNyZWF0ZTtcbnZhciBpbnRlcnNlY3Rpb25UeXBlID0gWm9kSW50ZXJzZWN0aW9uLmNyZWF0ZTtcbnZhciB0dXBsZVR5cGUgPSBab2RUdXBsZS5jcmVhdGU7XG52YXIgcmVjb3JkVHlwZSA9IFpvZFJlY29yZC5jcmVhdGU7XG52YXIgbWFwVHlwZSA9IFpvZE1hcC5jcmVhdGU7XG52YXIgc2V0VHlwZSA9IFpvZFNldC5jcmVhdGU7XG52YXIgZnVuY3Rpb25UeXBlID0gWm9kRnVuY3Rpb24uY3JlYXRlO1xudmFyIGxhenlUeXBlID0gWm9kTGF6eS5jcmVhdGU7XG52YXIgbGl0ZXJhbFR5cGUgPSBab2RMaXRlcmFsLmNyZWF0ZTtcbnZhciBlbnVtVHlwZSA9IFpvZEVudW0uY3JlYXRlO1xudmFyIG5hdGl2ZUVudW1UeXBlID0gWm9kTmF0aXZlRW51bS5jcmVhdGU7XG52YXIgcHJvbWlzZVR5cGUgPSBab2RQcm9taXNlLmNyZWF0ZTtcbnZhciBlZmZlY3RzVHlwZSA9IFpvZEVmZmVjdHMuY3JlYXRlO1xudmFyIG9wdGlvbmFsVHlwZSA9IFpvZE9wdGlvbmFsLmNyZWF0ZTtcbnZhciBudWxsYWJsZVR5cGUgPSBab2ROdWxsYWJsZS5jcmVhdGU7XG52YXIgcHJlcHJvY2Vzc1R5cGUgPSBab2RFZmZlY3RzLmNyZWF0ZVdpdGhQcmVwcm9jZXNzO1xudmFyIG9zdHJpbmcgPSAoKSA9PiBzdHJpbmdUeXBlKCkub3B0aW9uYWwoKTtcbnZhciBvbnVtYmVyID0gKCkgPT4gbnVtYmVyVHlwZSgpLm9wdGlvbmFsKCk7XG52YXIgb2Jvb2xlYW4gPSAoKSA9PiBib29sZWFuVHlwZSgpLm9wdGlvbmFsKCk7XG52YXIgbW9kID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5mcmVlemUoe1xuICBfX3Byb3RvX186IG51bGwsXG4gIGdldFBhcnNlZFR5cGUsXG4gIFpvZFBhcnNlZFR5cGUsXG4gIG1ha2VJc3N1ZSxcbiAgRU1QVFlfUEFUSCxcbiAgYWRkSXNzdWVUb0NvbnRleHQsXG4gIFBhcnNlU3RhdHVzLFxuICBJTlZBTElELFxuICBESVJUWSxcbiAgT0ssXG4gIGlzQWJvcnRlZCxcbiAgaXNEaXJ0eSxcbiAgaXNWYWxpZCxcbiAgaXNBc3luYyxcbiAganNvblN0cmluZ2lmeVJlcGxhY2VyLFxuICBab2RUeXBlLFxuICBab2RTdHJpbmcsXG4gIFpvZE51bWJlcixcbiAgWm9kQmlnSW50LFxuICBab2RCb29sZWFuLFxuICBab2REYXRlLFxuICBab2RVbmRlZmluZWQsXG4gIFpvZE51bGwsXG4gIFpvZEFueSxcbiAgWm9kVW5rbm93bixcbiAgWm9kTmV2ZXIsXG4gIFpvZFZvaWQsXG4gIFpvZEFycmF5LFxuICBnZXQgb2JqZWN0VXRpbCgpIHtcbiAgICByZXR1cm4gb2JqZWN0VXRpbDtcbiAgfSxcbiAgWm9kT2JqZWN0LFxuICBab2RVbmlvbixcbiAgWm9kRGlzY3JpbWluYXRlZFVuaW9uLFxuICBab2RJbnRlcnNlY3Rpb24sXG4gIFpvZFR1cGxlLFxuICBab2RSZWNvcmQsXG4gIFpvZE1hcCxcbiAgWm9kU2V0LFxuICBab2RGdW5jdGlvbixcbiAgWm9kTGF6eSxcbiAgWm9kTGl0ZXJhbCxcbiAgWm9kRW51bSxcbiAgWm9kTmF0aXZlRW51bSxcbiAgWm9kUHJvbWlzZSxcbiAgWm9kRWZmZWN0cyxcbiAgWm9kVHJhbnNmb3JtZXI6IFpvZEVmZmVjdHMsXG4gIFpvZE9wdGlvbmFsLFxuICBab2ROdWxsYWJsZSxcbiAgWm9kRGVmYXVsdCxcbiAgWm9kTmFOLFxuICBCUkFORCxcbiAgWm9kQnJhbmRlZCxcbiAgY3VzdG9tLFxuICBTY2hlbWE6IFpvZFR5cGUsXG4gIFpvZFNjaGVtYTogWm9kVHlwZSxcbiAgbGF0ZSxcbiAgZ2V0IFpvZEZpcnN0UGFydHlUeXBlS2luZCgpIHtcbiAgICByZXR1cm4gWm9kRmlyc3RQYXJ0eVR5cGVLaW5kO1xuICB9LFxuICBhbnk6IGFueVR5cGUsXG4gIGFycmF5OiBhcnJheVR5cGUsXG4gIGJpZ2ludDogYmlnSW50VHlwZSxcbiAgYm9vbGVhbjogYm9vbGVhblR5cGUsXG4gIGRhdGU6IGRhdGVUeXBlLFxuICBkaXNjcmltaW5hdGVkVW5pb246IGRpc2NyaW1pbmF0ZWRVbmlvblR5cGUsXG4gIGVmZmVjdDogZWZmZWN0c1R5cGUsXG4gIGVudW06IGVudW1UeXBlLFxuICBmdW5jdGlvbjogZnVuY3Rpb25UeXBlLFxuICBpbnN0YW5jZW9mOiBpbnN0YW5jZU9mVHlwZSxcbiAgaW50ZXJzZWN0aW9uOiBpbnRlcnNlY3Rpb25UeXBlLFxuICBsYXp5OiBsYXp5VHlwZSxcbiAgbGl0ZXJhbDogbGl0ZXJhbFR5cGUsXG4gIG1hcDogbWFwVHlwZSxcbiAgbmFuOiBuYW5UeXBlLFxuICBuYXRpdmVFbnVtOiBuYXRpdmVFbnVtVHlwZSxcbiAgbmV2ZXI6IG5ldmVyVHlwZSxcbiAgbnVsbDogbnVsbFR5cGUsXG4gIG51bGxhYmxlOiBudWxsYWJsZVR5cGUsXG4gIG51bWJlcjogbnVtYmVyVHlwZSxcbiAgb2JqZWN0OiBvYmplY3RUeXBlLFxuICBvYm9vbGVhbixcbiAgb251bWJlcixcbiAgb3B0aW9uYWw6IG9wdGlvbmFsVHlwZSxcbiAgb3N0cmluZyxcbiAgcHJlcHJvY2VzczogcHJlcHJvY2Vzc1R5cGUsXG4gIHByb21pc2U6IHByb21pc2VUeXBlLFxuICByZWNvcmQ6IHJlY29yZFR5cGUsXG4gIHNldDogc2V0VHlwZSxcbiAgc3RyaWN0T2JqZWN0OiBzdHJpY3RPYmplY3RUeXBlLFxuICBzdHJpbmc6IHN0cmluZ1R5cGUsXG4gIHRyYW5zZm9ybWVyOiBlZmZlY3RzVHlwZSxcbiAgdHVwbGU6IHR1cGxlVHlwZSxcbiAgdW5kZWZpbmVkOiB1bmRlZmluZWRUeXBlLFxuICB1bmlvbjogdW5pb25UeXBlLFxuICB1bmtub3duOiB1bmtub3duVHlwZSxcbiAgdm9pZDogdm9pZFR5cGUsXG4gIFpvZElzc3VlQ29kZSxcbiAgcXVvdGVsZXNzSnNvbixcbiAgWm9kRXJyb3IsXG4gIGRlZmF1bHRFcnJvck1hcCxcbiAgc2V0RXJyb3JNYXAsXG4gIGdldEVycm9yTWFwXG59KTtcbnZhciBMdXhvbkVycm9yID0gY2xhc3MgZXh0ZW5kcyBFcnJvciB7XG59O1xudmFyIEludmFsaWREYXRlVGltZUVycm9yID0gY2xhc3MgZXh0ZW5kcyBMdXhvbkVycm9yIHtcbiAgY29uc3RydWN0b3IocmVhc29uKSB7XG4gICAgc3VwZXIoYEludmFsaWQgRGF0ZVRpbWU6ICR7cmVhc29uLnRvTWVzc2FnZSgpfWApO1xuICB9XG59O1xudmFyIEludmFsaWRJbnRlcnZhbEVycm9yID0gY2xhc3MgZXh0ZW5kcyBMdXhvbkVycm9yIHtcbiAgY29uc3RydWN0b3IocmVhc29uKSB7XG4gICAgc3VwZXIoYEludmFsaWQgSW50ZXJ2YWw6ICR7cmVhc29uLnRvTWVzc2FnZSgpfWApO1xuICB9XG59O1xudmFyIEludmFsaWREdXJhdGlvbkVycm9yID0gY2xhc3MgZXh0ZW5kcyBMdXhvbkVycm9yIHtcbiAgY29uc3RydWN0b3IocmVhc29uKSB7XG4gICAgc3VwZXIoYEludmFsaWQgRHVyYXRpb246ICR7cmVhc29uLnRvTWVzc2FnZSgpfWApO1xuICB9XG59O1xudmFyIENvbmZsaWN0aW5nU3BlY2lmaWNhdGlvbkVycm9yID0gY2xhc3MgZXh0ZW5kcyBMdXhvbkVycm9yIHtcbn07XG52YXIgSW52YWxpZFVuaXRFcnJvciA9IGNsYXNzIGV4dGVuZHMgTHV4b25FcnJvciB7XG4gIGNvbnN0cnVjdG9yKHVuaXQpIHtcbiAgICBzdXBlcihgSW52YWxpZCB1bml0ICR7dW5pdH1gKTtcbiAgfVxufTtcbnZhciBJbnZhbGlkQXJndW1lbnRFcnJvciA9IGNsYXNzIGV4dGVuZHMgTHV4b25FcnJvciB7XG59O1xudmFyIFpvbmVJc0Fic3RyYWN0RXJyb3IgPSBjbGFzcyBleHRlbmRzIEx1eG9uRXJyb3Ige1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihcIlpvbmUgaXMgYW4gYWJzdHJhY3QgY2xhc3NcIik7XG4gIH1cbn07XG52YXIgbiA9IFwibnVtZXJpY1wiO1xudmFyIHMgPSBcInNob3J0XCI7XG52YXIgbCA9IFwibG9uZ1wiO1xudmFyIERBVEVfU0hPUlQgPSB7XG4gIHllYXI6IG4sXG4gIG1vbnRoOiBuLFxuICBkYXk6IG5cbn07XG52YXIgREFURV9NRUQgPSB7XG4gIHllYXI6IG4sXG4gIG1vbnRoOiBzLFxuICBkYXk6IG5cbn07XG52YXIgREFURV9NRURfV0lUSF9XRUVLREFZID0ge1xuICB5ZWFyOiBuLFxuICBtb250aDogcyxcbiAgZGF5OiBuLFxuICB3ZWVrZGF5OiBzXG59O1xudmFyIERBVEVfRlVMTCA9IHtcbiAgeWVhcjogbixcbiAgbW9udGg6IGwsXG4gIGRheTogblxufTtcbnZhciBEQVRFX0hVR0UgPSB7XG4gIHllYXI6IG4sXG4gIG1vbnRoOiBsLFxuICBkYXk6IG4sXG4gIHdlZWtkYXk6IGxcbn07XG52YXIgVElNRV9TSU1QTEUgPSB7XG4gIGhvdXI6IG4sXG4gIG1pbnV0ZTogblxufTtcbnZhciBUSU1FX1dJVEhfU0VDT05EUyA9IHtcbiAgaG91cjogbixcbiAgbWludXRlOiBuLFxuICBzZWNvbmQ6IG5cbn07XG52YXIgVElNRV9XSVRIX1NIT1JUX09GRlNFVCA9IHtcbiAgaG91cjogbixcbiAgbWludXRlOiBuLFxuICBzZWNvbmQ6IG4sXG4gIHRpbWVab25lTmFtZTogc1xufTtcbnZhciBUSU1FX1dJVEhfTE9OR19PRkZTRVQgPSB7XG4gIGhvdXI6IG4sXG4gIG1pbnV0ZTogbixcbiAgc2Vjb25kOiBuLFxuICB0aW1lWm9uZU5hbWU6IGxcbn07XG52YXIgVElNRV8yNF9TSU1QTEUgPSB7XG4gIGhvdXI6IG4sXG4gIG1pbnV0ZTogbixcbiAgaG91ckN5Y2xlOiBcImgyM1wiXG59O1xudmFyIFRJTUVfMjRfV0lUSF9TRUNPTkRTID0ge1xuICBob3VyOiBuLFxuICBtaW51dGU6IG4sXG4gIHNlY29uZDogbixcbiAgaG91ckN5Y2xlOiBcImgyM1wiXG59O1xudmFyIFRJTUVfMjRfV0lUSF9TSE9SVF9PRkZTRVQgPSB7XG4gIGhvdXI6IG4sXG4gIG1pbnV0ZTogbixcbiAgc2Vjb25kOiBuLFxuICBob3VyQ3ljbGU6IFwiaDIzXCIsXG4gIHRpbWVab25lTmFtZTogc1xufTtcbnZhciBUSU1FXzI0X1dJVEhfTE9OR19PRkZTRVQgPSB7XG4gIGhvdXI6IG4sXG4gIG1pbnV0ZTogbixcbiAgc2Vjb25kOiBuLFxuICBob3VyQ3ljbGU6IFwiaDIzXCIsXG4gIHRpbWVab25lTmFtZTogbFxufTtcbnZhciBEQVRFVElNRV9TSE9SVCA9IHtcbiAgeWVhcjogbixcbiAgbW9udGg6IG4sXG4gIGRheTogbixcbiAgaG91cjogbixcbiAgbWludXRlOiBuXG59O1xudmFyIERBVEVUSU1FX1NIT1JUX1dJVEhfU0VDT05EUyA9IHtcbiAgeWVhcjogbixcbiAgbW9udGg6IG4sXG4gIGRheTogbixcbiAgaG91cjogbixcbiAgbWludXRlOiBuLFxuICBzZWNvbmQ6IG5cbn07XG52YXIgREFURVRJTUVfTUVEID0ge1xuICB5ZWFyOiBuLFxuICBtb250aDogcyxcbiAgZGF5OiBuLFxuICBob3VyOiBuLFxuICBtaW51dGU6IG5cbn07XG52YXIgREFURVRJTUVfTUVEX1dJVEhfU0VDT05EUyA9IHtcbiAgeWVhcjogbixcbiAgbW9udGg6IHMsXG4gIGRheTogbixcbiAgaG91cjogbixcbiAgbWludXRlOiBuLFxuICBzZWNvbmQ6IG5cbn07XG52YXIgREFURVRJTUVfTUVEX1dJVEhfV0VFS0RBWSA9IHtcbiAgeWVhcjogbixcbiAgbW9udGg6IHMsXG4gIGRheTogbixcbiAgd2Vla2RheTogcyxcbiAgaG91cjogbixcbiAgbWludXRlOiBuXG59O1xudmFyIERBVEVUSU1FX0ZVTEwgPSB7XG4gIHllYXI6IG4sXG4gIG1vbnRoOiBsLFxuICBkYXk6IG4sXG4gIGhvdXI6IG4sXG4gIG1pbnV0ZTogbixcbiAgdGltZVpvbmVOYW1lOiBzXG59O1xudmFyIERBVEVUSU1FX0ZVTExfV0lUSF9TRUNPTkRTID0ge1xuICB5ZWFyOiBuLFxuICBtb250aDogbCxcbiAgZGF5OiBuLFxuICBob3VyOiBuLFxuICBtaW51dGU6IG4sXG4gIHNlY29uZDogbixcbiAgdGltZVpvbmVOYW1lOiBzXG59O1xudmFyIERBVEVUSU1FX0hVR0UgPSB7XG4gIHllYXI6IG4sXG4gIG1vbnRoOiBsLFxuICBkYXk6IG4sXG4gIHdlZWtkYXk6IGwsXG4gIGhvdXI6IG4sXG4gIG1pbnV0ZTogbixcbiAgdGltZVpvbmVOYW1lOiBsXG59O1xudmFyIERBVEVUSU1FX0hVR0VfV0lUSF9TRUNPTkRTID0ge1xuICB5ZWFyOiBuLFxuICBtb250aDogbCxcbiAgZGF5OiBuLFxuICB3ZWVrZGF5OiBsLFxuICBob3VyOiBuLFxuICBtaW51dGU6IG4sXG4gIHNlY29uZDogbixcbiAgdGltZVpvbmVOYW1lOiBsXG59O1xuZnVuY3Rpb24gaXNVbmRlZmluZWQobykge1xuICByZXR1cm4gdHlwZW9mIG8gPT09IFwidW5kZWZpbmVkXCI7XG59XG5mdW5jdGlvbiBpc051bWJlcihvKSB7XG4gIHJldHVybiB0eXBlb2YgbyA9PT0gXCJudW1iZXJcIjtcbn1cbmZ1bmN0aW9uIGlzSW50ZWdlcihvKSB7XG4gIHJldHVybiB0eXBlb2YgbyA9PT0gXCJudW1iZXJcIiAmJiBvICUgMSA9PT0gMDtcbn1cbmZ1bmN0aW9uIGlzU3RyaW5nKG8pIHtcbiAgcmV0dXJuIHR5cGVvZiBvID09PSBcInN0cmluZ1wiO1xufVxuZnVuY3Rpb24gaXNEYXRlKG8pIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKSA9PT0gXCJbb2JqZWN0IERhdGVdXCI7XG59XG5mdW5jdGlvbiBoYXNSZWxhdGl2ZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gdHlwZW9mIEludGwgIT09IFwidW5kZWZpbmVkXCIgJiYgISFJbnRsLlJlbGF0aXZlVGltZUZvcm1hdDtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuZnVuY3Rpb24gbWF5YmVBcnJheSh0aGluZykge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheSh0aGluZykgPyB0aGluZyA6IFt0aGluZ107XG59XG5mdW5jdGlvbiBiZXN0QnkoYXJyLCBieSwgY29tcGFyZTIpIHtcbiAgaWYgKGFyci5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIHJldHVybiBhcnIucmVkdWNlKChiZXN0LCBuZXh0KSA9PiB7XG4gICAgY29uc3QgcGFpciA9IFtieShuZXh0KSwgbmV4dF07XG4gICAgaWYgKCFiZXN0KSB7XG4gICAgICByZXR1cm4gcGFpcjtcbiAgICB9IGVsc2UgaWYgKGNvbXBhcmUyKGJlc3RbMF0sIHBhaXJbMF0pID09PSBiZXN0WzBdKSB7XG4gICAgICByZXR1cm4gYmVzdDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHBhaXI7XG4gICAgfVxuICB9LCBudWxsKVsxXTtcbn1cbmZ1bmN0aW9uIHBpY2sob2JqLCBrZXlzKSB7XG4gIHJldHVybiBrZXlzLnJlZHVjZSgoYSwgaykgPT4ge1xuICAgIGFba10gPSBvYmpba107XG4gICAgcmV0dXJuIGE7XG4gIH0sIHt9KTtcbn1cbmZ1bmN0aW9uIGhhc093blByb3BlcnR5KG9iaiwgcHJvcCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7XG59XG5mdW5jdGlvbiBpbnRlZ2VyQmV0d2Vlbih0aGluZywgYm90dG9tLCB0b3ApIHtcbiAgcmV0dXJuIGlzSW50ZWdlcih0aGluZykgJiYgdGhpbmcgPj0gYm90dG9tICYmIHRoaW5nIDw9IHRvcDtcbn1cbmZ1bmN0aW9uIGZsb29yTW9kKHgsIG4yKSB7XG4gIHJldHVybiB4IC0gbjIgKiBNYXRoLmZsb29yKHggLyBuMik7XG59XG5mdW5jdGlvbiBwYWRTdGFydChpbnB1dCwgbjIgPSAyKSB7XG4gIGNvbnN0IGlzTmVnID0gaW5wdXQgPCAwO1xuICBsZXQgcGFkZGVkO1xuICBpZiAoaXNOZWcpIHtcbiAgICBwYWRkZWQgPSBcIi1cIiArIChcIlwiICsgLWlucHV0KS5wYWRTdGFydChuMiwgXCIwXCIpO1xuICB9IGVsc2Uge1xuICAgIHBhZGRlZCA9IChcIlwiICsgaW5wdXQpLnBhZFN0YXJ0KG4yLCBcIjBcIik7XG4gIH1cbiAgcmV0dXJuIHBhZGRlZDtcbn1cbmZ1bmN0aW9uIHBhcnNlSW50ZWdlcihzdHJpbmcyKSB7XG4gIGlmIChpc1VuZGVmaW5lZChzdHJpbmcyKSB8fCBzdHJpbmcyID09PSBudWxsIHx8IHN0cmluZzIgPT09IFwiXCIpIHtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBwYXJzZUludChzdHJpbmcyLCAxMCk7XG4gIH1cbn1cbmZ1bmN0aW9uIHBhcnNlRmxvYXRpbmcoc3RyaW5nMikge1xuICBpZiAoaXNVbmRlZmluZWQoc3RyaW5nMikgfHwgc3RyaW5nMiA9PT0gbnVsbCB8fCBzdHJpbmcyID09PSBcIlwiKSB7XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcGFyc2VGbG9hdChzdHJpbmcyKTtcbiAgfVxufVxuZnVuY3Rpb24gcGFyc2VNaWxsaXMoZnJhY3Rpb24pIHtcbiAgaWYgKGlzVW5kZWZpbmVkKGZyYWN0aW9uKSB8fCBmcmFjdGlvbiA9PT0gbnVsbCB8fCBmcmFjdGlvbiA9PT0gXCJcIikge1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgZiA9IHBhcnNlRmxvYXQoXCIwLlwiICsgZnJhY3Rpb24pICogMWUzO1xuICAgIHJldHVybiBNYXRoLmZsb29yKGYpO1xuICB9XG59XG5mdW5jdGlvbiByb3VuZFRvKG51bWJlciwgZGlnaXRzLCB0b3dhcmRaZXJvID0gZmFsc2UpIHtcbiAgY29uc3QgZmFjdG9yID0gMTAgKiogZGlnaXRzLCByb3VuZGVyID0gdG93YXJkWmVybyA/IE1hdGgudHJ1bmMgOiBNYXRoLnJvdW5kO1xuICByZXR1cm4gcm91bmRlcihudW1iZXIgKiBmYWN0b3IpIC8gZmFjdG9yO1xufVxuZnVuY3Rpb24gaXNMZWFwWWVhcih5ZWFyKSB7XG4gIHJldHVybiB5ZWFyICUgNCA9PT0gMCAmJiAoeWVhciAlIDEwMCAhPT0gMCB8fCB5ZWFyICUgNDAwID09PSAwKTtcbn1cbmZ1bmN0aW9uIGRheXNJblllYXIoeWVhcikge1xuICByZXR1cm4gaXNMZWFwWWVhcih5ZWFyKSA/IDM2NiA6IDM2NTtcbn1cbmZ1bmN0aW9uIGRheXNJbk1vbnRoKHllYXIsIG1vbnRoKSB7XG4gIGNvbnN0IG1vZE1vbnRoID0gZmxvb3JNb2QobW9udGggLSAxLCAxMikgKyAxLCBtb2RZZWFyID0geWVhciArIChtb250aCAtIG1vZE1vbnRoKSAvIDEyO1xuICBpZiAobW9kTW9udGggPT09IDIpIHtcbiAgICByZXR1cm4gaXNMZWFwWWVhcihtb2RZZWFyKSA/IDI5IDogMjg7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFszMSwgbnVsbCwgMzEsIDMwLCAzMSwgMzAsIDMxLCAzMSwgMzAsIDMxLCAzMCwgMzFdW21vZE1vbnRoIC0gMV07XG4gIH1cbn1cbmZ1bmN0aW9uIG9ialRvTG9jYWxUUyhvYmopIHtcbiAgbGV0IGQgPSBEYXRlLlVUQyhvYmoueWVhciwgb2JqLm1vbnRoIC0gMSwgb2JqLmRheSwgb2JqLmhvdXIsIG9iai5taW51dGUsIG9iai5zZWNvbmQsIG9iai5taWxsaXNlY29uZCk7XG4gIGlmIChvYmoueWVhciA8IDEwMCAmJiBvYmoueWVhciA+PSAwKSB7XG4gICAgZCA9IG5ldyBEYXRlKGQpO1xuICAgIGQuc2V0VVRDRnVsbFllYXIoZC5nZXRVVENGdWxsWWVhcigpIC0gMTkwMCk7XG4gIH1cbiAgcmV0dXJuICtkO1xufVxuZnVuY3Rpb24gd2Vla3NJbldlZWtZZWFyKHdlZWtZZWFyKSB7XG4gIGNvbnN0IHAxID0gKHdlZWtZZWFyICsgTWF0aC5mbG9vcih3ZWVrWWVhciAvIDQpIC0gTWF0aC5mbG9vcih3ZWVrWWVhciAvIDEwMCkgKyBNYXRoLmZsb29yKHdlZWtZZWFyIC8gNDAwKSkgJSA3LCBsYXN0ID0gd2Vla1llYXIgLSAxLCBwMiA9IChsYXN0ICsgTWF0aC5mbG9vcihsYXN0IC8gNCkgLSBNYXRoLmZsb29yKGxhc3QgLyAxMDApICsgTWF0aC5mbG9vcihsYXN0IC8gNDAwKSkgJSA3O1xuICByZXR1cm4gcDEgPT09IDQgfHwgcDIgPT09IDMgPyA1MyA6IDUyO1xufVxuZnVuY3Rpb24gdW50cnVuY2F0ZVllYXIoeWVhcikge1xuICBpZiAoeWVhciA+IDk5KSB7XG4gICAgcmV0dXJuIHllYXI7XG4gIH0gZWxzZVxuICAgIHJldHVybiB5ZWFyID4gNjAgPyAxOTAwICsgeWVhciA6IDJlMyArIHllYXI7XG59XG5mdW5jdGlvbiBwYXJzZVpvbmVJbmZvKHRzLCBvZmZzZXRGb3JtYXQsIGxvY2FsZSwgdGltZVpvbmUgPSBudWxsKSB7XG4gIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSh0cyksIGludGxPcHRzID0ge1xuICAgIGhvdXJDeWNsZTogXCJoMjNcIixcbiAgICB5ZWFyOiBcIm51bWVyaWNcIixcbiAgICBtb250aDogXCIyLWRpZ2l0XCIsXG4gICAgZGF5OiBcIjItZGlnaXRcIixcbiAgICBob3VyOiBcIjItZGlnaXRcIixcbiAgICBtaW51dGU6IFwiMi1kaWdpdFwiXG4gIH07XG4gIGlmICh0aW1lWm9uZSkge1xuICAgIGludGxPcHRzLnRpbWVab25lID0gdGltZVpvbmU7XG4gIH1cbiAgY29uc3QgbW9kaWZpZWQgPSB7dGltZVpvbmVOYW1lOiBvZmZzZXRGb3JtYXQsIC4uLmludGxPcHRzfTtcbiAgY29uc3QgcGFyc2VkID0gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQobG9jYWxlLCBtb2RpZmllZCkuZm9ybWF0VG9QYXJ0cyhkYXRlKS5maW5kKChtKSA9PiBtLnR5cGUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0aW1lem9uZW5hbWVcIik7XG4gIHJldHVybiBwYXJzZWQgPyBwYXJzZWQudmFsdWUgOiBudWxsO1xufVxuZnVuY3Rpb24gc2lnbmVkT2Zmc2V0KG9mZkhvdXJTdHIsIG9mZk1pbnV0ZVN0cikge1xuICBsZXQgb2ZmSG91ciA9IHBhcnNlSW50KG9mZkhvdXJTdHIsIDEwKTtcbiAgaWYgKE51bWJlci5pc05hTihvZmZIb3VyKSkge1xuICAgIG9mZkhvdXIgPSAwO1xuICB9XG4gIGNvbnN0IG9mZk1pbiA9IHBhcnNlSW50KG9mZk1pbnV0ZVN0ciwgMTApIHx8IDAsIG9mZk1pblNpZ25lZCA9IG9mZkhvdXIgPCAwIHx8IE9iamVjdC5pcyhvZmZIb3VyLCAtMCkgPyAtb2ZmTWluIDogb2ZmTWluO1xuICByZXR1cm4gb2ZmSG91ciAqIDYwICsgb2ZmTWluU2lnbmVkO1xufVxuZnVuY3Rpb24gYXNOdW1iZXIodmFsdWUpIHtcbiAgY29uc3QgbnVtZXJpY1ZhbHVlID0gTnVtYmVyKHZhbHVlKTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJib29sZWFuXCIgfHwgdmFsdWUgPT09IFwiXCIgfHwgTnVtYmVyLmlzTmFOKG51bWVyaWNWYWx1ZSkpXG4gICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKGBJbnZhbGlkIHVuaXQgdmFsdWUgJHt2YWx1ZX1gKTtcbiAgcmV0dXJuIG51bWVyaWNWYWx1ZTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZU9iamVjdChvYmosIG5vcm1hbGl6ZXIpIHtcbiAgY29uc3Qgbm9ybWFsaXplZCA9IHt9O1xuICBmb3IgKGNvbnN0IHUgaW4gb2JqKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5KG9iaiwgdSkpIHtcbiAgICAgIGNvbnN0IHYgPSBvYmpbdV07XG4gICAgICBpZiAodiA9PT0gdm9pZCAwIHx8IHYgPT09IG51bGwpXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgbm9ybWFsaXplZFtub3JtYWxpemVyKHUpXSA9IGFzTnVtYmVyKHYpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbm9ybWFsaXplZDtcbn1cbmZ1bmN0aW9uIGZvcm1hdE9mZnNldChvZmZzZXQyLCBmb3JtYXQpIHtcbiAgY29uc3QgaG91cnMgPSBNYXRoLnRydW5jKE1hdGguYWJzKG9mZnNldDIgLyA2MCkpLCBtaW51dGVzID0gTWF0aC50cnVuYyhNYXRoLmFicyhvZmZzZXQyICUgNjApKSwgc2lnbiA9IG9mZnNldDIgPj0gMCA/IFwiK1wiIDogXCItXCI7XG4gIHN3aXRjaCAoZm9ybWF0KSB7XG4gICAgY2FzZSBcInNob3J0XCI6XG4gICAgICByZXR1cm4gYCR7c2lnbn0ke3BhZFN0YXJ0KGhvdXJzLCAyKX06JHtwYWRTdGFydChtaW51dGVzLCAyKX1gO1xuICAgIGNhc2UgXCJuYXJyb3dcIjpcbiAgICAgIHJldHVybiBgJHtzaWdufSR7aG91cnN9JHttaW51dGVzID4gMCA/IGA6JHttaW51dGVzfWAgOiBcIlwifWA7XG4gICAgY2FzZSBcInRlY2hpZVwiOlxuICAgICAgcmV0dXJuIGAke3NpZ259JHtwYWRTdGFydChob3VycywgMil9JHtwYWRTdGFydChtaW51dGVzLCAyKX1gO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgVmFsdWUgZm9ybWF0ICR7Zm9ybWF0fSBpcyBvdXQgb2YgcmFuZ2UgZm9yIHByb3BlcnR5IGZvcm1hdGApO1xuICB9XG59XG5mdW5jdGlvbiB0aW1lT2JqZWN0KG9iaikge1xuICByZXR1cm4gcGljayhvYmosIFtcImhvdXJcIiwgXCJtaW51dGVcIiwgXCJzZWNvbmRcIiwgXCJtaWxsaXNlY29uZFwiXSk7XG59XG52YXIgaWFuYVJlZ2V4ID0gL1tBLVphLXpfKy1dezEsMjU2fSg/Ojo/XFwvW0EtWmEtejAtOV8rLV17MSwyNTZ9KD86XFwvW0EtWmEtejAtOV8rLV17MSwyNTZ9KT8pPy87XG52YXIgbW9udGhzTG9uZyA9IFtcbiAgXCJKYW51YXJ5XCIsXG4gIFwiRmVicnVhcnlcIixcbiAgXCJNYXJjaFwiLFxuICBcIkFwcmlsXCIsXG4gIFwiTWF5XCIsXG4gIFwiSnVuZVwiLFxuICBcIkp1bHlcIixcbiAgXCJBdWd1c3RcIixcbiAgXCJTZXB0ZW1iZXJcIixcbiAgXCJPY3RvYmVyXCIsXG4gIFwiTm92ZW1iZXJcIixcbiAgXCJEZWNlbWJlclwiXG5dO1xudmFyIG1vbnRoc1Nob3J0ID0gW1xuICBcIkphblwiLFxuICBcIkZlYlwiLFxuICBcIk1hclwiLFxuICBcIkFwclwiLFxuICBcIk1heVwiLFxuICBcIkp1blwiLFxuICBcIkp1bFwiLFxuICBcIkF1Z1wiLFxuICBcIlNlcFwiLFxuICBcIk9jdFwiLFxuICBcIk5vdlwiLFxuICBcIkRlY1wiXG5dO1xudmFyIG1vbnRoc05hcnJvdyA9IFtcIkpcIiwgXCJGXCIsIFwiTVwiLCBcIkFcIiwgXCJNXCIsIFwiSlwiLCBcIkpcIiwgXCJBXCIsIFwiU1wiLCBcIk9cIiwgXCJOXCIsIFwiRFwiXTtcbmZ1bmN0aW9uIG1vbnRocyhsZW5ndGgpIHtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIFwibmFycm93XCI6XG4gICAgICByZXR1cm4gWy4uLm1vbnRoc05hcnJvd107XG4gICAgY2FzZSBcInNob3J0XCI6XG4gICAgICByZXR1cm4gWy4uLm1vbnRoc1Nob3J0XTtcbiAgICBjYXNlIFwibG9uZ1wiOlxuICAgICAgcmV0dXJuIFsuLi5tb250aHNMb25nXTtcbiAgICBjYXNlIFwibnVtZXJpY1wiOlxuICAgICAgcmV0dXJuIFtcIjFcIiwgXCIyXCIsIFwiM1wiLCBcIjRcIiwgXCI1XCIsIFwiNlwiLCBcIjdcIiwgXCI4XCIsIFwiOVwiLCBcIjEwXCIsIFwiMTFcIiwgXCIxMlwiXTtcbiAgICBjYXNlIFwiMi1kaWdpdFwiOlxuICAgICAgcmV0dXJuIFtcIjAxXCIsIFwiMDJcIiwgXCIwM1wiLCBcIjA0XCIsIFwiMDVcIiwgXCIwNlwiLCBcIjA3XCIsIFwiMDhcIiwgXCIwOVwiLCBcIjEwXCIsIFwiMTFcIiwgXCIxMlwiXTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbnZhciB3ZWVrZGF5c0xvbmcgPSBbXG4gIFwiTW9uZGF5XCIsXG4gIFwiVHVlc2RheVwiLFxuICBcIldlZG5lc2RheVwiLFxuICBcIlRodXJzZGF5XCIsXG4gIFwiRnJpZGF5XCIsXG4gIFwiU2F0dXJkYXlcIixcbiAgXCJTdW5kYXlcIlxuXTtcbnZhciB3ZWVrZGF5c1Nob3J0ID0gW1wiTW9uXCIsIFwiVHVlXCIsIFwiV2VkXCIsIFwiVGh1XCIsIFwiRnJpXCIsIFwiU2F0XCIsIFwiU3VuXCJdO1xudmFyIHdlZWtkYXlzTmFycm93ID0gW1wiTVwiLCBcIlRcIiwgXCJXXCIsIFwiVFwiLCBcIkZcIiwgXCJTXCIsIFwiU1wiXTtcbmZ1bmN0aW9uIHdlZWtkYXlzKGxlbmd0aCkge1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgXCJuYXJyb3dcIjpcbiAgICAgIHJldHVybiBbLi4ud2Vla2RheXNOYXJyb3ddO1xuICAgIGNhc2UgXCJzaG9ydFwiOlxuICAgICAgcmV0dXJuIFsuLi53ZWVrZGF5c1Nob3J0XTtcbiAgICBjYXNlIFwibG9uZ1wiOlxuICAgICAgcmV0dXJuIFsuLi53ZWVrZGF5c0xvbmddO1xuICAgIGNhc2UgXCJudW1lcmljXCI6XG4gICAgICByZXR1cm4gW1wiMVwiLCBcIjJcIiwgXCIzXCIsIFwiNFwiLCBcIjVcIiwgXCI2XCIsIFwiN1wiXTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbnZhciBtZXJpZGllbXMgPSBbXCJBTVwiLCBcIlBNXCJdO1xudmFyIGVyYXNMb25nID0gW1wiQmVmb3JlIENocmlzdFwiLCBcIkFubm8gRG9taW5pXCJdO1xudmFyIGVyYXNTaG9ydCA9IFtcIkJDXCIsIFwiQURcIl07XG52YXIgZXJhc05hcnJvdyA9IFtcIkJcIiwgXCJBXCJdO1xuZnVuY3Rpb24gZXJhcyhsZW5ndGgpIHtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIFwibmFycm93XCI6XG4gICAgICByZXR1cm4gWy4uLmVyYXNOYXJyb3ddO1xuICAgIGNhc2UgXCJzaG9ydFwiOlxuICAgICAgcmV0dXJuIFsuLi5lcmFzU2hvcnRdO1xuICAgIGNhc2UgXCJsb25nXCI6XG4gICAgICByZXR1cm4gWy4uLmVyYXNMb25nXTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbmZ1bmN0aW9uIG1lcmlkaWVtRm9yRGF0ZVRpbWUoZHQpIHtcbiAgcmV0dXJuIG1lcmlkaWVtc1tkdC5ob3VyIDwgMTIgPyAwIDogMV07XG59XG5mdW5jdGlvbiB3ZWVrZGF5Rm9yRGF0ZVRpbWUoZHQsIGxlbmd0aCkge1xuICByZXR1cm4gd2Vla2RheXMobGVuZ3RoKVtkdC53ZWVrZGF5IC0gMV07XG59XG5mdW5jdGlvbiBtb250aEZvckRhdGVUaW1lKGR0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIG1vbnRocyhsZW5ndGgpW2R0Lm1vbnRoIC0gMV07XG59XG5mdW5jdGlvbiBlcmFGb3JEYXRlVGltZShkdCwgbGVuZ3RoKSB7XG4gIHJldHVybiBlcmFzKGxlbmd0aClbZHQueWVhciA8IDAgPyAwIDogMV07XG59XG5mdW5jdGlvbiBmb3JtYXRSZWxhdGl2ZVRpbWUodW5pdCwgY291bnQsIG51bWVyaWMgPSBcImFsd2F5c1wiLCBuYXJyb3cgPSBmYWxzZSkge1xuICBjb25zdCB1bml0cyA9IHtcbiAgICB5ZWFyczogW1wieWVhclwiLCBcInlyLlwiXSxcbiAgICBxdWFydGVyczogW1wicXVhcnRlclwiLCBcInF0ci5cIl0sXG4gICAgbW9udGhzOiBbXCJtb250aFwiLCBcIm1vLlwiXSxcbiAgICB3ZWVrczogW1wid2Vla1wiLCBcIndrLlwiXSxcbiAgICBkYXlzOiBbXCJkYXlcIiwgXCJkYXlcIiwgXCJkYXlzXCJdLFxuICAgIGhvdXJzOiBbXCJob3VyXCIsIFwiaHIuXCJdLFxuICAgIG1pbnV0ZXM6IFtcIm1pbnV0ZVwiLCBcIm1pbi5cIl0sXG4gICAgc2Vjb25kczogW1wic2Vjb25kXCIsIFwic2VjLlwiXVxuICB9O1xuICBjb25zdCBsYXN0YWJsZSA9IFtcImhvdXJzXCIsIFwibWludXRlc1wiLCBcInNlY29uZHNcIl0uaW5kZXhPZih1bml0KSA9PT0gLTE7XG4gIGlmIChudW1lcmljID09PSBcImF1dG9cIiAmJiBsYXN0YWJsZSkge1xuICAgIGNvbnN0IGlzRGF5ID0gdW5pdCA9PT0gXCJkYXlzXCI7XG4gICAgc3dpdGNoIChjb3VudCkge1xuICAgICAgY2FzZSAxOlxuICAgICAgICByZXR1cm4gaXNEYXkgPyBcInRvbW9ycm93XCIgOiBgbmV4dCAke3VuaXRzW3VuaXRdWzBdfWA7XG4gICAgICBjYXNlIC0xOlxuICAgICAgICByZXR1cm4gaXNEYXkgPyBcInllc3RlcmRheVwiIDogYGxhc3QgJHt1bml0c1t1bml0XVswXX1gO1xuICAgICAgY2FzZSAwOlxuICAgICAgICByZXR1cm4gaXNEYXkgPyBcInRvZGF5XCIgOiBgdGhpcyAke3VuaXRzW3VuaXRdWzBdfWA7XG4gICAgfVxuICB9XG4gIGNvbnN0IGlzSW5QYXN0ID0gT2JqZWN0LmlzKGNvdW50LCAtMCkgfHwgY291bnQgPCAwLCBmbXRWYWx1ZSA9IE1hdGguYWJzKGNvdW50KSwgc2luZ3VsYXIgPSBmbXRWYWx1ZSA9PT0gMSwgbGlsVW5pdHMgPSB1bml0c1t1bml0XSwgZm10VW5pdCA9IG5hcnJvdyA/IHNpbmd1bGFyID8gbGlsVW5pdHNbMV0gOiBsaWxVbml0c1syXSB8fCBsaWxVbml0c1sxXSA6IHNpbmd1bGFyID8gdW5pdHNbdW5pdF1bMF0gOiB1bml0O1xuICByZXR1cm4gaXNJblBhc3QgPyBgJHtmbXRWYWx1ZX0gJHtmbXRVbml0fSBhZ29gIDogYGluICR7Zm10VmFsdWV9ICR7Zm10VW5pdH1gO1xufVxuZnVuY3Rpb24gc3RyaW5naWZ5VG9rZW5zKHNwbGl0cywgdG9rZW5Ub1N0cmluZykge1xuICBsZXQgczIgPSBcIlwiO1xuICBmb3IgKGNvbnN0IHRva2VuIG9mIHNwbGl0cykge1xuICAgIGlmICh0b2tlbi5saXRlcmFsKSB7XG4gICAgICBzMiArPSB0b2tlbi52YWw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMyICs9IHRva2VuVG9TdHJpbmcodG9rZW4udmFsKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHMyO1xufVxudmFyIG1hY3JvVG9rZW5Ub0Zvcm1hdE9wdHMgPSB7XG4gIEQ6IERBVEVfU0hPUlQsXG4gIEREOiBEQVRFX01FRCxcbiAgREREOiBEQVRFX0ZVTEwsXG4gIEREREQ6IERBVEVfSFVHRSxcbiAgdDogVElNRV9TSU1QTEUsXG4gIHR0OiBUSU1FX1dJVEhfU0VDT05EUyxcbiAgdHR0OiBUSU1FX1dJVEhfU0hPUlRfT0ZGU0VULFxuICB0dHR0OiBUSU1FX1dJVEhfTE9OR19PRkZTRVQsXG4gIFQ6IFRJTUVfMjRfU0lNUExFLFxuICBUVDogVElNRV8yNF9XSVRIX1NFQ09ORFMsXG4gIFRUVDogVElNRV8yNF9XSVRIX1NIT1JUX09GRlNFVCxcbiAgVFRUVDogVElNRV8yNF9XSVRIX0xPTkdfT0ZGU0VULFxuICBmOiBEQVRFVElNRV9TSE9SVCxcbiAgZmY6IERBVEVUSU1FX01FRCxcbiAgZmZmOiBEQVRFVElNRV9GVUxMLFxuICBmZmZmOiBEQVRFVElNRV9IVUdFLFxuICBGOiBEQVRFVElNRV9TSE9SVF9XSVRIX1NFQ09ORFMsXG4gIEZGOiBEQVRFVElNRV9NRURfV0lUSF9TRUNPTkRTLFxuICBGRkY6IERBVEVUSU1FX0ZVTExfV0lUSF9TRUNPTkRTLFxuICBGRkZGOiBEQVRFVElNRV9IVUdFX1dJVEhfU0VDT05EU1xufTtcbnZhciBGb3JtYXR0ZXIgPSBjbGFzcyB7XG4gIHN0YXRpYyBjcmVhdGUobG9jYWxlLCBvcHRzID0ge30pIHtcbiAgICByZXR1cm4gbmV3IEZvcm1hdHRlcihsb2NhbGUsIG9wdHMpO1xuICB9XG4gIHN0YXRpYyBwYXJzZUZvcm1hdChmbXQpIHtcbiAgICBsZXQgY3VycmVudCA9IG51bGwsIGN1cnJlbnRGdWxsID0gXCJcIiwgYnJhY2tldGVkID0gZmFsc2U7XG4gICAgY29uc3Qgc3BsaXRzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmbXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGMgPSBmbXQuY2hhckF0KGkpO1xuICAgICAgaWYgKGMgPT09IFwiJ1wiKSB7XG4gICAgICAgIGlmIChjdXJyZW50RnVsbC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgc3BsaXRzLnB1c2goe2xpdGVyYWw6IGJyYWNrZXRlZCwgdmFsOiBjdXJyZW50RnVsbH0pO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnQgPSBudWxsO1xuICAgICAgICBjdXJyZW50RnVsbCA9IFwiXCI7XG4gICAgICAgIGJyYWNrZXRlZCA9ICFicmFja2V0ZWQ7XG4gICAgICB9IGVsc2UgaWYgKGJyYWNrZXRlZCkge1xuICAgICAgICBjdXJyZW50RnVsbCArPSBjO1xuICAgICAgfSBlbHNlIGlmIChjID09PSBjdXJyZW50KSB7XG4gICAgICAgIGN1cnJlbnRGdWxsICs9IGM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoY3VycmVudEZ1bGwubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHNwbGl0cy5wdXNoKHtsaXRlcmFsOiBmYWxzZSwgdmFsOiBjdXJyZW50RnVsbH0pO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnRGdWxsID0gYztcbiAgICAgICAgY3VycmVudCA9IGM7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChjdXJyZW50RnVsbC5sZW5ndGggPiAwKSB7XG4gICAgICBzcGxpdHMucHVzaCh7bGl0ZXJhbDogYnJhY2tldGVkLCB2YWw6IGN1cnJlbnRGdWxsfSk7XG4gICAgfVxuICAgIHJldHVybiBzcGxpdHM7XG4gIH1cbiAgc3RhdGljIG1hY3JvVG9rZW5Ub0Zvcm1hdE9wdHModG9rZW4pIHtcbiAgICByZXR1cm4gbWFjcm9Ub2tlblRvRm9ybWF0T3B0c1t0b2tlbl07XG4gIH1cbiAgY29uc3RydWN0b3IobG9jYWxlLCBmb3JtYXRPcHRzKSB7XG4gICAgdGhpcy5vcHRzID0gZm9ybWF0T3B0cztcbiAgICB0aGlzLmxvYyA9IGxvY2FsZTtcbiAgICB0aGlzLnN5c3RlbUxvYyA9IG51bGw7XG4gIH1cbiAgZm9ybWF0V2l0aFN5c3RlbURlZmF1bHQoZHQsIG9wdHMpIHtcbiAgICBpZiAodGhpcy5zeXN0ZW1Mb2MgPT09IG51bGwpIHtcbiAgICAgIHRoaXMuc3lzdGVtTG9jID0gdGhpcy5sb2MucmVkZWZhdWx0VG9TeXN0ZW0oKTtcbiAgICB9XG4gICAgY29uc3QgZGYgPSB0aGlzLnN5c3RlbUxvYy5kdEZvcm1hdHRlcihkdCwgey4uLnRoaXMub3B0cywgLi4ub3B0c30pO1xuICAgIHJldHVybiBkZi5mb3JtYXQoKTtcbiAgfVxuICBmb3JtYXREYXRlVGltZShkdCwgb3B0cyA9IHt9KSB7XG4gICAgY29uc3QgZGYgPSB0aGlzLmxvYy5kdEZvcm1hdHRlcihkdCwgey4uLnRoaXMub3B0cywgLi4ub3B0c30pO1xuICAgIHJldHVybiBkZi5mb3JtYXQoKTtcbiAgfVxuICBmb3JtYXREYXRlVGltZVBhcnRzKGR0LCBvcHRzID0ge30pIHtcbiAgICBjb25zdCBkZiA9IHRoaXMubG9jLmR0Rm9ybWF0dGVyKGR0LCB7Li4udGhpcy5vcHRzLCAuLi5vcHRzfSk7XG4gICAgcmV0dXJuIGRmLmZvcm1hdFRvUGFydHMoKTtcbiAgfVxuICByZXNvbHZlZE9wdGlvbnMoZHQsIG9wdHMgPSB7fSkge1xuICAgIGNvbnN0IGRmID0gdGhpcy5sb2MuZHRGb3JtYXR0ZXIoZHQsIHsuLi50aGlzLm9wdHMsIC4uLm9wdHN9KTtcbiAgICByZXR1cm4gZGYucmVzb2x2ZWRPcHRpb25zKCk7XG4gIH1cbiAgbnVtKG4yLCBwID0gMCkge1xuICAgIGlmICh0aGlzLm9wdHMuZm9yY2VTaW1wbGUpIHtcbiAgICAgIHJldHVybiBwYWRTdGFydChuMiwgcCk7XG4gICAgfVxuICAgIGNvbnN0IG9wdHMgPSB7Li4udGhpcy5vcHRzfTtcbiAgICBpZiAocCA+IDApIHtcbiAgICAgIG9wdHMucGFkVG8gPSBwO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5sb2MubnVtYmVyRm9ybWF0dGVyKG9wdHMpLmZvcm1hdChuMik7XG4gIH1cbiAgZm9ybWF0RGF0ZVRpbWVGcm9tU3RyaW5nKGR0LCBmbXQpIHtcbiAgICBjb25zdCBrbm93bkVuZ2xpc2ggPSB0aGlzLmxvYy5saXN0aW5nTW9kZSgpID09PSBcImVuXCIsIHVzZURhdGVUaW1lRm9ybWF0dGVyID0gdGhpcy5sb2Mub3V0cHV0Q2FsZW5kYXIgJiYgdGhpcy5sb2Mub3V0cHV0Q2FsZW5kYXIgIT09IFwiZ3JlZ29yeVwiLCBzdHJpbmcyID0gKG9wdHMsIGV4dHJhY3QpID0+IHRoaXMubG9jLmV4dHJhY3QoZHQsIG9wdHMsIGV4dHJhY3QpLCBmb3JtYXRPZmZzZXQyID0gKG9wdHMpID0+IHtcbiAgICAgIGlmIChkdC5pc09mZnNldEZpeGVkICYmIGR0Lm9mZnNldCA9PT0gMCAmJiBvcHRzLmFsbG93Wikge1xuICAgICAgICByZXR1cm4gXCJaXCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gZHQuaXNWYWxpZCA/IGR0LnpvbmUuZm9ybWF0T2Zmc2V0KGR0LnRzLCBvcHRzLmZvcm1hdCkgOiBcIlwiO1xuICAgIH0sIG1lcmlkaWVtID0gKCkgPT4ga25vd25FbmdsaXNoID8gbWVyaWRpZW1Gb3JEYXRlVGltZShkdCkgOiBzdHJpbmcyKHtob3VyOiBcIm51bWVyaWNcIiwgaG91ckN5Y2xlOiBcImgxMlwifSwgXCJkYXlwZXJpb2RcIiksIG1vbnRoID0gKGxlbmd0aCwgc3RhbmRhbG9uZSkgPT4ga25vd25FbmdsaXNoID8gbW9udGhGb3JEYXRlVGltZShkdCwgbGVuZ3RoKSA6IHN0cmluZzIoc3RhbmRhbG9uZSA/IHttb250aDogbGVuZ3RofSA6IHttb250aDogbGVuZ3RoLCBkYXk6IFwibnVtZXJpY1wifSwgXCJtb250aFwiKSwgd2Vla2RheSA9IChsZW5ndGgsIHN0YW5kYWxvbmUpID0+IGtub3duRW5nbGlzaCA/IHdlZWtkYXlGb3JEYXRlVGltZShkdCwgbGVuZ3RoKSA6IHN0cmluZzIoc3RhbmRhbG9uZSA/IHt3ZWVrZGF5OiBsZW5ndGh9IDoge3dlZWtkYXk6IGxlbmd0aCwgbW9udGg6IFwibG9uZ1wiLCBkYXk6IFwibnVtZXJpY1wifSwgXCJ3ZWVrZGF5XCIpLCBtYXliZU1hY3JvID0gKHRva2VuKSA9PiB7XG4gICAgICBjb25zdCBmb3JtYXRPcHRzID0gRm9ybWF0dGVyLm1hY3JvVG9rZW5Ub0Zvcm1hdE9wdHModG9rZW4pO1xuICAgICAgaWYgKGZvcm1hdE9wdHMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0V2l0aFN5c3RlbURlZmF1bHQoZHQsIGZvcm1hdE9wdHMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgICAgfVxuICAgIH0sIGVyYSA9IChsZW5ndGgpID0+IGtub3duRW5nbGlzaCA/IGVyYUZvckRhdGVUaW1lKGR0LCBsZW5ndGgpIDogc3RyaW5nMih7ZXJhOiBsZW5ndGh9LCBcImVyYVwiKSwgdG9rZW5Ub1N0cmluZyA9ICh0b2tlbikgPT4ge1xuICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICBjYXNlIFwiU1wiOlxuICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC5taWxsaXNlY29uZCk7XG4gICAgICAgIGNhc2UgXCJ1XCI6XG4gICAgICAgIGNhc2UgXCJTU1NcIjpcbiAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQubWlsbGlzZWNvbmQsIDMpO1xuICAgICAgICBjYXNlIFwic1wiOlxuICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC5zZWNvbmQpO1xuICAgICAgICBjYXNlIFwic3NcIjpcbiAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQuc2Vjb25kLCAyKTtcbiAgICAgICAgY2FzZSBcInV1XCI6XG4gICAgICAgICAgcmV0dXJuIHRoaXMubnVtKE1hdGguZmxvb3IoZHQubWlsbGlzZWNvbmQgLyAxMCksIDIpO1xuICAgICAgICBjYXNlIFwidXV1XCI6XG4gICAgICAgICAgcmV0dXJuIHRoaXMubnVtKE1hdGguZmxvb3IoZHQubWlsbGlzZWNvbmQgLyAxMDApKTtcbiAgICAgICAgY2FzZSBcIm1cIjpcbiAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQubWludXRlKTtcbiAgICAgICAgY2FzZSBcIm1tXCI6XG4gICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0Lm1pbnV0ZSwgMik7XG4gICAgICAgIGNhc2UgXCJoXCI6XG4gICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0LmhvdXIgJSAxMiA9PT0gMCA/IDEyIDogZHQuaG91ciAlIDEyKTtcbiAgICAgICAgY2FzZSBcImhoXCI6XG4gICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0LmhvdXIgJSAxMiA9PT0gMCA/IDEyIDogZHQuaG91ciAlIDEyLCAyKTtcbiAgICAgICAgY2FzZSBcIkhcIjpcbiAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQuaG91cik7XG4gICAgICAgIGNhc2UgXCJISFwiOlxuICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC5ob3VyLCAyKTtcbiAgICAgICAgY2FzZSBcIlpcIjpcbiAgICAgICAgICByZXR1cm4gZm9ybWF0T2Zmc2V0Mih7Zm9ybWF0OiBcIm5hcnJvd1wiLCBhbGxvd1o6IHRoaXMub3B0cy5hbGxvd1p9KTtcbiAgICAgICAgY2FzZSBcIlpaXCI6XG4gICAgICAgICAgcmV0dXJuIGZvcm1hdE9mZnNldDIoe2Zvcm1hdDogXCJzaG9ydFwiLCBhbGxvd1o6IHRoaXMub3B0cy5hbGxvd1p9KTtcbiAgICAgICAgY2FzZSBcIlpaWlwiOlxuICAgICAgICAgIHJldHVybiBmb3JtYXRPZmZzZXQyKHtmb3JtYXQ6IFwidGVjaGllXCIsIGFsbG93WjogdGhpcy5vcHRzLmFsbG93Wn0pO1xuICAgICAgICBjYXNlIFwiWlpaWlwiOlxuICAgICAgICAgIHJldHVybiBkdC56b25lLm9mZnNldE5hbWUoZHQudHMsIHtmb3JtYXQ6IFwic2hvcnRcIiwgbG9jYWxlOiB0aGlzLmxvYy5sb2NhbGV9KTtcbiAgICAgICAgY2FzZSBcIlpaWlpaXCI6XG4gICAgICAgICAgcmV0dXJuIGR0LnpvbmUub2Zmc2V0TmFtZShkdC50cywge2Zvcm1hdDogXCJsb25nXCIsIGxvY2FsZTogdGhpcy5sb2MubG9jYWxlfSk7XG4gICAgICAgIGNhc2UgXCJ6XCI6XG4gICAgICAgICAgcmV0dXJuIGR0LnpvbmVOYW1lO1xuICAgICAgICBjYXNlIFwiYVwiOlxuICAgICAgICAgIHJldHVybiBtZXJpZGllbSgpO1xuICAgICAgICBjYXNlIFwiZFwiOlxuICAgICAgICAgIHJldHVybiB1c2VEYXRlVGltZUZvcm1hdHRlciA/IHN0cmluZzIoe2RheTogXCJudW1lcmljXCJ9LCBcImRheVwiKSA6IHRoaXMubnVtKGR0LmRheSk7XG4gICAgICAgIGNhc2UgXCJkZFwiOlxuICAgICAgICAgIHJldHVybiB1c2VEYXRlVGltZUZvcm1hdHRlciA/IHN0cmluZzIoe2RheTogXCIyLWRpZ2l0XCJ9LCBcImRheVwiKSA6IHRoaXMubnVtKGR0LmRheSwgMik7XG4gICAgICAgIGNhc2UgXCJjXCI6XG4gICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0LndlZWtkYXkpO1xuICAgICAgICBjYXNlIFwiY2NjXCI6XG4gICAgICAgICAgcmV0dXJuIHdlZWtkYXkoXCJzaG9ydFwiLCB0cnVlKTtcbiAgICAgICAgY2FzZSBcImNjY2NcIjpcbiAgICAgICAgICByZXR1cm4gd2Vla2RheShcImxvbmdcIiwgdHJ1ZSk7XG4gICAgICAgIGNhc2UgXCJjY2NjY1wiOlxuICAgICAgICAgIHJldHVybiB3ZWVrZGF5KFwibmFycm93XCIsIHRydWUpO1xuICAgICAgICBjYXNlIFwiRVwiOlxuICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC53ZWVrZGF5KTtcbiAgICAgICAgY2FzZSBcIkVFRVwiOlxuICAgICAgICAgIHJldHVybiB3ZWVrZGF5KFwic2hvcnRcIiwgZmFsc2UpO1xuICAgICAgICBjYXNlIFwiRUVFRVwiOlxuICAgICAgICAgIHJldHVybiB3ZWVrZGF5KFwibG9uZ1wiLCBmYWxzZSk7XG4gICAgICAgIGNhc2UgXCJFRUVFRVwiOlxuICAgICAgICAgIHJldHVybiB3ZWVrZGF5KFwibmFycm93XCIsIGZhbHNlKTtcbiAgICAgICAgY2FzZSBcIkxcIjpcbiAgICAgICAgICByZXR1cm4gdXNlRGF0ZVRpbWVGb3JtYXR0ZXIgPyBzdHJpbmcyKHttb250aDogXCJudW1lcmljXCIsIGRheTogXCJudW1lcmljXCJ9LCBcIm1vbnRoXCIpIDogdGhpcy5udW0oZHQubW9udGgpO1xuICAgICAgICBjYXNlIFwiTExcIjpcbiAgICAgICAgICByZXR1cm4gdXNlRGF0ZVRpbWVGb3JtYXR0ZXIgPyBzdHJpbmcyKHttb250aDogXCIyLWRpZ2l0XCIsIGRheTogXCJudW1lcmljXCJ9LCBcIm1vbnRoXCIpIDogdGhpcy5udW0oZHQubW9udGgsIDIpO1xuICAgICAgICBjYXNlIFwiTExMXCI6XG4gICAgICAgICAgcmV0dXJuIG1vbnRoKFwic2hvcnRcIiwgdHJ1ZSk7XG4gICAgICAgIGNhc2UgXCJMTExMXCI6XG4gICAgICAgICAgcmV0dXJuIG1vbnRoKFwibG9uZ1wiLCB0cnVlKTtcbiAgICAgICAgY2FzZSBcIkxMTExMXCI6XG4gICAgICAgICAgcmV0dXJuIG1vbnRoKFwibmFycm93XCIsIHRydWUpO1xuICAgICAgICBjYXNlIFwiTVwiOlxuICAgICAgICAgIHJldHVybiB1c2VEYXRlVGltZUZvcm1hdHRlciA/IHN0cmluZzIoe21vbnRoOiBcIm51bWVyaWNcIn0sIFwibW9udGhcIikgOiB0aGlzLm51bShkdC5tb250aCk7XG4gICAgICAgIGNhc2UgXCJNTVwiOlxuICAgICAgICAgIHJldHVybiB1c2VEYXRlVGltZUZvcm1hdHRlciA/IHN0cmluZzIoe21vbnRoOiBcIjItZGlnaXRcIn0sIFwibW9udGhcIikgOiB0aGlzLm51bShkdC5tb250aCwgMik7XG4gICAgICAgIGNhc2UgXCJNTU1cIjpcbiAgICAgICAgICByZXR1cm4gbW9udGgoXCJzaG9ydFwiLCBmYWxzZSk7XG4gICAgICAgIGNhc2UgXCJNTU1NXCI6XG4gICAgICAgICAgcmV0dXJuIG1vbnRoKFwibG9uZ1wiLCBmYWxzZSk7XG4gICAgICAgIGNhc2UgXCJNTU1NTVwiOlxuICAgICAgICAgIHJldHVybiBtb250aChcIm5hcnJvd1wiLCBmYWxzZSk7XG4gICAgICAgIGNhc2UgXCJ5XCI6XG4gICAgICAgICAgcmV0dXJuIHVzZURhdGVUaW1lRm9ybWF0dGVyID8gc3RyaW5nMih7eWVhcjogXCJudW1lcmljXCJ9LCBcInllYXJcIikgOiB0aGlzLm51bShkdC55ZWFyKTtcbiAgICAgICAgY2FzZSBcInl5XCI6XG4gICAgICAgICAgcmV0dXJuIHVzZURhdGVUaW1lRm9ybWF0dGVyID8gc3RyaW5nMih7eWVhcjogXCIyLWRpZ2l0XCJ9LCBcInllYXJcIikgOiB0aGlzLm51bShkdC55ZWFyLnRvU3RyaW5nKCkuc2xpY2UoLTIpLCAyKTtcbiAgICAgICAgY2FzZSBcInl5eXlcIjpcbiAgICAgICAgICByZXR1cm4gdXNlRGF0ZVRpbWVGb3JtYXR0ZXIgPyBzdHJpbmcyKHt5ZWFyOiBcIm51bWVyaWNcIn0sIFwieWVhclwiKSA6IHRoaXMubnVtKGR0LnllYXIsIDQpO1xuICAgICAgICBjYXNlIFwieXl5eXl5XCI6XG4gICAgICAgICAgcmV0dXJuIHVzZURhdGVUaW1lRm9ybWF0dGVyID8gc3RyaW5nMih7eWVhcjogXCJudW1lcmljXCJ9LCBcInllYXJcIikgOiB0aGlzLm51bShkdC55ZWFyLCA2KTtcbiAgICAgICAgY2FzZSBcIkdcIjpcbiAgICAgICAgICByZXR1cm4gZXJhKFwic2hvcnRcIik7XG4gICAgICAgIGNhc2UgXCJHR1wiOlxuICAgICAgICAgIHJldHVybiBlcmEoXCJsb25nXCIpO1xuICAgICAgICBjYXNlIFwiR0dHR0dcIjpcbiAgICAgICAgICByZXR1cm4gZXJhKFwibmFycm93XCIpO1xuICAgICAgICBjYXNlIFwia2tcIjpcbiAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQud2Vla1llYXIudG9TdHJpbmcoKS5zbGljZSgtMiksIDIpO1xuICAgICAgICBjYXNlIFwia2tra1wiOlxuICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC53ZWVrWWVhciwgNCk7XG4gICAgICAgIGNhc2UgXCJXXCI6XG4gICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0LndlZWtOdW1iZXIpO1xuICAgICAgICBjYXNlIFwiV1dcIjpcbiAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQud2Vla051bWJlciwgMik7XG4gICAgICAgIGNhc2UgXCJvXCI6XG4gICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0Lm9yZGluYWwpO1xuICAgICAgICBjYXNlIFwib29vXCI6XG4gICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0Lm9yZGluYWwsIDMpO1xuICAgICAgICBjYXNlIFwicVwiOlxuICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC5xdWFydGVyKTtcbiAgICAgICAgY2FzZSBcInFxXCI6XG4gICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0LnF1YXJ0ZXIsIDIpO1xuICAgICAgICBjYXNlIFwiWFwiOlxuICAgICAgICAgIHJldHVybiB0aGlzLm51bShNYXRoLmZsb29yKGR0LnRzIC8gMWUzKSk7XG4gICAgICAgIGNhc2UgXCJ4XCI6XG4gICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0LnRzKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gbWF5YmVNYWNybyh0b2tlbik7XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gc3RyaW5naWZ5VG9rZW5zKEZvcm1hdHRlci5wYXJzZUZvcm1hdChmbXQpLCB0b2tlblRvU3RyaW5nKTtcbiAgfVxuICBmb3JtYXREdXJhdGlvbkZyb21TdHJpbmcoZHVyLCBmbXQpIHtcbiAgICBjb25zdCB0b2tlblRvRmllbGQgPSAodG9rZW4pID0+IHtcbiAgICAgIHN3aXRjaCAodG9rZW5bMF0pIHtcbiAgICAgICAgY2FzZSBcIlNcIjpcbiAgICAgICAgICByZXR1cm4gXCJtaWxsaXNlY29uZFwiO1xuICAgICAgICBjYXNlIFwic1wiOlxuICAgICAgICAgIHJldHVybiBcInNlY29uZFwiO1xuICAgICAgICBjYXNlIFwibVwiOlxuICAgICAgICAgIHJldHVybiBcIm1pbnV0ZVwiO1xuICAgICAgICBjYXNlIFwiaFwiOlxuICAgICAgICAgIHJldHVybiBcImhvdXJcIjtcbiAgICAgICAgY2FzZSBcImRcIjpcbiAgICAgICAgICByZXR1cm4gXCJkYXlcIjtcbiAgICAgICAgY2FzZSBcIndcIjpcbiAgICAgICAgICByZXR1cm4gXCJ3ZWVrXCI7XG4gICAgICAgIGNhc2UgXCJNXCI6XG4gICAgICAgICAgcmV0dXJuIFwibW9udGhcIjtcbiAgICAgICAgY2FzZSBcInlcIjpcbiAgICAgICAgICByZXR1cm4gXCJ5ZWFyXCI7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfSwgdG9rZW5Ub1N0cmluZyA9IChsaWxkdXIpID0+ICh0b2tlbikgPT4ge1xuICAgICAgY29uc3QgbWFwcGVkID0gdG9rZW5Ub0ZpZWxkKHRva2VuKTtcbiAgICAgIGlmIChtYXBwZWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubnVtKGxpbGR1ci5nZXQobWFwcGVkKSwgdG9rZW4ubGVuZ3RoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0b2tlbjtcbiAgICAgIH1cbiAgICB9LCB0b2tlbnMgPSBGb3JtYXR0ZXIucGFyc2VGb3JtYXQoZm10KSwgcmVhbFRva2VucyA9IHRva2Vucy5yZWR1Y2UoKGZvdW5kLCB7bGl0ZXJhbCwgdmFsfSkgPT4gbGl0ZXJhbCA/IGZvdW5kIDogZm91bmQuY29uY2F0KHZhbCksIFtdKSwgY29sbGFwc2VkID0gZHVyLnNoaWZ0VG8oLi4ucmVhbFRva2Vucy5tYXAodG9rZW5Ub0ZpZWxkKS5maWx0ZXIoKHQpID0+IHQpKTtcbiAgICByZXR1cm4gc3RyaW5naWZ5VG9rZW5zKHRva2VucywgdG9rZW5Ub1N0cmluZyhjb2xsYXBzZWQpKTtcbiAgfVxufTtcbnZhciBJbnZhbGlkID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihyZWFzb24sIGV4cGxhbmF0aW9uKSB7XG4gICAgdGhpcy5yZWFzb24gPSByZWFzb247XG4gICAgdGhpcy5leHBsYW5hdGlvbiA9IGV4cGxhbmF0aW9uO1xuICB9XG4gIHRvTWVzc2FnZSgpIHtcbiAgICBpZiAodGhpcy5leHBsYW5hdGlvbikge1xuICAgICAgcmV0dXJuIGAke3RoaXMucmVhc29ufTogJHt0aGlzLmV4cGxhbmF0aW9ufWA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLnJlYXNvbjtcbiAgICB9XG4gIH1cbn07XG52YXIgWm9uZSA9IGNsYXNzIHtcbiAgZ2V0IHR5cGUoKSB7XG4gICAgdGhyb3cgbmV3IFpvbmVJc0Fic3RyYWN0RXJyb3IoKTtcbiAgfVxuICBnZXQgbmFtZSgpIHtcbiAgICB0aHJvdyBuZXcgWm9uZUlzQWJzdHJhY3RFcnJvcigpO1xuICB9XG4gIGdldCBpYW5hTmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5uYW1lO1xuICB9XG4gIGdldCBpc1VuaXZlcnNhbCgpIHtcbiAgICB0aHJvdyBuZXcgWm9uZUlzQWJzdHJhY3RFcnJvcigpO1xuICB9XG4gIG9mZnNldE5hbWUodHMsIG9wdHMpIHtcbiAgICB0aHJvdyBuZXcgWm9uZUlzQWJzdHJhY3RFcnJvcigpO1xuICB9XG4gIGZvcm1hdE9mZnNldCh0cywgZm9ybWF0KSB7XG4gICAgdGhyb3cgbmV3IFpvbmVJc0Fic3RyYWN0RXJyb3IoKTtcbiAgfVxuICBvZmZzZXQodHMpIHtcbiAgICB0aHJvdyBuZXcgWm9uZUlzQWJzdHJhY3RFcnJvcigpO1xuICB9XG4gIGVxdWFscyhvdGhlclpvbmUpIHtcbiAgICB0aHJvdyBuZXcgWm9uZUlzQWJzdHJhY3RFcnJvcigpO1xuICB9XG4gIGdldCBpc1ZhbGlkKCkge1xuICAgIHRocm93IG5ldyBab25lSXNBYnN0cmFjdEVycm9yKCk7XG4gIH1cbn07XG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhciBTeXN0ZW1ab25lID0gY2xhc3MgZXh0ZW5kcyBab25lIHtcbiAgc3RhdGljIGdldCBpbnN0YW5jZSgpIHtcbiAgICBpZiAoc2luZ2xldG9uID09PSBudWxsKSB7XG4gICAgICBzaW5nbGV0b24gPSBuZXcgU3lzdGVtWm9uZSgpO1xuICAgIH1cbiAgICByZXR1cm4gc2luZ2xldG9uO1xuICB9XG4gIGdldCB0eXBlKCkge1xuICAgIHJldHVybiBcInN5c3RlbVwiO1xuICB9XG4gIGdldCBuYW1lKCkge1xuICAgIHJldHVybiBuZXcgSW50bC5EYXRlVGltZUZvcm1hdCgpLnJlc29sdmVkT3B0aW9ucygpLnRpbWVab25lO1xuICB9XG4gIGdldCBpc1VuaXZlcnNhbCgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgb2Zmc2V0TmFtZSh0cywge2Zvcm1hdCwgbG9jYWxlfSkge1xuICAgIHJldHVybiBwYXJzZVpvbmVJbmZvKHRzLCBmb3JtYXQsIGxvY2FsZSk7XG4gIH1cbiAgZm9ybWF0T2Zmc2V0KHRzLCBmb3JtYXQpIHtcbiAgICByZXR1cm4gZm9ybWF0T2Zmc2V0KHRoaXMub2Zmc2V0KHRzKSwgZm9ybWF0KTtcbiAgfVxuICBvZmZzZXQodHMpIHtcbiAgICByZXR1cm4gLW5ldyBEYXRlKHRzKS5nZXRUaW1lem9uZU9mZnNldCgpO1xuICB9XG4gIGVxdWFscyhvdGhlclpvbmUpIHtcbiAgICByZXR1cm4gb3RoZXJab25lLnR5cGUgPT09IFwic3lzdGVtXCI7XG4gIH1cbiAgZ2V0IGlzVmFsaWQoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG52YXIgZHRmQ2FjaGUgPSB7fTtcbmZ1bmN0aW9uIG1ha2VEVEYoem9uZSkge1xuICBpZiAoIWR0ZkNhY2hlW3pvbmVdKSB7XG4gICAgZHRmQ2FjaGVbem9uZV0gPSBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChcImVuLVVTXCIsIHtcbiAgICAgIGhvdXIxMjogZmFsc2UsXG4gICAgICB0aW1lWm9uZTogem9uZSxcbiAgICAgIHllYXI6IFwibnVtZXJpY1wiLFxuICAgICAgbW9udGg6IFwiMi1kaWdpdFwiLFxuICAgICAgZGF5OiBcIjItZGlnaXRcIixcbiAgICAgIGhvdXI6IFwiMi1kaWdpdFwiLFxuICAgICAgbWludXRlOiBcIjItZGlnaXRcIixcbiAgICAgIHNlY29uZDogXCIyLWRpZ2l0XCIsXG4gICAgICBlcmE6IFwic2hvcnRcIlxuICAgIH0pO1xuICB9XG4gIHJldHVybiBkdGZDYWNoZVt6b25lXTtcbn1cbnZhciB0eXBlVG9Qb3MgPSB7XG4gIHllYXI6IDAsXG4gIG1vbnRoOiAxLFxuICBkYXk6IDIsXG4gIGVyYTogMyxcbiAgaG91cjogNCxcbiAgbWludXRlOiA1LFxuICBzZWNvbmQ6IDZcbn07XG5mdW5jdGlvbiBoYWNreU9mZnNldChkdGYsIGRhdGUpIHtcbiAgY29uc3QgZm9ybWF0dGVkID0gZHRmLmZvcm1hdChkYXRlKS5yZXBsYWNlKC9cXHUyMDBFL2csIFwiXCIpLCBwYXJzZWQgPSAvKFxcZCspXFwvKFxcZCspXFwvKFxcZCspIChBRHxCQyksPyAoXFxkKyk6KFxcZCspOihcXGQrKS8uZXhlYyhmb3JtYXR0ZWQpLCBbLCBmTW9udGgsIGZEYXksIGZZZWFyLCBmYWRPckJjLCBmSG91ciwgZk1pbnV0ZSwgZlNlY29uZF0gPSBwYXJzZWQ7XG4gIHJldHVybiBbZlllYXIsIGZNb250aCwgZkRheSwgZmFkT3JCYywgZkhvdXIsIGZNaW51dGUsIGZTZWNvbmRdO1xufVxuZnVuY3Rpb24gcGFydHNPZmZzZXQoZHRmLCBkYXRlKSB7XG4gIGNvbnN0IGZvcm1hdHRlZCA9IGR0Zi5mb3JtYXRUb1BhcnRzKGRhdGUpO1xuICBjb25zdCBmaWxsZWQgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBmb3JtYXR0ZWQubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCB7dHlwZSwgdmFsdWV9ID0gZm9ybWF0dGVkW2ldO1xuICAgIGNvbnN0IHBvcyA9IHR5cGVUb1Bvc1t0eXBlXTtcbiAgICBpZiAodHlwZSA9PT0gXCJlcmFcIikge1xuICAgICAgZmlsbGVkW3Bvc10gPSB2YWx1ZTtcbiAgICB9IGVsc2UgaWYgKCFpc1VuZGVmaW5lZChwb3MpKSB7XG4gICAgICBmaWxsZWRbcG9zXSA9IHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBmaWxsZWQ7XG59XG52YXIgaWFuYVpvbmVDYWNoZSA9IHt9O1xudmFyIElBTkFab25lID0gY2xhc3MgZXh0ZW5kcyBab25lIHtcbiAgc3RhdGljIGNyZWF0ZShuYW1lKSB7XG4gICAgaWYgKCFpYW5hWm9uZUNhY2hlW25hbWVdKSB7XG4gICAgICBpYW5hWm9uZUNhY2hlW25hbWVdID0gbmV3IElBTkFab25lKG5hbWUpO1xuICAgIH1cbiAgICByZXR1cm4gaWFuYVpvbmVDYWNoZVtuYW1lXTtcbiAgfVxuICBzdGF0aWMgcmVzZXRDYWNoZSgpIHtcbiAgICBpYW5hWm9uZUNhY2hlID0ge307XG4gICAgZHRmQ2FjaGUgPSB7fTtcbiAgfVxuICBzdGF0aWMgaXNWYWxpZFNwZWNpZmllcihzMikge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWRab25lKHMyKTtcbiAgfVxuICBzdGF0aWMgaXNWYWxpZFpvbmUoem9uZSkge1xuICAgIGlmICghem9uZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQoXCJlbi1VU1wiLCB7dGltZVpvbmU6IHpvbmV9KS5mb3JtYXQoKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgY29uc3RydWN0b3IobmFtZSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy56b25lTmFtZSA9IG5hbWU7XG4gICAgdGhpcy52YWxpZCA9IElBTkFab25lLmlzVmFsaWRab25lKG5hbWUpO1xuICB9XG4gIGdldCB0eXBlKCkge1xuICAgIHJldHVybiBcImlhbmFcIjtcbiAgfVxuICBnZXQgbmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy56b25lTmFtZTtcbiAgfVxuICBnZXQgaXNVbml2ZXJzYWwoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIG9mZnNldE5hbWUodHMsIHtmb3JtYXQsIGxvY2FsZX0pIHtcbiAgICByZXR1cm4gcGFyc2Vab25lSW5mbyh0cywgZm9ybWF0LCBsb2NhbGUsIHRoaXMubmFtZSk7XG4gIH1cbiAgZm9ybWF0T2Zmc2V0KHRzLCBmb3JtYXQpIHtcbiAgICByZXR1cm4gZm9ybWF0T2Zmc2V0KHRoaXMub2Zmc2V0KHRzKSwgZm9ybWF0KTtcbiAgfVxuICBvZmZzZXQodHMpIHtcbiAgICBjb25zdCBkYXRlID0gbmV3IERhdGUodHMpO1xuICAgIGlmIChpc05hTihkYXRlKSlcbiAgICAgIHJldHVybiBOYU47XG4gICAgY29uc3QgZHRmID0gbWFrZURURih0aGlzLm5hbWUpO1xuICAgIGxldCBbeWVhciwgbW9udGgsIGRheSwgYWRPckJjLCBob3VyLCBtaW51dGUsIHNlY29uZF0gPSBkdGYuZm9ybWF0VG9QYXJ0cyA/IHBhcnRzT2Zmc2V0KGR0ZiwgZGF0ZSkgOiBoYWNreU9mZnNldChkdGYsIGRhdGUpO1xuICAgIGlmIChhZE9yQmMgPT09IFwiQkNcIikge1xuICAgICAgeWVhciA9IC1NYXRoLmFicyh5ZWFyKSArIDE7XG4gICAgfVxuICAgIGNvbnN0IGFkanVzdGVkSG91ciA9IGhvdXIgPT09IDI0ID8gMCA6IGhvdXI7XG4gICAgY29uc3QgYXNVVEMgPSBvYmpUb0xvY2FsVFMoe1xuICAgICAgeWVhcixcbiAgICAgIG1vbnRoLFxuICAgICAgZGF5LFxuICAgICAgaG91cjogYWRqdXN0ZWRIb3VyLFxuICAgICAgbWludXRlLFxuICAgICAgc2Vjb25kLFxuICAgICAgbWlsbGlzZWNvbmQ6IDBcbiAgICB9KTtcbiAgICBsZXQgYXNUUyA9ICtkYXRlO1xuICAgIGNvbnN0IG92ZXIgPSBhc1RTICUgMWUzO1xuICAgIGFzVFMgLT0gb3ZlciA+PSAwID8gb3ZlciA6IDFlMyArIG92ZXI7XG4gICAgcmV0dXJuIChhc1VUQyAtIGFzVFMpIC8gKDYwICogMWUzKTtcbiAgfVxuICBlcXVhbHMob3RoZXJab25lKSB7XG4gICAgcmV0dXJuIG90aGVyWm9uZS50eXBlID09PSBcImlhbmFcIiAmJiBvdGhlclpvbmUubmFtZSA9PT0gdGhpcy5uYW1lO1xuICB9XG4gIGdldCBpc1ZhbGlkKCkge1xuICAgIHJldHVybiB0aGlzLnZhbGlkO1xuICB9XG59O1xudmFyIHNpbmdsZXRvbjIgPSBudWxsO1xudmFyIEZpeGVkT2Zmc2V0Wm9uZSA9IGNsYXNzIGV4dGVuZHMgWm9uZSB7XG4gIHN0YXRpYyBnZXQgdXRjSW5zdGFuY2UoKSB7XG4gICAgaWYgKHNpbmdsZXRvbjIgPT09IG51bGwpIHtcbiAgICAgIHNpbmdsZXRvbjIgPSBuZXcgRml4ZWRPZmZzZXRab25lKDApO1xuICAgIH1cbiAgICByZXR1cm4gc2luZ2xldG9uMjtcbiAgfVxuICBzdGF0aWMgaW5zdGFuY2Uob2Zmc2V0Mikge1xuICAgIHJldHVybiBvZmZzZXQyID09PSAwID8gRml4ZWRPZmZzZXRab25lLnV0Y0luc3RhbmNlIDogbmV3IEZpeGVkT2Zmc2V0Wm9uZShvZmZzZXQyKTtcbiAgfVxuICBzdGF0aWMgcGFyc2VTcGVjaWZpZXIoczIpIHtcbiAgICBpZiAoczIpIHtcbiAgICAgIGNvbnN0IHIgPSBzMi5tYXRjaCgvXnV0Yyg/OihbKy1dXFxkezEsMn0pKD86OihcXGR7Mn0pKT8pPyQvaSk7XG4gICAgICBpZiAocikge1xuICAgICAgICByZXR1cm4gbmV3IEZpeGVkT2Zmc2V0Wm9uZShzaWduZWRPZmZzZXQoclsxXSwgclsyXSkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdHJ1Y3RvcihvZmZzZXQyKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmZpeGVkID0gb2Zmc2V0MjtcbiAgfVxuICBnZXQgdHlwZSgpIHtcbiAgICByZXR1cm4gXCJmaXhlZFwiO1xuICB9XG4gIGdldCBuYW1lKCkge1xuICAgIHJldHVybiB0aGlzLmZpeGVkID09PSAwID8gXCJVVENcIiA6IGBVVEMke2Zvcm1hdE9mZnNldCh0aGlzLmZpeGVkLCBcIm5hcnJvd1wiKX1gO1xuICB9XG4gIGdldCBpYW5hTmFtZSgpIHtcbiAgICBpZiAodGhpcy5maXhlZCA9PT0gMCkge1xuICAgICAgcmV0dXJuIFwiRXRjL1VUQ1wiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYEV0Yy9HTVQke2Zvcm1hdE9mZnNldCgtdGhpcy5maXhlZCwgXCJuYXJyb3dcIil9YDtcbiAgICB9XG4gIH1cbiAgb2Zmc2V0TmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5uYW1lO1xuICB9XG4gIGZvcm1hdE9mZnNldCh0cywgZm9ybWF0KSB7XG4gICAgcmV0dXJuIGZvcm1hdE9mZnNldCh0aGlzLmZpeGVkLCBmb3JtYXQpO1xuICB9XG4gIGdldCBpc1VuaXZlcnNhbCgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBvZmZzZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZml4ZWQ7XG4gIH1cbiAgZXF1YWxzKG90aGVyWm9uZSkge1xuICAgIHJldHVybiBvdGhlclpvbmUudHlwZSA9PT0gXCJmaXhlZFwiICYmIG90aGVyWm9uZS5maXhlZCA9PT0gdGhpcy5maXhlZDtcbiAgfVxuICBnZXQgaXNWYWxpZCgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbnZhciBJbnZhbGlkWm9uZSA9IGNsYXNzIGV4dGVuZHMgWm9uZSB7XG4gIGNvbnN0cnVjdG9yKHpvbmVOYW1lKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnpvbmVOYW1lID0gem9uZU5hbWU7XG4gIH1cbiAgZ2V0IHR5cGUoKSB7XG4gICAgcmV0dXJuIFwiaW52YWxpZFwiO1xuICB9XG4gIGdldCBuYW1lKCkge1xuICAgIHJldHVybiB0aGlzLnpvbmVOYW1lO1xuICB9XG4gIGdldCBpc1VuaXZlcnNhbCgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgb2Zmc2V0TmFtZSgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBmb3JtYXRPZmZzZXQoKSB7XG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cbiAgb2Zmc2V0KCkge1xuICAgIHJldHVybiBOYU47XG4gIH1cbiAgZXF1YWxzKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBnZXQgaXNWYWxpZCgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5mdW5jdGlvbiBub3JtYWxpemVab25lKGlucHV0LCBkZWZhdWx0Wm9uZTIpIHtcbiAgaWYgKGlzVW5kZWZpbmVkKGlucHV0KSB8fCBpbnB1dCA9PT0gbnVsbCkge1xuICAgIHJldHVybiBkZWZhdWx0Wm9uZTI7XG4gIH0gZWxzZSBpZiAoaW5wdXQgaW5zdGFuY2VvZiBab25lKSB7XG4gICAgcmV0dXJuIGlucHV0O1xuICB9IGVsc2UgaWYgKGlzU3RyaW5nKGlucHV0KSkge1xuICAgIGNvbnN0IGxvd2VyZWQgPSBpbnB1dC50b0xvd2VyQ2FzZSgpO1xuICAgIGlmIChsb3dlcmVkID09PSBcImRlZmF1bHRcIilcbiAgICAgIHJldHVybiBkZWZhdWx0Wm9uZTI7XG4gICAgZWxzZSBpZiAobG93ZXJlZCA9PT0gXCJsb2NhbFwiIHx8IGxvd2VyZWQgPT09IFwic3lzdGVtXCIpXG4gICAgICByZXR1cm4gU3lzdGVtWm9uZS5pbnN0YW5jZTtcbiAgICBlbHNlIGlmIChsb3dlcmVkID09PSBcInV0Y1wiIHx8IGxvd2VyZWQgPT09IFwiZ210XCIpXG4gICAgICByZXR1cm4gRml4ZWRPZmZzZXRab25lLnV0Y0luc3RhbmNlO1xuICAgIGVsc2VcbiAgICAgIHJldHVybiBGaXhlZE9mZnNldFpvbmUucGFyc2VTcGVjaWZpZXIobG93ZXJlZCkgfHwgSUFOQVpvbmUuY3JlYXRlKGlucHV0KTtcbiAgfSBlbHNlIGlmIChpc051bWJlcihpbnB1dCkpIHtcbiAgICByZXR1cm4gRml4ZWRPZmZzZXRab25lLmluc3RhbmNlKGlucHV0KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09IFwib2JqZWN0XCIgJiYgaW5wdXQub2Zmc2V0ICYmIHR5cGVvZiBpbnB1dC5vZmZzZXQgPT09IFwibnVtYmVyXCIpIHtcbiAgICByZXR1cm4gaW5wdXQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBJbnZhbGlkWm9uZShpbnB1dCk7XG4gIH1cbn1cbnZhciBub3cgPSAoKSA9PiBEYXRlLm5vdygpO1xudmFyIGRlZmF1bHRab25lID0gXCJzeXN0ZW1cIjtcbnZhciBkZWZhdWx0TG9jYWxlID0gbnVsbDtcbnZhciBkZWZhdWx0TnVtYmVyaW5nU3lzdGVtID0gbnVsbDtcbnZhciBkZWZhdWx0T3V0cHV0Q2FsZW5kYXIgPSBudWxsO1xudmFyIHRocm93T25JbnZhbGlkO1xudmFyIFNldHRpbmdzID0gY2xhc3Mge1xuICBzdGF0aWMgZ2V0IG5vdygpIHtcbiAgICByZXR1cm4gbm93O1xuICB9XG4gIHN0YXRpYyBzZXQgbm93KG4yKSB7XG4gICAgbm93ID0gbjI7XG4gIH1cbiAgc3RhdGljIHNldCBkZWZhdWx0Wm9uZSh6b25lKSB7XG4gICAgZGVmYXVsdFpvbmUgPSB6b25lO1xuICB9XG4gIHN0YXRpYyBnZXQgZGVmYXVsdFpvbmUoKSB7XG4gICAgcmV0dXJuIG5vcm1hbGl6ZVpvbmUoZGVmYXVsdFpvbmUsIFN5c3RlbVpvbmUuaW5zdGFuY2UpO1xuICB9XG4gIHN0YXRpYyBnZXQgZGVmYXVsdExvY2FsZSgpIHtcbiAgICByZXR1cm4gZGVmYXVsdExvY2FsZTtcbiAgfVxuICBzdGF0aWMgc2V0IGRlZmF1bHRMb2NhbGUobG9jYWxlKSB7XG4gICAgZGVmYXVsdExvY2FsZSA9IGxvY2FsZTtcbiAgfVxuICBzdGF0aWMgZ2V0IGRlZmF1bHROdW1iZXJpbmdTeXN0ZW0oKSB7XG4gICAgcmV0dXJuIGRlZmF1bHROdW1iZXJpbmdTeXN0ZW07XG4gIH1cbiAgc3RhdGljIHNldCBkZWZhdWx0TnVtYmVyaW5nU3lzdGVtKG51bWJlcmluZ1N5c3RlbSkge1xuICAgIGRlZmF1bHROdW1iZXJpbmdTeXN0ZW0gPSBudW1iZXJpbmdTeXN0ZW07XG4gIH1cbiAgc3RhdGljIGdldCBkZWZhdWx0T3V0cHV0Q2FsZW5kYXIoKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRPdXRwdXRDYWxlbmRhcjtcbiAgfVxuICBzdGF0aWMgc2V0IGRlZmF1bHRPdXRwdXRDYWxlbmRhcihvdXRwdXRDYWxlbmRhcikge1xuICAgIGRlZmF1bHRPdXRwdXRDYWxlbmRhciA9IG91dHB1dENhbGVuZGFyO1xuICB9XG4gIHN0YXRpYyBnZXQgdGhyb3dPbkludmFsaWQoKSB7XG4gICAgcmV0dXJuIHRocm93T25JbnZhbGlkO1xuICB9XG4gIHN0YXRpYyBzZXQgdGhyb3dPbkludmFsaWQodCkge1xuICAgIHRocm93T25JbnZhbGlkID0gdDtcbiAgfVxuICBzdGF0aWMgcmVzZXRDYWNoZXMoKSB7XG4gICAgTG9jYWxlLnJlc2V0Q2FjaGUoKTtcbiAgICBJQU5BWm9uZS5yZXNldENhY2hlKCk7XG4gIH1cbn07XG52YXIgaW50bExGQ2FjaGUgPSB7fTtcbmZ1bmN0aW9uIGdldENhY2hlZExGKGxvY1N0cmluZywgb3B0cyA9IHt9KSB7XG4gIGNvbnN0IGtleSA9IEpTT04uc3RyaW5naWZ5KFtsb2NTdHJpbmcsIG9wdHNdKTtcbiAgbGV0IGR0ZiA9IGludGxMRkNhY2hlW2tleV07XG4gIGlmICghZHRmKSB7XG4gICAgZHRmID0gbmV3IEludGwuTGlzdEZvcm1hdChsb2NTdHJpbmcsIG9wdHMpO1xuICAgIGludGxMRkNhY2hlW2tleV0gPSBkdGY7XG4gIH1cbiAgcmV0dXJuIGR0Zjtcbn1cbnZhciBpbnRsRFRDYWNoZSA9IHt9O1xuZnVuY3Rpb24gZ2V0Q2FjaGVkRFRGKGxvY1N0cmluZywgb3B0cyA9IHt9KSB7XG4gIGNvbnN0IGtleSA9IEpTT04uc3RyaW5naWZ5KFtsb2NTdHJpbmcsIG9wdHNdKTtcbiAgbGV0IGR0ZiA9IGludGxEVENhY2hlW2tleV07XG4gIGlmICghZHRmKSB7XG4gICAgZHRmID0gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQobG9jU3RyaW5nLCBvcHRzKTtcbiAgICBpbnRsRFRDYWNoZVtrZXldID0gZHRmO1xuICB9XG4gIHJldHVybiBkdGY7XG59XG52YXIgaW50bE51bUNhY2hlID0ge307XG5mdW5jdGlvbiBnZXRDYWNoZWRJTkYobG9jU3RyaW5nLCBvcHRzID0ge30pIHtcbiAgY29uc3Qga2V5ID0gSlNPTi5zdHJpbmdpZnkoW2xvY1N0cmluZywgb3B0c10pO1xuICBsZXQgaW5mID0gaW50bE51bUNhY2hlW2tleV07XG4gIGlmICghaW5mKSB7XG4gICAgaW5mID0gbmV3IEludGwuTnVtYmVyRm9ybWF0KGxvY1N0cmluZywgb3B0cyk7XG4gICAgaW50bE51bUNhY2hlW2tleV0gPSBpbmY7XG4gIH1cbiAgcmV0dXJuIGluZjtcbn1cbnZhciBpbnRsUmVsQ2FjaGUgPSB7fTtcbmZ1bmN0aW9uIGdldENhY2hlZFJURihsb2NTdHJpbmcsIG9wdHMgPSB7fSkge1xuICBjb25zdCB7YmFzZSwgLi4uY2FjaGVLZXlPcHRzfSA9IG9wdHM7XG4gIGNvbnN0IGtleSA9IEpTT04uc3RyaW5naWZ5KFtsb2NTdHJpbmcsIGNhY2hlS2V5T3B0c10pO1xuICBsZXQgaW5mID0gaW50bFJlbENhY2hlW2tleV07XG4gIGlmICghaW5mKSB7XG4gICAgaW5mID0gbmV3IEludGwuUmVsYXRpdmVUaW1lRm9ybWF0KGxvY1N0cmluZywgb3B0cyk7XG4gICAgaW50bFJlbENhY2hlW2tleV0gPSBpbmY7XG4gIH1cbiAgcmV0dXJuIGluZjtcbn1cbnZhciBzeXNMb2NhbGVDYWNoZSA9IG51bGw7XG5mdW5jdGlvbiBzeXN0ZW1Mb2NhbGUoKSB7XG4gIGlmIChzeXNMb2NhbGVDYWNoZSkge1xuICAgIHJldHVybiBzeXNMb2NhbGVDYWNoZTtcbiAgfSBlbHNlIHtcbiAgICBzeXNMb2NhbGVDYWNoZSA9IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KCkucmVzb2x2ZWRPcHRpb25zKCkubG9jYWxlO1xuICAgIHJldHVybiBzeXNMb2NhbGVDYWNoZTtcbiAgfVxufVxuZnVuY3Rpb24gcGFyc2VMb2NhbGVTdHJpbmcobG9jYWxlU3RyKSB7XG4gIGNvbnN0IHVJbmRleCA9IGxvY2FsZVN0ci5pbmRleE9mKFwiLXUtXCIpO1xuICBpZiAodUluZGV4ID09PSAtMSkge1xuICAgIHJldHVybiBbbG9jYWxlU3RyXTtcbiAgfSBlbHNlIHtcbiAgICBsZXQgb3B0aW9ucztcbiAgICBjb25zdCBzbWFsbGVyID0gbG9jYWxlU3RyLnN1YnN0cmluZygwLCB1SW5kZXgpO1xuICAgIHRyeSB7XG4gICAgICBvcHRpb25zID0gZ2V0Q2FjaGVkRFRGKGxvY2FsZVN0cikucmVzb2x2ZWRPcHRpb25zKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgb3B0aW9ucyA9IGdldENhY2hlZERURihzbWFsbGVyKS5yZXNvbHZlZE9wdGlvbnMoKTtcbiAgICB9XG4gICAgY29uc3Qge251bWJlcmluZ1N5c3RlbSwgY2FsZW5kYXJ9ID0gb3B0aW9ucztcbiAgICByZXR1cm4gW3NtYWxsZXIsIG51bWJlcmluZ1N5c3RlbSwgY2FsZW5kYXJdO1xuICB9XG59XG5mdW5jdGlvbiBpbnRsQ29uZmlnU3RyaW5nKGxvY2FsZVN0ciwgbnVtYmVyaW5nU3lzdGVtLCBvdXRwdXRDYWxlbmRhcikge1xuICBpZiAob3V0cHV0Q2FsZW5kYXIgfHwgbnVtYmVyaW5nU3lzdGVtKSB7XG4gICAgbG9jYWxlU3RyICs9IFwiLXVcIjtcbiAgICBpZiAob3V0cHV0Q2FsZW5kYXIpIHtcbiAgICAgIGxvY2FsZVN0ciArPSBgLWNhLSR7b3V0cHV0Q2FsZW5kYXJ9YDtcbiAgICB9XG4gICAgaWYgKG51bWJlcmluZ1N5c3RlbSkge1xuICAgICAgbG9jYWxlU3RyICs9IGAtbnUtJHtudW1iZXJpbmdTeXN0ZW19YDtcbiAgICB9XG4gICAgcmV0dXJuIGxvY2FsZVN0cjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbG9jYWxlU3RyO1xuICB9XG59XG5mdW5jdGlvbiBtYXBNb250aHMoZikge1xuICBjb25zdCBtcyA9IFtdO1xuICBmb3IgKGxldCBpID0gMTsgaSA8PSAxMjsgaSsrKSB7XG4gICAgY29uc3QgZHQgPSBEYXRlVGltZS51dGMoMjAxNiwgaSwgMSk7XG4gICAgbXMucHVzaChmKGR0KSk7XG4gIH1cbiAgcmV0dXJuIG1zO1xufVxuZnVuY3Rpb24gbWFwV2Vla2RheXMoZikge1xuICBjb25zdCBtcyA9IFtdO1xuICBmb3IgKGxldCBpID0gMTsgaSA8PSA3OyBpKyspIHtcbiAgICBjb25zdCBkdCA9IERhdGVUaW1lLnV0YygyMDE2LCAxMSwgMTMgKyBpKTtcbiAgICBtcy5wdXNoKGYoZHQpKTtcbiAgfVxuICByZXR1cm4gbXM7XG59XG5mdW5jdGlvbiBsaXN0U3R1ZmYobG9jLCBsZW5ndGgsIGRlZmF1bHRPSywgZW5nbGlzaEZuLCBpbnRsRm4pIHtcbiAgY29uc3QgbW9kZSA9IGxvYy5saXN0aW5nTW9kZShkZWZhdWx0T0spO1xuICBpZiAobW9kZSA9PT0gXCJlcnJvclwiKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0gZWxzZSBpZiAobW9kZSA9PT0gXCJlblwiKSB7XG4gICAgcmV0dXJuIGVuZ2xpc2hGbihsZW5ndGgpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBpbnRsRm4obGVuZ3RoKTtcbiAgfVxufVxuZnVuY3Rpb24gc3VwcG9ydHNGYXN0TnVtYmVycyhsb2MpIHtcbiAgaWYgKGxvYy5udW1iZXJpbmdTeXN0ZW0gJiYgbG9jLm51bWJlcmluZ1N5c3RlbSAhPT0gXCJsYXRuXCIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGxvYy5udW1iZXJpbmdTeXN0ZW0gPT09IFwibGF0blwiIHx8ICFsb2MubG9jYWxlIHx8IGxvYy5sb2NhbGUuc3RhcnRzV2l0aChcImVuXCIpIHx8IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KGxvYy5pbnRsKS5yZXNvbHZlZE9wdGlvbnMoKS5udW1iZXJpbmdTeXN0ZW0gPT09IFwibGF0blwiO1xuICB9XG59XG52YXIgUG9seU51bWJlckZvcm1hdHRlciA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoaW50bCwgZm9yY2VTaW1wbGUsIG9wdHMpIHtcbiAgICB0aGlzLnBhZFRvID0gb3B0cy5wYWRUbyB8fCAwO1xuICAgIHRoaXMuZmxvb3IgPSBvcHRzLmZsb29yIHx8IGZhbHNlO1xuICAgIGNvbnN0IHtwYWRUbywgZmxvb3IsIC4uLm90aGVyT3B0c30gPSBvcHRzO1xuICAgIGlmICghZm9yY2VTaW1wbGUgfHwgT2JqZWN0LmtleXMob3RoZXJPcHRzKS5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBpbnRsT3B0cyA9IHt1c2VHcm91cGluZzogZmFsc2UsIC4uLm9wdHN9O1xuICAgICAgaWYgKG9wdHMucGFkVG8gPiAwKVxuICAgICAgICBpbnRsT3B0cy5taW5pbXVtSW50ZWdlckRpZ2l0cyA9IG9wdHMucGFkVG87XG4gICAgICB0aGlzLmluZiA9IGdldENhY2hlZElORihpbnRsLCBpbnRsT3B0cyk7XG4gICAgfVxuICB9XG4gIGZvcm1hdChpKSB7XG4gICAgaWYgKHRoaXMuaW5mKSB7XG4gICAgICBjb25zdCBmaXhlZCA9IHRoaXMuZmxvb3IgPyBNYXRoLmZsb29yKGkpIDogaTtcbiAgICAgIHJldHVybiB0aGlzLmluZi5mb3JtYXQoZml4ZWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBmaXhlZCA9IHRoaXMuZmxvb3IgPyBNYXRoLmZsb29yKGkpIDogcm91bmRUbyhpLCAzKTtcbiAgICAgIHJldHVybiBwYWRTdGFydChmaXhlZCwgdGhpcy5wYWRUbyk7XG4gICAgfVxuICB9XG59O1xudmFyIFBvbHlEYXRlRm9ybWF0dGVyID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihkdCwgaW50bCwgb3B0cykge1xuICAgIHRoaXMub3B0cyA9IG9wdHM7XG4gICAgbGV0IHo7XG4gICAgaWYgKGR0LnpvbmUuaXNVbml2ZXJzYWwpIHtcbiAgICAgIGNvbnN0IGdtdE9mZnNldCA9IC0xICogKGR0Lm9mZnNldCAvIDYwKTtcbiAgICAgIGNvbnN0IG9mZnNldFogPSBnbXRPZmZzZXQgPj0gMCA/IGBFdGMvR01UKyR7Z210T2Zmc2V0fWAgOiBgRXRjL0dNVCR7Z210T2Zmc2V0fWA7XG4gICAgICBpZiAoZHQub2Zmc2V0ICE9PSAwICYmIElBTkFab25lLmNyZWF0ZShvZmZzZXRaKS52YWxpZCkge1xuICAgICAgICB6ID0gb2Zmc2V0WjtcbiAgICAgICAgdGhpcy5kdCA9IGR0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeiA9IFwiVVRDXCI7XG4gICAgICAgIGlmIChvcHRzLnRpbWVab25lTmFtZSkge1xuICAgICAgICAgIHRoaXMuZHQgPSBkdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmR0ID0gZHQub2Zmc2V0ID09PSAwID8gZHQgOiBEYXRlVGltZS5mcm9tTWlsbGlzKGR0LnRzICsgZHQub2Zmc2V0ICogNjAgKiAxZTMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChkdC56b25lLnR5cGUgPT09IFwic3lzdGVtXCIpIHtcbiAgICAgIHRoaXMuZHQgPSBkdDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kdCA9IGR0O1xuICAgICAgeiA9IGR0LnpvbmUubmFtZTtcbiAgICB9XG4gICAgY29uc3QgaW50bE9wdHMgPSB7Li4udGhpcy5vcHRzfTtcbiAgICBpZiAoeikge1xuICAgICAgaW50bE9wdHMudGltZVpvbmUgPSB6O1xuICAgIH1cbiAgICB0aGlzLmR0ZiA9IGdldENhY2hlZERURihpbnRsLCBpbnRsT3B0cyk7XG4gIH1cbiAgZm9ybWF0KCkge1xuICAgIHJldHVybiB0aGlzLmR0Zi5mb3JtYXQodGhpcy5kdC50b0pTRGF0ZSgpKTtcbiAgfVxuICBmb3JtYXRUb1BhcnRzKCkge1xuICAgIHJldHVybiB0aGlzLmR0Zi5mb3JtYXRUb1BhcnRzKHRoaXMuZHQudG9KU0RhdGUoKSk7XG4gIH1cbiAgcmVzb2x2ZWRPcHRpb25zKCkge1xuICAgIHJldHVybiB0aGlzLmR0Zi5yZXNvbHZlZE9wdGlvbnMoKTtcbiAgfVxufTtcbnZhciBQb2x5UmVsRm9ybWF0dGVyID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihpbnRsLCBpc0VuZ2xpc2gsIG9wdHMpIHtcbiAgICB0aGlzLm9wdHMgPSB7c3R5bGU6IFwibG9uZ1wiLCAuLi5vcHRzfTtcbiAgICBpZiAoIWlzRW5nbGlzaCAmJiBoYXNSZWxhdGl2ZSgpKSB7XG4gICAgICB0aGlzLnJ0ZiA9IGdldENhY2hlZFJURihpbnRsLCBvcHRzKTtcbiAgICB9XG4gIH1cbiAgZm9ybWF0KGNvdW50LCB1bml0KSB7XG4gICAgaWYgKHRoaXMucnRmKSB7XG4gICAgICByZXR1cm4gdGhpcy5ydGYuZm9ybWF0KGNvdW50LCB1bml0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZvcm1hdFJlbGF0aXZlVGltZSh1bml0LCBjb3VudCwgdGhpcy5vcHRzLm51bWVyaWMsIHRoaXMub3B0cy5zdHlsZSAhPT0gXCJsb25nXCIpO1xuICAgIH1cbiAgfVxuICBmb3JtYXRUb1BhcnRzKGNvdW50LCB1bml0KSB7XG4gICAgaWYgKHRoaXMucnRmKSB7XG4gICAgICByZXR1cm4gdGhpcy5ydGYuZm9ybWF0VG9QYXJ0cyhjb3VudCwgdW5pdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gIH1cbn07XG52YXIgTG9jYWxlID0gY2xhc3Mge1xuICBzdGF0aWMgZnJvbU9wdHMob3B0cykge1xuICAgIHJldHVybiBMb2NhbGUuY3JlYXRlKG9wdHMubG9jYWxlLCBvcHRzLm51bWJlcmluZ1N5c3RlbSwgb3B0cy5vdXRwdXRDYWxlbmRhciwgb3B0cy5kZWZhdWx0VG9FTik7XG4gIH1cbiAgc3RhdGljIGNyZWF0ZShsb2NhbGUsIG51bWJlcmluZ1N5c3RlbSwgb3V0cHV0Q2FsZW5kYXIsIGRlZmF1bHRUb0VOID0gZmFsc2UpIHtcbiAgICBjb25zdCBzcGVjaWZpZWRMb2NhbGUgPSBsb2NhbGUgfHwgU2V0dGluZ3MuZGVmYXVsdExvY2FsZTtcbiAgICBjb25zdCBsb2NhbGVSID0gc3BlY2lmaWVkTG9jYWxlIHx8IChkZWZhdWx0VG9FTiA/IFwiZW4tVVNcIiA6IHN5c3RlbUxvY2FsZSgpKTtcbiAgICBjb25zdCBudW1iZXJpbmdTeXN0ZW1SID0gbnVtYmVyaW5nU3lzdGVtIHx8IFNldHRpbmdzLmRlZmF1bHROdW1iZXJpbmdTeXN0ZW07XG4gICAgY29uc3Qgb3V0cHV0Q2FsZW5kYXJSID0gb3V0cHV0Q2FsZW5kYXIgfHwgU2V0dGluZ3MuZGVmYXVsdE91dHB1dENhbGVuZGFyO1xuICAgIHJldHVybiBuZXcgTG9jYWxlKGxvY2FsZVIsIG51bWJlcmluZ1N5c3RlbVIsIG91dHB1dENhbGVuZGFyUiwgc3BlY2lmaWVkTG9jYWxlKTtcbiAgfVxuICBzdGF0aWMgcmVzZXRDYWNoZSgpIHtcbiAgICBzeXNMb2NhbGVDYWNoZSA9IG51bGw7XG4gICAgaW50bERUQ2FjaGUgPSB7fTtcbiAgICBpbnRsTnVtQ2FjaGUgPSB7fTtcbiAgICBpbnRsUmVsQ2FjaGUgPSB7fTtcbiAgfVxuICBzdGF0aWMgZnJvbU9iamVjdCh7bG9jYWxlLCBudW1iZXJpbmdTeXN0ZW0sIG91dHB1dENhbGVuZGFyfSA9IHt9KSB7XG4gICAgcmV0dXJuIExvY2FsZS5jcmVhdGUobG9jYWxlLCBudW1iZXJpbmdTeXN0ZW0sIG91dHB1dENhbGVuZGFyKTtcbiAgfVxuICBjb25zdHJ1Y3Rvcihsb2NhbGUsIG51bWJlcmluZywgb3V0cHV0Q2FsZW5kYXIsIHNwZWNpZmllZExvY2FsZSkge1xuICAgIGNvbnN0IFtwYXJzZWRMb2NhbGUsIHBhcnNlZE51bWJlcmluZ1N5c3RlbSwgcGFyc2VkT3V0cHV0Q2FsZW5kYXJdID0gcGFyc2VMb2NhbGVTdHJpbmcobG9jYWxlKTtcbiAgICB0aGlzLmxvY2FsZSA9IHBhcnNlZExvY2FsZTtcbiAgICB0aGlzLm51bWJlcmluZ1N5c3RlbSA9IG51bWJlcmluZyB8fCBwYXJzZWROdW1iZXJpbmdTeXN0ZW0gfHwgbnVsbDtcbiAgICB0aGlzLm91dHB1dENhbGVuZGFyID0gb3V0cHV0Q2FsZW5kYXIgfHwgcGFyc2VkT3V0cHV0Q2FsZW5kYXIgfHwgbnVsbDtcbiAgICB0aGlzLmludGwgPSBpbnRsQ29uZmlnU3RyaW5nKHRoaXMubG9jYWxlLCB0aGlzLm51bWJlcmluZ1N5c3RlbSwgdGhpcy5vdXRwdXRDYWxlbmRhcik7XG4gICAgdGhpcy53ZWVrZGF5c0NhY2hlID0ge2Zvcm1hdDoge30sIHN0YW5kYWxvbmU6IHt9fTtcbiAgICB0aGlzLm1vbnRoc0NhY2hlID0ge2Zvcm1hdDoge30sIHN0YW5kYWxvbmU6IHt9fTtcbiAgICB0aGlzLm1lcmlkaWVtQ2FjaGUgPSBudWxsO1xuICAgIHRoaXMuZXJhQ2FjaGUgPSB7fTtcbiAgICB0aGlzLnNwZWNpZmllZExvY2FsZSA9IHNwZWNpZmllZExvY2FsZTtcbiAgICB0aGlzLmZhc3ROdW1iZXJzQ2FjaGVkID0gbnVsbDtcbiAgfVxuICBnZXQgZmFzdE51bWJlcnMoKSB7XG4gICAgaWYgKHRoaXMuZmFzdE51bWJlcnNDYWNoZWQgPT0gbnVsbCkge1xuICAgICAgdGhpcy5mYXN0TnVtYmVyc0NhY2hlZCA9IHN1cHBvcnRzRmFzdE51bWJlcnModGhpcyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmZhc3ROdW1iZXJzQ2FjaGVkO1xuICB9XG4gIGxpc3RpbmdNb2RlKCkge1xuICAgIGNvbnN0IGlzQWN0dWFsbHlFbiA9IHRoaXMuaXNFbmdsaXNoKCk7XG4gICAgY29uc3QgaGFzTm9XZWlyZG5lc3MgPSAodGhpcy5udW1iZXJpbmdTeXN0ZW0gPT09IG51bGwgfHwgdGhpcy5udW1iZXJpbmdTeXN0ZW0gPT09IFwibGF0blwiKSAmJiAodGhpcy5vdXRwdXRDYWxlbmRhciA9PT0gbnVsbCB8fCB0aGlzLm91dHB1dENhbGVuZGFyID09PSBcImdyZWdvcnlcIik7XG4gICAgcmV0dXJuIGlzQWN0dWFsbHlFbiAmJiBoYXNOb1dlaXJkbmVzcyA/IFwiZW5cIiA6IFwiaW50bFwiO1xuICB9XG4gIGNsb25lKGFsdHMpIHtcbiAgICBpZiAoIWFsdHMgfHwgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoYWx0cykubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIExvY2FsZS5jcmVhdGUoYWx0cy5sb2NhbGUgfHwgdGhpcy5zcGVjaWZpZWRMb2NhbGUsIGFsdHMubnVtYmVyaW5nU3lzdGVtIHx8IHRoaXMubnVtYmVyaW5nU3lzdGVtLCBhbHRzLm91dHB1dENhbGVuZGFyIHx8IHRoaXMub3V0cHV0Q2FsZW5kYXIsIGFsdHMuZGVmYXVsdFRvRU4gfHwgZmFsc2UpO1xuICAgIH1cbiAgfVxuICByZWRlZmF1bHRUb0VOKGFsdHMgPSB7fSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKHsuLi5hbHRzLCBkZWZhdWx0VG9FTjogdHJ1ZX0pO1xuICB9XG4gIHJlZGVmYXVsdFRvU3lzdGVtKGFsdHMgPSB7fSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKHsuLi5hbHRzLCBkZWZhdWx0VG9FTjogZmFsc2V9KTtcbiAgfVxuICBtb250aHMobGVuZ3RoLCBmb3JtYXQgPSBmYWxzZSwgZGVmYXVsdE9LID0gdHJ1ZSkge1xuICAgIHJldHVybiBsaXN0U3R1ZmYodGhpcywgbGVuZ3RoLCBkZWZhdWx0T0ssIG1vbnRocywgKCkgPT4ge1xuICAgICAgY29uc3QgaW50bCA9IGZvcm1hdCA/IHttb250aDogbGVuZ3RoLCBkYXk6IFwibnVtZXJpY1wifSA6IHttb250aDogbGVuZ3RofSwgZm9ybWF0U3RyID0gZm9ybWF0ID8gXCJmb3JtYXRcIiA6IFwic3RhbmRhbG9uZVwiO1xuICAgICAgaWYgKCF0aGlzLm1vbnRoc0NhY2hlW2Zvcm1hdFN0cl1bbGVuZ3RoXSkge1xuICAgICAgICB0aGlzLm1vbnRoc0NhY2hlW2Zvcm1hdFN0cl1bbGVuZ3RoXSA9IG1hcE1vbnRocygoZHQpID0+IHRoaXMuZXh0cmFjdChkdCwgaW50bCwgXCJtb250aFwiKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5tb250aHNDYWNoZVtmb3JtYXRTdHJdW2xlbmd0aF07XG4gICAgfSk7XG4gIH1cbiAgd2Vla2RheXMobGVuZ3RoLCBmb3JtYXQgPSBmYWxzZSwgZGVmYXVsdE9LID0gdHJ1ZSkge1xuICAgIHJldHVybiBsaXN0U3R1ZmYodGhpcywgbGVuZ3RoLCBkZWZhdWx0T0ssIHdlZWtkYXlzLCAoKSA9PiB7XG4gICAgICBjb25zdCBpbnRsID0gZm9ybWF0ID8ge3dlZWtkYXk6IGxlbmd0aCwgeWVhcjogXCJudW1lcmljXCIsIG1vbnRoOiBcImxvbmdcIiwgZGF5OiBcIm51bWVyaWNcIn0gOiB7d2Vla2RheTogbGVuZ3RofSwgZm9ybWF0U3RyID0gZm9ybWF0ID8gXCJmb3JtYXRcIiA6IFwic3RhbmRhbG9uZVwiO1xuICAgICAgaWYgKCF0aGlzLndlZWtkYXlzQ2FjaGVbZm9ybWF0U3RyXVtsZW5ndGhdKSB7XG4gICAgICAgIHRoaXMud2Vla2RheXNDYWNoZVtmb3JtYXRTdHJdW2xlbmd0aF0gPSBtYXBXZWVrZGF5cygoZHQpID0+IHRoaXMuZXh0cmFjdChkdCwgaW50bCwgXCJ3ZWVrZGF5XCIpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLndlZWtkYXlzQ2FjaGVbZm9ybWF0U3RyXVtsZW5ndGhdO1xuICAgIH0pO1xuICB9XG4gIG1lcmlkaWVtcyhkZWZhdWx0T0sgPSB0cnVlKSB7XG4gICAgcmV0dXJuIGxpc3RTdHVmZih0aGlzLCB2b2lkIDAsIGRlZmF1bHRPSywgKCkgPT4gbWVyaWRpZW1zLCAoKSA9PiB7XG4gICAgICBpZiAoIXRoaXMubWVyaWRpZW1DYWNoZSkge1xuICAgICAgICBjb25zdCBpbnRsID0ge2hvdXI6IFwibnVtZXJpY1wiLCBob3VyQ3ljbGU6IFwiaDEyXCJ9O1xuICAgICAgICB0aGlzLm1lcmlkaWVtQ2FjaGUgPSBbRGF0ZVRpbWUudXRjKDIwMTYsIDExLCAxMywgOSksIERhdGVUaW1lLnV0YygyMDE2LCAxMSwgMTMsIDE5KV0ubWFwKChkdCkgPT4gdGhpcy5leHRyYWN0KGR0LCBpbnRsLCBcImRheXBlcmlvZFwiKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5tZXJpZGllbUNhY2hlO1xuICAgIH0pO1xuICB9XG4gIGVyYXMobGVuZ3RoLCBkZWZhdWx0T0sgPSB0cnVlKSB7XG4gICAgcmV0dXJuIGxpc3RTdHVmZih0aGlzLCBsZW5ndGgsIGRlZmF1bHRPSywgZXJhcywgKCkgPT4ge1xuICAgICAgY29uc3QgaW50bCA9IHtlcmE6IGxlbmd0aH07XG4gICAgICBpZiAoIXRoaXMuZXJhQ2FjaGVbbGVuZ3RoXSkge1xuICAgICAgICB0aGlzLmVyYUNhY2hlW2xlbmd0aF0gPSBbRGF0ZVRpbWUudXRjKC00MCwgMSwgMSksIERhdGVUaW1lLnV0YygyMDE3LCAxLCAxKV0ubWFwKChkdCkgPT4gdGhpcy5leHRyYWN0KGR0LCBpbnRsLCBcImVyYVwiKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5lcmFDYWNoZVtsZW5ndGhdO1xuICAgIH0pO1xuICB9XG4gIGV4dHJhY3QoZHQsIGludGxPcHRzLCBmaWVsZCkge1xuICAgIGNvbnN0IGRmID0gdGhpcy5kdEZvcm1hdHRlcihkdCwgaW50bE9wdHMpLCByZXN1bHRzID0gZGYuZm9ybWF0VG9QYXJ0cygpLCBtYXRjaGluZyA9IHJlc3VsdHMuZmluZCgobSkgPT4gbS50eXBlLnRvTG93ZXJDYXNlKCkgPT09IGZpZWxkKTtcbiAgICByZXR1cm4gbWF0Y2hpbmcgPyBtYXRjaGluZy52YWx1ZSA6IG51bGw7XG4gIH1cbiAgbnVtYmVyRm9ybWF0dGVyKG9wdHMgPSB7fSkge1xuICAgIHJldHVybiBuZXcgUG9seU51bWJlckZvcm1hdHRlcih0aGlzLmludGwsIG9wdHMuZm9yY2VTaW1wbGUgfHwgdGhpcy5mYXN0TnVtYmVycywgb3B0cyk7XG4gIH1cbiAgZHRGb3JtYXR0ZXIoZHQsIGludGxPcHRzID0ge30pIHtcbiAgICByZXR1cm4gbmV3IFBvbHlEYXRlRm9ybWF0dGVyKGR0LCB0aGlzLmludGwsIGludGxPcHRzKTtcbiAgfVxuICByZWxGb3JtYXR0ZXIob3B0cyA9IHt9KSB7XG4gICAgcmV0dXJuIG5ldyBQb2x5UmVsRm9ybWF0dGVyKHRoaXMuaW50bCwgdGhpcy5pc0VuZ2xpc2goKSwgb3B0cyk7XG4gIH1cbiAgbGlzdEZvcm1hdHRlcihvcHRzID0ge30pIHtcbiAgICByZXR1cm4gZ2V0Q2FjaGVkTEYodGhpcy5pbnRsLCBvcHRzKTtcbiAgfVxuICBpc0VuZ2xpc2goKSB7XG4gICAgcmV0dXJuIHRoaXMubG9jYWxlID09PSBcImVuXCIgfHwgdGhpcy5sb2NhbGUudG9Mb3dlckNhc2UoKSA9PT0gXCJlbi11c1wiIHx8IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KHRoaXMuaW50bCkucmVzb2x2ZWRPcHRpb25zKCkubG9jYWxlLnN0YXJ0c1dpdGgoXCJlbi11c1wiKTtcbiAgfVxuICBlcXVhbHMob3RoZXIpIHtcbiAgICByZXR1cm4gdGhpcy5sb2NhbGUgPT09IG90aGVyLmxvY2FsZSAmJiB0aGlzLm51bWJlcmluZ1N5c3RlbSA9PT0gb3RoZXIubnVtYmVyaW5nU3lzdGVtICYmIHRoaXMub3V0cHV0Q2FsZW5kYXIgPT09IG90aGVyLm91dHB1dENhbGVuZGFyO1xuICB9XG59O1xuZnVuY3Rpb24gY29tYmluZVJlZ2V4ZXMoLi4ucmVnZXhlcykge1xuICBjb25zdCBmdWxsID0gcmVnZXhlcy5yZWR1Y2UoKGYsIHIpID0+IGYgKyByLnNvdXJjZSwgXCJcIik7XG4gIHJldHVybiBSZWdFeHAoYF4ke2Z1bGx9JGApO1xufVxuZnVuY3Rpb24gY29tYmluZUV4dHJhY3RvcnMoLi4uZXh0cmFjdG9ycykge1xuICByZXR1cm4gKG0pID0+IGV4dHJhY3RvcnMucmVkdWNlKChbbWVyZ2VkVmFscywgbWVyZ2VkWm9uZSwgY3Vyc29yXSwgZXgpID0+IHtcbiAgICBjb25zdCBbdmFsLCB6b25lLCBuZXh0XSA9IGV4KG0sIGN1cnNvcik7XG4gICAgcmV0dXJuIFt7Li4ubWVyZ2VkVmFscywgLi4udmFsfSwgem9uZSB8fCBtZXJnZWRab25lLCBuZXh0XTtcbiAgfSwgW3t9LCBudWxsLCAxXSkuc2xpY2UoMCwgMik7XG59XG5mdW5jdGlvbiBwYXJzZShzMiwgLi4ucGF0dGVybnMpIHtcbiAgaWYgKHMyID09IG51bGwpIHtcbiAgICByZXR1cm4gW251bGwsIG51bGxdO1xuICB9XG4gIGZvciAoY29uc3QgW3JlZ2V4LCBleHRyYWN0b3JdIG9mIHBhdHRlcm5zKSB7XG4gICAgY29uc3QgbSA9IHJlZ2V4LmV4ZWMoczIpO1xuICAgIGlmIChtKSB7XG4gICAgICByZXR1cm4gZXh0cmFjdG9yKG0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gW251bGwsIG51bGxdO1xufVxuZnVuY3Rpb24gc2ltcGxlUGFyc2UoLi4ua2V5cykge1xuICByZXR1cm4gKG1hdGNoMiwgY3Vyc29yKSA9PiB7XG4gICAgY29uc3QgcmV0ID0ge307XG4gICAgbGV0IGk7XG4gICAgZm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHJldFtrZXlzW2ldXSA9IHBhcnNlSW50ZWdlcihtYXRjaDJbY3Vyc29yICsgaV0pO1xuICAgIH1cbiAgICByZXR1cm4gW3JldCwgbnVsbCwgY3Vyc29yICsgaV07XG4gIH07XG59XG52YXIgb2Zmc2V0UmVnZXggPSAvKD86KFopfChbKy1dXFxkXFxkKSg/Ojo/KFxcZFxcZCkpPykvO1xudmFyIGlzb0V4dGVuZGVkWm9uZSA9IGAoPzoke29mZnNldFJlZ2V4LnNvdXJjZX0/KD86XFxcXFsoJHtpYW5hUmVnZXguc291cmNlfSlcXFxcXSk/KT9gO1xudmFyIGlzb1RpbWVCYXNlUmVnZXggPSAvKFxcZFxcZCkoPzo6PyhcXGRcXGQpKD86Oj8oXFxkXFxkKSg/OlsuLF0oXFxkezEsMzB9KSk/KT8pPy87XG52YXIgaXNvVGltZVJlZ2V4ID0gUmVnRXhwKGAke2lzb1RpbWVCYXNlUmVnZXguc291cmNlfSR7aXNvRXh0ZW5kZWRab25lfWApO1xudmFyIGlzb1RpbWVFeHRlbnNpb25SZWdleCA9IFJlZ0V4cChgKD86VCR7aXNvVGltZVJlZ2V4LnNvdXJjZX0pP2ApO1xudmFyIGlzb1ltZFJlZ2V4ID0gLyhbKy1dXFxkezZ9fFxcZHs0fSkoPzotPyhcXGRcXGQpKD86LT8oXFxkXFxkKSk/KT8vO1xudmFyIGlzb1dlZWtSZWdleCA9IC8oXFxkezR9KS0/VyhcXGRcXGQpKD86LT8oXFxkKSk/LztcbnZhciBpc29PcmRpbmFsUmVnZXggPSAvKFxcZHs0fSktPyhcXGR7M30pLztcbnZhciBleHRyYWN0SVNPV2Vla0RhdGEgPSBzaW1wbGVQYXJzZShcIndlZWtZZWFyXCIsIFwid2Vla051bWJlclwiLCBcIndlZWtEYXlcIik7XG52YXIgZXh0cmFjdElTT09yZGluYWxEYXRhID0gc2ltcGxlUGFyc2UoXCJ5ZWFyXCIsIFwib3JkaW5hbFwiKTtcbnZhciBzcWxZbWRSZWdleCA9IC8oXFxkezR9KS0oXFxkXFxkKS0oXFxkXFxkKS87XG52YXIgc3FsVGltZVJlZ2V4ID0gUmVnRXhwKGAke2lzb1RpbWVCYXNlUmVnZXguc291cmNlfSA/KD86JHtvZmZzZXRSZWdleC5zb3VyY2V9fCgke2lhbmFSZWdleC5zb3VyY2V9KSk/YCk7XG52YXIgc3FsVGltZUV4dGVuc2lvblJlZ2V4ID0gUmVnRXhwKGAoPzogJHtzcWxUaW1lUmVnZXguc291cmNlfSk/YCk7XG5mdW5jdGlvbiBpbnQobWF0Y2gyLCBwb3MsIGZhbGxiYWNrKSB7XG4gIGNvbnN0IG0gPSBtYXRjaDJbcG9zXTtcbiAgcmV0dXJuIGlzVW5kZWZpbmVkKG0pID8gZmFsbGJhY2sgOiBwYXJzZUludGVnZXIobSk7XG59XG5mdW5jdGlvbiBleHRyYWN0SVNPWW1kKG1hdGNoMiwgY3Vyc29yKSB7XG4gIGNvbnN0IGl0ZW0gPSB7XG4gICAgeWVhcjogaW50KG1hdGNoMiwgY3Vyc29yKSxcbiAgICBtb250aDogaW50KG1hdGNoMiwgY3Vyc29yICsgMSwgMSksXG4gICAgZGF5OiBpbnQobWF0Y2gyLCBjdXJzb3IgKyAyLCAxKVxuICB9O1xuICByZXR1cm4gW2l0ZW0sIG51bGwsIGN1cnNvciArIDNdO1xufVxuZnVuY3Rpb24gZXh0cmFjdElTT1RpbWUobWF0Y2gyLCBjdXJzb3IpIHtcbiAgY29uc3QgaXRlbSA9IHtcbiAgICBob3VyczogaW50KG1hdGNoMiwgY3Vyc29yLCAwKSxcbiAgICBtaW51dGVzOiBpbnQobWF0Y2gyLCBjdXJzb3IgKyAxLCAwKSxcbiAgICBzZWNvbmRzOiBpbnQobWF0Y2gyLCBjdXJzb3IgKyAyLCAwKSxcbiAgICBtaWxsaXNlY29uZHM6IHBhcnNlTWlsbGlzKG1hdGNoMltjdXJzb3IgKyAzXSlcbiAgfTtcbiAgcmV0dXJuIFtpdGVtLCBudWxsLCBjdXJzb3IgKyA0XTtcbn1cbmZ1bmN0aW9uIGV4dHJhY3RJU09PZmZzZXQobWF0Y2gyLCBjdXJzb3IpIHtcbiAgY29uc3QgbG9jYWwgPSAhbWF0Y2gyW2N1cnNvcl0gJiYgIW1hdGNoMltjdXJzb3IgKyAxXSwgZnVsbE9mZnNldCA9IHNpZ25lZE9mZnNldChtYXRjaDJbY3Vyc29yICsgMV0sIG1hdGNoMltjdXJzb3IgKyAyXSksIHpvbmUgPSBsb2NhbCA/IG51bGwgOiBGaXhlZE9mZnNldFpvbmUuaW5zdGFuY2UoZnVsbE9mZnNldCk7XG4gIHJldHVybiBbe30sIHpvbmUsIGN1cnNvciArIDNdO1xufVxuZnVuY3Rpb24gZXh0cmFjdElBTkFab25lKG1hdGNoMiwgY3Vyc29yKSB7XG4gIGNvbnN0IHpvbmUgPSBtYXRjaDJbY3Vyc29yXSA/IElBTkFab25lLmNyZWF0ZShtYXRjaDJbY3Vyc29yXSkgOiBudWxsO1xuICByZXR1cm4gW3t9LCB6b25lLCBjdXJzb3IgKyAxXTtcbn1cbnZhciBpc29UaW1lT25seSA9IFJlZ0V4cChgXlQ/JHtpc29UaW1lQmFzZVJlZ2V4LnNvdXJjZX0kYCk7XG52YXIgaXNvRHVyYXRpb24gPSAvXi0/UCg/Oig/OigtP1xcZHsxLDIwfSg/OlxcLlxcZHsxLDIwfSk/KVkpPyg/OigtP1xcZHsxLDIwfSg/OlxcLlxcZHsxLDIwfSk/KU0pPyg/OigtP1xcZHsxLDIwfSg/OlxcLlxcZHsxLDIwfSk/KVcpPyg/OigtP1xcZHsxLDIwfSg/OlxcLlxcZHsxLDIwfSk/KUQpPyg/OlQoPzooLT9cXGR7MSwyMH0oPzpcXC5cXGR7MSwyMH0pPylIKT8oPzooLT9cXGR7MSwyMH0oPzpcXC5cXGR7MSwyMH0pPylNKT8oPzooLT9cXGR7MSwyMH0pKD86Wy4sXSgtP1xcZHsxLDIwfSkpP1MpPyk/KSQvO1xuZnVuY3Rpb24gZXh0cmFjdElTT0R1cmF0aW9uKG1hdGNoMikge1xuICBjb25zdCBbczIsIHllYXJTdHIsIG1vbnRoU3RyLCB3ZWVrU3RyLCBkYXlTdHIsIGhvdXJTdHIsIG1pbnV0ZVN0ciwgc2Vjb25kU3RyLCBtaWxsaXNlY29uZHNTdHJdID0gbWF0Y2gyO1xuICBjb25zdCBoYXNOZWdhdGl2ZVByZWZpeCA9IHMyWzBdID09PSBcIi1cIjtcbiAgY29uc3QgbmVnYXRpdmVTZWNvbmRzID0gc2Vjb25kU3RyICYmIHNlY29uZFN0clswXSA9PT0gXCItXCI7XG4gIGNvbnN0IG1heWJlTmVnYXRlID0gKG51bSwgZm9yY2UgPSBmYWxzZSkgPT4gbnVtICE9PSB2b2lkIDAgJiYgKGZvcmNlIHx8IG51bSAmJiBoYXNOZWdhdGl2ZVByZWZpeCkgPyAtbnVtIDogbnVtO1xuICByZXR1cm4gW1xuICAgIHtcbiAgICAgIHllYXJzOiBtYXliZU5lZ2F0ZShwYXJzZUZsb2F0aW5nKHllYXJTdHIpKSxcbiAgICAgIG1vbnRoczogbWF5YmVOZWdhdGUocGFyc2VGbG9hdGluZyhtb250aFN0cikpLFxuICAgICAgd2Vla3M6IG1heWJlTmVnYXRlKHBhcnNlRmxvYXRpbmcod2Vla1N0cikpLFxuICAgICAgZGF5czogbWF5YmVOZWdhdGUocGFyc2VGbG9hdGluZyhkYXlTdHIpKSxcbiAgICAgIGhvdXJzOiBtYXliZU5lZ2F0ZShwYXJzZUZsb2F0aW5nKGhvdXJTdHIpKSxcbiAgICAgIG1pbnV0ZXM6IG1heWJlTmVnYXRlKHBhcnNlRmxvYXRpbmcobWludXRlU3RyKSksXG4gICAgICBzZWNvbmRzOiBtYXliZU5lZ2F0ZShwYXJzZUZsb2F0aW5nKHNlY29uZFN0ciksIHNlY29uZFN0ciA9PT0gXCItMFwiKSxcbiAgICAgIG1pbGxpc2Vjb25kczogbWF5YmVOZWdhdGUocGFyc2VNaWxsaXMobWlsbGlzZWNvbmRzU3RyKSwgbmVnYXRpdmVTZWNvbmRzKVxuICAgIH1cbiAgXTtcbn1cbnZhciBvYnNPZmZzZXRzID0ge1xuICBHTVQ6IDAsXG4gIEVEVDogLTQgKiA2MCxcbiAgRVNUOiAtNSAqIDYwLFxuICBDRFQ6IC01ICogNjAsXG4gIENTVDogLTYgKiA2MCxcbiAgTURUOiAtNiAqIDYwLFxuICBNU1Q6IC03ICogNjAsXG4gIFBEVDogLTcgKiA2MCxcbiAgUFNUOiAtOCAqIDYwXG59O1xuZnVuY3Rpb24gZnJvbVN0cmluZ3Mod2Vla2RheVN0ciwgeWVhclN0ciwgbW9udGhTdHIsIGRheVN0ciwgaG91clN0ciwgbWludXRlU3RyLCBzZWNvbmRTdHIpIHtcbiAgY29uc3QgcmVzdWx0ID0ge1xuICAgIHllYXI6IHllYXJTdHIubGVuZ3RoID09PSAyID8gdW50cnVuY2F0ZVllYXIocGFyc2VJbnRlZ2VyKHllYXJTdHIpKSA6IHBhcnNlSW50ZWdlcih5ZWFyU3RyKSxcbiAgICBtb250aDogbW9udGhzU2hvcnQuaW5kZXhPZihtb250aFN0cikgKyAxLFxuICAgIGRheTogcGFyc2VJbnRlZ2VyKGRheVN0ciksXG4gICAgaG91cjogcGFyc2VJbnRlZ2VyKGhvdXJTdHIpLFxuICAgIG1pbnV0ZTogcGFyc2VJbnRlZ2VyKG1pbnV0ZVN0cilcbiAgfTtcbiAgaWYgKHNlY29uZFN0cilcbiAgICByZXN1bHQuc2Vjb25kID0gcGFyc2VJbnRlZ2VyKHNlY29uZFN0cik7XG4gIGlmICh3ZWVrZGF5U3RyKSB7XG4gICAgcmVzdWx0LndlZWtkYXkgPSB3ZWVrZGF5U3RyLmxlbmd0aCA+IDMgPyB3ZWVrZGF5c0xvbmcuaW5kZXhPZih3ZWVrZGF5U3RyKSArIDEgOiB3ZWVrZGF5c1Nob3J0LmluZGV4T2Yod2Vla2RheVN0cikgKyAxO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG52YXIgcmZjMjgyMiA9IC9eKD86KE1vbnxUdWV8V2VkfFRodXxGcml8U2F0fFN1biksXFxzKT8oXFxkezEsMn0pXFxzKEphbnxGZWJ8TWFyfEFwcnxNYXl8SnVufEp1bHxBdWd8U2VwfE9jdHxOb3Z8RGVjKVxccyhcXGR7Miw0fSlcXHMoXFxkXFxkKTooXFxkXFxkKSg/OjooXFxkXFxkKSk/XFxzKD86KFVUfEdNVHxbRUNNUF1bU0RdVCl8KFtael0pfCg/OihbKy1dXFxkXFxkKShcXGRcXGQpKSkkLztcbmZ1bmN0aW9uIGV4dHJhY3RSRkMyODIyKG1hdGNoMikge1xuICBjb25zdCBbXG4gICAgLFxuICAgIHdlZWtkYXlTdHIsXG4gICAgZGF5U3RyLFxuICAgIG1vbnRoU3RyLFxuICAgIHllYXJTdHIsXG4gICAgaG91clN0cixcbiAgICBtaW51dGVTdHIsXG4gICAgc2Vjb25kU3RyLFxuICAgIG9ic09mZnNldCxcbiAgICBtaWxPZmZzZXQsXG4gICAgb2ZmSG91clN0cixcbiAgICBvZmZNaW51dGVTdHJcbiAgXSA9IG1hdGNoMiwgcmVzdWx0ID0gZnJvbVN0cmluZ3Mod2Vla2RheVN0ciwgeWVhclN0ciwgbW9udGhTdHIsIGRheVN0ciwgaG91clN0ciwgbWludXRlU3RyLCBzZWNvbmRTdHIpO1xuICBsZXQgb2Zmc2V0MjtcbiAgaWYgKG9ic09mZnNldCkge1xuICAgIG9mZnNldDIgPSBvYnNPZmZzZXRzW29ic09mZnNldF07XG4gIH0gZWxzZSBpZiAobWlsT2Zmc2V0KSB7XG4gICAgb2Zmc2V0MiA9IDA7XG4gIH0gZWxzZSB7XG4gICAgb2Zmc2V0MiA9IHNpZ25lZE9mZnNldChvZmZIb3VyU3RyLCBvZmZNaW51dGVTdHIpO1xuICB9XG4gIHJldHVybiBbcmVzdWx0LCBuZXcgRml4ZWRPZmZzZXRab25lKG9mZnNldDIpXTtcbn1cbmZ1bmN0aW9uIHByZXByb2Nlc3NSRkMyODIyKHMyKSB7XG4gIHJldHVybiBzMi5yZXBsYWNlKC9cXChbXildKlxcKXxbXFxuXFx0XS9nLCBcIiBcIikucmVwbGFjZSgvKFxcc1xccyspL2csIFwiIFwiKS50cmltKCk7XG59XG52YXIgcmZjMTEyMyA9IC9eKE1vbnxUdWV8V2VkfFRodXxGcml8U2F0fFN1biksIChcXGRcXGQpIChKYW58RmVifE1hcnxBcHJ8TWF5fEp1bnxKdWx8QXVnfFNlcHxPY3R8Tm92fERlYykgKFxcZHs0fSkgKFxcZFxcZCk6KFxcZFxcZCk6KFxcZFxcZCkgR01UJC87XG52YXIgcmZjODUwID0gL14oTW9uZGF5fFR1ZXNkYXl8V2VkbmVzZGF5fFRodXJzZGF5fEZyaWRheXxTYXR1cmRheXxTdW5kYXkpLCAoXFxkXFxkKS0oSmFufEZlYnxNYXJ8QXByfE1heXxKdW58SnVsfEF1Z3xTZXB8T2N0fE5vdnxEZWMpLShcXGRcXGQpIChcXGRcXGQpOihcXGRcXGQpOihcXGRcXGQpIEdNVCQvO1xudmFyIGFzY2lpID0gL14oTW9ufFR1ZXxXZWR8VGh1fEZyaXxTYXR8U3VuKSAoSmFufEZlYnxNYXJ8QXByfE1heXxKdW58SnVsfEF1Z3xTZXB8T2N0fE5vdnxEZWMpICggXFxkfFxcZFxcZCkgKFxcZFxcZCk6KFxcZFxcZCk6KFxcZFxcZCkgKFxcZHs0fSkkLztcbmZ1bmN0aW9uIGV4dHJhY3RSRkMxMTIzT3I4NTAobWF0Y2gyKSB7XG4gIGNvbnN0IFssIHdlZWtkYXlTdHIsIGRheVN0ciwgbW9udGhTdHIsIHllYXJTdHIsIGhvdXJTdHIsIG1pbnV0ZVN0ciwgc2Vjb25kU3RyXSA9IG1hdGNoMiwgcmVzdWx0ID0gZnJvbVN0cmluZ3Mod2Vla2RheVN0ciwgeWVhclN0ciwgbW9udGhTdHIsIGRheVN0ciwgaG91clN0ciwgbWludXRlU3RyLCBzZWNvbmRTdHIpO1xuICByZXR1cm4gW3Jlc3VsdCwgRml4ZWRPZmZzZXRab25lLnV0Y0luc3RhbmNlXTtcbn1cbmZ1bmN0aW9uIGV4dHJhY3RBU0NJSShtYXRjaDIpIHtcbiAgY29uc3QgWywgd2Vla2RheVN0ciwgbW9udGhTdHIsIGRheVN0ciwgaG91clN0ciwgbWludXRlU3RyLCBzZWNvbmRTdHIsIHllYXJTdHJdID0gbWF0Y2gyLCByZXN1bHQgPSBmcm9tU3RyaW5ncyh3ZWVrZGF5U3RyLCB5ZWFyU3RyLCBtb250aFN0ciwgZGF5U3RyLCBob3VyU3RyLCBtaW51dGVTdHIsIHNlY29uZFN0cik7XG4gIHJldHVybiBbcmVzdWx0LCBGaXhlZE9mZnNldFpvbmUudXRjSW5zdGFuY2VdO1xufVxudmFyIGlzb1ltZFdpdGhUaW1lRXh0ZW5zaW9uUmVnZXggPSBjb21iaW5lUmVnZXhlcyhpc29ZbWRSZWdleCwgaXNvVGltZUV4dGVuc2lvblJlZ2V4KTtcbnZhciBpc29XZWVrV2l0aFRpbWVFeHRlbnNpb25SZWdleCA9IGNvbWJpbmVSZWdleGVzKGlzb1dlZWtSZWdleCwgaXNvVGltZUV4dGVuc2lvblJlZ2V4KTtcbnZhciBpc29PcmRpbmFsV2l0aFRpbWVFeHRlbnNpb25SZWdleCA9IGNvbWJpbmVSZWdleGVzKGlzb09yZGluYWxSZWdleCwgaXNvVGltZUV4dGVuc2lvblJlZ2V4KTtcbnZhciBpc29UaW1lQ29tYmluZWRSZWdleCA9IGNvbWJpbmVSZWdleGVzKGlzb1RpbWVSZWdleCk7XG52YXIgZXh0cmFjdElTT1ltZFRpbWVBbmRPZmZzZXQgPSBjb21iaW5lRXh0cmFjdG9ycyhleHRyYWN0SVNPWW1kLCBleHRyYWN0SVNPVGltZSwgZXh0cmFjdElTT09mZnNldCwgZXh0cmFjdElBTkFab25lKTtcbnZhciBleHRyYWN0SVNPV2Vla1RpbWVBbmRPZmZzZXQgPSBjb21iaW5lRXh0cmFjdG9ycyhleHRyYWN0SVNPV2Vla0RhdGEsIGV4dHJhY3RJU09UaW1lLCBleHRyYWN0SVNPT2Zmc2V0LCBleHRyYWN0SUFOQVpvbmUpO1xudmFyIGV4dHJhY3RJU09PcmRpbmFsRGF0ZUFuZFRpbWUgPSBjb21iaW5lRXh0cmFjdG9ycyhleHRyYWN0SVNPT3JkaW5hbERhdGEsIGV4dHJhY3RJU09UaW1lLCBleHRyYWN0SVNPT2Zmc2V0LCBleHRyYWN0SUFOQVpvbmUpO1xudmFyIGV4dHJhY3RJU09UaW1lQW5kT2Zmc2V0ID0gY29tYmluZUV4dHJhY3RvcnMoZXh0cmFjdElTT1RpbWUsIGV4dHJhY3RJU09PZmZzZXQsIGV4dHJhY3RJQU5BWm9uZSk7XG5mdW5jdGlvbiBwYXJzZUlTT0RhdGUoczIpIHtcbiAgcmV0dXJuIHBhcnNlKHMyLCBbaXNvWW1kV2l0aFRpbWVFeHRlbnNpb25SZWdleCwgZXh0cmFjdElTT1ltZFRpbWVBbmRPZmZzZXRdLCBbaXNvV2Vla1dpdGhUaW1lRXh0ZW5zaW9uUmVnZXgsIGV4dHJhY3RJU09XZWVrVGltZUFuZE9mZnNldF0sIFtpc29PcmRpbmFsV2l0aFRpbWVFeHRlbnNpb25SZWdleCwgZXh0cmFjdElTT09yZGluYWxEYXRlQW5kVGltZV0sIFtpc29UaW1lQ29tYmluZWRSZWdleCwgZXh0cmFjdElTT1RpbWVBbmRPZmZzZXRdKTtcbn1cbmZ1bmN0aW9uIHBhcnNlUkZDMjgyMkRhdGUoczIpIHtcbiAgcmV0dXJuIHBhcnNlKHByZXByb2Nlc3NSRkMyODIyKHMyKSwgW3JmYzI4MjIsIGV4dHJhY3RSRkMyODIyXSk7XG59XG5mdW5jdGlvbiBwYXJzZUhUVFBEYXRlKHMyKSB7XG4gIHJldHVybiBwYXJzZShzMiwgW3JmYzExMjMsIGV4dHJhY3RSRkMxMTIzT3I4NTBdLCBbcmZjODUwLCBleHRyYWN0UkZDMTEyM09yODUwXSwgW2FzY2lpLCBleHRyYWN0QVNDSUldKTtcbn1cbmZ1bmN0aW9uIHBhcnNlSVNPRHVyYXRpb24oczIpIHtcbiAgcmV0dXJuIHBhcnNlKHMyLCBbaXNvRHVyYXRpb24sIGV4dHJhY3RJU09EdXJhdGlvbl0pO1xufVxudmFyIGV4dHJhY3RJU09UaW1lT25seSA9IGNvbWJpbmVFeHRyYWN0b3JzKGV4dHJhY3RJU09UaW1lKTtcbmZ1bmN0aW9uIHBhcnNlSVNPVGltZU9ubHkoczIpIHtcbiAgcmV0dXJuIHBhcnNlKHMyLCBbaXNvVGltZU9ubHksIGV4dHJhY3RJU09UaW1lT25seV0pO1xufVxudmFyIHNxbFltZFdpdGhUaW1lRXh0ZW5zaW9uUmVnZXggPSBjb21iaW5lUmVnZXhlcyhzcWxZbWRSZWdleCwgc3FsVGltZUV4dGVuc2lvblJlZ2V4KTtcbnZhciBzcWxUaW1lQ29tYmluZWRSZWdleCA9IGNvbWJpbmVSZWdleGVzKHNxbFRpbWVSZWdleCk7XG52YXIgZXh0cmFjdElTT1RpbWVPZmZzZXRBbmRJQU5BWm9uZSA9IGNvbWJpbmVFeHRyYWN0b3JzKGV4dHJhY3RJU09UaW1lLCBleHRyYWN0SVNPT2Zmc2V0LCBleHRyYWN0SUFOQVpvbmUpO1xuZnVuY3Rpb24gcGFyc2VTUUwoczIpIHtcbiAgcmV0dXJuIHBhcnNlKHMyLCBbc3FsWW1kV2l0aFRpbWVFeHRlbnNpb25SZWdleCwgZXh0cmFjdElTT1ltZFRpbWVBbmRPZmZzZXRdLCBbc3FsVGltZUNvbWJpbmVkUmVnZXgsIGV4dHJhY3RJU09UaW1lT2Zmc2V0QW5kSUFOQVpvbmVdKTtcbn1cbnZhciBJTlZBTElEMiA9IFwiSW52YWxpZCBEdXJhdGlvblwiO1xudmFyIGxvd09yZGVyTWF0cml4ID0ge1xuICB3ZWVrczoge1xuICAgIGRheXM6IDcsXG4gICAgaG91cnM6IDcgKiAyNCxcbiAgICBtaW51dGVzOiA3ICogMjQgKiA2MCxcbiAgICBzZWNvbmRzOiA3ICogMjQgKiA2MCAqIDYwLFxuICAgIG1pbGxpc2Vjb25kczogNyAqIDI0ICogNjAgKiA2MCAqIDFlM1xuICB9LFxuICBkYXlzOiB7XG4gICAgaG91cnM6IDI0LFxuICAgIG1pbnV0ZXM6IDI0ICogNjAsXG4gICAgc2Vjb25kczogMjQgKiA2MCAqIDYwLFxuICAgIG1pbGxpc2Vjb25kczogMjQgKiA2MCAqIDYwICogMWUzXG4gIH0sXG4gIGhvdXJzOiB7bWludXRlczogNjAsIHNlY29uZHM6IDYwICogNjAsIG1pbGxpc2Vjb25kczogNjAgKiA2MCAqIDFlM30sXG4gIG1pbnV0ZXM6IHtzZWNvbmRzOiA2MCwgbWlsbGlzZWNvbmRzOiA2MCAqIDFlM30sXG4gIHNlY29uZHM6IHttaWxsaXNlY29uZHM6IDFlM31cbn07XG52YXIgY2FzdWFsTWF0cml4ID0ge1xuICB5ZWFyczoge1xuICAgIHF1YXJ0ZXJzOiA0LFxuICAgIG1vbnRoczogMTIsXG4gICAgd2Vla3M6IDUyLFxuICAgIGRheXM6IDM2NSxcbiAgICBob3VyczogMzY1ICogMjQsXG4gICAgbWludXRlczogMzY1ICogMjQgKiA2MCxcbiAgICBzZWNvbmRzOiAzNjUgKiAyNCAqIDYwICogNjAsXG4gICAgbWlsbGlzZWNvbmRzOiAzNjUgKiAyNCAqIDYwICogNjAgKiAxZTNcbiAgfSxcbiAgcXVhcnRlcnM6IHtcbiAgICBtb250aHM6IDMsXG4gICAgd2Vla3M6IDEzLFxuICAgIGRheXM6IDkxLFxuICAgIGhvdXJzOiA5MSAqIDI0LFxuICAgIG1pbnV0ZXM6IDkxICogMjQgKiA2MCxcbiAgICBzZWNvbmRzOiA5MSAqIDI0ICogNjAgKiA2MCxcbiAgICBtaWxsaXNlY29uZHM6IDkxICogMjQgKiA2MCAqIDYwICogMWUzXG4gIH0sXG4gIG1vbnRoczoge1xuICAgIHdlZWtzOiA0LFxuICAgIGRheXM6IDMwLFxuICAgIGhvdXJzOiAzMCAqIDI0LFxuICAgIG1pbnV0ZXM6IDMwICogMjQgKiA2MCxcbiAgICBzZWNvbmRzOiAzMCAqIDI0ICogNjAgKiA2MCxcbiAgICBtaWxsaXNlY29uZHM6IDMwICogMjQgKiA2MCAqIDYwICogMWUzXG4gIH0sXG4gIC4uLmxvd09yZGVyTWF0cml4XG59O1xudmFyIGRheXNJblllYXJBY2N1cmF0ZSA9IDE0NjA5NyAvIDQwMDtcbnZhciBkYXlzSW5Nb250aEFjY3VyYXRlID0gMTQ2MDk3IC8gNDgwMDtcbnZhciBhY2N1cmF0ZU1hdHJpeCA9IHtcbiAgeWVhcnM6IHtcbiAgICBxdWFydGVyczogNCxcbiAgICBtb250aHM6IDEyLFxuICAgIHdlZWtzOiBkYXlzSW5ZZWFyQWNjdXJhdGUgLyA3LFxuICAgIGRheXM6IGRheXNJblllYXJBY2N1cmF0ZSxcbiAgICBob3VyczogZGF5c0luWWVhckFjY3VyYXRlICogMjQsXG4gICAgbWludXRlczogZGF5c0luWWVhckFjY3VyYXRlICogMjQgKiA2MCxcbiAgICBzZWNvbmRzOiBkYXlzSW5ZZWFyQWNjdXJhdGUgKiAyNCAqIDYwICogNjAsXG4gICAgbWlsbGlzZWNvbmRzOiBkYXlzSW5ZZWFyQWNjdXJhdGUgKiAyNCAqIDYwICogNjAgKiAxZTNcbiAgfSxcbiAgcXVhcnRlcnM6IHtcbiAgICBtb250aHM6IDMsXG4gICAgd2Vla3M6IGRheXNJblllYXJBY2N1cmF0ZSAvIDI4LFxuICAgIGRheXM6IGRheXNJblllYXJBY2N1cmF0ZSAvIDQsXG4gICAgaG91cnM6IGRheXNJblllYXJBY2N1cmF0ZSAqIDI0IC8gNCxcbiAgICBtaW51dGVzOiBkYXlzSW5ZZWFyQWNjdXJhdGUgKiAyNCAqIDYwIC8gNCxcbiAgICBzZWNvbmRzOiBkYXlzSW5ZZWFyQWNjdXJhdGUgKiAyNCAqIDYwICogNjAgLyA0LFxuICAgIG1pbGxpc2Vjb25kczogZGF5c0luWWVhckFjY3VyYXRlICogMjQgKiA2MCAqIDYwICogMWUzIC8gNFxuICB9LFxuICBtb250aHM6IHtcbiAgICB3ZWVrczogZGF5c0luTW9udGhBY2N1cmF0ZSAvIDcsXG4gICAgZGF5czogZGF5c0luTW9udGhBY2N1cmF0ZSxcbiAgICBob3VyczogZGF5c0luTW9udGhBY2N1cmF0ZSAqIDI0LFxuICAgIG1pbnV0ZXM6IGRheXNJbk1vbnRoQWNjdXJhdGUgKiAyNCAqIDYwLFxuICAgIHNlY29uZHM6IGRheXNJbk1vbnRoQWNjdXJhdGUgKiAyNCAqIDYwICogNjAsXG4gICAgbWlsbGlzZWNvbmRzOiBkYXlzSW5Nb250aEFjY3VyYXRlICogMjQgKiA2MCAqIDYwICogMWUzXG4gIH0sXG4gIC4uLmxvd09yZGVyTWF0cml4XG59O1xudmFyIG9yZGVyZWRVbml0cyA9IFtcbiAgXCJ5ZWFyc1wiLFxuICBcInF1YXJ0ZXJzXCIsXG4gIFwibW9udGhzXCIsXG4gIFwid2Vla3NcIixcbiAgXCJkYXlzXCIsXG4gIFwiaG91cnNcIixcbiAgXCJtaW51dGVzXCIsXG4gIFwic2Vjb25kc1wiLFxuICBcIm1pbGxpc2Vjb25kc1wiXG5dO1xudmFyIHJldmVyc2VVbml0cyA9IG9yZGVyZWRVbml0cy5zbGljZSgwKS5yZXZlcnNlKCk7XG5mdW5jdGlvbiBjbG9uZShkdXIsIGFsdHMsIGNsZWFyID0gZmFsc2UpIHtcbiAgY29uc3QgY29uZiA9IHtcbiAgICB2YWx1ZXM6IGNsZWFyID8gYWx0cy52YWx1ZXMgOiB7Li4uZHVyLnZhbHVlcywgLi4uYWx0cy52YWx1ZXMgfHwge319LFxuICAgIGxvYzogZHVyLmxvYy5jbG9uZShhbHRzLmxvYyksXG4gICAgY29udmVyc2lvbkFjY3VyYWN5OiBhbHRzLmNvbnZlcnNpb25BY2N1cmFjeSB8fCBkdXIuY29udmVyc2lvbkFjY3VyYWN5XG4gIH07XG4gIHJldHVybiBuZXcgRHVyYXRpb24oY29uZik7XG59XG5mdW5jdGlvbiBhbnRpVHJ1bmMobjIpIHtcbiAgcmV0dXJuIG4yIDwgMCA/IE1hdGguZmxvb3IobjIpIDogTWF0aC5jZWlsKG4yKTtcbn1cbmZ1bmN0aW9uIGNvbnZlcnQobWF0cml4LCBmcm9tTWFwLCBmcm9tVW5pdCwgdG9NYXAsIHRvVW5pdCkge1xuICBjb25zdCBjb252ID0gbWF0cml4W3RvVW5pdF1bZnJvbVVuaXRdLCByYXcgPSBmcm9tTWFwW2Zyb21Vbml0XSAvIGNvbnYsIHNhbWVTaWduID0gTWF0aC5zaWduKHJhdykgPT09IE1hdGguc2lnbih0b01hcFt0b1VuaXRdKSwgYWRkZWQgPSAhc2FtZVNpZ24gJiYgdG9NYXBbdG9Vbml0XSAhPT0gMCAmJiBNYXRoLmFicyhyYXcpIDw9IDEgPyBhbnRpVHJ1bmMocmF3KSA6IE1hdGgudHJ1bmMocmF3KTtcbiAgdG9NYXBbdG9Vbml0XSArPSBhZGRlZDtcbiAgZnJvbU1hcFtmcm9tVW5pdF0gLT0gYWRkZWQgKiBjb252O1xufVxuZnVuY3Rpb24gbm9ybWFsaXplVmFsdWVzKG1hdHJpeCwgdmFscykge1xuICByZXZlcnNlVW5pdHMucmVkdWNlKChwcmV2aW91cywgY3VycmVudCkgPT4ge1xuICAgIGlmICghaXNVbmRlZmluZWQodmFsc1tjdXJyZW50XSkpIHtcbiAgICAgIGlmIChwcmV2aW91cykge1xuICAgICAgICBjb252ZXJ0KG1hdHJpeCwgdmFscywgcHJldmlvdXMsIHZhbHMsIGN1cnJlbnQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGN1cnJlbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBwcmV2aW91cztcbiAgICB9XG4gIH0sIG51bGwpO1xufVxudmFyIER1cmF0aW9uID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICBjb25zdCBhY2N1cmF0ZSA9IGNvbmZpZy5jb252ZXJzaW9uQWNjdXJhY3kgPT09IFwibG9uZ3Rlcm1cIiB8fCBmYWxzZTtcbiAgICB0aGlzLnZhbHVlcyA9IGNvbmZpZy52YWx1ZXM7XG4gICAgdGhpcy5sb2MgPSBjb25maWcubG9jIHx8IExvY2FsZS5jcmVhdGUoKTtcbiAgICB0aGlzLmNvbnZlcnNpb25BY2N1cmFjeSA9IGFjY3VyYXRlID8gXCJsb25ndGVybVwiIDogXCJjYXN1YWxcIjtcbiAgICB0aGlzLmludmFsaWQgPSBjb25maWcuaW52YWxpZCB8fCBudWxsO1xuICAgIHRoaXMubWF0cml4ID0gYWNjdXJhdGUgPyBhY2N1cmF0ZU1hdHJpeCA6IGNhc3VhbE1hdHJpeDtcbiAgICB0aGlzLmlzTHV4b25EdXJhdGlvbiA9IHRydWU7XG4gIH1cbiAgc3RhdGljIGZyb21NaWxsaXMoY291bnQsIG9wdHMpIHtcbiAgICByZXR1cm4gRHVyYXRpb24uZnJvbU9iamVjdCh7bWlsbGlzZWNvbmRzOiBjb3VudH0sIG9wdHMpO1xuICB9XG4gIHN0YXRpYyBmcm9tT2JqZWN0KG9iaiwgb3B0cyA9IHt9KSB7XG4gICAgaWYgKG9iaiA9PSBudWxsIHx8IHR5cGVvZiBvYmogIT09IFwib2JqZWN0XCIpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihgRHVyYXRpb24uZnJvbU9iamVjdDogYXJndW1lbnQgZXhwZWN0ZWQgdG8gYmUgYW4gb2JqZWN0LCBnb3QgJHtvYmogPT09IG51bGwgPyBcIm51bGxcIiA6IHR5cGVvZiBvYmp9YCk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgRHVyYXRpb24oe1xuICAgICAgdmFsdWVzOiBub3JtYWxpemVPYmplY3Qob2JqLCBEdXJhdGlvbi5ub3JtYWxpemVVbml0KSxcbiAgICAgIGxvYzogTG9jYWxlLmZyb21PYmplY3Qob3B0cyksXG4gICAgICBjb252ZXJzaW9uQWNjdXJhY3k6IG9wdHMuY29udmVyc2lvbkFjY3VyYWN5XG4gICAgfSk7XG4gIH1cbiAgc3RhdGljIGZyb21EdXJhdGlvbkxpa2UoZHVyYXRpb25MaWtlKSB7XG4gICAgaWYgKGlzTnVtYmVyKGR1cmF0aW9uTGlrZSkpIHtcbiAgICAgIHJldHVybiBEdXJhdGlvbi5mcm9tTWlsbGlzKGR1cmF0aW9uTGlrZSk7XG4gICAgfSBlbHNlIGlmIChEdXJhdGlvbi5pc0R1cmF0aW9uKGR1cmF0aW9uTGlrZSkpIHtcbiAgICAgIHJldHVybiBkdXJhdGlvbkxpa2U7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZHVyYXRpb25MaWtlID09PSBcIm9iamVjdFwiKSB7XG4gICAgICByZXR1cm4gRHVyYXRpb24uZnJvbU9iamVjdChkdXJhdGlvbkxpa2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoYFVua25vd24gZHVyYXRpb24gYXJndW1lbnQgJHtkdXJhdGlvbkxpa2V9IG9mIHR5cGUgJHt0eXBlb2YgZHVyYXRpb25MaWtlfWApO1xuICAgIH1cbiAgfVxuICBzdGF0aWMgZnJvbUlTTyh0ZXh0LCBvcHRzKSB7XG4gICAgY29uc3QgW3BhcnNlZF0gPSBwYXJzZUlTT0R1cmF0aW9uKHRleHQpO1xuICAgIGlmIChwYXJzZWQpIHtcbiAgICAgIHJldHVybiBEdXJhdGlvbi5mcm9tT2JqZWN0KHBhcnNlZCwgb3B0cyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBEdXJhdGlvbi5pbnZhbGlkKFwidW5wYXJzYWJsZVwiLCBgdGhlIGlucHV0IFwiJHt0ZXh0fVwiIGNhbid0IGJlIHBhcnNlZCBhcyBJU08gODYwMWApO1xuICAgIH1cbiAgfVxuICBzdGF0aWMgZnJvbUlTT1RpbWUodGV4dCwgb3B0cykge1xuICAgIGNvbnN0IFtwYXJzZWRdID0gcGFyc2VJU09UaW1lT25seSh0ZXh0KTtcbiAgICBpZiAocGFyc2VkKSB7XG4gICAgICByZXR1cm4gRHVyYXRpb24uZnJvbU9iamVjdChwYXJzZWQsIG9wdHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gRHVyYXRpb24uaW52YWxpZChcInVucGFyc2FibGVcIiwgYHRoZSBpbnB1dCBcIiR7dGV4dH1cIiBjYW4ndCBiZSBwYXJzZWQgYXMgSVNPIDg2MDFgKTtcbiAgICB9XG4gIH1cbiAgc3RhdGljIGludmFsaWQocmVhc29uLCBleHBsYW5hdGlvbiA9IG51bGwpIHtcbiAgICBpZiAoIXJlYXNvbikge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFwibmVlZCB0byBzcGVjaWZ5IGEgcmVhc29uIHRoZSBEdXJhdGlvbiBpcyBpbnZhbGlkXCIpO1xuICAgIH1cbiAgICBjb25zdCBpbnZhbGlkID0gcmVhc29uIGluc3RhbmNlb2YgSW52YWxpZCA/IHJlYXNvbiA6IG5ldyBJbnZhbGlkKHJlYXNvbiwgZXhwbGFuYXRpb24pO1xuICAgIGlmIChTZXR0aW5ncy50aHJvd09uSW52YWxpZCkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWREdXJhdGlvbkVycm9yKGludmFsaWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IER1cmF0aW9uKHtpbnZhbGlkfSk7XG4gICAgfVxuICB9XG4gIHN0YXRpYyBub3JtYWxpemVVbml0KHVuaXQpIHtcbiAgICBjb25zdCBub3JtYWxpemVkID0ge1xuICAgICAgeWVhcjogXCJ5ZWFyc1wiLFxuICAgICAgeWVhcnM6IFwieWVhcnNcIixcbiAgICAgIHF1YXJ0ZXI6IFwicXVhcnRlcnNcIixcbiAgICAgIHF1YXJ0ZXJzOiBcInF1YXJ0ZXJzXCIsXG4gICAgICBtb250aDogXCJtb250aHNcIixcbiAgICAgIG1vbnRoczogXCJtb250aHNcIixcbiAgICAgIHdlZWs6IFwid2Vla3NcIixcbiAgICAgIHdlZWtzOiBcIndlZWtzXCIsXG4gICAgICBkYXk6IFwiZGF5c1wiLFxuICAgICAgZGF5czogXCJkYXlzXCIsXG4gICAgICBob3VyOiBcImhvdXJzXCIsXG4gICAgICBob3VyczogXCJob3Vyc1wiLFxuICAgICAgbWludXRlOiBcIm1pbnV0ZXNcIixcbiAgICAgIG1pbnV0ZXM6IFwibWludXRlc1wiLFxuICAgICAgc2Vjb25kOiBcInNlY29uZHNcIixcbiAgICAgIHNlY29uZHM6IFwic2Vjb25kc1wiLFxuICAgICAgbWlsbGlzZWNvbmQ6IFwibWlsbGlzZWNvbmRzXCIsXG4gICAgICBtaWxsaXNlY29uZHM6IFwibWlsbGlzZWNvbmRzXCJcbiAgICB9W3VuaXQgPyB1bml0LnRvTG93ZXJDYXNlKCkgOiB1bml0XTtcbiAgICBpZiAoIW5vcm1hbGl6ZWQpXG4gICAgICB0aHJvdyBuZXcgSW52YWxpZFVuaXRFcnJvcih1bml0KTtcbiAgICByZXR1cm4gbm9ybWFsaXplZDtcbiAgfVxuICBzdGF0aWMgaXNEdXJhdGlvbihvKSB7XG4gICAgcmV0dXJuIG8gJiYgby5pc0x1eG9uRHVyYXRpb24gfHwgZmFsc2U7XG4gIH1cbiAgZ2V0IGxvY2FsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5sb2MubG9jYWxlIDogbnVsbDtcbiAgfVxuICBnZXQgbnVtYmVyaW5nU3lzdGVtKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLmxvYy5udW1iZXJpbmdTeXN0ZW0gOiBudWxsO1xuICB9XG4gIHRvRm9ybWF0KGZtdCwgb3B0cyA9IHt9KSB7XG4gICAgY29uc3QgZm10T3B0cyA9IHtcbiAgICAgIC4uLm9wdHMsXG4gICAgICBmbG9vcjogb3B0cy5yb3VuZCAhPT0gZmFsc2UgJiYgb3B0cy5mbG9vciAhPT0gZmFsc2VcbiAgICB9O1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBGb3JtYXR0ZXIuY3JlYXRlKHRoaXMubG9jLCBmbXRPcHRzKS5mb3JtYXREdXJhdGlvbkZyb21TdHJpbmcodGhpcywgZm10KSA6IElOVkFMSUQyO1xuICB9XG4gIHRvSHVtYW4ob3B0cyA9IHt9KSB7XG4gICAgY29uc3QgbDIgPSBvcmRlcmVkVW5pdHMubWFwKCh1bml0KSA9PiB7XG4gICAgICBjb25zdCB2YWwgPSB0aGlzLnZhbHVlc1t1bml0XTtcbiAgICAgIGlmIChpc1VuZGVmaW5lZCh2YWwpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMubG9jLm51bWJlckZvcm1hdHRlcih7c3R5bGU6IFwidW5pdFwiLCB1bml0RGlzcGxheTogXCJsb25nXCIsIC4uLm9wdHMsIHVuaXQ6IHVuaXQuc2xpY2UoMCwgLTEpfSkuZm9ybWF0KHZhbCk7XG4gICAgfSkuZmlsdGVyKChuMikgPT4gbjIpO1xuICAgIHJldHVybiB0aGlzLmxvYy5saXN0Rm9ybWF0dGVyKHt0eXBlOiBcImNvbmp1bmN0aW9uXCIsIHN0eWxlOiBvcHRzLmxpc3RTdHlsZSB8fCBcIm5hcnJvd1wiLCAuLi5vcHRzfSkuZm9ybWF0KGwyKTtcbiAgfVxuICB0b09iamVjdCgpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZClcbiAgICAgIHJldHVybiB7fTtcbiAgICByZXR1cm4gey4uLnRoaXMudmFsdWVzfTtcbiAgfVxuICB0b0lTTygpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZClcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGxldCBzMiA9IFwiUFwiO1xuICAgIGlmICh0aGlzLnllYXJzICE9PSAwKVxuICAgICAgczIgKz0gdGhpcy55ZWFycyArIFwiWVwiO1xuICAgIGlmICh0aGlzLm1vbnRocyAhPT0gMCB8fCB0aGlzLnF1YXJ0ZXJzICE9PSAwKVxuICAgICAgczIgKz0gdGhpcy5tb250aHMgKyB0aGlzLnF1YXJ0ZXJzICogMyArIFwiTVwiO1xuICAgIGlmICh0aGlzLndlZWtzICE9PSAwKVxuICAgICAgczIgKz0gdGhpcy53ZWVrcyArIFwiV1wiO1xuICAgIGlmICh0aGlzLmRheXMgIT09IDApXG4gICAgICBzMiArPSB0aGlzLmRheXMgKyBcIkRcIjtcbiAgICBpZiAodGhpcy5ob3VycyAhPT0gMCB8fCB0aGlzLm1pbnV0ZXMgIT09IDAgfHwgdGhpcy5zZWNvbmRzICE9PSAwIHx8IHRoaXMubWlsbGlzZWNvbmRzICE9PSAwKVxuICAgICAgczIgKz0gXCJUXCI7XG4gICAgaWYgKHRoaXMuaG91cnMgIT09IDApXG4gICAgICBzMiArPSB0aGlzLmhvdXJzICsgXCJIXCI7XG4gICAgaWYgKHRoaXMubWludXRlcyAhPT0gMClcbiAgICAgIHMyICs9IHRoaXMubWludXRlcyArIFwiTVwiO1xuICAgIGlmICh0aGlzLnNlY29uZHMgIT09IDAgfHwgdGhpcy5taWxsaXNlY29uZHMgIT09IDApXG4gICAgICBzMiArPSByb3VuZFRvKHRoaXMuc2Vjb25kcyArIHRoaXMubWlsbGlzZWNvbmRzIC8gMWUzLCAzKSArIFwiU1wiO1xuICAgIGlmIChzMiA9PT0gXCJQXCIpXG4gICAgICBzMiArPSBcIlQwU1wiO1xuICAgIHJldHVybiBzMjtcbiAgfVxuICB0b0lTT1RpbWUob3B0cyA9IHt9KSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBjb25zdCBtaWxsaXMgPSB0aGlzLnRvTWlsbGlzKCk7XG4gICAgaWYgKG1pbGxpcyA8IDAgfHwgbWlsbGlzID49IDg2NGU1KVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgb3B0cyA9IHtcbiAgICAgIHN1cHByZXNzTWlsbGlzZWNvbmRzOiBmYWxzZSxcbiAgICAgIHN1cHByZXNzU2Vjb25kczogZmFsc2UsXG4gICAgICBpbmNsdWRlUHJlZml4OiBmYWxzZSxcbiAgICAgIGZvcm1hdDogXCJleHRlbmRlZFwiLFxuICAgICAgLi4ub3B0c1xuICAgIH07XG4gICAgY29uc3QgdmFsdWUgPSB0aGlzLnNoaWZ0VG8oXCJob3Vyc1wiLCBcIm1pbnV0ZXNcIiwgXCJzZWNvbmRzXCIsIFwibWlsbGlzZWNvbmRzXCIpO1xuICAgIGxldCBmbXQgPSBvcHRzLmZvcm1hdCA9PT0gXCJiYXNpY1wiID8gXCJoaG1tXCIgOiBcImhoOm1tXCI7XG4gICAgaWYgKCFvcHRzLnN1cHByZXNzU2Vjb25kcyB8fCB2YWx1ZS5zZWNvbmRzICE9PSAwIHx8IHZhbHVlLm1pbGxpc2Vjb25kcyAhPT0gMCkge1xuICAgICAgZm10ICs9IG9wdHMuZm9ybWF0ID09PSBcImJhc2ljXCIgPyBcInNzXCIgOiBcIjpzc1wiO1xuICAgICAgaWYgKCFvcHRzLnN1cHByZXNzTWlsbGlzZWNvbmRzIHx8IHZhbHVlLm1pbGxpc2Vjb25kcyAhPT0gMCkge1xuICAgICAgICBmbXQgKz0gXCIuU1NTXCI7XG4gICAgICB9XG4gICAgfVxuICAgIGxldCBzdHIgPSB2YWx1ZS50b0Zvcm1hdChmbXQpO1xuICAgIGlmIChvcHRzLmluY2x1ZGVQcmVmaXgpIHtcbiAgICAgIHN0ciA9IFwiVFwiICsgc3RyO1xuICAgIH1cbiAgICByZXR1cm4gc3RyO1xuICB9XG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4gdGhpcy50b0lTTygpO1xuICB9XG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLnRvSVNPKCk7XG4gIH1cbiAgdG9NaWxsaXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXMoXCJtaWxsaXNlY29uZHNcIik7XG4gIH1cbiAgdmFsdWVPZigpIHtcbiAgICByZXR1cm4gdGhpcy50b01pbGxpcygpO1xuICB9XG4gIHBsdXMoZHVyYXRpb24pIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZClcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIGNvbnN0IGR1ciA9IER1cmF0aW9uLmZyb21EdXJhdGlvbkxpa2UoZHVyYXRpb24pLCByZXN1bHQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGsgb2Ygb3JkZXJlZFVuaXRzKSB7XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkoZHVyLnZhbHVlcywgaykgfHwgaGFzT3duUHJvcGVydHkodGhpcy52YWx1ZXMsIGspKSB7XG4gICAgICAgIHJlc3VsdFtrXSA9IGR1ci5nZXQoaykgKyB0aGlzLmdldChrKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNsb25lKHRoaXMsIHt2YWx1ZXM6IHJlc3VsdH0sIHRydWUpO1xuICB9XG4gIG1pbnVzKGR1cmF0aW9uKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpXG4gICAgICByZXR1cm4gdGhpcztcbiAgICBjb25zdCBkdXIgPSBEdXJhdGlvbi5mcm9tRHVyYXRpb25MaWtlKGR1cmF0aW9uKTtcbiAgICByZXR1cm4gdGhpcy5wbHVzKGR1ci5uZWdhdGUoKSk7XG4gIH1cbiAgbWFwVW5pdHMoZm4pIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZClcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIGZvciAoY29uc3QgayBvZiBPYmplY3Qua2V5cyh0aGlzLnZhbHVlcykpIHtcbiAgICAgIHJlc3VsdFtrXSA9IGFzTnVtYmVyKGZuKHRoaXMudmFsdWVzW2tdLCBrKSk7XG4gICAgfVxuICAgIHJldHVybiBjbG9uZSh0aGlzLCB7dmFsdWVzOiByZXN1bHR9LCB0cnVlKTtcbiAgfVxuICBnZXQodW5pdCkge1xuICAgIHJldHVybiB0aGlzW0R1cmF0aW9uLm5vcm1hbGl6ZVVuaXQodW5pdCldO1xuICB9XG4gIHNldCh2YWx1ZXMpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZClcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIGNvbnN0IG1peGVkID0gey4uLnRoaXMudmFsdWVzLCAuLi5ub3JtYWxpemVPYmplY3QodmFsdWVzLCBEdXJhdGlvbi5ub3JtYWxpemVVbml0KX07XG4gICAgcmV0dXJuIGNsb25lKHRoaXMsIHt2YWx1ZXM6IG1peGVkfSk7XG4gIH1cbiAgcmVjb25maWd1cmUoe2xvY2FsZSwgbnVtYmVyaW5nU3lzdGVtLCBjb252ZXJzaW9uQWNjdXJhY3l9ID0ge30pIHtcbiAgICBjb25zdCBsb2MgPSB0aGlzLmxvYy5jbG9uZSh7bG9jYWxlLCBudW1iZXJpbmdTeXN0ZW19KSwgb3B0cyA9IHtsb2N9O1xuICAgIGlmIChjb252ZXJzaW9uQWNjdXJhY3kpIHtcbiAgICAgIG9wdHMuY29udmVyc2lvbkFjY3VyYWN5ID0gY29udmVyc2lvbkFjY3VyYWN5O1xuICAgIH1cbiAgICByZXR1cm4gY2xvbmUodGhpcywgb3B0cyk7XG4gIH1cbiAgYXModW5pdCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnNoaWZ0VG8odW5pdCkuZ2V0KHVuaXQpIDogTmFOO1xuICB9XG4gIG5vcm1hbGl6ZSgpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZClcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIGNvbnN0IHZhbHMgPSB0aGlzLnRvT2JqZWN0KCk7XG4gICAgbm9ybWFsaXplVmFsdWVzKHRoaXMubWF0cml4LCB2YWxzKTtcbiAgICByZXR1cm4gY2xvbmUodGhpcywge3ZhbHVlczogdmFsc30sIHRydWUpO1xuICB9XG4gIHNoaWZ0VG8oLi4udW5pdHMpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZClcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIGlmICh1bml0cy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICB1bml0cyA9IHVuaXRzLm1hcCgodSkgPT4gRHVyYXRpb24ubm9ybWFsaXplVW5pdCh1KSk7XG4gICAgY29uc3QgYnVpbHQgPSB7fSwgYWNjdW11bGF0ZWQgPSB7fSwgdmFscyA9IHRoaXMudG9PYmplY3QoKTtcbiAgICBsZXQgbGFzdFVuaXQ7XG4gICAgZm9yIChjb25zdCBrIG9mIG9yZGVyZWRVbml0cykge1xuICAgICAgaWYgKHVuaXRzLmluZGV4T2YoaykgPj0gMCkge1xuICAgICAgICBsYXN0VW5pdCA9IGs7XG4gICAgICAgIGxldCBvd24gPSAwO1xuICAgICAgICBmb3IgKGNvbnN0IGFrIGluIGFjY3VtdWxhdGVkKSB7XG4gICAgICAgICAgb3duICs9IHRoaXMubWF0cml4W2FrXVtrXSAqIGFjY3VtdWxhdGVkW2FrXTtcbiAgICAgICAgICBhY2N1bXVsYXRlZFtha10gPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc051bWJlcih2YWxzW2tdKSkge1xuICAgICAgICAgIG93biArPSB2YWxzW2tdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGkgPSBNYXRoLnRydW5jKG93bik7XG4gICAgICAgIGJ1aWx0W2tdID0gaTtcbiAgICAgICAgYWNjdW11bGF0ZWRba10gPSAob3duICogMWUzIC0gaSAqIDFlMykgLyAxZTM7XG4gICAgICAgIGZvciAoY29uc3QgZG93biBpbiB2YWxzKSB7XG4gICAgICAgICAgaWYgKG9yZGVyZWRVbml0cy5pbmRleE9mKGRvd24pID4gb3JkZXJlZFVuaXRzLmluZGV4T2YoaykpIHtcbiAgICAgICAgICAgIGNvbnZlcnQodGhpcy5tYXRyaXgsIHZhbHMsIGRvd24sIGJ1aWx0LCBrKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaXNOdW1iZXIodmFsc1trXSkpIHtcbiAgICAgICAgYWNjdW11bGF0ZWRba10gPSB2YWxzW2tdO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBhY2N1bXVsYXRlZCkge1xuICAgICAgaWYgKGFjY3VtdWxhdGVkW2tleV0gIT09IDApIHtcbiAgICAgICAgYnVpbHRbbGFzdFVuaXRdICs9IGtleSA9PT0gbGFzdFVuaXQgPyBhY2N1bXVsYXRlZFtrZXldIDogYWNjdW11bGF0ZWRba2V5XSAvIHRoaXMubWF0cml4W2xhc3RVbml0XVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2xvbmUodGhpcywge3ZhbHVlczogYnVpbHR9LCB0cnVlKS5ub3JtYWxpemUoKTtcbiAgfVxuICBuZWdhdGUoKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpXG4gICAgICByZXR1cm4gdGhpcztcbiAgICBjb25zdCBuZWdhdGVkID0ge307XG4gICAgZm9yIChjb25zdCBrIG9mIE9iamVjdC5rZXlzKHRoaXMudmFsdWVzKSkge1xuICAgICAgbmVnYXRlZFtrXSA9IHRoaXMudmFsdWVzW2tdID09PSAwID8gMCA6IC10aGlzLnZhbHVlc1trXTtcbiAgICB9XG4gICAgcmV0dXJuIGNsb25lKHRoaXMsIHt2YWx1ZXM6IG5lZ2F0ZWR9LCB0cnVlKTtcbiAgfVxuICBnZXQgeWVhcnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMudmFsdWVzLnllYXJzIHx8IDAgOiBOYU47XG4gIH1cbiAgZ2V0IHF1YXJ0ZXJzKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnZhbHVlcy5xdWFydGVycyB8fCAwIDogTmFOO1xuICB9XG4gIGdldCBtb250aHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMudmFsdWVzLm1vbnRocyB8fCAwIDogTmFOO1xuICB9XG4gIGdldCB3ZWVrcygpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy52YWx1ZXMud2Vla3MgfHwgMCA6IE5hTjtcbiAgfVxuICBnZXQgZGF5cygpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy52YWx1ZXMuZGF5cyB8fCAwIDogTmFOO1xuICB9XG4gIGdldCBob3VycygpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy52YWx1ZXMuaG91cnMgfHwgMCA6IE5hTjtcbiAgfVxuICBnZXQgbWludXRlcygpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy52YWx1ZXMubWludXRlcyB8fCAwIDogTmFOO1xuICB9XG4gIGdldCBzZWNvbmRzKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnZhbHVlcy5zZWNvbmRzIHx8IDAgOiBOYU47XG4gIH1cbiAgZ2V0IG1pbGxpc2Vjb25kcygpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy52YWx1ZXMubWlsbGlzZWNvbmRzIHx8IDAgOiBOYU47XG4gIH1cbiAgZ2V0IGlzVmFsaWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW52YWxpZCA9PT0gbnVsbDtcbiAgfVxuICBnZXQgaW52YWxpZFJlYXNvbigpIHtcbiAgICByZXR1cm4gdGhpcy5pbnZhbGlkID8gdGhpcy5pbnZhbGlkLnJlYXNvbiA6IG51bGw7XG4gIH1cbiAgZ2V0IGludmFsaWRFeHBsYW5hdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5pbnZhbGlkID8gdGhpcy5pbnZhbGlkLmV4cGxhbmF0aW9uIDogbnVsbDtcbiAgfVxuICBlcXVhbHMob3RoZXIpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCB8fCAhb3RoZXIuaXNWYWxpZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoIXRoaXMubG9jLmVxdWFscyhvdGhlci5sb2MpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGVxKHYxLCB2Mikge1xuICAgICAgaWYgKHYxID09PSB2b2lkIDAgfHwgdjEgPT09IDApXG4gICAgICAgIHJldHVybiB2MiA9PT0gdm9pZCAwIHx8IHYyID09PSAwO1xuICAgICAgcmV0dXJuIHYxID09PSB2MjtcbiAgICB9XG4gICAgZm9yIChjb25zdCB1IG9mIG9yZGVyZWRVbml0cykge1xuICAgICAgaWYgKCFlcSh0aGlzLnZhbHVlc1t1XSwgb3RoZXIudmFsdWVzW3VdKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xudmFyIElOVkFMSUQzID0gXCJJbnZhbGlkIEludGVydmFsXCI7XG5mdW5jdGlvbiB2YWxpZGF0ZVN0YXJ0RW5kKHN0YXJ0LCBlbmQpIHtcbiAgaWYgKCFzdGFydCB8fCAhc3RhcnQuaXNWYWxpZCkge1xuICAgIHJldHVybiBJbnRlcnZhbC5pbnZhbGlkKFwibWlzc2luZyBvciBpbnZhbGlkIHN0YXJ0XCIpO1xuICB9IGVsc2UgaWYgKCFlbmQgfHwgIWVuZC5pc1ZhbGlkKSB7XG4gICAgcmV0dXJuIEludGVydmFsLmludmFsaWQoXCJtaXNzaW5nIG9yIGludmFsaWQgZW5kXCIpO1xuICB9IGVsc2UgaWYgKGVuZCA8IHN0YXJ0KSB7XG4gICAgcmV0dXJuIEludGVydmFsLmludmFsaWQoXCJlbmQgYmVmb3JlIHN0YXJ0XCIsIGBUaGUgZW5kIG9mIGFuIGludGVydmFsIG11c3QgYmUgYWZ0ZXIgaXRzIHN0YXJ0LCBidXQgeW91IGhhZCBzdGFydD0ke3N0YXJ0LnRvSVNPKCl9IGFuZCBlbmQ9JHtlbmQudG9JU08oKX1gKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxudmFyIEludGVydmFsID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICB0aGlzLnMgPSBjb25maWcuc3RhcnQ7XG4gICAgdGhpcy5lID0gY29uZmlnLmVuZDtcbiAgICB0aGlzLmludmFsaWQgPSBjb25maWcuaW52YWxpZCB8fCBudWxsO1xuICAgIHRoaXMuaXNMdXhvbkludGVydmFsID0gdHJ1ZTtcbiAgfVxuICBzdGF0aWMgaW52YWxpZChyZWFzb24sIGV4cGxhbmF0aW9uID0gbnVsbCkge1xuICAgIGlmICghcmVhc29uKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXCJuZWVkIHRvIHNwZWNpZnkgYSByZWFzb24gdGhlIEludGVydmFsIGlzIGludmFsaWRcIik7XG4gICAgfVxuICAgIGNvbnN0IGludmFsaWQgPSByZWFzb24gaW5zdGFuY2VvZiBJbnZhbGlkID8gcmVhc29uIDogbmV3IEludmFsaWQocmVhc29uLCBleHBsYW5hdGlvbik7XG4gICAgaWYgKFNldHRpbmdzLnRocm93T25JbnZhbGlkKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEludGVydmFsRXJyb3IoaW52YWxpZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgSW50ZXJ2YWwoe2ludmFsaWR9KTtcbiAgICB9XG4gIH1cbiAgc3RhdGljIGZyb21EYXRlVGltZXMoc3RhcnQsIGVuZCkge1xuICAgIGNvbnN0IGJ1aWx0U3RhcnQgPSBmcmllbmRseURhdGVUaW1lKHN0YXJ0KSwgYnVpbHRFbmQgPSBmcmllbmRseURhdGVUaW1lKGVuZCk7XG4gICAgY29uc3QgdmFsaWRhdGVFcnJvciA9IHZhbGlkYXRlU3RhcnRFbmQoYnVpbHRTdGFydCwgYnVpbHRFbmQpO1xuICAgIGlmICh2YWxpZGF0ZUVycm9yID09IG51bGwpIHtcbiAgICAgIHJldHVybiBuZXcgSW50ZXJ2YWwoe1xuICAgICAgICBzdGFydDogYnVpbHRTdGFydCxcbiAgICAgICAgZW5kOiBidWlsdEVuZFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB2YWxpZGF0ZUVycm9yO1xuICAgIH1cbiAgfVxuICBzdGF0aWMgYWZ0ZXIoc3RhcnQsIGR1cmF0aW9uKSB7XG4gICAgY29uc3QgZHVyID0gRHVyYXRpb24uZnJvbUR1cmF0aW9uTGlrZShkdXJhdGlvbiksIGR0ID0gZnJpZW5kbHlEYXRlVGltZShzdGFydCk7XG4gICAgcmV0dXJuIEludGVydmFsLmZyb21EYXRlVGltZXMoZHQsIGR0LnBsdXMoZHVyKSk7XG4gIH1cbiAgc3RhdGljIGJlZm9yZShlbmQsIGR1cmF0aW9uKSB7XG4gICAgY29uc3QgZHVyID0gRHVyYXRpb24uZnJvbUR1cmF0aW9uTGlrZShkdXJhdGlvbiksIGR0ID0gZnJpZW5kbHlEYXRlVGltZShlbmQpO1xuICAgIHJldHVybiBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKGR0Lm1pbnVzKGR1ciksIGR0KTtcbiAgfVxuICBzdGF0aWMgZnJvbUlTTyh0ZXh0LCBvcHRzKSB7XG4gICAgY29uc3QgW3MyLCBlXSA9ICh0ZXh0IHx8IFwiXCIpLnNwbGl0KFwiL1wiLCAyKTtcbiAgICBpZiAoczIgJiYgZSkge1xuICAgICAgbGV0IHN0YXJ0LCBzdGFydElzVmFsaWQ7XG4gICAgICB0cnkge1xuICAgICAgICBzdGFydCA9IERhdGVUaW1lLmZyb21JU08oczIsIG9wdHMpO1xuICAgICAgICBzdGFydElzVmFsaWQgPSBzdGFydC5pc1ZhbGlkO1xuICAgICAgfSBjYXRjaCAoZTIpIHtcbiAgICAgICAgc3RhcnRJc1ZhbGlkID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBsZXQgZW5kLCBlbmRJc1ZhbGlkO1xuICAgICAgdHJ5IHtcbiAgICAgICAgZW5kID0gRGF0ZVRpbWUuZnJvbUlTTyhlLCBvcHRzKTtcbiAgICAgICAgZW5kSXNWYWxpZCA9IGVuZC5pc1ZhbGlkO1xuICAgICAgfSBjYXRjaCAoZTIpIHtcbiAgICAgICAgZW5kSXNWYWxpZCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXJ0SXNWYWxpZCAmJiBlbmRJc1ZhbGlkKSB7XG4gICAgICAgIHJldHVybiBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKHN0YXJ0LCBlbmQpO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXJ0SXNWYWxpZCkge1xuICAgICAgICBjb25zdCBkdXIgPSBEdXJhdGlvbi5mcm9tSVNPKGUsIG9wdHMpO1xuICAgICAgICBpZiAoZHVyLmlzVmFsaWQpIHtcbiAgICAgICAgICByZXR1cm4gSW50ZXJ2YWwuYWZ0ZXIoc3RhcnQsIGR1cik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZW5kSXNWYWxpZCkge1xuICAgICAgICBjb25zdCBkdXIgPSBEdXJhdGlvbi5mcm9tSVNPKHMyLCBvcHRzKTtcbiAgICAgICAgaWYgKGR1ci5pc1ZhbGlkKSB7XG4gICAgICAgICAgcmV0dXJuIEludGVydmFsLmJlZm9yZShlbmQsIGR1cik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIEludGVydmFsLmludmFsaWQoXCJ1bnBhcnNhYmxlXCIsIGB0aGUgaW5wdXQgXCIke3RleHR9XCIgY2FuJ3QgYmUgcGFyc2VkIGFzIElTTyA4NjAxYCk7XG4gIH1cbiAgc3RhdGljIGlzSW50ZXJ2YWwobykge1xuICAgIHJldHVybiBvICYmIG8uaXNMdXhvbkludGVydmFsIHx8IGZhbHNlO1xuICB9XG4gIGdldCBzdGFydCgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5zIDogbnVsbDtcbiAgfVxuICBnZXQgZW5kKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLmUgOiBudWxsO1xuICB9XG4gIGdldCBpc1ZhbGlkKCkge1xuICAgIHJldHVybiB0aGlzLmludmFsaWRSZWFzb24gPT09IG51bGw7XG4gIH1cbiAgZ2V0IGludmFsaWRSZWFzb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaW52YWxpZCA/IHRoaXMuaW52YWxpZC5yZWFzb24gOiBudWxsO1xuICB9XG4gIGdldCBpbnZhbGlkRXhwbGFuYXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaW52YWxpZCA/IHRoaXMuaW52YWxpZC5leHBsYW5hdGlvbiA6IG51bGw7XG4gIH1cbiAgbGVuZ3RoKHVuaXQgPSBcIm1pbGxpc2Vjb25kc1wiKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMudG9EdXJhdGlvbiguLi5bdW5pdF0pLmdldCh1bml0KSA6IE5hTjtcbiAgfVxuICBjb3VudCh1bml0ID0gXCJtaWxsaXNlY29uZHNcIikge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKVxuICAgICAgcmV0dXJuIE5hTjtcbiAgICBjb25zdCBzdGFydCA9IHRoaXMuc3RhcnQuc3RhcnRPZih1bml0KSwgZW5kID0gdGhpcy5lbmQuc3RhcnRPZih1bml0KTtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihlbmQuZGlmZihzdGFydCwgdW5pdCkuZ2V0KHVuaXQpKSArIDE7XG4gIH1cbiAgaGFzU2FtZSh1bml0KSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMuaXNFbXB0eSgpIHx8IHRoaXMuZS5taW51cygxKS5oYXNTYW1lKHRoaXMucywgdW5pdCkgOiBmYWxzZTtcbiAgfVxuICBpc0VtcHR5KCkge1xuICAgIHJldHVybiB0aGlzLnMudmFsdWVPZigpID09PSB0aGlzLmUudmFsdWVPZigpO1xuICB9XG4gIGlzQWZ0ZXIoZGF0ZVRpbWUpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZClcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdGhpcy5zID4gZGF0ZVRpbWU7XG4gIH1cbiAgaXNCZWZvcmUoZGF0ZVRpbWUpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZClcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdGhpcy5lIDw9IGRhdGVUaW1lO1xuICB9XG4gIGNvbnRhaW5zKGRhdGVUaW1lKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRoaXMucyA8PSBkYXRlVGltZSAmJiB0aGlzLmUgPiBkYXRlVGltZTtcbiAgfVxuICBzZXQoe3N0YXJ0LCBlbmR9ID0ge30pIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZClcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIHJldHVybiBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKHN0YXJ0IHx8IHRoaXMucywgZW5kIHx8IHRoaXMuZSk7XG4gIH1cbiAgc3BsaXRBdCguLi5kYXRlVGltZXMpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZClcbiAgICAgIHJldHVybiBbXTtcbiAgICBjb25zdCBzb3J0ZWQgPSBkYXRlVGltZXMubWFwKGZyaWVuZGx5RGF0ZVRpbWUpLmZpbHRlcigoZCkgPT4gdGhpcy5jb250YWlucyhkKSkuc29ydCgpLCByZXN1bHRzID0gW107XG4gICAgbGV0IHtzOiBzMn0gPSB0aGlzLCBpID0gMDtcbiAgICB3aGlsZSAoczIgPCB0aGlzLmUpIHtcbiAgICAgIGNvbnN0IGFkZGVkID0gc29ydGVkW2ldIHx8IHRoaXMuZSwgbmV4dCA9ICthZGRlZCA+ICt0aGlzLmUgPyB0aGlzLmUgOiBhZGRlZDtcbiAgICAgIHJlc3VsdHMucHVzaChJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKHMyLCBuZXh0KSk7XG4gICAgICBzMiA9IG5leHQ7XG4gICAgICBpICs9IDE7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzO1xuICB9XG4gIHNwbGl0QnkoZHVyYXRpb24pIHtcbiAgICBjb25zdCBkdXIgPSBEdXJhdGlvbi5mcm9tRHVyYXRpb25MaWtlKGR1cmF0aW9uKTtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCB8fCAhZHVyLmlzVmFsaWQgfHwgZHVyLmFzKFwibWlsbGlzZWNvbmRzXCIpID09PSAwKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGxldCB7czogczJ9ID0gdGhpcywgaWR4ID0gMSwgbmV4dDtcbiAgICBjb25zdCByZXN1bHRzID0gW107XG4gICAgd2hpbGUgKHMyIDwgdGhpcy5lKSB7XG4gICAgICBjb25zdCBhZGRlZCA9IHRoaXMuc3RhcnQucGx1cyhkdXIubWFwVW5pdHMoKHgpID0+IHggKiBpZHgpKTtcbiAgICAgIG5leHQgPSArYWRkZWQgPiArdGhpcy5lID8gdGhpcy5lIDogYWRkZWQ7XG4gICAgICByZXN1bHRzLnB1c2goSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhzMiwgbmV4dCkpO1xuICAgICAgczIgPSBuZXh0O1xuICAgICAgaWR4ICs9IDE7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzO1xuICB9XG4gIGRpdmlkZUVxdWFsbHkobnVtYmVyT2ZQYXJ0cykge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKVxuICAgICAgcmV0dXJuIFtdO1xuICAgIHJldHVybiB0aGlzLnNwbGl0QnkodGhpcy5sZW5ndGgoKSAvIG51bWJlck9mUGFydHMpLnNsaWNlKDAsIG51bWJlck9mUGFydHMpO1xuICB9XG4gIG92ZXJsYXBzKG90aGVyKSB7XG4gICAgcmV0dXJuIHRoaXMuZSA+IG90aGVyLnMgJiYgdGhpcy5zIDwgb3RoZXIuZTtcbiAgfVxuICBhYnV0c1N0YXJ0KG90aGVyKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuICt0aGlzLmUgPT09ICtvdGhlci5zO1xuICB9XG4gIGFidXRzRW5kKG90aGVyKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuICtvdGhlci5lID09PSArdGhpcy5zO1xuICB9XG4gIGVuZ3VsZnMob3RoZXIpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZClcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdGhpcy5zIDw9IG90aGVyLnMgJiYgdGhpcy5lID49IG90aGVyLmU7XG4gIH1cbiAgZXF1YWxzKG90aGVyKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQgfHwgIW90aGVyLmlzVmFsaWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucy5lcXVhbHMob3RoZXIucykgJiYgdGhpcy5lLmVxdWFscyhvdGhlci5lKTtcbiAgfVxuICBpbnRlcnNlY3Rpb24ob3RoZXIpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZClcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIGNvbnN0IHMyID0gdGhpcy5zID4gb3RoZXIucyA/IHRoaXMucyA6IG90aGVyLnMsIGUgPSB0aGlzLmUgPCBvdGhlci5lID8gdGhpcy5lIDogb3RoZXIuZTtcbiAgICBpZiAoczIgPj0gZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKHMyLCBlKTtcbiAgICB9XG4gIH1cbiAgdW5pb24ob3RoZXIpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZClcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIGNvbnN0IHMyID0gdGhpcy5zIDwgb3RoZXIucyA/IHRoaXMucyA6IG90aGVyLnMsIGUgPSB0aGlzLmUgPiBvdGhlci5lID8gdGhpcy5lIDogb3RoZXIuZTtcbiAgICByZXR1cm4gSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhzMiwgZSk7XG4gIH1cbiAgc3RhdGljIG1lcmdlKGludGVydmFscykge1xuICAgIGNvbnN0IFtmb3VuZCwgZmluYWxdID0gaW50ZXJ2YWxzLnNvcnQoKGEsIGIpID0+IGEucyAtIGIucykucmVkdWNlKChbc29mYXIsIGN1cnJlbnRdLCBpdGVtKSA9PiB7XG4gICAgICBpZiAoIWN1cnJlbnQpIHtcbiAgICAgICAgcmV0dXJuIFtzb2ZhciwgaXRlbV07XG4gICAgICB9IGVsc2UgaWYgKGN1cnJlbnQub3ZlcmxhcHMoaXRlbSkgfHwgY3VycmVudC5hYnV0c1N0YXJ0KGl0ZW0pKSB7XG4gICAgICAgIHJldHVybiBbc29mYXIsIGN1cnJlbnQudW5pb24oaXRlbSldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFtzb2Zhci5jb25jYXQoW2N1cnJlbnRdKSwgaXRlbV07XG4gICAgICB9XG4gICAgfSwgW1tdLCBudWxsXSk7XG4gICAgaWYgKGZpbmFsKSB7XG4gICAgICBmb3VuZC5wdXNoKGZpbmFsKTtcbiAgICB9XG4gICAgcmV0dXJuIGZvdW5kO1xuICB9XG4gIHN0YXRpYyB4b3IoaW50ZXJ2YWxzKSB7XG4gICAgbGV0IHN0YXJ0ID0gbnVsbCwgY3VycmVudENvdW50ID0gMDtcbiAgICBjb25zdCByZXN1bHRzID0gW10sIGVuZHMgPSBpbnRlcnZhbHMubWFwKChpKSA9PiBbXG4gICAgICB7dGltZTogaS5zLCB0eXBlOiBcInNcIn0sXG4gICAgICB7dGltZTogaS5lLCB0eXBlOiBcImVcIn1cbiAgICBdKSwgZmxhdHRlbmVkID0gQXJyYXkucHJvdG90eXBlLmNvbmNhdCguLi5lbmRzKSwgYXJyID0gZmxhdHRlbmVkLnNvcnQoKGEsIGIpID0+IGEudGltZSAtIGIudGltZSk7XG4gICAgZm9yIChjb25zdCBpIG9mIGFycikge1xuICAgICAgY3VycmVudENvdW50ICs9IGkudHlwZSA9PT0gXCJzXCIgPyAxIDogLTE7XG4gICAgICBpZiAoY3VycmVudENvdW50ID09PSAxKSB7XG4gICAgICAgIHN0YXJ0ID0gaS50aW1lO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHN0YXJ0ICYmICtzdGFydCAhPT0gK2kudGltZSkge1xuICAgICAgICAgIHJlc3VsdHMucHVzaChJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKHN0YXJ0LCBpLnRpbWUpKTtcbiAgICAgICAgfVxuICAgICAgICBzdGFydCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBJbnRlcnZhbC5tZXJnZShyZXN1bHRzKTtcbiAgfVxuICBkaWZmZXJlbmNlKC4uLmludGVydmFscykge1xuICAgIHJldHVybiBJbnRlcnZhbC54b3IoW3RoaXNdLmNvbmNhdChpbnRlcnZhbHMpKS5tYXAoKGkpID0+IHRoaXMuaW50ZXJzZWN0aW9uKGkpKS5maWx0ZXIoKGkpID0+IGkgJiYgIWkuaXNFbXB0eSgpKTtcbiAgfVxuICB0b1N0cmluZygpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZClcbiAgICAgIHJldHVybiBJTlZBTElEMztcbiAgICByZXR1cm4gYFske3RoaXMucy50b0lTTygpfSBcXHUyMDEzICR7dGhpcy5lLnRvSVNPKCl9KWA7XG4gIH1cbiAgdG9JU08ob3B0cykge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKVxuICAgICAgcmV0dXJuIElOVkFMSUQzO1xuICAgIHJldHVybiBgJHt0aGlzLnMudG9JU08ob3B0cyl9LyR7dGhpcy5lLnRvSVNPKG9wdHMpfWA7XG4gIH1cbiAgdG9JU09EYXRlKCkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKVxuICAgICAgcmV0dXJuIElOVkFMSUQzO1xuICAgIHJldHVybiBgJHt0aGlzLnMudG9JU09EYXRlKCl9LyR7dGhpcy5lLnRvSVNPRGF0ZSgpfWA7XG4gIH1cbiAgdG9JU09UaW1lKG9wdHMpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZClcbiAgICAgIHJldHVybiBJTlZBTElEMztcbiAgICByZXR1cm4gYCR7dGhpcy5zLnRvSVNPVGltZShvcHRzKX0vJHt0aGlzLmUudG9JU09UaW1lKG9wdHMpfWA7XG4gIH1cbiAgdG9Gb3JtYXQoZGF0ZUZvcm1hdCwge3NlcGFyYXRvciA9IFwiIFxcdTIwMTMgXCJ9ID0ge30pIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZClcbiAgICAgIHJldHVybiBJTlZBTElEMztcbiAgICByZXR1cm4gYCR7dGhpcy5zLnRvRm9ybWF0KGRhdGVGb3JtYXQpfSR7c2VwYXJhdG9yfSR7dGhpcy5lLnRvRm9ybWF0KGRhdGVGb3JtYXQpfWA7XG4gIH1cbiAgdG9EdXJhdGlvbih1bml0LCBvcHRzKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHtcbiAgICAgIHJldHVybiBEdXJhdGlvbi5pbnZhbGlkKHRoaXMuaW52YWxpZFJlYXNvbik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmUuZGlmZih0aGlzLnMsIHVuaXQsIG9wdHMpO1xuICB9XG4gIG1hcEVuZHBvaW50cyhtYXBGbikge1xuICAgIHJldHVybiBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKG1hcEZuKHRoaXMucyksIG1hcEZuKHRoaXMuZSkpO1xuICB9XG59O1xudmFyIEluZm8gPSBjbGFzcyB7XG4gIHN0YXRpYyBoYXNEU1Qoem9uZSA9IFNldHRpbmdzLmRlZmF1bHRab25lKSB7XG4gICAgY29uc3QgcHJvdG8gPSBEYXRlVGltZS5ub3coKS5zZXRab25lKHpvbmUpLnNldCh7bW9udGg6IDEyfSk7XG4gICAgcmV0dXJuICF6b25lLmlzVW5pdmVyc2FsICYmIHByb3RvLm9mZnNldCAhPT0gcHJvdG8uc2V0KHttb250aDogNn0pLm9mZnNldDtcbiAgfVxuICBzdGF0aWMgaXNWYWxpZElBTkFab25lKHpvbmUpIHtcbiAgICByZXR1cm4gSUFOQVpvbmUuaXNWYWxpZFpvbmUoem9uZSk7XG4gIH1cbiAgc3RhdGljIG5vcm1hbGl6ZVpvbmUoaW5wdXQpIHtcbiAgICByZXR1cm4gbm9ybWFsaXplWm9uZShpbnB1dCwgU2V0dGluZ3MuZGVmYXVsdFpvbmUpO1xuICB9XG4gIHN0YXRpYyBtb250aHMobGVuZ3RoID0gXCJsb25nXCIsIHtsb2NhbGUgPSBudWxsLCBudW1iZXJpbmdTeXN0ZW0gPSBudWxsLCBsb2NPYmogPSBudWxsLCBvdXRwdXRDYWxlbmRhciA9IFwiZ3JlZ29yeVwifSA9IHt9KSB7XG4gICAgcmV0dXJuIChsb2NPYmogfHwgTG9jYWxlLmNyZWF0ZShsb2NhbGUsIG51bWJlcmluZ1N5c3RlbSwgb3V0cHV0Q2FsZW5kYXIpKS5tb250aHMobGVuZ3RoKTtcbiAgfVxuICBzdGF0aWMgbW9udGhzRm9ybWF0KGxlbmd0aCA9IFwibG9uZ1wiLCB7bG9jYWxlID0gbnVsbCwgbnVtYmVyaW5nU3lzdGVtID0gbnVsbCwgbG9jT2JqID0gbnVsbCwgb3V0cHV0Q2FsZW5kYXIgPSBcImdyZWdvcnlcIn0gPSB7fSkge1xuICAgIHJldHVybiAobG9jT2JqIHx8IExvY2FsZS5jcmVhdGUobG9jYWxlLCBudW1iZXJpbmdTeXN0ZW0sIG91dHB1dENhbGVuZGFyKSkubW9udGhzKGxlbmd0aCwgdHJ1ZSk7XG4gIH1cbiAgc3RhdGljIHdlZWtkYXlzKGxlbmd0aCA9IFwibG9uZ1wiLCB7bG9jYWxlID0gbnVsbCwgbnVtYmVyaW5nU3lzdGVtID0gbnVsbCwgbG9jT2JqID0gbnVsbH0gPSB7fSkge1xuICAgIHJldHVybiAobG9jT2JqIHx8IExvY2FsZS5jcmVhdGUobG9jYWxlLCBudW1iZXJpbmdTeXN0ZW0sIG51bGwpKS53ZWVrZGF5cyhsZW5ndGgpO1xuICB9XG4gIHN0YXRpYyB3ZWVrZGF5c0Zvcm1hdChsZW5ndGggPSBcImxvbmdcIiwge2xvY2FsZSA9IG51bGwsIG51bWJlcmluZ1N5c3RlbSA9IG51bGwsIGxvY09iaiA9IG51bGx9ID0ge30pIHtcbiAgICByZXR1cm4gKGxvY09iaiB8fCBMb2NhbGUuY3JlYXRlKGxvY2FsZSwgbnVtYmVyaW5nU3lzdGVtLCBudWxsKSkud2Vla2RheXMobGVuZ3RoLCB0cnVlKTtcbiAgfVxuICBzdGF0aWMgbWVyaWRpZW1zKHtsb2NhbGUgPSBudWxsfSA9IHt9KSB7XG4gICAgcmV0dXJuIExvY2FsZS5jcmVhdGUobG9jYWxlKS5tZXJpZGllbXMoKTtcbiAgfVxuICBzdGF0aWMgZXJhcyhsZW5ndGggPSBcInNob3J0XCIsIHtsb2NhbGUgPSBudWxsfSA9IHt9KSB7XG4gICAgcmV0dXJuIExvY2FsZS5jcmVhdGUobG9jYWxlLCBudWxsLCBcImdyZWdvcnlcIikuZXJhcyhsZW5ndGgpO1xuICB9XG4gIHN0YXRpYyBmZWF0dXJlcygpIHtcbiAgICByZXR1cm4ge3JlbGF0aXZlOiBoYXNSZWxhdGl2ZSgpfTtcbiAgfVxufTtcbmZ1bmN0aW9uIGRheURpZmYoZWFybGllciwgbGF0ZXIpIHtcbiAgY29uc3QgdXRjRGF5U3RhcnQgPSAoZHQpID0+IGR0LnRvVVRDKDAsIHtrZWVwTG9jYWxUaW1lOiB0cnVlfSkuc3RhcnRPZihcImRheVwiKS52YWx1ZU9mKCksIG1zID0gdXRjRGF5U3RhcnQobGF0ZXIpIC0gdXRjRGF5U3RhcnQoZWFybGllcik7XG4gIHJldHVybiBNYXRoLmZsb29yKER1cmF0aW9uLmZyb21NaWxsaXMobXMpLmFzKFwiZGF5c1wiKSk7XG59XG5mdW5jdGlvbiBoaWdoT3JkZXJEaWZmcyhjdXJzb3IsIGxhdGVyLCB1bml0cykge1xuICBjb25zdCBkaWZmZXJzID0gW1xuICAgIFtcInllYXJzXCIsIChhLCBiKSA9PiBiLnllYXIgLSBhLnllYXJdLFxuICAgIFtcInF1YXJ0ZXJzXCIsIChhLCBiKSA9PiBiLnF1YXJ0ZXIgLSBhLnF1YXJ0ZXJdLFxuICAgIFtcIm1vbnRoc1wiLCAoYSwgYikgPT4gYi5tb250aCAtIGEubW9udGggKyAoYi55ZWFyIC0gYS55ZWFyKSAqIDEyXSxcbiAgICBbXG4gICAgICBcIndlZWtzXCIsXG4gICAgICAoYSwgYikgPT4ge1xuICAgICAgICBjb25zdCBkYXlzID0gZGF5RGlmZihhLCBiKTtcbiAgICAgICAgcmV0dXJuIChkYXlzIC0gZGF5cyAlIDcpIC8gNztcbiAgICAgIH1cbiAgICBdLFxuICAgIFtcImRheXNcIiwgZGF5RGlmZl1cbiAgXTtcbiAgY29uc3QgcmVzdWx0cyA9IHt9O1xuICBsZXQgbG93ZXN0T3JkZXIsIGhpZ2hXYXRlcjtcbiAgZm9yIChjb25zdCBbdW5pdCwgZGlmZmVyXSBvZiBkaWZmZXJzKSB7XG4gICAgaWYgKHVuaXRzLmluZGV4T2YodW5pdCkgPj0gMCkge1xuICAgICAgbG93ZXN0T3JkZXIgPSB1bml0O1xuICAgICAgbGV0IGRlbHRhID0gZGlmZmVyKGN1cnNvciwgbGF0ZXIpO1xuICAgICAgaGlnaFdhdGVyID0gY3Vyc29yLnBsdXMoe1t1bml0XTogZGVsdGF9KTtcbiAgICAgIGlmIChoaWdoV2F0ZXIgPiBsYXRlcikge1xuICAgICAgICBjdXJzb3IgPSBjdXJzb3IucGx1cyh7W3VuaXRdOiBkZWx0YSAtIDF9KTtcbiAgICAgICAgZGVsdGEgLT0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN1cnNvciA9IGhpZ2hXYXRlcjtcbiAgICAgIH1cbiAgICAgIHJlc3VsdHNbdW5pdF0gPSBkZWx0YTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFtjdXJzb3IsIHJlc3VsdHMsIGhpZ2hXYXRlciwgbG93ZXN0T3JkZXJdO1xufVxuZnVuY3Rpb24gZGlmZl9kZWZhdWx0KGVhcmxpZXIsIGxhdGVyLCB1bml0cywgb3B0cykge1xuICBsZXQgW2N1cnNvciwgcmVzdWx0cywgaGlnaFdhdGVyLCBsb3dlc3RPcmRlcl0gPSBoaWdoT3JkZXJEaWZmcyhlYXJsaWVyLCBsYXRlciwgdW5pdHMpO1xuICBjb25zdCByZW1haW5pbmdNaWxsaXMgPSBsYXRlciAtIGN1cnNvcjtcbiAgY29uc3QgbG93ZXJPcmRlclVuaXRzID0gdW5pdHMuZmlsdGVyKCh1KSA9PiBbXCJob3Vyc1wiLCBcIm1pbnV0ZXNcIiwgXCJzZWNvbmRzXCIsIFwibWlsbGlzZWNvbmRzXCJdLmluZGV4T2YodSkgPj0gMCk7XG4gIGlmIChsb3dlck9yZGVyVW5pdHMubGVuZ3RoID09PSAwKSB7XG4gICAgaWYgKGhpZ2hXYXRlciA8IGxhdGVyKSB7XG4gICAgICBoaWdoV2F0ZXIgPSBjdXJzb3IucGx1cyh7W2xvd2VzdE9yZGVyXTogMX0pO1xuICAgIH1cbiAgICBpZiAoaGlnaFdhdGVyICE9PSBjdXJzb3IpIHtcbiAgICAgIHJlc3VsdHNbbG93ZXN0T3JkZXJdID0gKHJlc3VsdHNbbG93ZXN0T3JkZXJdIHx8IDApICsgcmVtYWluaW5nTWlsbGlzIC8gKGhpZ2hXYXRlciAtIGN1cnNvcik7XG4gICAgfVxuICB9XG4gIGNvbnN0IGR1cmF0aW9uID0gRHVyYXRpb24uZnJvbU9iamVjdChyZXN1bHRzLCBvcHRzKTtcbiAgaWYgKGxvd2VyT3JkZXJVbml0cy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIER1cmF0aW9uLmZyb21NaWxsaXMocmVtYWluaW5nTWlsbGlzLCBvcHRzKS5zaGlmdFRvKC4uLmxvd2VyT3JkZXJVbml0cykucGx1cyhkdXJhdGlvbik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGR1cmF0aW9uO1xuICB9XG59XG52YXIgbnVtYmVyaW5nU3lzdGVtcyA9IHtcbiAgYXJhYjogXCJbXFx1MDY2MC1cXHUwNjY5XVwiLFxuICBhcmFiZXh0OiBcIltcXHUwNkYwLVxcdTA2RjldXCIsXG4gIGJhbGk6IFwiW1xcdTFCNTAtXFx1MUI1OV1cIixcbiAgYmVuZzogXCJbXFx1MDlFNi1cXHUwOUVGXVwiLFxuICBkZXZhOiBcIltcXHUwOTY2LVxcdTA5NkZdXCIsXG4gIGZ1bGx3aWRlOiBcIltcXHVGRjEwLVxcdUZGMTldXCIsXG4gIGd1anI6IFwiW1xcdTBBRTYtXFx1MEFFRl1cIixcbiAgaGFuaWRlYzogXCJbXFx1MzAwN3xcXHU0RTAwfFxcdTRFOEN8XFx1NEUwOXxcXHU1NkRCfFxcdTRFOTR8XFx1NTE2RHxcXHU0RTAzfFxcdTUxNkJ8XFx1NEU1RF1cIixcbiAga2htcjogXCJbXFx1MTdFMC1cXHUxN0U5XVwiLFxuICBrbmRhOiBcIltcXHUwQ0U2LVxcdTBDRUZdXCIsXG4gIGxhb286IFwiW1xcdTBFRDAtXFx1MEVEOV1cIixcbiAgbGltYjogXCJbXFx1MTk0Ni1cXHUxOTRGXVwiLFxuICBtbHltOiBcIltcXHUwRDY2LVxcdTBENkZdXCIsXG4gIG1vbmc6IFwiW1xcdTE4MTAtXFx1MTgxOV1cIixcbiAgbXltcjogXCJbXFx1MTA0MC1cXHUxMDQ5XVwiLFxuICBvcnlhOiBcIltcXHUwQjY2LVxcdTBCNkZdXCIsXG4gIHRhbWxkZWM6IFwiW1xcdTBCRTYtXFx1MEJFRl1cIixcbiAgdGVsdTogXCJbXFx1MEM2Ni1cXHUwQzZGXVwiLFxuICB0aGFpOiBcIltcXHUwRTUwLVxcdTBFNTldXCIsXG4gIHRpYnQ6IFwiW1xcdTBGMjAtXFx1MEYyOV1cIixcbiAgbGF0bjogXCJcXFxcZFwiXG59O1xudmFyIG51bWJlcmluZ1N5c3RlbXNVVEYxNiA9IHtcbiAgYXJhYjogWzE2MzIsIDE2NDFdLFxuICBhcmFiZXh0OiBbMTc3NiwgMTc4NV0sXG4gIGJhbGk6IFs2OTkyLCA3MDAxXSxcbiAgYmVuZzogWzI1MzQsIDI1NDNdLFxuICBkZXZhOiBbMjQwNiwgMjQxNV0sXG4gIGZ1bGx3aWRlOiBbNjUyOTYsIDY1MzAzXSxcbiAgZ3VqcjogWzI3OTAsIDI3OTldLFxuICBraG1yOiBbNjExMiwgNjEyMV0sXG4gIGtuZGE6IFszMzAyLCAzMzExXSxcbiAgbGFvbzogWzM3OTIsIDM4MDFdLFxuICBsaW1iOiBbNjQ3MCwgNjQ3OV0sXG4gIG1seW06IFszNDMwLCAzNDM5XSxcbiAgbW9uZzogWzYxNjAsIDYxNjldLFxuICBteW1yOiBbNDE2MCwgNDE2OV0sXG4gIG9yeWE6IFsyOTE4LCAyOTI3XSxcbiAgdGFtbGRlYzogWzMwNDYsIDMwNTVdLFxuICB0ZWx1OiBbMzE3NCwgMzE4M10sXG4gIHRoYWk6IFszNjY0LCAzNjczXSxcbiAgdGlidDogWzM4NzIsIDM4ODFdXG59O1xudmFyIGhhbmlkZWNDaGFycyA9IG51bWJlcmluZ1N5c3RlbXMuaGFuaWRlYy5yZXBsYWNlKC9bXFxbfFxcXV0vZywgXCJcIikuc3BsaXQoXCJcIik7XG5mdW5jdGlvbiBwYXJzZURpZ2l0cyhzdHIpIHtcbiAgbGV0IHZhbHVlID0gcGFyc2VJbnQoc3RyLCAxMCk7XG4gIGlmIChpc05hTih2YWx1ZSkpIHtcbiAgICB2YWx1ZSA9IFwiXCI7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGNvZGUgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICAgIGlmIChzdHJbaV0uc2VhcmNoKG51bWJlcmluZ1N5c3RlbXMuaGFuaWRlYykgIT09IC0xKSB7XG4gICAgICAgIHZhbHVlICs9IGhhbmlkZWNDaGFycy5pbmRleE9mKHN0cltpXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBudW1iZXJpbmdTeXN0ZW1zVVRGMTYpIHtcbiAgICAgICAgICBjb25zdCBbbWluLCBtYXhdID0gbnVtYmVyaW5nU3lzdGVtc1VURjE2W2tleV07XG4gICAgICAgICAgaWYgKGNvZGUgPj0gbWluICYmIGNvZGUgPD0gbWF4KSB7XG4gICAgICAgICAgICB2YWx1ZSArPSBjb2RlIC0gbWluO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cbmZ1bmN0aW9uIGRpZ2l0UmVnZXgoe251bWJlcmluZ1N5c3RlbX0sIGFwcGVuZCA9IFwiXCIpIHtcbiAgcmV0dXJuIG5ldyBSZWdFeHAoYCR7bnVtYmVyaW5nU3lzdGVtc1tudW1iZXJpbmdTeXN0ZW0gfHwgXCJsYXRuXCJdfSR7YXBwZW5kfWApO1xufVxudmFyIE1JU1NJTkdfRlRQID0gXCJtaXNzaW5nIEludGwuRGF0ZVRpbWVGb3JtYXQuZm9ybWF0VG9QYXJ0cyBzdXBwb3J0XCI7XG5mdW5jdGlvbiBpbnRVbml0KHJlZ2V4LCBwb3N0ID0gKGkpID0+IGkpIHtcbiAgcmV0dXJuIHtyZWdleCwgZGVzZXI6IChbczJdKSA9PiBwb3N0KHBhcnNlRGlnaXRzKHMyKSl9O1xufVxudmFyIE5CU1AgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDE2MCk7XG52YXIgc3BhY2VPck5CU1AgPSBgWyAke05CU1B9XWA7XG52YXIgc3BhY2VPck5CU1BSZWdFeHAgPSBuZXcgUmVnRXhwKHNwYWNlT3JOQlNQLCBcImdcIik7XG5mdW5jdGlvbiBmaXhMaXN0UmVnZXgoczIpIHtcbiAgcmV0dXJuIHMyLnJlcGxhY2UoL1xcLi9nLCBcIlxcXFwuP1wiKS5yZXBsYWNlKHNwYWNlT3JOQlNQUmVnRXhwLCBzcGFjZU9yTkJTUCk7XG59XG5mdW5jdGlvbiBzdHJpcEluc2Vuc2l0aXZpdGllcyhzMikge1xuICByZXR1cm4gczIucmVwbGFjZSgvXFwuL2csIFwiXCIpLnJlcGxhY2Uoc3BhY2VPck5CU1BSZWdFeHAsIFwiIFwiKS50b0xvd2VyQ2FzZSgpO1xufVxuZnVuY3Rpb24gb25lT2Yoc3RyaW5ncywgc3RhcnRJbmRleCkge1xuICBpZiAoc3RyaW5ncyA9PT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB7XG4gICAgICByZWdleDogUmVnRXhwKHN0cmluZ3MubWFwKGZpeExpc3RSZWdleCkuam9pbihcInxcIikpLFxuICAgICAgZGVzZXI6IChbczJdKSA9PiBzdHJpbmdzLmZpbmRJbmRleCgoaSkgPT4gc3RyaXBJbnNlbnNpdGl2aXRpZXMoczIpID09PSBzdHJpcEluc2Vuc2l0aXZpdGllcyhpKSkgKyBzdGFydEluZGV4XG4gICAgfTtcbiAgfVxufVxuZnVuY3Rpb24gb2Zmc2V0KHJlZ2V4LCBncm91cHMpIHtcbiAgcmV0dXJuIHtyZWdleCwgZGVzZXI6IChbLCBoLCBtXSkgPT4gc2lnbmVkT2Zmc2V0KGgsIG0pLCBncm91cHN9O1xufVxuZnVuY3Rpb24gc2ltcGxlKHJlZ2V4KSB7XG4gIHJldHVybiB7cmVnZXgsIGRlc2VyOiAoW3MyXSkgPT4gczJ9O1xufVxuZnVuY3Rpb24gZXNjYXBlVG9rZW4odmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoL1tcXC1cXFtcXF17fSgpKis/LixcXFxcXFxeJHwjXFxzXS9nLCBcIlxcXFwkJlwiKTtcbn1cbmZ1bmN0aW9uIHVuaXRGb3JUb2tlbih0b2tlbiwgbG9jKSB7XG4gIGNvbnN0IG9uZSA9IGRpZ2l0UmVnZXgobG9jKSwgdHdvID0gZGlnaXRSZWdleChsb2MsIFwiezJ9XCIpLCB0aHJlZSA9IGRpZ2l0UmVnZXgobG9jLCBcInszfVwiKSwgZm91ciA9IGRpZ2l0UmVnZXgobG9jLCBcIns0fVwiKSwgc2l4ID0gZGlnaXRSZWdleChsb2MsIFwiezZ9XCIpLCBvbmVPclR3byA9IGRpZ2l0UmVnZXgobG9jLCBcInsxLDJ9XCIpLCBvbmVUb1RocmVlID0gZGlnaXRSZWdleChsb2MsIFwiezEsM31cIiksIG9uZVRvU2l4ID0gZGlnaXRSZWdleChsb2MsIFwiezEsNn1cIiksIG9uZVRvTmluZSA9IGRpZ2l0UmVnZXgobG9jLCBcInsxLDl9XCIpLCB0d29Ub0ZvdXIgPSBkaWdpdFJlZ2V4KGxvYywgXCJ7Miw0fVwiKSwgZm91clRvU2l4ID0gZGlnaXRSZWdleChsb2MsIFwiezQsNn1cIiksIGxpdGVyYWwgPSAodCkgPT4gKHtyZWdleDogUmVnRXhwKGVzY2FwZVRva2VuKHQudmFsKSksIGRlc2VyOiAoW3MyXSkgPT4gczIsIGxpdGVyYWw6IHRydWV9KSwgdW5pdGF0ZSA9ICh0KSA9PiB7XG4gICAgaWYgKHRva2VuLmxpdGVyYWwpIHtcbiAgICAgIHJldHVybiBsaXRlcmFsKHQpO1xuICAgIH1cbiAgICBzd2l0Y2ggKHQudmFsKSB7XG4gICAgICBjYXNlIFwiR1wiOlxuICAgICAgICByZXR1cm4gb25lT2YobG9jLmVyYXMoXCJzaG9ydFwiLCBmYWxzZSksIDApO1xuICAgICAgY2FzZSBcIkdHXCI6XG4gICAgICAgIHJldHVybiBvbmVPZihsb2MuZXJhcyhcImxvbmdcIiwgZmFsc2UpLCAwKTtcbiAgICAgIGNhc2UgXCJ5XCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KG9uZVRvU2l4KTtcbiAgICAgIGNhc2UgXCJ5eVwiOlxuICAgICAgICByZXR1cm4gaW50VW5pdCh0d29Ub0ZvdXIsIHVudHJ1bmNhdGVZZWFyKTtcbiAgICAgIGNhc2UgXCJ5eXl5XCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KGZvdXIpO1xuICAgICAgY2FzZSBcInl5eXl5XCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KGZvdXJUb1NpeCk7XG4gICAgICBjYXNlIFwieXl5eXl5XCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KHNpeCk7XG4gICAgICBjYXNlIFwiTVwiOlxuICAgICAgICByZXR1cm4gaW50VW5pdChvbmVPclR3byk7XG4gICAgICBjYXNlIFwiTU1cIjpcbiAgICAgICAgcmV0dXJuIGludFVuaXQodHdvKTtcbiAgICAgIGNhc2UgXCJNTU1cIjpcbiAgICAgICAgcmV0dXJuIG9uZU9mKGxvYy5tb250aHMoXCJzaG9ydFwiLCB0cnVlLCBmYWxzZSksIDEpO1xuICAgICAgY2FzZSBcIk1NTU1cIjpcbiAgICAgICAgcmV0dXJuIG9uZU9mKGxvYy5tb250aHMoXCJsb25nXCIsIHRydWUsIGZhbHNlKSwgMSk7XG4gICAgICBjYXNlIFwiTFwiOlxuICAgICAgICByZXR1cm4gaW50VW5pdChvbmVPclR3byk7XG4gICAgICBjYXNlIFwiTExcIjpcbiAgICAgICAgcmV0dXJuIGludFVuaXQodHdvKTtcbiAgICAgIGNhc2UgXCJMTExcIjpcbiAgICAgICAgcmV0dXJuIG9uZU9mKGxvYy5tb250aHMoXCJzaG9ydFwiLCBmYWxzZSwgZmFsc2UpLCAxKTtcbiAgICAgIGNhc2UgXCJMTExMXCI6XG4gICAgICAgIHJldHVybiBvbmVPZihsb2MubW9udGhzKFwibG9uZ1wiLCBmYWxzZSwgZmFsc2UpLCAxKTtcbiAgICAgIGNhc2UgXCJkXCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KG9uZU9yVHdvKTtcbiAgICAgIGNhc2UgXCJkZFwiOlxuICAgICAgICByZXR1cm4gaW50VW5pdCh0d28pO1xuICAgICAgY2FzZSBcIm9cIjpcbiAgICAgICAgcmV0dXJuIGludFVuaXQob25lVG9UaHJlZSk7XG4gICAgICBjYXNlIFwib29vXCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KHRocmVlKTtcbiAgICAgIGNhc2UgXCJISFwiOlxuICAgICAgICByZXR1cm4gaW50VW5pdCh0d28pO1xuICAgICAgY2FzZSBcIkhcIjpcbiAgICAgICAgcmV0dXJuIGludFVuaXQob25lT3JUd28pO1xuICAgICAgY2FzZSBcImhoXCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KHR3byk7XG4gICAgICBjYXNlIFwiaFwiOlxuICAgICAgICByZXR1cm4gaW50VW5pdChvbmVPclR3byk7XG4gICAgICBjYXNlIFwibW1cIjpcbiAgICAgICAgcmV0dXJuIGludFVuaXQodHdvKTtcbiAgICAgIGNhc2UgXCJtXCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KG9uZU9yVHdvKTtcbiAgICAgIGNhc2UgXCJxXCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KG9uZU9yVHdvKTtcbiAgICAgIGNhc2UgXCJxcVwiOlxuICAgICAgICByZXR1cm4gaW50VW5pdCh0d28pO1xuICAgICAgY2FzZSBcInNcIjpcbiAgICAgICAgcmV0dXJuIGludFVuaXQob25lT3JUd28pO1xuICAgICAgY2FzZSBcInNzXCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KHR3byk7XG4gICAgICBjYXNlIFwiU1wiOlxuICAgICAgICByZXR1cm4gaW50VW5pdChvbmVUb1RocmVlKTtcbiAgICAgIGNhc2UgXCJTU1NcIjpcbiAgICAgICAgcmV0dXJuIGludFVuaXQodGhyZWUpO1xuICAgICAgY2FzZSBcInVcIjpcbiAgICAgICAgcmV0dXJuIHNpbXBsZShvbmVUb05pbmUpO1xuICAgICAgY2FzZSBcInV1XCI6XG4gICAgICAgIHJldHVybiBzaW1wbGUob25lT3JUd28pO1xuICAgICAgY2FzZSBcInV1dVwiOlxuICAgICAgICByZXR1cm4gaW50VW5pdChvbmUpO1xuICAgICAgY2FzZSBcImFcIjpcbiAgICAgICAgcmV0dXJuIG9uZU9mKGxvYy5tZXJpZGllbXMoKSwgMCk7XG4gICAgICBjYXNlIFwia2tra1wiOlxuICAgICAgICByZXR1cm4gaW50VW5pdChmb3VyKTtcbiAgICAgIGNhc2UgXCJra1wiOlxuICAgICAgICByZXR1cm4gaW50VW5pdCh0d29Ub0ZvdXIsIHVudHJ1bmNhdGVZZWFyKTtcbiAgICAgIGNhc2UgXCJXXCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KG9uZU9yVHdvKTtcbiAgICAgIGNhc2UgXCJXV1wiOlxuICAgICAgICByZXR1cm4gaW50VW5pdCh0d28pO1xuICAgICAgY2FzZSBcIkVcIjpcbiAgICAgIGNhc2UgXCJjXCI6XG4gICAgICAgIHJldHVybiBpbnRVbml0KG9uZSk7XG4gICAgICBjYXNlIFwiRUVFXCI6XG4gICAgICAgIHJldHVybiBvbmVPZihsb2Mud2Vla2RheXMoXCJzaG9ydFwiLCBmYWxzZSwgZmFsc2UpLCAxKTtcbiAgICAgIGNhc2UgXCJFRUVFXCI6XG4gICAgICAgIHJldHVybiBvbmVPZihsb2Mud2Vla2RheXMoXCJsb25nXCIsIGZhbHNlLCBmYWxzZSksIDEpO1xuICAgICAgY2FzZSBcImNjY1wiOlxuICAgICAgICByZXR1cm4gb25lT2YobG9jLndlZWtkYXlzKFwic2hvcnRcIiwgdHJ1ZSwgZmFsc2UpLCAxKTtcbiAgICAgIGNhc2UgXCJjY2NjXCI6XG4gICAgICAgIHJldHVybiBvbmVPZihsb2Mud2Vla2RheXMoXCJsb25nXCIsIHRydWUsIGZhbHNlKSwgMSk7XG4gICAgICBjYXNlIFwiWlwiOlxuICAgICAgY2FzZSBcIlpaXCI6XG4gICAgICAgIHJldHVybiBvZmZzZXQobmV3IFJlZ0V4cChgKFsrLV0ke29uZU9yVHdvLnNvdXJjZX0pKD86Oigke3R3by5zb3VyY2V9KSk/YCksIDIpO1xuICAgICAgY2FzZSBcIlpaWlwiOlxuICAgICAgICByZXR1cm4gb2Zmc2V0KG5ldyBSZWdFeHAoYChbKy1dJHtvbmVPclR3by5zb3VyY2V9KSgke3R3by5zb3VyY2V9KT9gKSwgMik7XG4gICAgICBjYXNlIFwielwiOlxuICAgICAgICByZXR1cm4gc2ltcGxlKC9bYS16XystL117MSwyNTZ9Py9pKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsaXRlcmFsKHQpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgdW5pdCA9IHVuaXRhdGUodG9rZW4pIHx8IHtcbiAgICBpbnZhbGlkUmVhc29uOiBNSVNTSU5HX0ZUUFxuICB9O1xuICB1bml0LnRva2VuID0gdG9rZW47XG4gIHJldHVybiB1bml0O1xufVxudmFyIHBhcnRUeXBlU3R5bGVUb1Rva2VuVmFsID0ge1xuICB5ZWFyOiB7XG4gICAgXCIyLWRpZ2l0XCI6IFwieXlcIixcbiAgICBudW1lcmljOiBcInl5eXl5XCJcbiAgfSxcbiAgbW9udGg6IHtcbiAgICBudW1lcmljOiBcIk1cIixcbiAgICBcIjItZGlnaXRcIjogXCJNTVwiLFxuICAgIHNob3J0OiBcIk1NTVwiLFxuICAgIGxvbmc6IFwiTU1NTVwiXG4gIH0sXG4gIGRheToge1xuICAgIG51bWVyaWM6IFwiZFwiLFxuICAgIFwiMi1kaWdpdFwiOiBcImRkXCJcbiAgfSxcbiAgd2Vla2RheToge1xuICAgIHNob3J0OiBcIkVFRVwiLFxuICAgIGxvbmc6IFwiRUVFRVwiXG4gIH0sXG4gIGRheXBlcmlvZDogXCJhXCIsXG4gIGRheVBlcmlvZDogXCJhXCIsXG4gIGhvdXI6IHtcbiAgICBudW1lcmljOiBcImhcIixcbiAgICBcIjItZGlnaXRcIjogXCJoaFwiXG4gIH0sXG4gIG1pbnV0ZToge1xuICAgIG51bWVyaWM6IFwibVwiLFxuICAgIFwiMi1kaWdpdFwiOiBcIm1tXCJcbiAgfSxcbiAgc2Vjb25kOiB7XG4gICAgbnVtZXJpYzogXCJzXCIsXG4gICAgXCIyLWRpZ2l0XCI6IFwic3NcIlxuICB9LFxuICB0aW1lWm9uZU5hbWU6IHtcbiAgICBsb25nOiBcIlpaWlpaXCIsXG4gICAgc2hvcnQ6IFwiWlpaXCJcbiAgfVxufTtcbmZ1bmN0aW9uIHRva2VuRm9yUGFydChwYXJ0LCBsb2NhbGUsIGZvcm1hdE9wdHMpIHtcbiAgY29uc3Qge3R5cGUsIHZhbHVlfSA9IHBhcnQ7XG4gIGlmICh0eXBlID09PSBcImxpdGVyYWxcIikge1xuICAgIHJldHVybiB7XG4gICAgICBsaXRlcmFsOiB0cnVlLFxuICAgICAgdmFsOiB2YWx1ZVxuICAgIH07XG4gIH1cbiAgY29uc3Qgc3R5bGUgPSBmb3JtYXRPcHRzW3R5cGVdO1xuICBsZXQgdmFsID0gcGFydFR5cGVTdHlsZVRvVG9rZW5WYWxbdHlwZV07XG4gIGlmICh0eXBlb2YgdmFsID09PSBcIm9iamVjdFwiKSB7XG4gICAgdmFsID0gdmFsW3N0eWxlXTtcbiAgfVxuICBpZiAodmFsKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxpdGVyYWw6IGZhbHNlLFxuICAgICAgdmFsXG4gICAgfTtcbiAgfVxuICByZXR1cm4gdm9pZCAwO1xufVxuZnVuY3Rpb24gYnVpbGRSZWdleCh1bml0cykge1xuICBjb25zdCByZSA9IHVuaXRzLm1hcCgodSkgPT4gdS5yZWdleCkucmVkdWNlKChmLCByKSA9PiBgJHtmfSgke3Iuc291cmNlfSlgLCBcIlwiKTtcbiAgcmV0dXJuIFtgXiR7cmV9JGAsIHVuaXRzXTtcbn1cbmZ1bmN0aW9uIG1hdGNoKGlucHV0LCByZWdleCwgaGFuZGxlcnMpIHtcbiAgY29uc3QgbWF0Y2hlcyA9IGlucHV0Lm1hdGNoKHJlZ2V4KTtcbiAgaWYgKG1hdGNoZXMpIHtcbiAgICBjb25zdCBhbGwgPSB7fTtcbiAgICBsZXQgbWF0Y2hJbmRleCA9IDE7XG4gICAgZm9yIChjb25zdCBpIGluIGhhbmRsZXJzKSB7XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkoaGFuZGxlcnMsIGkpKSB7XG4gICAgICAgIGNvbnN0IGggPSBoYW5kbGVyc1tpXSwgZ3JvdXBzID0gaC5ncm91cHMgPyBoLmdyb3VwcyArIDEgOiAxO1xuICAgICAgICBpZiAoIWgubGl0ZXJhbCAmJiBoLnRva2VuKSB7XG4gICAgICAgICAgYWxsW2gudG9rZW4udmFsWzBdXSA9IGguZGVzZXIobWF0Y2hlcy5zbGljZShtYXRjaEluZGV4LCBtYXRjaEluZGV4ICsgZ3JvdXBzKSk7XG4gICAgICAgIH1cbiAgICAgICAgbWF0Y2hJbmRleCArPSBncm91cHM7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBbbWF0Y2hlcywgYWxsXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gW21hdGNoZXMsIHt9XTtcbiAgfVxufVxuZnVuY3Rpb24gZGF0ZVRpbWVGcm9tTWF0Y2hlcyhtYXRjaGVzKSB7XG4gIGNvbnN0IHRvRmllbGQgPSAodG9rZW4pID0+IHtcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlIFwiU1wiOlxuICAgICAgICByZXR1cm4gXCJtaWxsaXNlY29uZFwiO1xuICAgICAgY2FzZSBcInNcIjpcbiAgICAgICAgcmV0dXJuIFwic2Vjb25kXCI7XG4gICAgICBjYXNlIFwibVwiOlxuICAgICAgICByZXR1cm4gXCJtaW51dGVcIjtcbiAgICAgIGNhc2UgXCJoXCI6XG4gICAgICBjYXNlIFwiSFwiOlxuICAgICAgICByZXR1cm4gXCJob3VyXCI7XG4gICAgICBjYXNlIFwiZFwiOlxuICAgICAgICByZXR1cm4gXCJkYXlcIjtcbiAgICAgIGNhc2UgXCJvXCI6XG4gICAgICAgIHJldHVybiBcIm9yZGluYWxcIjtcbiAgICAgIGNhc2UgXCJMXCI6XG4gICAgICBjYXNlIFwiTVwiOlxuICAgICAgICByZXR1cm4gXCJtb250aFwiO1xuICAgICAgY2FzZSBcInlcIjpcbiAgICAgICAgcmV0dXJuIFwieWVhclwiO1xuICAgICAgY2FzZSBcIkVcIjpcbiAgICAgIGNhc2UgXCJjXCI6XG4gICAgICAgIHJldHVybiBcIndlZWtkYXlcIjtcbiAgICAgIGNhc2UgXCJXXCI6XG4gICAgICAgIHJldHVybiBcIndlZWtOdW1iZXJcIjtcbiAgICAgIGNhc2UgXCJrXCI6XG4gICAgICAgIHJldHVybiBcIndlZWtZZWFyXCI7XG4gICAgICBjYXNlIFwicVwiOlxuICAgICAgICByZXR1cm4gXCJxdWFydGVyXCI7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH07XG4gIGxldCB6b25lID0gbnVsbDtcbiAgbGV0IHNwZWNpZmljT2Zmc2V0O1xuICBpZiAoIWlzVW5kZWZpbmVkKG1hdGNoZXMueikpIHtcbiAgICB6b25lID0gSUFOQVpvbmUuY3JlYXRlKG1hdGNoZXMueik7XG4gIH1cbiAgaWYgKCFpc1VuZGVmaW5lZChtYXRjaGVzLlopKSB7XG4gICAgaWYgKCF6b25lKSB7XG4gICAgICB6b25lID0gbmV3IEZpeGVkT2Zmc2V0Wm9uZShtYXRjaGVzLlopO1xuICAgIH1cbiAgICBzcGVjaWZpY09mZnNldCA9IG1hdGNoZXMuWjtcbiAgfVxuICBpZiAoIWlzVW5kZWZpbmVkKG1hdGNoZXMucSkpIHtcbiAgICBtYXRjaGVzLk0gPSAobWF0Y2hlcy5xIC0gMSkgKiAzICsgMTtcbiAgfVxuICBpZiAoIWlzVW5kZWZpbmVkKG1hdGNoZXMuaCkpIHtcbiAgICBpZiAobWF0Y2hlcy5oIDwgMTIgJiYgbWF0Y2hlcy5hID09PSAxKSB7XG4gICAgICBtYXRjaGVzLmggKz0gMTI7XG4gICAgfSBlbHNlIGlmIChtYXRjaGVzLmggPT09IDEyICYmIG1hdGNoZXMuYSA9PT0gMCkge1xuICAgICAgbWF0Y2hlcy5oID0gMDtcbiAgICB9XG4gIH1cbiAgaWYgKG1hdGNoZXMuRyA9PT0gMCAmJiBtYXRjaGVzLnkpIHtcbiAgICBtYXRjaGVzLnkgPSAtbWF0Y2hlcy55O1xuICB9XG4gIGlmICghaXNVbmRlZmluZWQobWF0Y2hlcy51KSkge1xuICAgIG1hdGNoZXMuUyA9IHBhcnNlTWlsbGlzKG1hdGNoZXMudSk7XG4gIH1cbiAgY29uc3QgdmFscyA9IE9iamVjdC5rZXlzKG1hdGNoZXMpLnJlZHVjZSgociwgaykgPT4ge1xuICAgIGNvbnN0IGYgPSB0b0ZpZWxkKGspO1xuICAgIGlmIChmKSB7XG4gICAgICByW2ZdID0gbWF0Y2hlc1trXTtcbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH0sIHt9KTtcbiAgcmV0dXJuIFt2YWxzLCB6b25lLCBzcGVjaWZpY09mZnNldF07XG59XG52YXIgZHVtbXlEYXRlVGltZUNhY2hlID0gbnVsbDtcbmZ1bmN0aW9uIGdldER1bW15RGF0ZVRpbWUoKSB7XG4gIGlmICghZHVtbXlEYXRlVGltZUNhY2hlKSB7XG4gICAgZHVtbXlEYXRlVGltZUNhY2hlID0gRGF0ZVRpbWUuZnJvbU1pbGxpcygxNTU1NTU1NTU1NTU1KTtcbiAgfVxuICByZXR1cm4gZHVtbXlEYXRlVGltZUNhY2hlO1xufVxuZnVuY3Rpb24gbWF5YmVFeHBhbmRNYWNyb1Rva2VuKHRva2VuLCBsb2NhbGUpIHtcbiAgaWYgKHRva2VuLmxpdGVyYWwpIHtcbiAgICByZXR1cm4gdG9rZW47XG4gIH1cbiAgY29uc3QgZm9ybWF0T3B0cyA9IEZvcm1hdHRlci5tYWNyb1Rva2VuVG9Gb3JtYXRPcHRzKHRva2VuLnZhbCk7XG4gIGNvbnN0IHRva2VucyA9IGZvcm1hdE9wdHNUb1Rva2Vucyhmb3JtYXRPcHRzLCBsb2NhbGUpO1xuICBpZiAodG9rZW5zID09IG51bGwgfHwgdG9rZW5zLmluY2x1ZGVzKHZvaWQgMCkpIHtcbiAgICByZXR1cm4gdG9rZW47XG4gIH1cbiAgcmV0dXJuIHRva2Vucztcbn1cbmZ1bmN0aW9uIGV4cGFuZE1hY3JvVG9rZW5zKHRva2VucywgbG9jYWxlKSB7XG4gIHJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0KC4uLnRva2Vucy5tYXAoKHQpID0+IG1heWJlRXhwYW5kTWFjcm9Ub2tlbih0LCBsb2NhbGUpKSk7XG59XG5mdW5jdGlvbiBleHBsYWluRnJvbVRva2Vucyhsb2NhbGUsIGlucHV0LCBmb3JtYXQpIHtcbiAgY29uc3QgdG9rZW5zID0gZXhwYW5kTWFjcm9Ub2tlbnMoRm9ybWF0dGVyLnBhcnNlRm9ybWF0KGZvcm1hdCksIGxvY2FsZSksIHVuaXRzID0gdG9rZW5zLm1hcCgodCkgPT4gdW5pdEZvclRva2VuKHQsIGxvY2FsZSkpLCBkaXNxdWFsaWZ5aW5nVW5pdCA9IHVuaXRzLmZpbmQoKHQpID0+IHQuaW52YWxpZFJlYXNvbik7XG4gIGlmIChkaXNxdWFsaWZ5aW5nVW5pdCkge1xuICAgIHJldHVybiB7aW5wdXQsIHRva2VucywgaW52YWxpZFJlYXNvbjogZGlzcXVhbGlmeWluZ1VuaXQuaW52YWxpZFJlYXNvbn07XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgW3JlZ2V4U3RyaW5nLCBoYW5kbGVyc10gPSBidWlsZFJlZ2V4KHVuaXRzKSwgcmVnZXggPSBSZWdFeHAocmVnZXhTdHJpbmcsIFwiaVwiKSwgW3Jhd01hdGNoZXMsIG1hdGNoZXNdID0gbWF0Y2goaW5wdXQsIHJlZ2V4LCBoYW5kbGVycyksIFtyZXN1bHQsIHpvbmUsIHNwZWNpZmljT2Zmc2V0XSA9IG1hdGNoZXMgPyBkYXRlVGltZUZyb21NYXRjaGVzKG1hdGNoZXMpIDogW251bGwsIG51bGwsIHZvaWQgMF07XG4gICAgaWYgKGhhc093blByb3BlcnR5KG1hdGNoZXMsIFwiYVwiKSAmJiBoYXNPd25Qcm9wZXJ0eShtYXRjaGVzLCBcIkhcIikpIHtcbiAgICAgIHRocm93IG5ldyBDb25mbGljdGluZ1NwZWNpZmljYXRpb25FcnJvcihcIkNhbid0IGluY2x1ZGUgbWVyaWRpZW0gd2hlbiBzcGVjaWZ5aW5nIDI0LWhvdXIgZm9ybWF0XCIpO1xuICAgIH1cbiAgICByZXR1cm4ge2lucHV0LCB0b2tlbnMsIHJlZ2V4LCByYXdNYXRjaGVzLCBtYXRjaGVzLCByZXN1bHQsIHpvbmUsIHNwZWNpZmljT2Zmc2V0fTtcbiAgfVxufVxuZnVuY3Rpb24gcGFyc2VGcm9tVG9rZW5zKGxvY2FsZSwgaW5wdXQsIGZvcm1hdCkge1xuICBjb25zdCB7cmVzdWx0LCB6b25lLCBzcGVjaWZpY09mZnNldCwgaW52YWxpZFJlYXNvbn0gPSBleHBsYWluRnJvbVRva2Vucyhsb2NhbGUsIGlucHV0LCBmb3JtYXQpO1xuICByZXR1cm4gW3Jlc3VsdCwgem9uZSwgc3BlY2lmaWNPZmZzZXQsIGludmFsaWRSZWFzb25dO1xufVxuZnVuY3Rpb24gZm9ybWF0T3B0c1RvVG9rZW5zKGZvcm1hdE9wdHMsIGxvY2FsZSkge1xuICBpZiAoIWZvcm1hdE9wdHMpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCBmb3JtYXR0ZXIgPSBGb3JtYXR0ZXIuY3JlYXRlKGxvY2FsZSwgZm9ybWF0T3B0cyk7XG4gIGNvbnN0IHBhcnRzID0gZm9ybWF0dGVyLmZvcm1hdERhdGVUaW1lUGFydHMoZ2V0RHVtbXlEYXRlVGltZSgpKTtcbiAgcmV0dXJuIHBhcnRzLm1hcCgocCkgPT4gdG9rZW5Gb3JQYXJ0KHAsIGxvY2FsZSwgZm9ybWF0T3B0cykpO1xufVxudmFyIG5vbkxlYXBMYWRkZXIgPSBbMCwgMzEsIDU5LCA5MCwgMTIwLCAxNTEsIDE4MSwgMjEyLCAyNDMsIDI3MywgMzA0LCAzMzRdO1xudmFyIGxlYXBMYWRkZXIgPSBbMCwgMzEsIDYwLCA5MSwgMTIxLCAxNTIsIDE4MiwgMjEzLCAyNDQsIDI3NCwgMzA1LCAzMzVdO1xuZnVuY3Rpb24gdW5pdE91dE9mUmFuZ2UodW5pdCwgdmFsdWUpIHtcbiAgcmV0dXJuIG5ldyBJbnZhbGlkKFwidW5pdCBvdXQgb2YgcmFuZ2VcIiwgYHlvdSBzcGVjaWZpZWQgJHt2YWx1ZX0gKG9mIHR5cGUgJHt0eXBlb2YgdmFsdWV9KSBhcyBhICR7dW5pdH0sIHdoaWNoIGlzIGludmFsaWRgKTtcbn1cbmZ1bmN0aW9uIGRheU9mV2Vlayh5ZWFyLCBtb250aCwgZGF5KSB7XG4gIGNvbnN0IGQgPSBuZXcgRGF0ZShEYXRlLlVUQyh5ZWFyLCBtb250aCAtIDEsIGRheSkpO1xuICBpZiAoeWVhciA8IDEwMCAmJiB5ZWFyID49IDApIHtcbiAgICBkLnNldFVUQ0Z1bGxZZWFyKGQuZ2V0VVRDRnVsbFllYXIoKSAtIDE5MDApO1xuICB9XG4gIGNvbnN0IGpzID0gZC5nZXRVVENEYXkoKTtcbiAgcmV0dXJuIGpzID09PSAwID8gNyA6IGpzO1xufVxuZnVuY3Rpb24gY29tcHV0ZU9yZGluYWwoeWVhciwgbW9udGgsIGRheSkge1xuICByZXR1cm4gZGF5ICsgKGlzTGVhcFllYXIoeWVhcikgPyBsZWFwTGFkZGVyIDogbm9uTGVhcExhZGRlcilbbW9udGggLSAxXTtcbn1cbmZ1bmN0aW9uIHVuY29tcHV0ZU9yZGluYWwoeWVhciwgb3JkaW5hbCkge1xuICBjb25zdCB0YWJsZSA9IGlzTGVhcFllYXIoeWVhcikgPyBsZWFwTGFkZGVyIDogbm9uTGVhcExhZGRlciwgbW9udGgwID0gdGFibGUuZmluZEluZGV4KChpKSA9PiBpIDwgb3JkaW5hbCksIGRheSA9IG9yZGluYWwgLSB0YWJsZVttb250aDBdO1xuICByZXR1cm4ge21vbnRoOiBtb250aDAgKyAxLCBkYXl9O1xufVxuZnVuY3Rpb24gZ3JlZ29yaWFuVG9XZWVrKGdyZWdPYmopIHtcbiAgY29uc3Qge3llYXIsIG1vbnRoLCBkYXl9ID0gZ3JlZ09iaiwgb3JkaW5hbCA9IGNvbXB1dGVPcmRpbmFsKHllYXIsIG1vbnRoLCBkYXkpLCB3ZWVrZGF5ID0gZGF5T2ZXZWVrKHllYXIsIG1vbnRoLCBkYXkpO1xuICBsZXQgd2Vla051bWJlciA9IE1hdGguZmxvb3IoKG9yZGluYWwgLSB3ZWVrZGF5ICsgMTApIC8gNyksIHdlZWtZZWFyO1xuICBpZiAod2Vla051bWJlciA8IDEpIHtcbiAgICB3ZWVrWWVhciA9IHllYXIgLSAxO1xuICAgIHdlZWtOdW1iZXIgPSB3ZWVrc0luV2Vla1llYXIod2Vla1llYXIpO1xuICB9IGVsc2UgaWYgKHdlZWtOdW1iZXIgPiB3ZWVrc0luV2Vla1llYXIoeWVhcikpIHtcbiAgICB3ZWVrWWVhciA9IHllYXIgKyAxO1xuICAgIHdlZWtOdW1iZXIgPSAxO1xuICB9IGVsc2Uge1xuICAgIHdlZWtZZWFyID0geWVhcjtcbiAgfVxuICByZXR1cm4ge3dlZWtZZWFyLCB3ZWVrTnVtYmVyLCB3ZWVrZGF5LCAuLi50aW1lT2JqZWN0KGdyZWdPYmopfTtcbn1cbmZ1bmN0aW9uIHdlZWtUb0dyZWdvcmlhbih3ZWVrRGF0YSkge1xuICBjb25zdCB7d2Vla1llYXIsIHdlZWtOdW1iZXIsIHdlZWtkYXl9ID0gd2Vla0RhdGEsIHdlZWtkYXlPZkphbjQgPSBkYXlPZldlZWsod2Vla1llYXIsIDEsIDQpLCB5ZWFySW5EYXlzID0gZGF5c0luWWVhcih3ZWVrWWVhcik7XG4gIGxldCBvcmRpbmFsID0gd2Vla051bWJlciAqIDcgKyB3ZWVrZGF5IC0gd2Vla2RheU9mSmFuNCAtIDMsIHllYXI7XG4gIGlmIChvcmRpbmFsIDwgMSkge1xuICAgIHllYXIgPSB3ZWVrWWVhciAtIDE7XG4gICAgb3JkaW5hbCArPSBkYXlzSW5ZZWFyKHllYXIpO1xuICB9IGVsc2UgaWYgKG9yZGluYWwgPiB5ZWFySW5EYXlzKSB7XG4gICAgeWVhciA9IHdlZWtZZWFyICsgMTtcbiAgICBvcmRpbmFsIC09IGRheXNJblllYXIod2Vla1llYXIpO1xuICB9IGVsc2Uge1xuICAgIHllYXIgPSB3ZWVrWWVhcjtcbiAgfVxuICBjb25zdCB7bW9udGgsIGRheX0gPSB1bmNvbXB1dGVPcmRpbmFsKHllYXIsIG9yZGluYWwpO1xuICByZXR1cm4ge3llYXIsIG1vbnRoLCBkYXksIC4uLnRpbWVPYmplY3Qod2Vla0RhdGEpfTtcbn1cbmZ1bmN0aW9uIGdyZWdvcmlhblRvT3JkaW5hbChncmVnRGF0YSkge1xuICBjb25zdCB7eWVhciwgbW9udGgsIGRheX0gPSBncmVnRGF0YTtcbiAgY29uc3Qgb3JkaW5hbCA9IGNvbXB1dGVPcmRpbmFsKHllYXIsIG1vbnRoLCBkYXkpO1xuICByZXR1cm4ge3llYXIsIG9yZGluYWwsIC4uLnRpbWVPYmplY3QoZ3JlZ0RhdGEpfTtcbn1cbmZ1bmN0aW9uIG9yZGluYWxUb0dyZWdvcmlhbihvcmRpbmFsRGF0YSkge1xuICBjb25zdCB7eWVhciwgb3JkaW5hbH0gPSBvcmRpbmFsRGF0YTtcbiAgY29uc3Qge21vbnRoLCBkYXl9ID0gdW5jb21wdXRlT3JkaW5hbCh5ZWFyLCBvcmRpbmFsKTtcbiAgcmV0dXJuIHt5ZWFyLCBtb250aCwgZGF5LCAuLi50aW1lT2JqZWN0KG9yZGluYWxEYXRhKX07XG59XG5mdW5jdGlvbiBoYXNJbnZhbGlkV2Vla0RhdGEob2JqKSB7XG4gIGNvbnN0IHZhbGlkWWVhciA9IGlzSW50ZWdlcihvYmoud2Vla1llYXIpLCB2YWxpZFdlZWsgPSBpbnRlZ2VyQmV0d2VlbihvYmoud2Vla051bWJlciwgMSwgd2Vla3NJbldlZWtZZWFyKG9iai53ZWVrWWVhcikpLCB2YWxpZFdlZWtkYXkgPSBpbnRlZ2VyQmV0d2VlbihvYmoud2Vla2RheSwgMSwgNyk7XG4gIGlmICghdmFsaWRZZWFyKSB7XG4gICAgcmV0dXJuIHVuaXRPdXRPZlJhbmdlKFwid2Vla1llYXJcIiwgb2JqLndlZWtZZWFyKTtcbiAgfSBlbHNlIGlmICghdmFsaWRXZWVrKSB7XG4gICAgcmV0dXJuIHVuaXRPdXRPZlJhbmdlKFwid2Vla1wiLCBvYmoud2Vlayk7XG4gIH0gZWxzZSBpZiAoIXZhbGlkV2Vla2RheSkge1xuICAgIHJldHVybiB1bml0T3V0T2ZSYW5nZShcIndlZWtkYXlcIiwgb2JqLndlZWtkYXkpO1xuICB9IGVsc2VcbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBoYXNJbnZhbGlkT3JkaW5hbERhdGEob2JqKSB7XG4gIGNvbnN0IHZhbGlkWWVhciA9IGlzSW50ZWdlcihvYmoueWVhciksIHZhbGlkT3JkaW5hbCA9IGludGVnZXJCZXR3ZWVuKG9iai5vcmRpbmFsLCAxLCBkYXlzSW5ZZWFyKG9iai55ZWFyKSk7XG4gIGlmICghdmFsaWRZZWFyKSB7XG4gICAgcmV0dXJuIHVuaXRPdXRPZlJhbmdlKFwieWVhclwiLCBvYmoueWVhcik7XG4gIH0gZWxzZSBpZiAoIXZhbGlkT3JkaW5hbCkge1xuICAgIHJldHVybiB1bml0T3V0T2ZSYW5nZShcIm9yZGluYWxcIiwgb2JqLm9yZGluYWwpO1xuICB9IGVsc2VcbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBoYXNJbnZhbGlkR3JlZ29yaWFuRGF0YShvYmopIHtcbiAgY29uc3QgdmFsaWRZZWFyID0gaXNJbnRlZ2VyKG9iai55ZWFyKSwgdmFsaWRNb250aCA9IGludGVnZXJCZXR3ZWVuKG9iai5tb250aCwgMSwgMTIpLCB2YWxpZERheSA9IGludGVnZXJCZXR3ZWVuKG9iai5kYXksIDEsIGRheXNJbk1vbnRoKG9iai55ZWFyLCBvYmoubW9udGgpKTtcbiAgaWYgKCF2YWxpZFllYXIpIHtcbiAgICByZXR1cm4gdW5pdE91dE9mUmFuZ2UoXCJ5ZWFyXCIsIG9iai55ZWFyKTtcbiAgfSBlbHNlIGlmICghdmFsaWRNb250aCkge1xuICAgIHJldHVybiB1bml0T3V0T2ZSYW5nZShcIm1vbnRoXCIsIG9iai5tb250aCk7XG4gIH0gZWxzZSBpZiAoIXZhbGlkRGF5KSB7XG4gICAgcmV0dXJuIHVuaXRPdXRPZlJhbmdlKFwiZGF5XCIsIG9iai5kYXkpO1xuICB9IGVsc2VcbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBoYXNJbnZhbGlkVGltZURhdGEob2JqKSB7XG4gIGNvbnN0IHtob3VyLCBtaW51dGUsIHNlY29uZCwgbWlsbGlzZWNvbmR9ID0gb2JqO1xuICBjb25zdCB2YWxpZEhvdXIgPSBpbnRlZ2VyQmV0d2Vlbihob3VyLCAwLCAyMykgfHwgaG91ciA9PT0gMjQgJiYgbWludXRlID09PSAwICYmIHNlY29uZCA9PT0gMCAmJiBtaWxsaXNlY29uZCA9PT0gMCwgdmFsaWRNaW51dGUgPSBpbnRlZ2VyQmV0d2VlbihtaW51dGUsIDAsIDU5KSwgdmFsaWRTZWNvbmQgPSBpbnRlZ2VyQmV0d2VlbihzZWNvbmQsIDAsIDU5KSwgdmFsaWRNaWxsaXNlY29uZCA9IGludGVnZXJCZXR3ZWVuKG1pbGxpc2Vjb25kLCAwLCA5OTkpO1xuICBpZiAoIXZhbGlkSG91cikge1xuICAgIHJldHVybiB1bml0T3V0T2ZSYW5nZShcImhvdXJcIiwgaG91cik7XG4gIH0gZWxzZSBpZiAoIXZhbGlkTWludXRlKSB7XG4gICAgcmV0dXJuIHVuaXRPdXRPZlJhbmdlKFwibWludXRlXCIsIG1pbnV0ZSk7XG4gIH0gZWxzZSBpZiAoIXZhbGlkU2Vjb25kKSB7XG4gICAgcmV0dXJuIHVuaXRPdXRPZlJhbmdlKFwic2Vjb25kXCIsIHNlY29uZCk7XG4gIH0gZWxzZSBpZiAoIXZhbGlkTWlsbGlzZWNvbmQpIHtcbiAgICByZXR1cm4gdW5pdE91dE9mUmFuZ2UoXCJtaWxsaXNlY29uZFwiLCBtaWxsaXNlY29uZCk7XG4gIH0gZWxzZVxuICAgIHJldHVybiBmYWxzZTtcbn1cbnZhciBJTlZBTElENCA9IFwiSW52YWxpZCBEYXRlVGltZVwiO1xudmFyIE1BWF9EQVRFID0gODY0ZTEzO1xuZnVuY3Rpb24gdW5zdXBwb3J0ZWRab25lKHpvbmUpIHtcbiAgcmV0dXJuIG5ldyBJbnZhbGlkKFwidW5zdXBwb3J0ZWQgem9uZVwiLCBgdGhlIHpvbmUgXCIke3pvbmUubmFtZX1cIiBpcyBub3Qgc3VwcG9ydGVkYCk7XG59XG5mdW5jdGlvbiBwb3NzaWJseUNhY2hlZFdlZWtEYXRhKGR0KSB7XG4gIGlmIChkdC53ZWVrRGF0YSA9PT0gbnVsbCkge1xuICAgIGR0LndlZWtEYXRhID0gZ3JlZ29yaWFuVG9XZWVrKGR0LmMpO1xuICB9XG4gIHJldHVybiBkdC53ZWVrRGF0YTtcbn1cbmZ1bmN0aW9uIGNsb25lMihpbnN0LCBhbHRzKSB7XG4gIGNvbnN0IGN1cnJlbnQgPSB7XG4gICAgdHM6IGluc3QudHMsXG4gICAgem9uZTogaW5zdC56b25lLFxuICAgIGM6IGluc3QuYyxcbiAgICBvOiBpbnN0Lm8sXG4gICAgbG9jOiBpbnN0LmxvYyxcbiAgICBpbnZhbGlkOiBpbnN0LmludmFsaWRcbiAgfTtcbiAgcmV0dXJuIG5ldyBEYXRlVGltZSh7Li4uY3VycmVudCwgLi4uYWx0cywgb2xkOiBjdXJyZW50fSk7XG59XG5mdW5jdGlvbiBmaXhPZmZzZXQobG9jYWxUUywgbywgdHopIHtcbiAgbGV0IHV0Y0d1ZXNzID0gbG9jYWxUUyAtIG8gKiA2MCAqIDFlMztcbiAgY29uc3QgbzIgPSB0ei5vZmZzZXQodXRjR3Vlc3MpO1xuICBpZiAobyA9PT0gbzIpIHtcbiAgICByZXR1cm4gW3V0Y0d1ZXNzLCBvXTtcbiAgfVxuICB1dGNHdWVzcyAtPSAobzIgLSBvKSAqIDYwICogMWUzO1xuICBjb25zdCBvMyA9IHR6Lm9mZnNldCh1dGNHdWVzcyk7XG4gIGlmIChvMiA9PT0gbzMpIHtcbiAgICByZXR1cm4gW3V0Y0d1ZXNzLCBvMl07XG4gIH1cbiAgcmV0dXJuIFtsb2NhbFRTIC0gTWF0aC5taW4obzIsIG8zKSAqIDYwICogMWUzLCBNYXRoLm1heChvMiwgbzMpXTtcbn1cbmZ1bmN0aW9uIHRzVG9PYmoodHMsIG9mZnNldDIpIHtcbiAgdHMgKz0gb2Zmc2V0MiAqIDYwICogMWUzO1xuICBjb25zdCBkID0gbmV3IERhdGUodHMpO1xuICByZXR1cm4ge1xuICAgIHllYXI6IGQuZ2V0VVRDRnVsbFllYXIoKSxcbiAgICBtb250aDogZC5nZXRVVENNb250aCgpICsgMSxcbiAgICBkYXk6IGQuZ2V0VVRDRGF0ZSgpLFxuICAgIGhvdXI6IGQuZ2V0VVRDSG91cnMoKSxcbiAgICBtaW51dGU6IGQuZ2V0VVRDTWludXRlcygpLFxuICAgIHNlY29uZDogZC5nZXRVVENTZWNvbmRzKCksXG4gICAgbWlsbGlzZWNvbmQ6IGQuZ2V0VVRDTWlsbGlzZWNvbmRzKClcbiAgfTtcbn1cbmZ1bmN0aW9uIG9ialRvVFMob2JqLCBvZmZzZXQyLCB6b25lKSB7XG4gIHJldHVybiBmaXhPZmZzZXQob2JqVG9Mb2NhbFRTKG9iaiksIG9mZnNldDIsIHpvbmUpO1xufVxuZnVuY3Rpb24gYWRqdXN0VGltZShpbnN0LCBkdXIpIHtcbiAgY29uc3Qgb1ByZSA9IGluc3QubywgeWVhciA9IGluc3QuYy55ZWFyICsgTWF0aC50cnVuYyhkdXIueWVhcnMpLCBtb250aCA9IGluc3QuYy5tb250aCArIE1hdGgudHJ1bmMoZHVyLm1vbnRocykgKyBNYXRoLnRydW5jKGR1ci5xdWFydGVycykgKiAzLCBjID0ge1xuICAgIC4uLmluc3QuYyxcbiAgICB5ZWFyLFxuICAgIG1vbnRoLFxuICAgIGRheTogTWF0aC5taW4oaW5zdC5jLmRheSwgZGF5c0luTW9udGgoeWVhciwgbW9udGgpKSArIE1hdGgudHJ1bmMoZHVyLmRheXMpICsgTWF0aC50cnVuYyhkdXIud2Vla3MpICogN1xuICB9LCBtaWxsaXNUb0FkZCA9IER1cmF0aW9uLmZyb21PYmplY3Qoe1xuICAgIHllYXJzOiBkdXIueWVhcnMgLSBNYXRoLnRydW5jKGR1ci55ZWFycyksXG4gICAgcXVhcnRlcnM6IGR1ci5xdWFydGVycyAtIE1hdGgudHJ1bmMoZHVyLnF1YXJ0ZXJzKSxcbiAgICBtb250aHM6IGR1ci5tb250aHMgLSBNYXRoLnRydW5jKGR1ci5tb250aHMpLFxuICAgIHdlZWtzOiBkdXIud2Vla3MgLSBNYXRoLnRydW5jKGR1ci53ZWVrcyksXG4gICAgZGF5czogZHVyLmRheXMgLSBNYXRoLnRydW5jKGR1ci5kYXlzKSxcbiAgICBob3VyczogZHVyLmhvdXJzLFxuICAgIG1pbnV0ZXM6IGR1ci5taW51dGVzLFxuICAgIHNlY29uZHM6IGR1ci5zZWNvbmRzLFxuICAgIG1pbGxpc2Vjb25kczogZHVyLm1pbGxpc2Vjb25kc1xuICB9KS5hcyhcIm1pbGxpc2Vjb25kc1wiKSwgbG9jYWxUUyA9IG9ialRvTG9jYWxUUyhjKTtcbiAgbGV0IFt0cywgb10gPSBmaXhPZmZzZXQobG9jYWxUUywgb1ByZSwgaW5zdC56b25lKTtcbiAgaWYgKG1pbGxpc1RvQWRkICE9PSAwKSB7XG4gICAgdHMgKz0gbWlsbGlzVG9BZGQ7XG4gICAgbyA9IGluc3Quem9uZS5vZmZzZXQodHMpO1xuICB9XG4gIHJldHVybiB7dHMsIG99O1xufVxuZnVuY3Rpb24gcGFyc2VEYXRhVG9EYXRlVGltZShwYXJzZWQsIHBhcnNlZFpvbmUsIG9wdHMsIGZvcm1hdCwgdGV4dCwgc3BlY2lmaWNPZmZzZXQpIHtcbiAgY29uc3Qge3NldFpvbmUsIHpvbmV9ID0gb3B0cztcbiAgaWYgKHBhcnNlZCAmJiBPYmplY3Qua2V5cyhwYXJzZWQpLmxlbmd0aCAhPT0gMCkge1xuICAgIGNvbnN0IGludGVycHJldGF0aW9uWm9uZSA9IHBhcnNlZFpvbmUgfHwgem9uZSwgaW5zdCA9IERhdGVUaW1lLmZyb21PYmplY3QocGFyc2VkLCB7XG4gICAgICAuLi5vcHRzLFxuICAgICAgem9uZTogaW50ZXJwcmV0YXRpb25ab25lLFxuICAgICAgc3BlY2lmaWNPZmZzZXRcbiAgICB9KTtcbiAgICByZXR1cm4gc2V0Wm9uZSA/IGluc3QgOiBpbnN0LnNldFpvbmUoem9uZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIERhdGVUaW1lLmludmFsaWQobmV3IEludmFsaWQoXCJ1bnBhcnNhYmxlXCIsIGB0aGUgaW5wdXQgXCIke3RleHR9XCIgY2FuJ3QgYmUgcGFyc2VkIGFzICR7Zm9ybWF0fWApKTtcbiAgfVxufVxuZnVuY3Rpb24gdG9UZWNoRm9ybWF0KGR0LCBmb3JtYXQsIGFsbG93WiA9IHRydWUpIHtcbiAgcmV0dXJuIGR0LmlzVmFsaWQgPyBGb3JtYXR0ZXIuY3JlYXRlKExvY2FsZS5jcmVhdGUoXCJlbi1VU1wiKSwge1xuICAgIGFsbG93WixcbiAgICBmb3JjZVNpbXBsZTogdHJ1ZVxuICB9KS5mb3JtYXREYXRlVGltZUZyb21TdHJpbmcoZHQsIGZvcm1hdCkgOiBudWxsO1xufVxuZnVuY3Rpb24gdG9JU09EYXRlKG8sIGV4dGVuZGVkKSB7XG4gIGNvbnN0IGxvbmdGb3JtYXQgPSBvLmMueWVhciA+IDk5OTkgfHwgby5jLnllYXIgPCAwO1xuICBsZXQgYyA9IFwiXCI7XG4gIGlmIChsb25nRm9ybWF0ICYmIG8uYy55ZWFyID49IDApXG4gICAgYyArPSBcIitcIjtcbiAgYyArPSBwYWRTdGFydChvLmMueWVhciwgbG9uZ0Zvcm1hdCA/IDYgOiA0KTtcbiAgaWYgKGV4dGVuZGVkKSB7XG4gICAgYyArPSBcIi1cIjtcbiAgICBjICs9IHBhZFN0YXJ0KG8uYy5tb250aCk7XG4gICAgYyArPSBcIi1cIjtcbiAgICBjICs9IHBhZFN0YXJ0KG8uYy5kYXkpO1xuICB9IGVsc2Uge1xuICAgIGMgKz0gcGFkU3RhcnQoby5jLm1vbnRoKTtcbiAgICBjICs9IHBhZFN0YXJ0KG8uYy5kYXkpO1xuICB9XG4gIHJldHVybiBjO1xufVxuZnVuY3Rpb24gdG9JU09UaW1lKG8sIGV4dGVuZGVkLCBzdXBwcmVzc1NlY29uZHMsIHN1cHByZXNzTWlsbGlzZWNvbmRzLCBpbmNsdWRlT2Zmc2V0LCBleHRlbmRlZFpvbmUpIHtcbiAgbGV0IGMgPSBwYWRTdGFydChvLmMuaG91cik7XG4gIGlmIChleHRlbmRlZCkge1xuICAgIGMgKz0gXCI6XCI7XG4gICAgYyArPSBwYWRTdGFydChvLmMubWludXRlKTtcbiAgICBpZiAoby5jLnNlY29uZCAhPT0gMCB8fCAhc3VwcHJlc3NTZWNvbmRzKSB7XG4gICAgICBjICs9IFwiOlwiO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBjICs9IHBhZFN0YXJ0KG8uYy5taW51dGUpO1xuICB9XG4gIGlmIChvLmMuc2Vjb25kICE9PSAwIHx8ICFzdXBwcmVzc1NlY29uZHMpIHtcbiAgICBjICs9IHBhZFN0YXJ0KG8uYy5zZWNvbmQpO1xuICAgIGlmIChvLmMubWlsbGlzZWNvbmQgIT09IDAgfHwgIXN1cHByZXNzTWlsbGlzZWNvbmRzKSB7XG4gICAgICBjICs9IFwiLlwiO1xuICAgICAgYyArPSBwYWRTdGFydChvLmMubWlsbGlzZWNvbmQsIDMpO1xuICAgIH1cbiAgfVxuICBpZiAoaW5jbHVkZU9mZnNldCkge1xuICAgIGlmIChvLmlzT2Zmc2V0Rml4ZWQgJiYgby5vZmZzZXQgPT09IDAgJiYgIWV4dGVuZGVkWm9uZSkge1xuICAgICAgYyArPSBcIlpcIjtcbiAgICB9IGVsc2UgaWYgKG8ubyA8IDApIHtcbiAgICAgIGMgKz0gXCItXCI7XG4gICAgICBjICs9IHBhZFN0YXJ0KE1hdGgudHJ1bmMoLW8ubyAvIDYwKSk7XG4gICAgICBjICs9IFwiOlwiO1xuICAgICAgYyArPSBwYWRTdGFydChNYXRoLnRydW5jKC1vLm8gJSA2MCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjICs9IFwiK1wiO1xuICAgICAgYyArPSBwYWRTdGFydChNYXRoLnRydW5jKG8ubyAvIDYwKSk7XG4gICAgICBjICs9IFwiOlwiO1xuICAgICAgYyArPSBwYWRTdGFydChNYXRoLnRydW5jKG8ubyAlIDYwKSk7XG4gICAgfVxuICB9XG4gIGlmIChleHRlbmRlZFpvbmUpIHtcbiAgICBjICs9IFwiW1wiICsgby56b25lLmlhbmFOYW1lICsgXCJdXCI7XG4gIH1cbiAgcmV0dXJuIGM7XG59XG52YXIgZGVmYXVsdFVuaXRWYWx1ZXMgPSB7XG4gIG1vbnRoOiAxLFxuICBkYXk6IDEsXG4gIGhvdXI6IDAsXG4gIG1pbnV0ZTogMCxcbiAgc2Vjb25kOiAwLFxuICBtaWxsaXNlY29uZDogMFxufTtcbnZhciBkZWZhdWx0V2Vla1VuaXRWYWx1ZXMgPSB7XG4gIHdlZWtOdW1iZXI6IDEsXG4gIHdlZWtkYXk6IDEsXG4gIGhvdXI6IDAsXG4gIG1pbnV0ZTogMCxcbiAgc2Vjb25kOiAwLFxuICBtaWxsaXNlY29uZDogMFxufTtcbnZhciBkZWZhdWx0T3JkaW5hbFVuaXRWYWx1ZXMgPSB7XG4gIG9yZGluYWw6IDEsXG4gIGhvdXI6IDAsXG4gIG1pbnV0ZTogMCxcbiAgc2Vjb25kOiAwLFxuICBtaWxsaXNlY29uZDogMFxufTtcbnZhciBvcmRlcmVkVW5pdHMyID0gW1wieWVhclwiLCBcIm1vbnRoXCIsIFwiZGF5XCIsIFwiaG91clwiLCBcIm1pbnV0ZVwiLCBcInNlY29uZFwiLCBcIm1pbGxpc2Vjb25kXCJdO1xudmFyIG9yZGVyZWRXZWVrVW5pdHMgPSBbXG4gIFwid2Vla1llYXJcIixcbiAgXCJ3ZWVrTnVtYmVyXCIsXG4gIFwid2Vla2RheVwiLFxuICBcImhvdXJcIixcbiAgXCJtaW51dGVcIixcbiAgXCJzZWNvbmRcIixcbiAgXCJtaWxsaXNlY29uZFwiXG5dO1xudmFyIG9yZGVyZWRPcmRpbmFsVW5pdHMgPSBbXCJ5ZWFyXCIsIFwib3JkaW5hbFwiLCBcImhvdXJcIiwgXCJtaW51dGVcIiwgXCJzZWNvbmRcIiwgXCJtaWxsaXNlY29uZFwiXTtcbmZ1bmN0aW9uIG5vcm1hbGl6ZVVuaXQodW5pdCkge1xuICBjb25zdCBub3JtYWxpemVkID0ge1xuICAgIHllYXI6IFwieWVhclwiLFxuICAgIHllYXJzOiBcInllYXJcIixcbiAgICBtb250aDogXCJtb250aFwiLFxuICAgIG1vbnRoczogXCJtb250aFwiLFxuICAgIGRheTogXCJkYXlcIixcbiAgICBkYXlzOiBcImRheVwiLFxuICAgIGhvdXI6IFwiaG91clwiLFxuICAgIGhvdXJzOiBcImhvdXJcIixcbiAgICBtaW51dGU6IFwibWludXRlXCIsXG4gICAgbWludXRlczogXCJtaW51dGVcIixcbiAgICBxdWFydGVyOiBcInF1YXJ0ZXJcIixcbiAgICBxdWFydGVyczogXCJxdWFydGVyXCIsXG4gICAgc2Vjb25kOiBcInNlY29uZFwiLFxuICAgIHNlY29uZHM6IFwic2Vjb25kXCIsXG4gICAgbWlsbGlzZWNvbmQ6IFwibWlsbGlzZWNvbmRcIixcbiAgICBtaWxsaXNlY29uZHM6IFwibWlsbGlzZWNvbmRcIixcbiAgICB3ZWVrZGF5OiBcIndlZWtkYXlcIixcbiAgICB3ZWVrZGF5czogXCJ3ZWVrZGF5XCIsXG4gICAgd2Vla251bWJlcjogXCJ3ZWVrTnVtYmVyXCIsXG4gICAgd2Vla3NudW1iZXI6IFwid2Vla051bWJlclwiLFxuICAgIHdlZWtudW1iZXJzOiBcIndlZWtOdW1iZXJcIixcbiAgICB3ZWVreWVhcjogXCJ3ZWVrWWVhclwiLFxuICAgIHdlZWt5ZWFyczogXCJ3ZWVrWWVhclwiLFxuICAgIG9yZGluYWw6IFwib3JkaW5hbFwiXG4gIH1bdW5pdC50b0xvd2VyQ2FzZSgpXTtcbiAgaWYgKCFub3JtYWxpemVkKVxuICAgIHRocm93IG5ldyBJbnZhbGlkVW5pdEVycm9yKHVuaXQpO1xuICByZXR1cm4gbm9ybWFsaXplZDtcbn1cbmZ1bmN0aW9uIHF1aWNrRFQob2JqLCBvcHRzKSB7XG4gIGNvbnN0IHpvbmUgPSBub3JtYWxpemVab25lKG9wdHMuem9uZSwgU2V0dGluZ3MuZGVmYXVsdFpvbmUpLCBsb2MgPSBMb2NhbGUuZnJvbU9iamVjdChvcHRzKSwgdHNOb3cgPSBTZXR0aW5ncy5ub3coKTtcbiAgbGV0IHRzLCBvO1xuICBpZiAoIWlzVW5kZWZpbmVkKG9iai55ZWFyKSkge1xuICAgIGZvciAoY29uc3QgdSBvZiBvcmRlcmVkVW5pdHMyKSB7XG4gICAgICBpZiAoaXNVbmRlZmluZWQob2JqW3VdKSkge1xuICAgICAgICBvYmpbdV0gPSBkZWZhdWx0VW5pdFZhbHVlc1t1XTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgaW52YWxpZCA9IGhhc0ludmFsaWRHcmVnb3JpYW5EYXRhKG9iaikgfHwgaGFzSW52YWxpZFRpbWVEYXRhKG9iaik7XG4gICAgaWYgKGludmFsaWQpIHtcbiAgICAgIHJldHVybiBEYXRlVGltZS5pbnZhbGlkKGludmFsaWQpO1xuICAgIH1cbiAgICBjb25zdCBvZmZzZXRQcm92aXMgPSB6b25lLm9mZnNldCh0c05vdyk7XG4gICAgW3RzLCBvXSA9IG9ialRvVFMob2JqLCBvZmZzZXRQcm92aXMsIHpvbmUpO1xuICB9IGVsc2Uge1xuICAgIHRzID0gdHNOb3c7XG4gIH1cbiAgcmV0dXJuIG5ldyBEYXRlVGltZSh7dHMsIHpvbmUsIGxvYywgb30pO1xufVxuZnVuY3Rpb24gZGlmZlJlbGF0aXZlKHN0YXJ0LCBlbmQsIG9wdHMpIHtcbiAgY29uc3Qgcm91bmQgPSBpc1VuZGVmaW5lZChvcHRzLnJvdW5kKSA/IHRydWUgOiBvcHRzLnJvdW5kLCBmb3JtYXQgPSAoYywgdW5pdCkgPT4ge1xuICAgIGMgPSByb3VuZFRvKGMsIHJvdW5kIHx8IG9wdHMuY2FsZW5kYXJ5ID8gMCA6IDIsIHRydWUpO1xuICAgIGNvbnN0IGZvcm1hdHRlciA9IGVuZC5sb2MuY2xvbmUob3B0cykucmVsRm9ybWF0dGVyKG9wdHMpO1xuICAgIHJldHVybiBmb3JtYXR0ZXIuZm9ybWF0KGMsIHVuaXQpO1xuICB9LCBkaWZmZXIgPSAodW5pdCkgPT4ge1xuICAgIGlmIChvcHRzLmNhbGVuZGFyeSkge1xuICAgICAgaWYgKCFlbmQuaGFzU2FtZShzdGFydCwgdW5pdCkpIHtcbiAgICAgICAgcmV0dXJuIGVuZC5zdGFydE9mKHVuaXQpLmRpZmYoc3RhcnQuc3RhcnRPZih1bml0KSwgdW5pdCkuZ2V0KHVuaXQpO1xuICAgICAgfSBlbHNlXG4gICAgICAgIHJldHVybiAwO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZW5kLmRpZmYoc3RhcnQsIHVuaXQpLmdldCh1bml0KTtcbiAgICB9XG4gIH07XG4gIGlmIChvcHRzLnVuaXQpIHtcbiAgICByZXR1cm4gZm9ybWF0KGRpZmZlcihvcHRzLnVuaXQpLCBvcHRzLnVuaXQpO1xuICB9XG4gIGZvciAoY29uc3QgdW5pdCBvZiBvcHRzLnVuaXRzKSB7XG4gICAgY29uc3QgY291bnQgPSBkaWZmZXIodW5pdCk7XG4gICAgaWYgKE1hdGguYWJzKGNvdW50KSA+PSAxKSB7XG4gICAgICByZXR1cm4gZm9ybWF0KGNvdW50LCB1bml0KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZvcm1hdChzdGFydCA+IGVuZCA/IC0wIDogMCwgb3B0cy51bml0c1tvcHRzLnVuaXRzLmxlbmd0aCAtIDFdKTtcbn1cbmZ1bmN0aW9uIGxhc3RPcHRzKGFyZ0xpc3QpIHtcbiAgbGV0IG9wdHMgPSB7fSwgYXJncztcbiAgaWYgKGFyZ0xpc3QubGVuZ3RoID4gMCAmJiB0eXBlb2YgYXJnTGlzdFthcmdMaXN0Lmxlbmd0aCAtIDFdID09PSBcIm9iamVjdFwiKSB7XG4gICAgb3B0cyA9IGFyZ0xpc3RbYXJnTGlzdC5sZW5ndGggLSAxXTtcbiAgICBhcmdzID0gQXJyYXkuZnJvbShhcmdMaXN0KS5zbGljZSgwLCBhcmdMaXN0Lmxlbmd0aCAtIDEpO1xuICB9IGVsc2Uge1xuICAgIGFyZ3MgPSBBcnJheS5mcm9tKGFyZ0xpc3QpO1xuICB9XG4gIHJldHVybiBbb3B0cywgYXJnc107XG59XG52YXIgRGF0ZVRpbWUgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgIGNvbnN0IHpvbmUgPSBjb25maWcuem9uZSB8fCBTZXR0aW5ncy5kZWZhdWx0Wm9uZTtcbiAgICBsZXQgaW52YWxpZCA9IGNvbmZpZy5pbnZhbGlkIHx8IChOdW1iZXIuaXNOYU4oY29uZmlnLnRzKSA/IG5ldyBJbnZhbGlkKFwiaW52YWxpZCBpbnB1dFwiKSA6IG51bGwpIHx8ICghem9uZS5pc1ZhbGlkID8gdW5zdXBwb3J0ZWRab25lKHpvbmUpIDogbnVsbCk7XG4gICAgdGhpcy50cyA9IGlzVW5kZWZpbmVkKGNvbmZpZy50cykgPyBTZXR0aW5ncy5ub3coKSA6IGNvbmZpZy50cztcbiAgICBsZXQgYyA9IG51bGwsIG8gPSBudWxsO1xuICAgIGlmICghaW52YWxpZCkge1xuICAgICAgY29uc3QgdW5jaGFuZ2VkID0gY29uZmlnLm9sZCAmJiBjb25maWcub2xkLnRzID09PSB0aGlzLnRzICYmIGNvbmZpZy5vbGQuem9uZS5lcXVhbHMoem9uZSk7XG4gICAgICBpZiAodW5jaGFuZ2VkKSB7XG4gICAgICAgIFtjLCBvXSA9IFtjb25maWcub2xkLmMsIGNvbmZpZy5vbGQub107XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBvdCA9IHpvbmUub2Zmc2V0KHRoaXMudHMpO1xuICAgICAgICBjID0gdHNUb09iaih0aGlzLnRzLCBvdCk7XG4gICAgICAgIGludmFsaWQgPSBOdW1iZXIuaXNOYU4oYy55ZWFyKSA/IG5ldyBJbnZhbGlkKFwiaW52YWxpZCBpbnB1dFwiKSA6IG51bGw7XG4gICAgICAgIGMgPSBpbnZhbGlkID8gbnVsbCA6IGM7XG4gICAgICAgIG8gPSBpbnZhbGlkID8gbnVsbCA6IG90O1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl96b25lID0gem9uZTtcbiAgICB0aGlzLmxvYyA9IGNvbmZpZy5sb2MgfHwgTG9jYWxlLmNyZWF0ZSgpO1xuICAgIHRoaXMuaW52YWxpZCA9IGludmFsaWQ7XG4gICAgdGhpcy53ZWVrRGF0YSA9IG51bGw7XG4gICAgdGhpcy5jID0gYztcbiAgICB0aGlzLm8gPSBvO1xuICAgIHRoaXMuaXNMdXhvbkRhdGVUaW1lID0gdHJ1ZTtcbiAgfVxuICBzdGF0aWMgbm93KCkge1xuICAgIHJldHVybiBuZXcgRGF0ZVRpbWUoe30pO1xuICB9XG4gIHN0YXRpYyBsb2NhbCgpIHtcbiAgICBjb25zdCBbb3B0cywgYXJnc10gPSBsYXN0T3B0cyhhcmd1bWVudHMpLCBbeWVhciwgbW9udGgsIGRheSwgaG91ciwgbWludXRlLCBzZWNvbmQsIG1pbGxpc2Vjb25kXSA9IGFyZ3M7XG4gICAgcmV0dXJuIHF1aWNrRFQoe3llYXIsIG1vbnRoLCBkYXksIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBtaWxsaXNlY29uZH0sIG9wdHMpO1xuICB9XG4gIHN0YXRpYyB1dGMoKSB7XG4gICAgY29uc3QgW29wdHMsIGFyZ3NdID0gbGFzdE9wdHMoYXJndW1lbnRzKSwgW3llYXIsIG1vbnRoLCBkYXksIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBtaWxsaXNlY29uZF0gPSBhcmdzO1xuICAgIG9wdHMuem9uZSA9IEZpeGVkT2Zmc2V0Wm9uZS51dGNJbnN0YW5jZTtcbiAgICByZXR1cm4gcXVpY2tEVCh7eWVhciwgbW9udGgsIGRheSwgaG91ciwgbWludXRlLCBzZWNvbmQsIG1pbGxpc2Vjb25kfSwgb3B0cyk7XG4gIH1cbiAgc3RhdGljIGZyb21KU0RhdGUoZGF0ZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgdHMgPSBpc0RhdGUoZGF0ZSkgPyBkYXRlLnZhbHVlT2YoKSA6IE5hTjtcbiAgICBpZiAoTnVtYmVyLmlzTmFOKHRzKSkge1xuICAgICAgcmV0dXJuIERhdGVUaW1lLmludmFsaWQoXCJpbnZhbGlkIGlucHV0XCIpO1xuICAgIH1cbiAgICBjb25zdCB6b25lVG9Vc2UgPSBub3JtYWxpemVab25lKG9wdGlvbnMuem9uZSwgU2V0dGluZ3MuZGVmYXVsdFpvbmUpO1xuICAgIGlmICghem9uZVRvVXNlLmlzVmFsaWQpIHtcbiAgICAgIHJldHVybiBEYXRlVGltZS5pbnZhbGlkKHVuc3VwcG9ydGVkWm9uZSh6b25lVG9Vc2UpKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBEYXRlVGltZSh7XG4gICAgICB0cyxcbiAgICAgIHpvbmU6IHpvbmVUb1VzZSxcbiAgICAgIGxvYzogTG9jYWxlLmZyb21PYmplY3Qob3B0aW9ucylcbiAgICB9KTtcbiAgfVxuICBzdGF0aWMgZnJvbU1pbGxpcyhtaWxsaXNlY29uZHMsIG9wdGlvbnMgPSB7fSkge1xuICAgIGlmICghaXNOdW1iZXIobWlsbGlzZWNvbmRzKSkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKGBmcm9tTWlsbGlzIHJlcXVpcmVzIGEgbnVtZXJpY2FsIGlucHV0LCBidXQgcmVjZWl2ZWQgYSAke3R5cGVvZiBtaWxsaXNlY29uZHN9IHdpdGggdmFsdWUgJHttaWxsaXNlY29uZHN9YCk7XG4gICAgfSBlbHNlIGlmIChtaWxsaXNlY29uZHMgPCAtTUFYX0RBVEUgfHwgbWlsbGlzZWNvbmRzID4gTUFYX0RBVEUpIHtcbiAgICAgIHJldHVybiBEYXRlVGltZS5pbnZhbGlkKFwiVGltZXN0YW1wIG91dCBvZiByYW5nZVwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlVGltZSh7XG4gICAgICAgIHRzOiBtaWxsaXNlY29uZHMsXG4gICAgICAgIHpvbmU6IG5vcm1hbGl6ZVpvbmUob3B0aW9ucy56b25lLCBTZXR0aW5ncy5kZWZhdWx0Wm9uZSksXG4gICAgICAgIGxvYzogTG9jYWxlLmZyb21PYmplY3Qob3B0aW9ucylcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBzdGF0aWMgZnJvbVNlY29uZHMoc2Vjb25kcywgb3B0aW9ucyA9IHt9KSB7XG4gICAgaWYgKCFpc051bWJlcihzZWNvbmRzKSkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFwiZnJvbVNlY29uZHMgcmVxdWlyZXMgYSBudW1lcmljYWwgaW5wdXRcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZVRpbWUoe1xuICAgICAgICB0czogc2Vjb25kcyAqIDFlMyxcbiAgICAgICAgem9uZTogbm9ybWFsaXplWm9uZShvcHRpb25zLnpvbmUsIFNldHRpbmdzLmRlZmF1bHRab25lKSxcbiAgICAgICAgbG9jOiBMb2NhbGUuZnJvbU9iamVjdChvcHRpb25zKVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIHN0YXRpYyBmcm9tT2JqZWN0KG9iaiwgb3B0cyA9IHt9KSB7XG4gICAgb2JqID0gb2JqIHx8IHt9O1xuICAgIGNvbnN0IHpvbmVUb1VzZSA9IG5vcm1hbGl6ZVpvbmUob3B0cy56b25lLCBTZXR0aW5ncy5kZWZhdWx0Wm9uZSk7XG4gICAgaWYgKCF6b25lVG9Vc2UuaXNWYWxpZCkge1xuICAgICAgcmV0dXJuIERhdGVUaW1lLmludmFsaWQodW5zdXBwb3J0ZWRab25lKHpvbmVUb1VzZSkpO1xuICAgIH1cbiAgICBjb25zdCB0c05vdyA9IFNldHRpbmdzLm5vdygpLCBvZmZzZXRQcm92aXMgPSAhaXNVbmRlZmluZWQob3B0cy5zcGVjaWZpY09mZnNldCkgPyBvcHRzLnNwZWNpZmljT2Zmc2V0IDogem9uZVRvVXNlLm9mZnNldCh0c05vdyksIG5vcm1hbGl6ZWQgPSBub3JtYWxpemVPYmplY3Qob2JqLCBub3JtYWxpemVVbml0KSwgY29udGFpbnNPcmRpbmFsID0gIWlzVW5kZWZpbmVkKG5vcm1hbGl6ZWQub3JkaW5hbCksIGNvbnRhaW5zR3JlZ29yWWVhciA9ICFpc1VuZGVmaW5lZChub3JtYWxpemVkLnllYXIpLCBjb250YWluc0dyZWdvck1EID0gIWlzVW5kZWZpbmVkKG5vcm1hbGl6ZWQubW9udGgpIHx8ICFpc1VuZGVmaW5lZChub3JtYWxpemVkLmRheSksIGNvbnRhaW5zR3JlZ29yID0gY29udGFpbnNHcmVnb3JZZWFyIHx8IGNvbnRhaW5zR3JlZ29yTUQsIGRlZmluaXRlV2Vla0RlZiA9IG5vcm1hbGl6ZWQud2Vla1llYXIgfHwgbm9ybWFsaXplZC53ZWVrTnVtYmVyLCBsb2MgPSBMb2NhbGUuZnJvbU9iamVjdChvcHRzKTtcbiAgICBpZiAoKGNvbnRhaW5zR3JlZ29yIHx8IGNvbnRhaW5zT3JkaW5hbCkgJiYgZGVmaW5pdGVXZWVrRGVmKSB7XG4gICAgICB0aHJvdyBuZXcgQ29uZmxpY3RpbmdTcGVjaWZpY2F0aW9uRXJyb3IoXCJDYW4ndCBtaXggd2Vla1llYXIvd2Vla051bWJlciB1bml0cyB3aXRoIHllYXIvbW9udGgvZGF5IG9yIG9yZGluYWxzXCIpO1xuICAgIH1cbiAgICBpZiAoY29udGFpbnNHcmVnb3JNRCAmJiBjb250YWluc09yZGluYWwpIHtcbiAgICAgIHRocm93IG5ldyBDb25mbGljdGluZ1NwZWNpZmljYXRpb25FcnJvcihcIkNhbid0IG1peCBvcmRpbmFsIGRhdGVzIHdpdGggbW9udGgvZGF5XCIpO1xuICAgIH1cbiAgICBjb25zdCB1c2VXZWVrRGF0YSA9IGRlZmluaXRlV2Vla0RlZiB8fCBub3JtYWxpemVkLndlZWtkYXkgJiYgIWNvbnRhaW5zR3JlZ29yO1xuICAgIGxldCB1bml0cywgZGVmYXVsdFZhbHVlcywgb2JqTm93ID0gdHNUb09iaih0c05vdywgb2Zmc2V0UHJvdmlzKTtcbiAgICBpZiAodXNlV2Vla0RhdGEpIHtcbiAgICAgIHVuaXRzID0gb3JkZXJlZFdlZWtVbml0cztcbiAgICAgIGRlZmF1bHRWYWx1ZXMgPSBkZWZhdWx0V2Vla1VuaXRWYWx1ZXM7XG4gICAgICBvYmpOb3cgPSBncmVnb3JpYW5Ub1dlZWsob2JqTm93KTtcbiAgICB9IGVsc2UgaWYgKGNvbnRhaW5zT3JkaW5hbCkge1xuICAgICAgdW5pdHMgPSBvcmRlcmVkT3JkaW5hbFVuaXRzO1xuICAgICAgZGVmYXVsdFZhbHVlcyA9IGRlZmF1bHRPcmRpbmFsVW5pdFZhbHVlcztcbiAgICAgIG9iak5vdyA9IGdyZWdvcmlhblRvT3JkaW5hbChvYmpOb3cpO1xuICAgIH0gZWxzZSB7XG4gICAgICB1bml0cyA9IG9yZGVyZWRVbml0czI7XG4gICAgICBkZWZhdWx0VmFsdWVzID0gZGVmYXVsdFVuaXRWYWx1ZXM7XG4gICAgfVxuICAgIGxldCBmb3VuZEZpcnN0ID0gZmFsc2U7XG4gICAgZm9yIChjb25zdCB1IG9mIHVuaXRzKSB7XG4gICAgICBjb25zdCB2ID0gbm9ybWFsaXplZFt1XTtcbiAgICAgIGlmICghaXNVbmRlZmluZWQodikpIHtcbiAgICAgICAgZm91bmRGaXJzdCA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKGZvdW5kRmlyc3QpIHtcbiAgICAgICAgbm9ybWFsaXplZFt1XSA9IGRlZmF1bHRWYWx1ZXNbdV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub3JtYWxpemVkW3VdID0gb2JqTm93W3VdO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBoaWdoZXJPcmRlckludmFsaWQgPSB1c2VXZWVrRGF0YSA/IGhhc0ludmFsaWRXZWVrRGF0YShub3JtYWxpemVkKSA6IGNvbnRhaW5zT3JkaW5hbCA/IGhhc0ludmFsaWRPcmRpbmFsRGF0YShub3JtYWxpemVkKSA6IGhhc0ludmFsaWRHcmVnb3JpYW5EYXRhKG5vcm1hbGl6ZWQpLCBpbnZhbGlkID0gaGlnaGVyT3JkZXJJbnZhbGlkIHx8IGhhc0ludmFsaWRUaW1lRGF0YShub3JtYWxpemVkKTtcbiAgICBpZiAoaW52YWxpZCkge1xuICAgICAgcmV0dXJuIERhdGVUaW1lLmludmFsaWQoaW52YWxpZCk7XG4gICAgfVxuICAgIGNvbnN0IGdyZWdvcmlhbiA9IHVzZVdlZWtEYXRhID8gd2Vla1RvR3JlZ29yaWFuKG5vcm1hbGl6ZWQpIDogY29udGFpbnNPcmRpbmFsID8gb3JkaW5hbFRvR3JlZ29yaWFuKG5vcm1hbGl6ZWQpIDogbm9ybWFsaXplZCwgW3RzRmluYWwsIG9mZnNldEZpbmFsXSA9IG9ialRvVFMoZ3JlZ29yaWFuLCBvZmZzZXRQcm92aXMsIHpvbmVUb1VzZSksIGluc3QgPSBuZXcgRGF0ZVRpbWUoe1xuICAgICAgdHM6IHRzRmluYWwsXG4gICAgICB6b25lOiB6b25lVG9Vc2UsXG4gICAgICBvOiBvZmZzZXRGaW5hbCxcbiAgICAgIGxvY1xuICAgIH0pO1xuICAgIGlmIChub3JtYWxpemVkLndlZWtkYXkgJiYgY29udGFpbnNHcmVnb3IgJiYgb2JqLndlZWtkYXkgIT09IGluc3Qud2Vla2RheSkge1xuICAgICAgcmV0dXJuIERhdGVUaW1lLmludmFsaWQoXCJtaXNtYXRjaGVkIHdlZWtkYXlcIiwgYHlvdSBjYW4ndCBzcGVjaWZ5IGJvdGggYSB3ZWVrZGF5IG9mICR7bm9ybWFsaXplZC53ZWVrZGF5fSBhbmQgYSBkYXRlIG9mICR7aW5zdC50b0lTTygpfWApO1xuICAgIH1cbiAgICByZXR1cm4gaW5zdDtcbiAgfVxuICBzdGF0aWMgZnJvbUlTTyh0ZXh0LCBvcHRzID0ge30pIHtcbiAgICBjb25zdCBbdmFscywgcGFyc2VkWm9uZV0gPSBwYXJzZUlTT0RhdGUodGV4dCk7XG4gICAgcmV0dXJuIHBhcnNlRGF0YVRvRGF0ZVRpbWUodmFscywgcGFyc2VkWm9uZSwgb3B0cywgXCJJU08gODYwMVwiLCB0ZXh0KTtcbiAgfVxuICBzdGF0aWMgZnJvbVJGQzI4MjIodGV4dCwgb3B0cyA9IHt9KSB7XG4gICAgY29uc3QgW3ZhbHMsIHBhcnNlZFpvbmVdID0gcGFyc2VSRkMyODIyRGF0ZSh0ZXh0KTtcbiAgICByZXR1cm4gcGFyc2VEYXRhVG9EYXRlVGltZSh2YWxzLCBwYXJzZWRab25lLCBvcHRzLCBcIlJGQyAyODIyXCIsIHRleHQpO1xuICB9XG4gIHN0YXRpYyBmcm9tSFRUUCh0ZXh0LCBvcHRzID0ge30pIHtcbiAgICBjb25zdCBbdmFscywgcGFyc2VkWm9uZV0gPSBwYXJzZUhUVFBEYXRlKHRleHQpO1xuICAgIHJldHVybiBwYXJzZURhdGFUb0RhdGVUaW1lKHZhbHMsIHBhcnNlZFpvbmUsIG9wdHMsIFwiSFRUUFwiLCBvcHRzKTtcbiAgfVxuICBzdGF0aWMgZnJvbUZvcm1hdCh0ZXh0LCBmbXQsIG9wdHMgPSB7fSkge1xuICAgIGlmIChpc1VuZGVmaW5lZCh0ZXh0KSB8fCBpc1VuZGVmaW5lZChmbXQpKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXCJmcm9tRm9ybWF0IHJlcXVpcmVzIGFuIGlucHV0IHN0cmluZyBhbmQgYSBmb3JtYXRcIik7XG4gICAgfVxuICAgIGNvbnN0IHtsb2NhbGUgPSBudWxsLCBudW1iZXJpbmdTeXN0ZW0gPSBudWxsfSA9IG9wdHMsIGxvY2FsZVRvVXNlID0gTG9jYWxlLmZyb21PcHRzKHtcbiAgICAgIGxvY2FsZSxcbiAgICAgIG51bWJlcmluZ1N5c3RlbSxcbiAgICAgIGRlZmF1bHRUb0VOOiB0cnVlXG4gICAgfSksIFt2YWxzLCBwYXJzZWRab25lLCBzcGVjaWZpY09mZnNldCwgaW52YWxpZF0gPSBwYXJzZUZyb21Ub2tlbnMobG9jYWxlVG9Vc2UsIHRleHQsIGZtdCk7XG4gICAgaWYgKGludmFsaWQpIHtcbiAgICAgIHJldHVybiBEYXRlVGltZS5pbnZhbGlkKGludmFsaWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcGFyc2VEYXRhVG9EYXRlVGltZSh2YWxzLCBwYXJzZWRab25lLCBvcHRzLCBgZm9ybWF0ICR7Zm10fWAsIHRleHQsIHNwZWNpZmljT2Zmc2V0KTtcbiAgICB9XG4gIH1cbiAgc3RhdGljIGZyb21TdHJpbmcodGV4dCwgZm10LCBvcHRzID0ge30pIHtcbiAgICByZXR1cm4gRGF0ZVRpbWUuZnJvbUZvcm1hdCh0ZXh0LCBmbXQsIG9wdHMpO1xuICB9XG4gIHN0YXRpYyBmcm9tU1FMKHRleHQsIG9wdHMgPSB7fSkge1xuICAgIGNvbnN0IFt2YWxzLCBwYXJzZWRab25lXSA9IHBhcnNlU1FMKHRleHQpO1xuICAgIHJldHVybiBwYXJzZURhdGFUb0RhdGVUaW1lKHZhbHMsIHBhcnNlZFpvbmUsIG9wdHMsIFwiU1FMXCIsIHRleHQpO1xuICB9XG4gIHN0YXRpYyBpbnZhbGlkKHJlYXNvbiwgZXhwbGFuYXRpb24gPSBudWxsKSB7XG4gICAgaWYgKCFyZWFzb24pIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcIm5lZWQgdG8gc3BlY2lmeSBhIHJlYXNvbiB0aGUgRGF0ZVRpbWUgaXMgaW52YWxpZFwiKTtcbiAgICB9XG4gICAgY29uc3QgaW52YWxpZCA9IHJlYXNvbiBpbnN0YW5jZW9mIEludmFsaWQgPyByZWFzb24gOiBuZXcgSW52YWxpZChyZWFzb24sIGV4cGxhbmF0aW9uKTtcbiAgICBpZiAoU2V0dGluZ3MudGhyb3dPbkludmFsaWQpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkRGF0ZVRpbWVFcnJvcihpbnZhbGlkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlVGltZSh7aW52YWxpZH0pO1xuICAgIH1cbiAgfVxuICBzdGF0aWMgaXNEYXRlVGltZShvKSB7XG4gICAgcmV0dXJuIG8gJiYgby5pc0x1eG9uRGF0ZVRpbWUgfHwgZmFsc2U7XG4gIH1cbiAgc3RhdGljIHBhcnNlRm9ybWF0Rm9yT3B0cyhmb3JtYXRPcHRzLCBsb2NhbGVPcHRzID0ge30pIHtcbiAgICBjb25zdCB0b2tlbkxpc3QgPSBmb3JtYXRPcHRzVG9Ub2tlbnMoZm9ybWF0T3B0cywgTG9jYWxlLmZyb21PYmplY3QobG9jYWxlT3B0cykpO1xuICAgIHJldHVybiAhdG9rZW5MaXN0ID8gbnVsbCA6IHRva2VuTGlzdC5tYXAoKHQpID0+IHQgPyB0LnZhbCA6IG51bGwpLmpvaW4oXCJcIik7XG4gIH1cbiAgZ2V0KHVuaXQpIHtcbiAgICByZXR1cm4gdGhpc1t1bml0XTtcbiAgfVxuICBnZXQgaXNWYWxpZCgpIHtcbiAgICByZXR1cm4gdGhpcy5pbnZhbGlkID09PSBudWxsO1xuICB9XG4gIGdldCBpbnZhbGlkUmVhc29uKCkge1xuICAgIHJldHVybiB0aGlzLmludmFsaWQgPyB0aGlzLmludmFsaWQucmVhc29uIDogbnVsbDtcbiAgfVxuICBnZXQgaW52YWxpZEV4cGxhbmF0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmludmFsaWQgPyB0aGlzLmludmFsaWQuZXhwbGFuYXRpb24gOiBudWxsO1xuICB9XG4gIGdldCBsb2NhbGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMubG9jLmxvY2FsZSA6IG51bGw7XG4gIH1cbiAgZ2V0IG51bWJlcmluZ1N5c3RlbSgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5sb2MubnVtYmVyaW5nU3lzdGVtIDogbnVsbDtcbiAgfVxuICBnZXQgb3V0cHV0Q2FsZW5kYXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMubG9jLm91dHB1dENhbGVuZGFyIDogbnVsbDtcbiAgfVxuICBnZXQgem9uZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fem9uZTtcbiAgfVxuICBnZXQgem9uZU5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMuem9uZS5uYW1lIDogbnVsbDtcbiAgfVxuICBnZXQgeWVhcigpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5jLnllYXIgOiBOYU47XG4gIH1cbiAgZ2V0IHF1YXJ0ZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IE1hdGguY2VpbCh0aGlzLmMubW9udGggLyAzKSA6IE5hTjtcbiAgfVxuICBnZXQgbW9udGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMuYy5tb250aCA6IE5hTjtcbiAgfVxuICBnZXQgZGF5KCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLmMuZGF5IDogTmFOO1xuICB9XG4gIGdldCBob3VyKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLmMuaG91ciA6IE5hTjtcbiAgfVxuICBnZXQgbWludXRlKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLmMubWludXRlIDogTmFOO1xuICB9XG4gIGdldCBzZWNvbmQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMuYy5zZWNvbmQgOiBOYU47XG4gIH1cbiAgZ2V0IG1pbGxpc2Vjb25kKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLmMubWlsbGlzZWNvbmQgOiBOYU47XG4gIH1cbiAgZ2V0IHdlZWtZZWFyKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBwb3NzaWJseUNhY2hlZFdlZWtEYXRhKHRoaXMpLndlZWtZZWFyIDogTmFOO1xuICB9XG4gIGdldCB3ZWVrTnVtYmVyKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBwb3NzaWJseUNhY2hlZFdlZWtEYXRhKHRoaXMpLndlZWtOdW1iZXIgOiBOYU47XG4gIH1cbiAgZ2V0IHdlZWtkYXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHBvc3NpYmx5Q2FjaGVkV2Vla0RhdGEodGhpcykud2Vla2RheSA6IE5hTjtcbiAgfVxuICBnZXQgb3JkaW5hbCgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gZ3JlZ29yaWFuVG9PcmRpbmFsKHRoaXMuYykub3JkaW5hbCA6IE5hTjtcbiAgfVxuICBnZXQgbW9udGhTaG9ydCgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gSW5mby5tb250aHMoXCJzaG9ydFwiLCB7bG9jT2JqOiB0aGlzLmxvY30pW3RoaXMubW9udGggLSAxXSA6IG51bGw7XG4gIH1cbiAgZ2V0IG1vbnRoTG9uZygpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gSW5mby5tb250aHMoXCJsb25nXCIsIHtsb2NPYmo6IHRoaXMubG9jfSlbdGhpcy5tb250aCAtIDFdIDogbnVsbDtcbiAgfVxuICBnZXQgd2Vla2RheVNob3J0KCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBJbmZvLndlZWtkYXlzKFwic2hvcnRcIiwge2xvY09iajogdGhpcy5sb2N9KVt0aGlzLndlZWtkYXkgLSAxXSA6IG51bGw7XG4gIH1cbiAgZ2V0IHdlZWtkYXlMb25nKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBJbmZvLndlZWtkYXlzKFwibG9uZ1wiLCB7bG9jT2JqOiB0aGlzLmxvY30pW3RoaXMud2Vla2RheSAtIDFdIDogbnVsbDtcbiAgfVxuICBnZXQgb2Zmc2V0KCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyArdGhpcy5vIDogTmFOO1xuICB9XG4gIGdldCBvZmZzZXROYW1lU2hvcnQoKSB7XG4gICAgaWYgKHRoaXMuaXNWYWxpZCkge1xuICAgICAgcmV0dXJuIHRoaXMuem9uZS5vZmZzZXROYW1lKHRoaXMudHMsIHtcbiAgICAgICAgZm9ybWF0OiBcInNob3J0XCIsXG4gICAgICAgIGxvY2FsZTogdGhpcy5sb2NhbGVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cbiAgZ2V0IG9mZnNldE5hbWVMb25nKCkge1xuICAgIGlmICh0aGlzLmlzVmFsaWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnpvbmUub2Zmc2V0TmFtZSh0aGlzLnRzLCB7XG4gICAgICAgIGZvcm1hdDogXCJsb25nXCIsXG4gICAgICAgIGxvY2FsZTogdGhpcy5sb2NhbGVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cbiAgZ2V0IGlzT2Zmc2V0Rml4ZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMuem9uZS5pc1VuaXZlcnNhbCA6IG51bGw7XG4gIH1cbiAgZ2V0IGlzSW5EU1QoKSB7XG4gICAgaWYgKHRoaXMuaXNPZmZzZXRGaXhlZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5vZmZzZXQgPiB0aGlzLnNldCh7bW9udGg6IDEsIGRheTogMX0pLm9mZnNldCB8fCB0aGlzLm9mZnNldCA+IHRoaXMuc2V0KHttb250aDogNX0pLm9mZnNldDtcbiAgICB9XG4gIH1cbiAgZ2V0IGlzSW5MZWFwWWVhcigpIHtcbiAgICByZXR1cm4gaXNMZWFwWWVhcih0aGlzLnllYXIpO1xuICB9XG4gIGdldCBkYXlzSW5Nb250aCgpIHtcbiAgICByZXR1cm4gZGF5c0luTW9udGgodGhpcy55ZWFyLCB0aGlzLm1vbnRoKTtcbiAgfVxuICBnZXQgZGF5c0luWWVhcigpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gZGF5c0luWWVhcih0aGlzLnllYXIpIDogTmFOO1xuICB9XG4gIGdldCB3ZWVrc0luV2Vla1llYXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHdlZWtzSW5XZWVrWWVhcih0aGlzLndlZWtZZWFyKSA6IE5hTjtcbiAgfVxuICByZXNvbHZlZExvY2FsZU9wdGlvbnMob3B0cyA9IHt9KSB7XG4gICAgY29uc3Qge2xvY2FsZSwgbnVtYmVyaW5nU3lzdGVtLCBjYWxlbmRhcn0gPSBGb3JtYXR0ZXIuY3JlYXRlKHRoaXMubG9jLmNsb25lKG9wdHMpLCBvcHRzKS5yZXNvbHZlZE9wdGlvbnModGhpcyk7XG4gICAgcmV0dXJuIHtsb2NhbGUsIG51bWJlcmluZ1N5c3RlbSwgb3V0cHV0Q2FsZW5kYXI6IGNhbGVuZGFyfTtcbiAgfVxuICB0b1VUQyhvZmZzZXQyID0gMCwgb3B0cyA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMuc2V0Wm9uZShGaXhlZE9mZnNldFpvbmUuaW5zdGFuY2Uob2Zmc2V0MiksIG9wdHMpO1xuICB9XG4gIHRvTG9jYWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2V0Wm9uZShTZXR0aW5ncy5kZWZhdWx0Wm9uZSk7XG4gIH1cbiAgc2V0Wm9uZSh6b25lLCB7a2VlcExvY2FsVGltZSA9IGZhbHNlLCBrZWVwQ2FsZW5kYXJUaW1lID0gZmFsc2V9ID0ge30pIHtcbiAgICB6b25lID0gbm9ybWFsaXplWm9uZSh6b25lLCBTZXR0aW5ncy5kZWZhdWx0Wm9uZSk7XG4gICAgaWYgKHpvbmUuZXF1YWxzKHRoaXMuem9uZSkpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSBpZiAoIXpvbmUuaXNWYWxpZCkge1xuICAgICAgcmV0dXJuIERhdGVUaW1lLmludmFsaWQodW5zdXBwb3J0ZWRab25lKHpvbmUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IG5ld1RTID0gdGhpcy50cztcbiAgICAgIGlmIChrZWVwTG9jYWxUaW1lIHx8IGtlZXBDYWxlbmRhclRpbWUpIHtcbiAgICAgICAgY29uc3Qgb2Zmc2V0R3Vlc3MgPSB6b25lLm9mZnNldCh0aGlzLnRzKTtcbiAgICAgICAgY29uc3QgYXNPYmogPSB0aGlzLnRvT2JqZWN0KCk7XG4gICAgICAgIFtuZXdUU10gPSBvYmpUb1RTKGFzT2JqLCBvZmZzZXRHdWVzcywgem9uZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY2xvbmUyKHRoaXMsIHt0czogbmV3VFMsIHpvbmV9KTtcbiAgICB9XG4gIH1cbiAgcmVjb25maWd1cmUoe2xvY2FsZSwgbnVtYmVyaW5nU3lzdGVtLCBvdXRwdXRDYWxlbmRhcn0gPSB7fSkge1xuICAgIGNvbnN0IGxvYyA9IHRoaXMubG9jLmNsb25lKHtsb2NhbGUsIG51bWJlcmluZ1N5c3RlbSwgb3V0cHV0Q2FsZW5kYXJ9KTtcbiAgICByZXR1cm4gY2xvbmUyKHRoaXMsIHtsb2N9KTtcbiAgfVxuICBzZXRMb2NhbGUobG9jYWxlKSB7XG4gICAgcmV0dXJuIHRoaXMucmVjb25maWd1cmUoe2xvY2FsZX0pO1xuICB9XG4gIHNldCh2YWx1ZXMpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZClcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSBub3JtYWxpemVPYmplY3QodmFsdWVzLCBub3JtYWxpemVVbml0KSwgc2V0dGluZ1dlZWtTdHVmZiA9ICFpc1VuZGVmaW5lZChub3JtYWxpemVkLndlZWtZZWFyKSB8fCAhaXNVbmRlZmluZWQobm9ybWFsaXplZC53ZWVrTnVtYmVyKSB8fCAhaXNVbmRlZmluZWQobm9ybWFsaXplZC53ZWVrZGF5KSwgY29udGFpbnNPcmRpbmFsID0gIWlzVW5kZWZpbmVkKG5vcm1hbGl6ZWQub3JkaW5hbCksIGNvbnRhaW5zR3JlZ29yWWVhciA9ICFpc1VuZGVmaW5lZChub3JtYWxpemVkLnllYXIpLCBjb250YWluc0dyZWdvck1EID0gIWlzVW5kZWZpbmVkKG5vcm1hbGl6ZWQubW9udGgpIHx8ICFpc1VuZGVmaW5lZChub3JtYWxpemVkLmRheSksIGNvbnRhaW5zR3JlZ29yID0gY29udGFpbnNHcmVnb3JZZWFyIHx8IGNvbnRhaW5zR3JlZ29yTUQsIGRlZmluaXRlV2Vla0RlZiA9IG5vcm1hbGl6ZWQud2Vla1llYXIgfHwgbm9ybWFsaXplZC53ZWVrTnVtYmVyO1xuICAgIGlmICgoY29udGFpbnNHcmVnb3IgfHwgY29udGFpbnNPcmRpbmFsKSAmJiBkZWZpbml0ZVdlZWtEZWYpIHtcbiAgICAgIHRocm93IG5ldyBDb25mbGljdGluZ1NwZWNpZmljYXRpb25FcnJvcihcIkNhbid0IG1peCB3ZWVrWWVhci93ZWVrTnVtYmVyIHVuaXRzIHdpdGggeWVhci9tb250aC9kYXkgb3Igb3JkaW5hbHNcIik7XG4gICAgfVxuICAgIGlmIChjb250YWluc0dyZWdvck1EICYmIGNvbnRhaW5zT3JkaW5hbCkge1xuICAgICAgdGhyb3cgbmV3IENvbmZsaWN0aW5nU3BlY2lmaWNhdGlvbkVycm9yKFwiQ2FuJ3QgbWl4IG9yZGluYWwgZGF0ZXMgd2l0aCBtb250aC9kYXlcIik7XG4gICAgfVxuICAgIGxldCBtaXhlZDtcbiAgICBpZiAoc2V0dGluZ1dlZWtTdHVmZikge1xuICAgICAgbWl4ZWQgPSB3ZWVrVG9HcmVnb3JpYW4oey4uLmdyZWdvcmlhblRvV2Vlayh0aGlzLmMpLCAuLi5ub3JtYWxpemVkfSk7XG4gICAgfSBlbHNlIGlmICghaXNVbmRlZmluZWQobm9ybWFsaXplZC5vcmRpbmFsKSkge1xuICAgICAgbWl4ZWQgPSBvcmRpbmFsVG9HcmVnb3JpYW4oey4uLmdyZWdvcmlhblRvT3JkaW5hbCh0aGlzLmMpLCAuLi5ub3JtYWxpemVkfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1peGVkID0gey4uLnRoaXMudG9PYmplY3QoKSwgLi4ubm9ybWFsaXplZH07XG4gICAgICBpZiAoaXNVbmRlZmluZWQobm9ybWFsaXplZC5kYXkpKSB7XG4gICAgICAgIG1peGVkLmRheSA9IE1hdGgubWluKGRheXNJbk1vbnRoKG1peGVkLnllYXIsIG1peGVkLm1vbnRoKSwgbWl4ZWQuZGF5KTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgW3RzLCBvXSA9IG9ialRvVFMobWl4ZWQsIHRoaXMubywgdGhpcy56b25lKTtcbiAgICByZXR1cm4gY2xvbmUyKHRoaXMsIHt0cywgb30pO1xuICB9XG4gIHBsdXMoZHVyYXRpb24pIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZClcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIGNvbnN0IGR1ciA9IER1cmF0aW9uLmZyb21EdXJhdGlvbkxpa2UoZHVyYXRpb24pO1xuICAgIHJldHVybiBjbG9uZTIodGhpcywgYWRqdXN0VGltZSh0aGlzLCBkdXIpKTtcbiAgfVxuICBtaW51cyhkdXJhdGlvbikge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgY29uc3QgZHVyID0gRHVyYXRpb24uZnJvbUR1cmF0aW9uTGlrZShkdXJhdGlvbikubmVnYXRlKCk7XG4gICAgcmV0dXJuIGNsb25lMih0aGlzLCBhZGp1c3RUaW1lKHRoaXMsIGR1cikpO1xuICB9XG4gIHN0YXJ0T2YodW5pdCkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgY29uc3QgbyA9IHt9LCBub3JtYWxpemVkVW5pdCA9IER1cmF0aW9uLm5vcm1hbGl6ZVVuaXQodW5pdCk7XG4gICAgc3dpdGNoIChub3JtYWxpemVkVW5pdCkge1xuICAgICAgY2FzZSBcInllYXJzXCI6XG4gICAgICAgIG8ubW9udGggPSAxO1xuICAgICAgY2FzZSBcInF1YXJ0ZXJzXCI6XG4gICAgICBjYXNlIFwibW9udGhzXCI6XG4gICAgICAgIG8uZGF5ID0gMTtcbiAgICAgIGNhc2UgXCJ3ZWVrc1wiOlxuICAgICAgY2FzZSBcImRheXNcIjpcbiAgICAgICAgby5ob3VyID0gMDtcbiAgICAgIGNhc2UgXCJob3Vyc1wiOlxuICAgICAgICBvLm1pbnV0ZSA9IDA7XG4gICAgICBjYXNlIFwibWludXRlc1wiOlxuICAgICAgICBvLnNlY29uZCA9IDA7XG4gICAgICBjYXNlIFwic2Vjb25kc1wiOlxuICAgICAgICBvLm1pbGxpc2Vjb25kID0gMDtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGlmIChub3JtYWxpemVkVW5pdCA9PT0gXCJ3ZWVrc1wiKSB7XG4gICAgICBvLndlZWtkYXkgPSAxO1xuICAgIH1cbiAgICBpZiAobm9ybWFsaXplZFVuaXQgPT09IFwicXVhcnRlcnNcIikge1xuICAgICAgY29uc3QgcSA9IE1hdGguY2VpbCh0aGlzLm1vbnRoIC8gMyk7XG4gICAgICBvLm1vbnRoID0gKHEgLSAxKSAqIDMgKyAxO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5zZXQobyk7XG4gIH1cbiAgZW5kT2YodW5pdCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnBsdXMoe1t1bml0XTogMX0pLnN0YXJ0T2YodW5pdCkubWludXMoMSkgOiB0aGlzO1xuICB9XG4gIHRvRm9ybWF0KGZtdCwgb3B0cyA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IEZvcm1hdHRlci5jcmVhdGUodGhpcy5sb2MucmVkZWZhdWx0VG9FTihvcHRzKSkuZm9ybWF0RGF0ZVRpbWVGcm9tU3RyaW5nKHRoaXMsIGZtdCkgOiBJTlZBTElENDtcbiAgfVxuICB0b0xvY2FsZVN0cmluZyhmb3JtYXRPcHRzID0gREFURV9TSE9SVCwgb3B0cyA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IEZvcm1hdHRlci5jcmVhdGUodGhpcy5sb2MuY2xvbmUob3B0cyksIGZvcm1hdE9wdHMpLmZvcm1hdERhdGVUaW1lKHRoaXMpIDogSU5WQUxJRDQ7XG4gIH1cbiAgdG9Mb2NhbGVQYXJ0cyhvcHRzID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gRm9ybWF0dGVyLmNyZWF0ZSh0aGlzLmxvYy5jbG9uZShvcHRzKSwgb3B0cykuZm9ybWF0RGF0ZVRpbWVQYXJ0cyh0aGlzKSA6IFtdO1xuICB9XG4gIHRvSVNPKHtcbiAgICBmb3JtYXQgPSBcImV4dGVuZGVkXCIsXG4gICAgc3VwcHJlc3NTZWNvbmRzID0gZmFsc2UsXG4gICAgc3VwcHJlc3NNaWxsaXNlY29uZHMgPSBmYWxzZSxcbiAgICBpbmNsdWRlT2Zmc2V0ID0gdHJ1ZSxcbiAgICBleHRlbmRlZFpvbmUgPSBmYWxzZVxuICB9ID0ge30pIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IGV4dCA9IGZvcm1hdCA9PT0gXCJleHRlbmRlZFwiO1xuICAgIGxldCBjID0gdG9JU09EYXRlKHRoaXMsIGV4dCk7XG4gICAgYyArPSBcIlRcIjtcbiAgICBjICs9IHRvSVNPVGltZSh0aGlzLCBleHQsIHN1cHByZXNzU2Vjb25kcywgc3VwcHJlc3NNaWxsaXNlY29uZHMsIGluY2x1ZGVPZmZzZXQsIGV4dGVuZGVkWm9uZSk7XG4gICAgcmV0dXJuIGM7XG4gIH1cbiAgdG9JU09EYXRlKHtmb3JtYXQgPSBcImV4dGVuZGVkXCJ9ID0ge30pIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiB0b0lTT0RhdGUodGhpcywgZm9ybWF0ID09PSBcImV4dGVuZGVkXCIpO1xuICB9XG4gIHRvSVNPV2Vla0RhdGUoKSB7XG4gICAgcmV0dXJuIHRvVGVjaEZvcm1hdCh0aGlzLCBcImtra2stJ1cnV1ctY1wiKTtcbiAgfVxuICB0b0lTT1RpbWUoe1xuICAgIHN1cHByZXNzTWlsbGlzZWNvbmRzID0gZmFsc2UsXG4gICAgc3VwcHJlc3NTZWNvbmRzID0gZmFsc2UsXG4gICAgaW5jbHVkZU9mZnNldCA9IHRydWUsXG4gICAgaW5jbHVkZVByZWZpeCA9IGZhbHNlLFxuICAgIGV4dGVuZGVkWm9uZSA9IGZhbHNlLFxuICAgIGZvcm1hdCA9IFwiZXh0ZW5kZWRcIlxuICB9ID0ge30pIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGxldCBjID0gaW5jbHVkZVByZWZpeCA/IFwiVFwiIDogXCJcIjtcbiAgICByZXR1cm4gYyArIHRvSVNPVGltZSh0aGlzLCBmb3JtYXQgPT09IFwiZXh0ZW5kZWRcIiwgc3VwcHJlc3NTZWNvbmRzLCBzdXBwcmVzc01pbGxpc2Vjb25kcywgaW5jbHVkZU9mZnNldCwgZXh0ZW5kZWRab25lKTtcbiAgfVxuICB0b1JGQzI4MjIoKSB7XG4gICAgcmV0dXJuIHRvVGVjaEZvcm1hdCh0aGlzLCBcIkVFRSwgZGQgTExMIHl5eXkgSEg6bW06c3MgWlpaXCIsIGZhbHNlKTtcbiAgfVxuICB0b0hUVFAoKSB7XG4gICAgcmV0dXJuIHRvVGVjaEZvcm1hdCh0aGlzLnRvVVRDKCksIFwiRUVFLCBkZCBMTEwgeXl5eSBISDptbTpzcyAnR01UJ1wiKTtcbiAgfVxuICB0b1NRTERhdGUoKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gdG9JU09EYXRlKHRoaXMsIHRydWUpO1xuICB9XG4gIHRvU1FMVGltZSh7aW5jbHVkZU9mZnNldCA9IHRydWUsIGluY2x1ZGVab25lID0gZmFsc2UsIGluY2x1ZGVPZmZzZXRTcGFjZSA9IHRydWV9ID0ge30pIHtcbiAgICBsZXQgZm10ID0gXCJISDptbTpzcy5TU1NcIjtcbiAgICBpZiAoaW5jbHVkZVpvbmUgfHwgaW5jbHVkZU9mZnNldCkge1xuICAgICAgaWYgKGluY2x1ZGVPZmZzZXRTcGFjZSkge1xuICAgICAgICBmbXQgKz0gXCIgXCI7XG4gICAgICB9XG4gICAgICBpZiAoaW5jbHVkZVpvbmUpIHtcbiAgICAgICAgZm10ICs9IFwielwiO1xuICAgICAgfSBlbHNlIGlmIChpbmNsdWRlT2Zmc2V0KSB7XG4gICAgICAgIGZtdCArPSBcIlpaXCI7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0b1RlY2hGb3JtYXQodGhpcywgZm10LCB0cnVlKTtcbiAgfVxuICB0b1NRTChvcHRzID0ge30pIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBgJHt0aGlzLnRvU1FMRGF0ZSgpfSAke3RoaXMudG9TUUxUaW1lKG9wdHMpfWA7XG4gIH1cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMudG9JU08oKSA6IElOVkFMSUQ0O1xuICB9XG4gIHZhbHVlT2YoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9NaWxsaXMoKTtcbiAgfVxuICB0b01pbGxpcygpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy50cyA6IE5hTjtcbiAgfVxuICB0b1NlY29uZHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMudHMgLyAxZTMgOiBOYU47XG4gIH1cbiAgdG9Vbml4SW50ZWdlcigpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gTWF0aC5mbG9vcih0aGlzLnRzIC8gMWUzKSA6IE5hTjtcbiAgfVxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHRoaXMudG9JU08oKTtcbiAgfVxuICB0b0JTT04oKSB7XG4gICAgcmV0dXJuIHRoaXMudG9KU0RhdGUoKTtcbiAgfVxuICB0b09iamVjdChvcHRzID0ge30pIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZClcbiAgICAgIHJldHVybiB7fTtcbiAgICBjb25zdCBiYXNlID0gey4uLnRoaXMuY307XG4gICAgaWYgKG9wdHMuaW5jbHVkZUNvbmZpZykge1xuICAgICAgYmFzZS5vdXRwdXRDYWxlbmRhciA9IHRoaXMub3V0cHV0Q2FsZW5kYXI7XG4gICAgICBiYXNlLm51bWJlcmluZ1N5c3RlbSA9IHRoaXMubG9jLm51bWJlcmluZ1N5c3RlbTtcbiAgICAgIGJhc2UubG9jYWxlID0gdGhpcy5sb2MubG9jYWxlO1xuICAgIH1cbiAgICByZXR1cm4gYmFzZTtcbiAgfVxuICB0b0pTRGF0ZSgpIHtcbiAgICByZXR1cm4gbmV3IERhdGUodGhpcy5pc1ZhbGlkID8gdGhpcy50cyA6IE5hTik7XG4gIH1cbiAgZGlmZihvdGhlckRhdGVUaW1lLCB1bml0ID0gXCJtaWxsaXNlY29uZHNcIiwgb3B0cyA9IHt9KSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQgfHwgIW90aGVyRGF0ZVRpbWUuaXNWYWxpZCkge1xuICAgICAgcmV0dXJuIER1cmF0aW9uLmludmFsaWQoXCJjcmVhdGVkIGJ5IGRpZmZpbmcgYW4gaW52YWxpZCBEYXRlVGltZVwiKTtcbiAgICB9XG4gICAgY29uc3QgZHVyT3B0cyA9IHtsb2NhbGU6IHRoaXMubG9jYWxlLCBudW1iZXJpbmdTeXN0ZW06IHRoaXMubnVtYmVyaW5nU3lzdGVtLCAuLi5vcHRzfTtcbiAgICBjb25zdCB1bml0cyA9IG1heWJlQXJyYXkodW5pdCkubWFwKER1cmF0aW9uLm5vcm1hbGl6ZVVuaXQpLCBvdGhlcklzTGF0ZXIgPSBvdGhlckRhdGVUaW1lLnZhbHVlT2YoKSA+IHRoaXMudmFsdWVPZigpLCBlYXJsaWVyID0gb3RoZXJJc0xhdGVyID8gdGhpcyA6IG90aGVyRGF0ZVRpbWUsIGxhdGVyID0gb3RoZXJJc0xhdGVyID8gb3RoZXJEYXRlVGltZSA6IHRoaXMsIGRpZmZlZCA9IGRpZmZfZGVmYXVsdChlYXJsaWVyLCBsYXRlciwgdW5pdHMsIGR1ck9wdHMpO1xuICAgIHJldHVybiBvdGhlcklzTGF0ZXIgPyBkaWZmZWQubmVnYXRlKCkgOiBkaWZmZWQ7XG4gIH1cbiAgZGlmZk5vdyh1bml0ID0gXCJtaWxsaXNlY29uZHNcIiwgb3B0cyA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMuZGlmZihEYXRlVGltZS5ub3coKSwgdW5pdCwgb3B0cyk7XG4gIH1cbiAgdW50aWwob3RoZXJEYXRlVGltZSkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKHRoaXMsIG90aGVyRGF0ZVRpbWUpIDogdGhpcztcbiAgfVxuICBoYXNTYW1lKG90aGVyRGF0ZVRpbWUsIHVuaXQpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZClcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBjb25zdCBpbnB1dE1zID0gb3RoZXJEYXRlVGltZS52YWx1ZU9mKCk7XG4gICAgY29uc3QgYWRqdXN0ZWRUb1pvbmUgPSB0aGlzLnNldFpvbmUob3RoZXJEYXRlVGltZS56b25lLCB7a2VlcExvY2FsVGltZTogdHJ1ZX0pO1xuICAgIHJldHVybiBhZGp1c3RlZFRvWm9uZS5zdGFydE9mKHVuaXQpIDw9IGlucHV0TXMgJiYgaW5wdXRNcyA8PSBhZGp1c3RlZFRvWm9uZS5lbmRPZih1bml0KTtcbiAgfVxuICBlcXVhbHMob3RoZXIpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkICYmIG90aGVyLmlzVmFsaWQgJiYgdGhpcy52YWx1ZU9mKCkgPT09IG90aGVyLnZhbHVlT2YoKSAmJiB0aGlzLnpvbmUuZXF1YWxzKG90aGVyLnpvbmUpICYmIHRoaXMubG9jLmVxdWFscyhvdGhlci5sb2MpO1xuICB9XG4gIHRvUmVsYXRpdmUob3B0aW9ucyA9IHt9KSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBjb25zdCBiYXNlID0gb3B0aW9ucy5iYXNlIHx8IERhdGVUaW1lLmZyb21PYmplY3Qoe30sIHt6b25lOiB0aGlzLnpvbmV9KSwgcGFkZGluZyA9IG9wdGlvbnMucGFkZGluZyA/IHRoaXMgPCBiYXNlID8gLW9wdGlvbnMucGFkZGluZyA6IG9wdGlvbnMucGFkZGluZyA6IDA7XG4gICAgbGV0IHVuaXRzID0gW1wieWVhcnNcIiwgXCJtb250aHNcIiwgXCJkYXlzXCIsIFwiaG91cnNcIiwgXCJtaW51dGVzXCIsIFwic2Vjb25kc1wiXTtcbiAgICBsZXQgdW5pdCA9IG9wdGlvbnMudW5pdDtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShvcHRpb25zLnVuaXQpKSB7XG4gICAgICB1bml0cyA9IG9wdGlvbnMudW5pdDtcbiAgICAgIHVuaXQgPSB2b2lkIDA7XG4gICAgfVxuICAgIHJldHVybiBkaWZmUmVsYXRpdmUoYmFzZSwgdGhpcy5wbHVzKHBhZGRpbmcpLCB7XG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgbnVtZXJpYzogXCJhbHdheXNcIixcbiAgICAgIHVuaXRzLFxuICAgICAgdW5pdFxuICAgIH0pO1xuICB9XG4gIHRvUmVsYXRpdmVDYWxlbmRhcihvcHRpb25zID0ge30pIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZClcbiAgICAgIHJldHVybiBudWxsO1xuICAgIHJldHVybiBkaWZmUmVsYXRpdmUob3B0aW9ucy5iYXNlIHx8IERhdGVUaW1lLmZyb21PYmplY3Qoe30sIHt6b25lOiB0aGlzLnpvbmV9KSwgdGhpcywge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIG51bWVyaWM6IFwiYXV0b1wiLFxuICAgICAgdW5pdHM6IFtcInllYXJzXCIsIFwibW9udGhzXCIsIFwiZGF5c1wiXSxcbiAgICAgIGNhbGVuZGFyeTogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIHN0YXRpYyBtaW4oLi4uZGF0ZVRpbWVzKSB7XG4gICAgaWYgKCFkYXRlVGltZXMuZXZlcnkoRGF0ZVRpbWUuaXNEYXRlVGltZSkpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcIm1pbiByZXF1aXJlcyBhbGwgYXJndW1lbnRzIGJlIERhdGVUaW1lc1wiKTtcbiAgICB9XG4gICAgcmV0dXJuIGJlc3RCeShkYXRlVGltZXMsIChpKSA9PiBpLnZhbHVlT2YoKSwgTWF0aC5taW4pO1xuICB9XG4gIHN0YXRpYyBtYXgoLi4uZGF0ZVRpbWVzKSB7XG4gICAgaWYgKCFkYXRlVGltZXMuZXZlcnkoRGF0ZVRpbWUuaXNEYXRlVGltZSkpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcIm1heCByZXF1aXJlcyBhbGwgYXJndW1lbnRzIGJlIERhdGVUaW1lc1wiKTtcbiAgICB9XG4gICAgcmV0dXJuIGJlc3RCeShkYXRlVGltZXMsIChpKSA9PiBpLnZhbHVlT2YoKSwgTWF0aC5tYXgpO1xuICB9XG4gIHN0YXRpYyBmcm9tRm9ybWF0RXhwbGFpbih0ZXh0LCBmbXQsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHtsb2NhbGUgPSBudWxsLCBudW1iZXJpbmdTeXN0ZW0gPSBudWxsfSA9IG9wdGlvbnMsIGxvY2FsZVRvVXNlID0gTG9jYWxlLmZyb21PcHRzKHtcbiAgICAgIGxvY2FsZSxcbiAgICAgIG51bWJlcmluZ1N5c3RlbSxcbiAgICAgIGRlZmF1bHRUb0VOOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIGV4cGxhaW5Gcm9tVG9rZW5zKGxvY2FsZVRvVXNlLCB0ZXh0LCBmbXQpO1xuICB9XG4gIHN0YXRpYyBmcm9tU3RyaW5nRXhwbGFpbih0ZXh0LCBmbXQsIG9wdGlvbnMgPSB7fSkge1xuICAgIHJldHVybiBEYXRlVGltZS5mcm9tRm9ybWF0RXhwbGFpbih0ZXh0LCBmbXQsIG9wdGlvbnMpO1xuICB9XG4gIHN0YXRpYyBnZXQgREFURV9TSE9SVCgpIHtcbiAgICByZXR1cm4gREFURV9TSE9SVDtcbiAgfVxuICBzdGF0aWMgZ2V0IERBVEVfTUVEKCkge1xuICAgIHJldHVybiBEQVRFX01FRDtcbiAgfVxuICBzdGF0aWMgZ2V0IERBVEVfTUVEX1dJVEhfV0VFS0RBWSgpIHtcbiAgICByZXR1cm4gREFURV9NRURfV0lUSF9XRUVLREFZO1xuICB9XG4gIHN0YXRpYyBnZXQgREFURV9GVUxMKCkge1xuICAgIHJldHVybiBEQVRFX0ZVTEw7XG4gIH1cbiAgc3RhdGljIGdldCBEQVRFX0hVR0UoKSB7XG4gICAgcmV0dXJuIERBVEVfSFVHRTtcbiAgfVxuICBzdGF0aWMgZ2V0IFRJTUVfU0lNUExFKCkge1xuICAgIHJldHVybiBUSU1FX1NJTVBMRTtcbiAgfVxuICBzdGF0aWMgZ2V0IFRJTUVfV0lUSF9TRUNPTkRTKCkge1xuICAgIHJldHVybiBUSU1FX1dJVEhfU0VDT05EUztcbiAgfVxuICBzdGF0aWMgZ2V0IFRJTUVfV0lUSF9TSE9SVF9PRkZTRVQoKSB7XG4gICAgcmV0dXJuIFRJTUVfV0lUSF9TSE9SVF9PRkZTRVQ7XG4gIH1cbiAgc3RhdGljIGdldCBUSU1FX1dJVEhfTE9OR19PRkZTRVQoKSB7XG4gICAgcmV0dXJuIFRJTUVfV0lUSF9MT05HX09GRlNFVDtcbiAgfVxuICBzdGF0aWMgZ2V0IFRJTUVfMjRfU0lNUExFKCkge1xuICAgIHJldHVybiBUSU1FXzI0X1NJTVBMRTtcbiAgfVxuICBzdGF0aWMgZ2V0IFRJTUVfMjRfV0lUSF9TRUNPTkRTKCkge1xuICAgIHJldHVybiBUSU1FXzI0X1dJVEhfU0VDT05EUztcbiAgfVxuICBzdGF0aWMgZ2V0IFRJTUVfMjRfV0lUSF9TSE9SVF9PRkZTRVQoKSB7XG4gICAgcmV0dXJuIFRJTUVfMjRfV0lUSF9TSE9SVF9PRkZTRVQ7XG4gIH1cbiAgc3RhdGljIGdldCBUSU1FXzI0X1dJVEhfTE9OR19PRkZTRVQoKSB7XG4gICAgcmV0dXJuIFRJTUVfMjRfV0lUSF9MT05HX09GRlNFVDtcbiAgfVxuICBzdGF0aWMgZ2V0IERBVEVUSU1FX1NIT1JUKCkge1xuICAgIHJldHVybiBEQVRFVElNRV9TSE9SVDtcbiAgfVxuICBzdGF0aWMgZ2V0IERBVEVUSU1FX1NIT1JUX1dJVEhfU0VDT05EUygpIHtcbiAgICByZXR1cm4gREFURVRJTUVfU0hPUlRfV0lUSF9TRUNPTkRTO1xuICB9XG4gIHN0YXRpYyBnZXQgREFURVRJTUVfTUVEKCkge1xuICAgIHJldHVybiBEQVRFVElNRV9NRUQ7XG4gIH1cbiAgc3RhdGljIGdldCBEQVRFVElNRV9NRURfV0lUSF9TRUNPTkRTKCkge1xuICAgIHJldHVybiBEQVRFVElNRV9NRURfV0lUSF9TRUNPTkRTO1xuICB9XG4gIHN0YXRpYyBnZXQgREFURVRJTUVfTUVEX1dJVEhfV0VFS0RBWSgpIHtcbiAgICByZXR1cm4gREFURVRJTUVfTUVEX1dJVEhfV0VFS0RBWTtcbiAgfVxuICBzdGF0aWMgZ2V0IERBVEVUSU1FX0ZVTEwoKSB7XG4gICAgcmV0dXJuIERBVEVUSU1FX0ZVTEw7XG4gIH1cbiAgc3RhdGljIGdldCBEQVRFVElNRV9GVUxMX1dJVEhfU0VDT05EUygpIHtcbiAgICByZXR1cm4gREFURVRJTUVfRlVMTF9XSVRIX1NFQ09ORFM7XG4gIH1cbiAgc3RhdGljIGdldCBEQVRFVElNRV9IVUdFKCkge1xuICAgIHJldHVybiBEQVRFVElNRV9IVUdFO1xuICB9XG4gIHN0YXRpYyBnZXQgREFURVRJTUVfSFVHRV9XSVRIX1NFQ09ORFMoKSB7XG4gICAgcmV0dXJuIERBVEVUSU1FX0hVR0VfV0lUSF9TRUNPTkRTO1xuICB9XG59O1xuZnVuY3Rpb24gZnJpZW5kbHlEYXRlVGltZShkYXRlVGltZWlzaCkge1xuICBpZiAoRGF0ZVRpbWUuaXNEYXRlVGltZShkYXRlVGltZWlzaCkpIHtcbiAgICByZXR1cm4gZGF0ZVRpbWVpc2g7XG4gIH0gZWxzZSBpZiAoZGF0ZVRpbWVpc2ggJiYgZGF0ZVRpbWVpc2gudmFsdWVPZiAmJiBpc051bWJlcihkYXRlVGltZWlzaC52YWx1ZU9mKCkpKSB7XG4gICAgcmV0dXJuIERhdGVUaW1lLmZyb21KU0RhdGUoZGF0ZVRpbWVpc2gpO1xuICB9IGVsc2UgaWYgKGRhdGVUaW1laXNoICYmIHR5cGVvZiBkYXRlVGltZWlzaCA9PT0gXCJvYmplY3RcIikge1xuICAgIHJldHVybiBEYXRlVGltZS5mcm9tT2JqZWN0KGRhdGVUaW1laXNoKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoYFVua25vd24gZGF0ZXRpbWUgYXJndW1lbnQ6ICR7ZGF0ZVRpbWVpc2h9LCBvZiB0eXBlICR7dHlwZW9mIGRhdGVUaW1laXNofWApO1xuICB9XG59XG52YXIgX19jcmVhdGUyID0gT2JqZWN0LmNyZWF0ZTtcbnZhciBfX2RlZlByb3AyMiA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBfX2dldE93blByb3BEZXNjMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgX19nZXRQcm90b09mMiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBfX2hhc093blByb3AyID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfX2NvbW1vbkpTMiA9IChjYiwgbW9kMjIpID0+IGZ1bmN0aW9uIF9fcmVxdWlyZTIoKSB7XG4gIHJldHVybiBtb2QyMiB8fCAoMCwgY2JbX19nZXRPd25Qcm9wTmFtZXMyKGNiKVswXV0pKChtb2QyMiA9IHtleHBvcnRzOiB7fX0pLmV4cG9ydHMsIG1vZDIyKSwgbW9kMjIuZXhwb3J0cztcbn07XG52YXIgX19jb3B5UHJvcHMyID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lczIoZnJvbSkpXG4gICAgICBpZiAoIV9faGFzT3duUHJvcDIuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgX19kZWZQcm9wMjIodG8sIGtleSwge2dldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjMihmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGV9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9FU00yID0gKG1vZDIyLCBpc05vZGVNb2RlLCB0YXJnZXQpID0+ICh0YXJnZXQgPSBtb2QyMiAhPSBudWxsID8gX19jcmVhdGUyKF9fZ2V0UHJvdG9PZjIobW9kMjIpKSA6IHt9LCBfX2NvcHlQcm9wczIoaXNOb2RlTW9kZSB8fCAhbW9kMjIgfHwgIW1vZDIyLl9fZXNNb2R1bGUgPyBfX2RlZlByb3AyMih0YXJnZXQsIFwiZGVmYXVsdFwiLCB7dmFsdWU6IG1vZDIyLCBlbnVtZXJhYmxlOiB0cnVlfSkgOiB0YXJnZXQsIG1vZDIyKSk7XG52YXIgcmVxdWlyZV9pbnQgPSBfX2NvbW1vbkpTMih7XG4gIFwibm9kZV9tb2R1bGVzL0BzdGFibGVsaWIvaW50L2xpYi9pbnQuanNcIihleHBvcnRzKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7dmFsdWU6IHRydWV9KTtcbiAgICBmdW5jdGlvbiBpbXVsU2hpbShhLCBiKSB7XG4gICAgICB2YXIgYWggPSBhID4+PiAxNiAmIDY1NTM1LCBhbCA9IGEgJiA2NTUzNTtcbiAgICAgIHZhciBiaCA9IGIgPj4+IDE2ICYgNjU1MzUsIGJsID0gYiAmIDY1NTM1O1xuICAgICAgcmV0dXJuIGFsICogYmwgKyAoYWggKiBibCArIGFsICogYmggPDwgMTYgPj4+IDApIHwgMDtcbiAgICB9XG4gICAgZXhwb3J0cy5tdWwgPSBNYXRoLmltdWwgfHwgaW11bFNoaW07XG4gICAgZnVuY3Rpb24gYWRkKGEsIGIpIHtcbiAgICAgIHJldHVybiBhICsgYiB8IDA7XG4gICAgfVxuICAgIGV4cG9ydHMuYWRkID0gYWRkO1xuICAgIGZ1bmN0aW9uIHN1YihhLCBiKSB7XG4gICAgICByZXR1cm4gYSAtIGIgfCAwO1xuICAgIH1cbiAgICBleHBvcnRzLnN1YiA9IHN1YjtcbiAgICBmdW5jdGlvbiByb3RsKHgsIG4yKSB7XG4gICAgICByZXR1cm4geCA8PCBuMiB8IHggPj4+IDMyIC0gbjI7XG4gICAgfVxuICAgIGV4cG9ydHMucm90bCA9IHJvdGw7XG4gICAgZnVuY3Rpb24gcm90cih4LCBuMikge1xuICAgICAgcmV0dXJuIHggPDwgMzIgLSBuMiB8IHggPj4+IG4yO1xuICAgIH1cbiAgICBleHBvcnRzLnJvdHIgPSByb3RyO1xuICAgIGZ1bmN0aW9uIGlzSW50ZWdlclNoaW0objIpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgbjIgPT09IFwibnVtYmVyXCIgJiYgaXNGaW5pdGUobjIpICYmIE1hdGguZmxvb3IobjIpID09PSBuMjtcbiAgICB9XG4gICAgZXhwb3J0cy5pc0ludGVnZXIgPSBOdW1iZXIuaXNJbnRlZ2VyIHx8IGlzSW50ZWdlclNoaW07XG4gICAgZXhwb3J0cy5NQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcbiAgICBleHBvcnRzLmlzU2FmZUludGVnZXIgPSBmdW5jdGlvbihuMikge1xuICAgICAgcmV0dXJuIGV4cG9ydHMuaXNJbnRlZ2VyKG4yKSAmJiAobjIgPj0gLWV4cG9ydHMuTUFYX1NBRkVfSU5URUdFUiAmJiBuMiA8PSBleHBvcnRzLk1BWF9TQUZFX0lOVEVHRVIpO1xuICAgIH07XG4gIH1cbn0pO1xudmFyIHJlcXVpcmVfYmluYXJ5ID0gX19jb21tb25KUzIoe1xuICBcIm5vZGVfbW9kdWxlcy9Ac3RhYmxlbGliL2JpbmFyeS9saWIvYmluYXJ5LmpzXCIoZXhwb3J0cykge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge3ZhbHVlOiB0cnVlfSk7XG4gICAgdmFyIGludF8xID0gcmVxdWlyZV9pbnQoKTtcbiAgICBmdW5jdGlvbiByZWFkSW50MTZCRShhcnJheSwgb2Zmc2V0Mikge1xuICAgICAgaWYgKG9mZnNldDIgPT09IHZvaWQgMCkge1xuICAgICAgICBvZmZzZXQyID0gMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAoYXJyYXlbb2Zmc2V0MiArIDBdIDw8IDggfCBhcnJheVtvZmZzZXQyICsgMV0pIDw8IDE2ID4+IDE2O1xuICAgIH1cbiAgICBleHBvcnRzLnJlYWRJbnQxNkJFID0gcmVhZEludDE2QkU7XG4gICAgZnVuY3Rpb24gcmVhZFVpbnQxNkJFKGFycmF5LCBvZmZzZXQyKSB7XG4gICAgICBpZiAob2Zmc2V0MiA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG9mZnNldDIgPSAwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChhcnJheVtvZmZzZXQyICsgMF0gPDwgOCB8IGFycmF5W29mZnNldDIgKyAxXSkgPj4+IDA7XG4gICAgfVxuICAgIGV4cG9ydHMucmVhZFVpbnQxNkJFID0gcmVhZFVpbnQxNkJFO1xuICAgIGZ1bmN0aW9uIHJlYWRJbnQxNkxFKGFycmF5LCBvZmZzZXQyKSB7XG4gICAgICBpZiAob2Zmc2V0MiA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG9mZnNldDIgPSAwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChhcnJheVtvZmZzZXQyICsgMV0gPDwgOCB8IGFycmF5W29mZnNldDJdKSA8PCAxNiA+PiAxNjtcbiAgICB9XG4gICAgZXhwb3J0cy5yZWFkSW50MTZMRSA9IHJlYWRJbnQxNkxFO1xuICAgIGZ1bmN0aW9uIHJlYWRVaW50MTZMRShhcnJheSwgb2Zmc2V0Mikge1xuICAgICAgaWYgKG9mZnNldDIgPT09IHZvaWQgMCkge1xuICAgICAgICBvZmZzZXQyID0gMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAoYXJyYXlbb2Zmc2V0MiArIDFdIDw8IDggfCBhcnJheVtvZmZzZXQyXSkgPj4+IDA7XG4gICAgfVxuICAgIGV4cG9ydHMucmVhZFVpbnQxNkxFID0gcmVhZFVpbnQxNkxFO1xuICAgIGZ1bmN0aW9uIHdyaXRlVWludDE2QkUodmFsdWUsIG91dCwgb2Zmc2V0Mikge1xuICAgICAgaWYgKG91dCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG91dCA9IG5ldyBVaW50OEFycmF5KDIpO1xuICAgICAgfVxuICAgICAgaWYgKG9mZnNldDIgPT09IHZvaWQgMCkge1xuICAgICAgICBvZmZzZXQyID0gMDtcbiAgICAgIH1cbiAgICAgIG91dFtvZmZzZXQyICsgMF0gPSB2YWx1ZSA+Pj4gODtcbiAgICAgIG91dFtvZmZzZXQyICsgMV0gPSB2YWx1ZSA+Pj4gMDtcbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIGV4cG9ydHMud3JpdGVVaW50MTZCRSA9IHdyaXRlVWludDE2QkU7XG4gICAgZXhwb3J0cy53cml0ZUludDE2QkUgPSB3cml0ZVVpbnQxNkJFO1xuICAgIGZ1bmN0aW9uIHdyaXRlVWludDE2TEUodmFsdWUsIG91dCwgb2Zmc2V0Mikge1xuICAgICAgaWYgKG91dCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG91dCA9IG5ldyBVaW50OEFycmF5KDIpO1xuICAgICAgfVxuICAgICAgaWYgKG9mZnNldDIgPT09IHZvaWQgMCkge1xuICAgICAgICBvZmZzZXQyID0gMDtcbiAgICAgIH1cbiAgICAgIG91dFtvZmZzZXQyICsgMF0gPSB2YWx1ZSA+Pj4gMDtcbiAgICAgIG91dFtvZmZzZXQyICsgMV0gPSB2YWx1ZSA+Pj4gODtcbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIGV4cG9ydHMud3JpdGVVaW50MTZMRSA9IHdyaXRlVWludDE2TEU7XG4gICAgZXhwb3J0cy53cml0ZUludDE2TEUgPSB3cml0ZVVpbnQxNkxFO1xuICAgIGZ1bmN0aW9uIHJlYWRJbnQzMkJFKGFycmF5LCBvZmZzZXQyKSB7XG4gICAgICBpZiAob2Zmc2V0MiA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG9mZnNldDIgPSAwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5W29mZnNldDJdIDw8IDI0IHwgYXJyYXlbb2Zmc2V0MiArIDFdIDw8IDE2IHwgYXJyYXlbb2Zmc2V0MiArIDJdIDw8IDggfCBhcnJheVtvZmZzZXQyICsgM107XG4gICAgfVxuICAgIGV4cG9ydHMucmVhZEludDMyQkUgPSByZWFkSW50MzJCRTtcbiAgICBmdW5jdGlvbiByZWFkVWludDMyQkUoYXJyYXksIG9mZnNldDIpIHtcbiAgICAgIGlmIChvZmZzZXQyID09PSB2b2lkIDApIHtcbiAgICAgICAgb2Zmc2V0MiA9IDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gKGFycmF5W29mZnNldDJdIDw8IDI0IHwgYXJyYXlbb2Zmc2V0MiArIDFdIDw8IDE2IHwgYXJyYXlbb2Zmc2V0MiArIDJdIDw8IDggfCBhcnJheVtvZmZzZXQyICsgM10pID4+PiAwO1xuICAgIH1cbiAgICBleHBvcnRzLnJlYWRVaW50MzJCRSA9IHJlYWRVaW50MzJCRTtcbiAgICBmdW5jdGlvbiByZWFkSW50MzJMRShhcnJheSwgb2Zmc2V0Mikge1xuICAgICAgaWYgKG9mZnNldDIgPT09IHZvaWQgMCkge1xuICAgICAgICBvZmZzZXQyID0gMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheVtvZmZzZXQyICsgM10gPDwgMjQgfCBhcnJheVtvZmZzZXQyICsgMl0gPDwgMTYgfCBhcnJheVtvZmZzZXQyICsgMV0gPDwgOCB8IGFycmF5W29mZnNldDJdO1xuICAgIH1cbiAgICBleHBvcnRzLnJlYWRJbnQzMkxFID0gcmVhZEludDMyTEU7XG4gICAgZnVuY3Rpb24gcmVhZFVpbnQzMkxFKGFycmF5LCBvZmZzZXQyKSB7XG4gICAgICBpZiAob2Zmc2V0MiA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG9mZnNldDIgPSAwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChhcnJheVtvZmZzZXQyICsgM10gPDwgMjQgfCBhcnJheVtvZmZzZXQyICsgMl0gPDwgMTYgfCBhcnJheVtvZmZzZXQyICsgMV0gPDwgOCB8IGFycmF5W29mZnNldDJdKSA+Pj4gMDtcbiAgICB9XG4gICAgZXhwb3J0cy5yZWFkVWludDMyTEUgPSByZWFkVWludDMyTEU7XG4gICAgZnVuY3Rpb24gd3JpdGVVaW50MzJCRSh2YWx1ZSwgb3V0LCBvZmZzZXQyKSB7XG4gICAgICBpZiAob3V0ID09PSB2b2lkIDApIHtcbiAgICAgICAgb3V0ID0gbmV3IFVpbnQ4QXJyYXkoNCk7XG4gICAgICB9XG4gICAgICBpZiAob2Zmc2V0MiA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG9mZnNldDIgPSAwO1xuICAgICAgfVxuICAgICAgb3V0W29mZnNldDIgKyAwXSA9IHZhbHVlID4+PiAyNDtcbiAgICAgIG91dFtvZmZzZXQyICsgMV0gPSB2YWx1ZSA+Pj4gMTY7XG4gICAgICBvdXRbb2Zmc2V0MiArIDJdID0gdmFsdWUgPj4+IDg7XG4gICAgICBvdXRbb2Zmc2V0MiArIDNdID0gdmFsdWUgPj4+IDA7XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICBleHBvcnRzLndyaXRlVWludDMyQkUgPSB3cml0ZVVpbnQzMkJFO1xuICAgIGV4cG9ydHMud3JpdGVJbnQzMkJFID0gd3JpdGVVaW50MzJCRTtcbiAgICBmdW5jdGlvbiB3cml0ZVVpbnQzMkxFKHZhbHVlLCBvdXQsIG9mZnNldDIpIHtcbiAgICAgIGlmIChvdXQgPT09IHZvaWQgMCkge1xuICAgICAgICBvdXQgPSBuZXcgVWludDhBcnJheSg0KTtcbiAgICAgIH1cbiAgICAgIGlmIChvZmZzZXQyID09PSB2b2lkIDApIHtcbiAgICAgICAgb2Zmc2V0MiA9IDA7XG4gICAgICB9XG4gICAgICBvdXRbb2Zmc2V0MiArIDBdID0gdmFsdWUgPj4+IDA7XG4gICAgICBvdXRbb2Zmc2V0MiArIDFdID0gdmFsdWUgPj4+IDg7XG4gICAgICBvdXRbb2Zmc2V0MiArIDJdID0gdmFsdWUgPj4+IDE2O1xuICAgICAgb3V0W29mZnNldDIgKyAzXSA9IHZhbHVlID4+PiAyNDtcbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIGV4cG9ydHMud3JpdGVVaW50MzJMRSA9IHdyaXRlVWludDMyTEU7XG4gICAgZXhwb3J0cy53cml0ZUludDMyTEUgPSB3cml0ZVVpbnQzMkxFO1xuICAgIGZ1bmN0aW9uIHJlYWRJbnQ2NEJFKGFycmF5LCBvZmZzZXQyKSB7XG4gICAgICBpZiAob2Zmc2V0MiA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG9mZnNldDIgPSAwO1xuICAgICAgfVxuICAgICAgdmFyIGhpID0gcmVhZEludDMyQkUoYXJyYXksIG9mZnNldDIpO1xuICAgICAgdmFyIGxvID0gcmVhZEludDMyQkUoYXJyYXksIG9mZnNldDIgKyA0KTtcbiAgICAgIHJldHVybiBoaSAqIDQyOTQ5NjcyOTYgKyBsbyAtIChsbyA+PiAzMSkgKiA0Mjk0OTY3Mjk2O1xuICAgIH1cbiAgICBleHBvcnRzLnJlYWRJbnQ2NEJFID0gcmVhZEludDY0QkU7XG4gICAgZnVuY3Rpb24gcmVhZFVpbnQ2NEJFKGFycmF5LCBvZmZzZXQyKSB7XG4gICAgICBpZiAob2Zmc2V0MiA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG9mZnNldDIgPSAwO1xuICAgICAgfVxuICAgICAgdmFyIGhpID0gcmVhZFVpbnQzMkJFKGFycmF5LCBvZmZzZXQyKTtcbiAgICAgIHZhciBsbyA9IHJlYWRVaW50MzJCRShhcnJheSwgb2Zmc2V0MiArIDQpO1xuICAgICAgcmV0dXJuIGhpICogNDI5NDk2NzI5NiArIGxvO1xuICAgIH1cbiAgICBleHBvcnRzLnJlYWRVaW50NjRCRSA9IHJlYWRVaW50NjRCRTtcbiAgICBmdW5jdGlvbiByZWFkSW50NjRMRShhcnJheSwgb2Zmc2V0Mikge1xuICAgICAgaWYgKG9mZnNldDIgPT09IHZvaWQgMCkge1xuICAgICAgICBvZmZzZXQyID0gMDtcbiAgICAgIH1cbiAgICAgIHZhciBsbyA9IHJlYWRJbnQzMkxFKGFycmF5LCBvZmZzZXQyKTtcbiAgICAgIHZhciBoaSA9IHJlYWRJbnQzMkxFKGFycmF5LCBvZmZzZXQyICsgNCk7XG4gICAgICByZXR1cm4gaGkgKiA0Mjk0OTY3Mjk2ICsgbG8gLSAobG8gPj4gMzEpICogNDI5NDk2NzI5NjtcbiAgICB9XG4gICAgZXhwb3J0cy5yZWFkSW50NjRMRSA9IHJlYWRJbnQ2NExFO1xuICAgIGZ1bmN0aW9uIHJlYWRVaW50NjRMRShhcnJheSwgb2Zmc2V0Mikge1xuICAgICAgaWYgKG9mZnNldDIgPT09IHZvaWQgMCkge1xuICAgICAgICBvZmZzZXQyID0gMDtcbiAgICAgIH1cbiAgICAgIHZhciBsbyA9IHJlYWRVaW50MzJMRShhcnJheSwgb2Zmc2V0Mik7XG4gICAgICB2YXIgaGkgPSByZWFkVWludDMyTEUoYXJyYXksIG9mZnNldDIgKyA0KTtcbiAgICAgIHJldHVybiBoaSAqIDQyOTQ5NjcyOTYgKyBsbztcbiAgICB9XG4gICAgZXhwb3J0cy5yZWFkVWludDY0TEUgPSByZWFkVWludDY0TEU7XG4gICAgZnVuY3Rpb24gd3JpdGVVaW50NjRCRSh2YWx1ZSwgb3V0LCBvZmZzZXQyKSB7XG4gICAgICBpZiAob3V0ID09PSB2b2lkIDApIHtcbiAgICAgICAgb3V0ID0gbmV3IFVpbnQ4QXJyYXkoOCk7XG4gICAgICB9XG4gICAgICBpZiAob2Zmc2V0MiA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG9mZnNldDIgPSAwO1xuICAgICAgfVxuICAgICAgd3JpdGVVaW50MzJCRSh2YWx1ZSAvIDQyOTQ5NjcyOTYgPj4+IDAsIG91dCwgb2Zmc2V0Mik7XG4gICAgICB3cml0ZVVpbnQzMkJFKHZhbHVlID4+PiAwLCBvdXQsIG9mZnNldDIgKyA0KTtcbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIGV4cG9ydHMud3JpdGVVaW50NjRCRSA9IHdyaXRlVWludDY0QkU7XG4gICAgZXhwb3J0cy53cml0ZUludDY0QkUgPSB3cml0ZVVpbnQ2NEJFO1xuICAgIGZ1bmN0aW9uIHdyaXRlVWludDY0TEUodmFsdWUsIG91dCwgb2Zmc2V0Mikge1xuICAgICAgaWYgKG91dCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG91dCA9IG5ldyBVaW50OEFycmF5KDgpO1xuICAgICAgfVxuICAgICAgaWYgKG9mZnNldDIgPT09IHZvaWQgMCkge1xuICAgICAgICBvZmZzZXQyID0gMDtcbiAgICAgIH1cbiAgICAgIHdyaXRlVWludDMyTEUodmFsdWUgPj4+IDAsIG91dCwgb2Zmc2V0Mik7XG4gICAgICB3cml0ZVVpbnQzMkxFKHZhbHVlIC8gNDI5NDk2NzI5NiA+Pj4gMCwgb3V0LCBvZmZzZXQyICsgNCk7XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICBleHBvcnRzLndyaXRlVWludDY0TEUgPSB3cml0ZVVpbnQ2NExFO1xuICAgIGV4cG9ydHMud3JpdGVJbnQ2NExFID0gd3JpdGVVaW50NjRMRTtcbiAgICBmdW5jdGlvbiByZWFkVWludEJFKGJpdExlbmd0aCwgYXJyYXksIG9mZnNldDIpIHtcbiAgICAgIGlmIChvZmZzZXQyID09PSB2b2lkIDApIHtcbiAgICAgICAgb2Zmc2V0MiA9IDA7XG4gICAgICB9XG4gICAgICBpZiAoYml0TGVuZ3RoICUgOCAhPT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJyZWFkVWludEJFIHN1cHBvcnRzIG9ubHkgYml0TGVuZ3RocyBkaXZpc2libGUgYnkgOFwiKTtcbiAgICAgIH1cbiAgICAgIGlmIChiaXRMZW5ndGggLyA4ID4gYXJyYXkubGVuZ3RoIC0gb2Zmc2V0Mikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJyZWFkVWludEJFOiBhcnJheSBpcyB0b28gc2hvcnQgZm9yIHRoZSBnaXZlbiBiaXRMZW5ndGhcIik7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gMDtcbiAgICAgIHZhciBtdWwgPSAxO1xuICAgICAgZm9yICh2YXIgaSA9IGJpdExlbmd0aCAvIDggKyBvZmZzZXQyIC0gMTsgaSA+PSBvZmZzZXQyOyBpLS0pIHtcbiAgICAgICAgcmVzdWx0ICs9IGFycmF5W2ldICogbXVsO1xuICAgICAgICBtdWwgKj0gMjU2O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgZXhwb3J0cy5yZWFkVWludEJFID0gcmVhZFVpbnRCRTtcbiAgICBmdW5jdGlvbiByZWFkVWludExFKGJpdExlbmd0aCwgYXJyYXksIG9mZnNldDIpIHtcbiAgICAgIGlmIChvZmZzZXQyID09PSB2b2lkIDApIHtcbiAgICAgICAgb2Zmc2V0MiA9IDA7XG4gICAgICB9XG4gICAgICBpZiAoYml0TGVuZ3RoICUgOCAhPT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJyZWFkVWludExFIHN1cHBvcnRzIG9ubHkgYml0TGVuZ3RocyBkaXZpc2libGUgYnkgOFwiKTtcbiAgICAgIH1cbiAgICAgIGlmIChiaXRMZW5ndGggLyA4ID4gYXJyYXkubGVuZ3RoIC0gb2Zmc2V0Mikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJyZWFkVWludExFOiBhcnJheSBpcyB0b28gc2hvcnQgZm9yIHRoZSBnaXZlbiBiaXRMZW5ndGhcIik7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gMDtcbiAgICAgIHZhciBtdWwgPSAxO1xuICAgICAgZm9yICh2YXIgaSA9IG9mZnNldDI7IGkgPCBvZmZzZXQyICsgYml0TGVuZ3RoIC8gODsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCArPSBhcnJheVtpXSAqIG11bDtcbiAgICAgICAgbXVsICo9IDI1NjtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGV4cG9ydHMucmVhZFVpbnRMRSA9IHJlYWRVaW50TEU7XG4gICAgZnVuY3Rpb24gd3JpdGVVaW50QkUoYml0TGVuZ3RoLCB2YWx1ZSwgb3V0LCBvZmZzZXQyKSB7XG4gICAgICBpZiAob3V0ID09PSB2b2lkIDApIHtcbiAgICAgICAgb3V0ID0gbmV3IFVpbnQ4QXJyYXkoYml0TGVuZ3RoIC8gOCk7XG4gICAgICB9XG4gICAgICBpZiAob2Zmc2V0MiA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG9mZnNldDIgPSAwO1xuICAgICAgfVxuICAgICAgaWYgKGJpdExlbmd0aCAlIDggIT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwid3JpdGVVaW50QkUgc3VwcG9ydHMgb25seSBiaXRMZW5ndGhzIGRpdmlzaWJsZSBieSA4XCIpO1xuICAgICAgfVxuICAgICAgaWYgKCFpbnRfMS5pc1NhZmVJbnRlZ2VyKHZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ3cml0ZVVpbnRCRSB2YWx1ZSBtdXN0IGJlIGFuIGludGVnZXJcIik7XG4gICAgICB9XG4gICAgICB2YXIgZGl2ID0gMTtcbiAgICAgIGZvciAodmFyIGkgPSBiaXRMZW5ndGggLyA4ICsgb2Zmc2V0MiAtIDE7IGkgPj0gb2Zmc2V0MjsgaS0tKSB7XG4gICAgICAgIG91dFtpXSA9IHZhbHVlIC8gZGl2ICYgMjU1O1xuICAgICAgICBkaXYgKj0gMjU2O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG4gICAgZXhwb3J0cy53cml0ZVVpbnRCRSA9IHdyaXRlVWludEJFO1xuICAgIGZ1bmN0aW9uIHdyaXRlVWludExFKGJpdExlbmd0aCwgdmFsdWUsIG91dCwgb2Zmc2V0Mikge1xuICAgICAgaWYgKG91dCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG91dCA9IG5ldyBVaW50OEFycmF5KGJpdExlbmd0aCAvIDgpO1xuICAgICAgfVxuICAgICAgaWYgKG9mZnNldDIgPT09IHZvaWQgMCkge1xuICAgICAgICBvZmZzZXQyID0gMDtcbiAgICAgIH1cbiAgICAgIGlmIChiaXRMZW5ndGggJSA4ICE9PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIndyaXRlVWludExFIHN1cHBvcnRzIG9ubHkgYml0TGVuZ3RocyBkaXZpc2libGUgYnkgOFwiKTtcbiAgICAgIH1cbiAgICAgIGlmICghaW50XzEuaXNTYWZlSW50ZWdlcih2YWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwid3JpdGVVaW50TEUgdmFsdWUgbXVzdCBiZSBhbiBpbnRlZ2VyXCIpO1xuICAgICAgfVxuICAgICAgdmFyIGRpdiA9IDE7XG4gICAgICBmb3IgKHZhciBpID0gb2Zmc2V0MjsgaSA8IG9mZnNldDIgKyBiaXRMZW5ndGggLyA4OyBpKyspIHtcbiAgICAgICAgb3V0W2ldID0gdmFsdWUgLyBkaXYgJiAyNTU7XG4gICAgICAgIGRpdiAqPSAyNTY7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICBleHBvcnRzLndyaXRlVWludExFID0gd3JpdGVVaW50TEU7XG4gICAgZnVuY3Rpb24gcmVhZEZsb2F0MzJCRShhcnJheSwgb2Zmc2V0Mikge1xuICAgICAgaWYgKG9mZnNldDIgPT09IHZvaWQgMCkge1xuICAgICAgICBvZmZzZXQyID0gMDtcbiAgICAgIH1cbiAgICAgIHZhciB2aWV3ID0gbmV3IERhdGFWaWV3KGFycmF5LmJ1ZmZlciwgYXJyYXkuYnl0ZU9mZnNldCwgYXJyYXkuYnl0ZUxlbmd0aCk7XG4gICAgICByZXR1cm4gdmlldy5nZXRGbG9hdDMyKG9mZnNldDIpO1xuICAgIH1cbiAgICBleHBvcnRzLnJlYWRGbG9hdDMyQkUgPSByZWFkRmxvYXQzMkJFO1xuICAgIGZ1bmN0aW9uIHJlYWRGbG9hdDMyTEUoYXJyYXksIG9mZnNldDIpIHtcbiAgICAgIGlmIChvZmZzZXQyID09PSB2b2lkIDApIHtcbiAgICAgICAgb2Zmc2V0MiA9IDA7XG4gICAgICB9XG4gICAgICB2YXIgdmlldyA9IG5ldyBEYXRhVmlldyhhcnJheS5idWZmZXIsIGFycmF5LmJ5dGVPZmZzZXQsIGFycmF5LmJ5dGVMZW5ndGgpO1xuICAgICAgcmV0dXJuIHZpZXcuZ2V0RmxvYXQzMihvZmZzZXQyLCB0cnVlKTtcbiAgICB9XG4gICAgZXhwb3J0cy5yZWFkRmxvYXQzMkxFID0gcmVhZEZsb2F0MzJMRTtcbiAgICBmdW5jdGlvbiByZWFkRmxvYXQ2NEJFKGFycmF5LCBvZmZzZXQyKSB7XG4gICAgICBpZiAob2Zmc2V0MiA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG9mZnNldDIgPSAwO1xuICAgICAgfVxuICAgICAgdmFyIHZpZXcgPSBuZXcgRGF0YVZpZXcoYXJyYXkuYnVmZmVyLCBhcnJheS5ieXRlT2Zmc2V0LCBhcnJheS5ieXRlTGVuZ3RoKTtcbiAgICAgIHJldHVybiB2aWV3LmdldEZsb2F0NjQob2Zmc2V0Mik7XG4gICAgfVxuICAgIGV4cG9ydHMucmVhZEZsb2F0NjRCRSA9IHJlYWRGbG9hdDY0QkU7XG4gICAgZnVuY3Rpb24gcmVhZEZsb2F0NjRMRShhcnJheSwgb2Zmc2V0Mikge1xuICAgICAgaWYgKG9mZnNldDIgPT09IHZvaWQgMCkge1xuICAgICAgICBvZmZzZXQyID0gMDtcbiAgICAgIH1cbiAgICAgIHZhciB2aWV3ID0gbmV3IERhdGFWaWV3KGFycmF5LmJ1ZmZlciwgYXJyYXkuYnl0ZU9mZnNldCwgYXJyYXkuYnl0ZUxlbmd0aCk7XG4gICAgICByZXR1cm4gdmlldy5nZXRGbG9hdDY0KG9mZnNldDIsIHRydWUpO1xuICAgIH1cbiAgICBleHBvcnRzLnJlYWRGbG9hdDY0TEUgPSByZWFkRmxvYXQ2NExFO1xuICAgIGZ1bmN0aW9uIHdyaXRlRmxvYXQzMkJFKHZhbHVlLCBvdXQsIG9mZnNldDIpIHtcbiAgICAgIGlmIChvdXQgPT09IHZvaWQgMCkge1xuICAgICAgICBvdXQgPSBuZXcgVWludDhBcnJheSg0KTtcbiAgICAgIH1cbiAgICAgIGlmIChvZmZzZXQyID09PSB2b2lkIDApIHtcbiAgICAgICAgb2Zmc2V0MiA9IDA7XG4gICAgICB9XG4gICAgICB2YXIgdmlldyA9IG5ldyBEYXRhVmlldyhvdXQuYnVmZmVyLCBvdXQuYnl0ZU9mZnNldCwgb3V0LmJ5dGVMZW5ndGgpO1xuICAgICAgdmlldy5zZXRGbG9hdDMyKG9mZnNldDIsIHZhbHVlKTtcbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIGV4cG9ydHMud3JpdGVGbG9hdDMyQkUgPSB3cml0ZUZsb2F0MzJCRTtcbiAgICBmdW5jdGlvbiB3cml0ZUZsb2F0MzJMRSh2YWx1ZSwgb3V0LCBvZmZzZXQyKSB7XG4gICAgICBpZiAob3V0ID09PSB2b2lkIDApIHtcbiAgICAgICAgb3V0ID0gbmV3IFVpbnQ4QXJyYXkoNCk7XG4gICAgICB9XG4gICAgICBpZiAob2Zmc2V0MiA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG9mZnNldDIgPSAwO1xuICAgICAgfVxuICAgICAgdmFyIHZpZXcgPSBuZXcgRGF0YVZpZXcob3V0LmJ1ZmZlciwgb3V0LmJ5dGVPZmZzZXQsIG91dC5ieXRlTGVuZ3RoKTtcbiAgICAgIHZpZXcuc2V0RmxvYXQzMihvZmZzZXQyLCB2YWx1ZSwgdHJ1ZSk7XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICBleHBvcnRzLndyaXRlRmxvYXQzMkxFID0gd3JpdGVGbG9hdDMyTEU7XG4gICAgZnVuY3Rpb24gd3JpdGVGbG9hdDY0QkUodmFsdWUsIG91dCwgb2Zmc2V0Mikge1xuICAgICAgaWYgKG91dCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG91dCA9IG5ldyBVaW50OEFycmF5KDgpO1xuICAgICAgfVxuICAgICAgaWYgKG9mZnNldDIgPT09IHZvaWQgMCkge1xuICAgICAgICBvZmZzZXQyID0gMDtcbiAgICAgIH1cbiAgICAgIHZhciB2aWV3ID0gbmV3IERhdGFWaWV3KG91dC5idWZmZXIsIG91dC5ieXRlT2Zmc2V0LCBvdXQuYnl0ZUxlbmd0aCk7XG4gICAgICB2aWV3LnNldEZsb2F0NjQob2Zmc2V0MiwgdmFsdWUpO1xuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG4gICAgZXhwb3J0cy53cml0ZUZsb2F0NjRCRSA9IHdyaXRlRmxvYXQ2NEJFO1xuICAgIGZ1bmN0aW9uIHdyaXRlRmxvYXQ2NExFKHZhbHVlLCBvdXQsIG9mZnNldDIpIHtcbiAgICAgIGlmIChvdXQgPT09IHZvaWQgMCkge1xuICAgICAgICBvdXQgPSBuZXcgVWludDhBcnJheSg4KTtcbiAgICAgIH1cbiAgICAgIGlmIChvZmZzZXQyID09PSB2b2lkIDApIHtcbiAgICAgICAgb2Zmc2V0MiA9IDA7XG4gICAgICB9XG4gICAgICB2YXIgdmlldyA9IG5ldyBEYXRhVmlldyhvdXQuYnVmZmVyLCBvdXQuYnl0ZU9mZnNldCwgb3V0LmJ5dGVMZW5ndGgpO1xuICAgICAgdmlldy5zZXRGbG9hdDY0KG9mZnNldDIsIHZhbHVlLCB0cnVlKTtcbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIGV4cG9ydHMud3JpdGVGbG9hdDY0TEUgPSB3cml0ZUZsb2F0NjRMRTtcbiAgfVxufSk7XG52YXIgcmVxdWlyZV93aXBlID0gX19jb21tb25KUzIoe1xuICBcIm5vZGVfbW9kdWxlcy9Ac3RhYmxlbGliL3dpcGUvbGliL3dpcGUuanNcIihleHBvcnRzKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7dmFsdWU6IHRydWV9KTtcbiAgICBmdW5jdGlvbiB3aXBlKGFycmF5KSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGFycmF5W2ldID0gMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG4gICAgZXhwb3J0cy53aXBlID0gd2lwZTtcbiAgfVxufSk7XG52YXIgcmVxdWlyZV9zaGEyNTYgPSBfX2NvbW1vbkpTMih7XG4gIFwibm9kZV9tb2R1bGVzL0BzdGFibGVsaWIvc2hhMjU2L2xpYi9zaGEyNTYuanNcIihleHBvcnRzKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7dmFsdWU6IHRydWV9KTtcbiAgICB2YXIgYmluYXJ5XzEgPSByZXF1aXJlX2JpbmFyeSgpO1xuICAgIHZhciB3aXBlXzEgPSByZXF1aXJlX3dpcGUoKTtcbiAgICBleHBvcnRzLkRJR0VTVF9MRU5HVEggPSAzMjtcbiAgICBleHBvcnRzLkJMT0NLX1NJWkUgPSA2NDtcbiAgICB2YXIgU0hBMjU2ID0gZnVuY3Rpb24oKSB7XG4gICAgICBmdW5jdGlvbiBTSEEyNTYyKCkge1xuICAgICAgICB0aGlzLmRpZ2VzdExlbmd0aCA9IGV4cG9ydHMuRElHRVNUX0xFTkdUSDtcbiAgICAgICAgdGhpcy5ibG9ja1NpemUgPSBleHBvcnRzLkJMT0NLX1NJWkU7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gbmV3IEludDMyQXJyYXkoOCk7XG4gICAgICAgIHRoaXMuX3RlbXAgPSBuZXcgSW50MzJBcnJheSg2NCk7XG4gICAgICAgIHRoaXMuX2J1ZmZlciA9IG5ldyBVaW50OEFycmF5KDEyOCk7XG4gICAgICAgIHRoaXMuX2J1ZmZlckxlbmd0aCA9IDA7XG4gICAgICAgIHRoaXMuX2J5dGVzSGFzaGVkID0gMDtcbiAgICAgICAgdGhpcy5fZmluaXNoZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgfVxuICAgICAgU0hBMjU2Mi5wcm90b3R5cGUuX2luaXRTdGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLl9zdGF0ZVswXSA9IDE3NzkwMzM3MDM7XG4gICAgICAgIHRoaXMuX3N0YXRlWzFdID0gMzE0NDEzNDI3NztcbiAgICAgICAgdGhpcy5fc3RhdGVbMl0gPSAxMDEzOTA0MjQyO1xuICAgICAgICB0aGlzLl9zdGF0ZVszXSA9IDI3NzM0ODA3NjI7XG4gICAgICAgIHRoaXMuX3N0YXRlWzRdID0gMTM1OTg5MzExOTtcbiAgICAgICAgdGhpcy5fc3RhdGVbNV0gPSAyNjAwODIyOTI0O1xuICAgICAgICB0aGlzLl9zdGF0ZVs2XSA9IDUyODczNDYzNTtcbiAgICAgICAgdGhpcy5fc3RhdGVbN10gPSAxNTQxNDU5MjI1O1xuICAgICAgfTtcbiAgICAgIFNIQTI1NjIucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuX2luaXRTdGF0ZSgpO1xuICAgICAgICB0aGlzLl9idWZmZXJMZW5ndGggPSAwO1xuICAgICAgICB0aGlzLl9ieXRlc0hhc2hlZCA9IDA7XG4gICAgICAgIHRoaXMuX2ZpbmlzaGVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfTtcbiAgICAgIFNIQTI1NjIucHJvdG90eXBlLmNsZWFuID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHdpcGVfMS53aXBlKHRoaXMuX2J1ZmZlcik7XG4gICAgICAgIHdpcGVfMS53aXBlKHRoaXMuX3RlbXApO1xuICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICB9O1xuICAgICAgU0hBMjU2Mi5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oZGF0YSwgZGF0YUxlbmd0aCkge1xuICAgICAgICBpZiAoZGF0YUxlbmd0aCA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9maW5pc2hlZCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNIQTI1NjogY2FuJ3QgdXBkYXRlIGJlY2F1c2UgaGFzaCB3YXMgZmluaXNoZWQuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkYXRhUG9zID0gMDtcbiAgICAgICAgdGhpcy5fYnl0ZXNIYXNoZWQgKz0gZGF0YUxlbmd0aDtcbiAgICAgICAgaWYgKHRoaXMuX2J1ZmZlckxlbmd0aCA+IDApIHtcbiAgICAgICAgICB3aGlsZSAodGhpcy5fYnVmZmVyTGVuZ3RoIDwgdGhpcy5ibG9ja1NpemUgJiYgZGF0YUxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuX2J1ZmZlclt0aGlzLl9idWZmZXJMZW5ndGgrK10gPSBkYXRhW2RhdGFQb3MrK107XG4gICAgICAgICAgICBkYXRhTGVuZ3RoLS07XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0aGlzLl9idWZmZXJMZW5ndGggPT09IHRoaXMuYmxvY2tTaXplKSB7XG4gICAgICAgICAgICBoYXNoQmxvY2tzKHRoaXMuX3RlbXAsIHRoaXMuX3N0YXRlLCB0aGlzLl9idWZmZXIsIDAsIHRoaXMuYmxvY2tTaXplKTtcbiAgICAgICAgICAgIHRoaXMuX2J1ZmZlckxlbmd0aCA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhTGVuZ3RoID49IHRoaXMuYmxvY2tTaXplKSB7XG4gICAgICAgICAgZGF0YVBvcyA9IGhhc2hCbG9ja3ModGhpcy5fdGVtcCwgdGhpcy5fc3RhdGUsIGRhdGEsIGRhdGFQb3MsIGRhdGFMZW5ndGgpO1xuICAgICAgICAgIGRhdGFMZW5ndGggJT0gdGhpcy5ibG9ja1NpemU7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGRhdGFMZW5ndGggPiAwKSB7XG4gICAgICAgICAgdGhpcy5fYnVmZmVyW3RoaXMuX2J1ZmZlckxlbmd0aCsrXSA9IGRhdGFbZGF0YVBvcysrXTtcbiAgICAgICAgICBkYXRhTGVuZ3RoLS07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9O1xuICAgICAgU0hBMjU2Mi5wcm90b3R5cGUuZmluaXNoID0gZnVuY3Rpb24ob3V0KSB7XG4gICAgICAgIGlmICghdGhpcy5fZmluaXNoZWQpIHtcbiAgICAgICAgICB2YXIgYnl0ZXNIYXNoZWQgPSB0aGlzLl9ieXRlc0hhc2hlZDtcbiAgICAgICAgICB2YXIgbGVmdCA9IHRoaXMuX2J1ZmZlckxlbmd0aDtcbiAgICAgICAgICB2YXIgYml0TGVuSGkgPSBieXRlc0hhc2hlZCAvIDUzNjg3MDkxMiB8IDA7XG4gICAgICAgICAgdmFyIGJpdExlbkxvID0gYnl0ZXNIYXNoZWQgPDwgMztcbiAgICAgICAgICB2YXIgcGFkTGVuZ3RoID0gYnl0ZXNIYXNoZWQgJSA2NCA8IDU2ID8gNjQgOiAxMjg7XG4gICAgICAgICAgdGhpcy5fYnVmZmVyW2xlZnRdID0gMTI4O1xuICAgICAgICAgIGZvciAodmFyIGkgPSBsZWZ0ICsgMTsgaSA8IHBhZExlbmd0aCAtIDg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5fYnVmZmVyW2ldID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgYmluYXJ5XzEud3JpdGVVaW50MzJCRShiaXRMZW5IaSwgdGhpcy5fYnVmZmVyLCBwYWRMZW5ndGggLSA4KTtcbiAgICAgICAgICBiaW5hcnlfMS53cml0ZVVpbnQzMkJFKGJpdExlbkxvLCB0aGlzLl9idWZmZXIsIHBhZExlbmd0aCAtIDQpO1xuICAgICAgICAgIGhhc2hCbG9ja3ModGhpcy5fdGVtcCwgdGhpcy5fc3RhdGUsIHRoaXMuX2J1ZmZlciwgMCwgcGFkTGVuZ3RoKTtcbiAgICAgICAgICB0aGlzLl9maW5pc2hlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmRpZ2VzdExlbmd0aCAvIDQ7IGkrKykge1xuICAgICAgICAgIGJpbmFyeV8xLndyaXRlVWludDMyQkUodGhpcy5fc3RhdGVbaV0sIG91dCwgaSAqIDQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfTtcbiAgICAgIFNIQTI1NjIucHJvdG90eXBlLmRpZ2VzdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgb3V0ID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5kaWdlc3RMZW5ndGgpO1xuICAgICAgICB0aGlzLmZpbmlzaChvdXQpO1xuICAgICAgICByZXR1cm4gb3V0O1xuICAgICAgfTtcbiAgICAgIFNIQTI1NjIucHJvdG90eXBlLnNhdmVTdGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5fZmluaXNoZWQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTSEEyNTY6IGNhbm5vdCBzYXZlIGZpbmlzaGVkIHN0YXRlXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc3RhdGU6IG5ldyBJbnQzMkFycmF5KHRoaXMuX3N0YXRlKSxcbiAgICAgICAgICBidWZmZXI6IHRoaXMuX2J1ZmZlckxlbmd0aCA+IDAgPyBuZXcgVWludDhBcnJheSh0aGlzLl9idWZmZXIpIDogdm9pZCAwLFxuICAgICAgICAgIGJ1ZmZlckxlbmd0aDogdGhpcy5fYnVmZmVyTGVuZ3RoLFxuICAgICAgICAgIGJ5dGVzSGFzaGVkOiB0aGlzLl9ieXRlc0hhc2hlZFxuICAgICAgICB9O1xuICAgICAgfTtcbiAgICAgIFNIQTI1NjIucHJvdG90eXBlLnJlc3RvcmVTdGF0ZSA9IGZ1bmN0aW9uKHNhdmVkU3RhdGUpIHtcbiAgICAgICAgdGhpcy5fc3RhdGUuc2V0KHNhdmVkU3RhdGUuc3RhdGUpO1xuICAgICAgICB0aGlzLl9idWZmZXJMZW5ndGggPSBzYXZlZFN0YXRlLmJ1ZmZlckxlbmd0aDtcbiAgICAgICAgaWYgKHNhdmVkU3RhdGUuYnVmZmVyKSB7XG4gICAgICAgICAgdGhpcy5fYnVmZmVyLnNldChzYXZlZFN0YXRlLmJ1ZmZlcik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fYnl0ZXNIYXNoZWQgPSBzYXZlZFN0YXRlLmJ5dGVzSGFzaGVkO1xuICAgICAgICB0aGlzLl9maW5pc2hlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH07XG4gICAgICBTSEEyNTYyLnByb3RvdHlwZS5jbGVhblNhdmVkU3RhdGUgPSBmdW5jdGlvbihzYXZlZFN0YXRlKSB7XG4gICAgICAgIHdpcGVfMS53aXBlKHNhdmVkU3RhdGUuc3RhdGUpO1xuICAgICAgICBpZiAoc2F2ZWRTdGF0ZS5idWZmZXIpIHtcbiAgICAgICAgICB3aXBlXzEud2lwZShzYXZlZFN0YXRlLmJ1ZmZlcik7XG4gICAgICAgIH1cbiAgICAgICAgc2F2ZWRTdGF0ZS5idWZmZXJMZW5ndGggPSAwO1xuICAgICAgICBzYXZlZFN0YXRlLmJ5dGVzSGFzaGVkID0gMDtcbiAgICAgIH07XG4gICAgICByZXR1cm4gU0hBMjU2MjtcbiAgICB9KCk7XG4gICAgZXhwb3J0cy5TSEEyNTYgPSBTSEEyNTY7XG4gICAgdmFyIEsgPSBuZXcgSW50MzJBcnJheShbXG4gICAgICAxMTE2MzUyNDA4LFxuICAgICAgMTg5OTQ0NzQ0MSxcbiAgICAgIDMwNDkzMjM0NzEsXG4gICAgICAzOTIxMDA5NTczLFxuICAgICAgOTYxOTg3MTYzLFxuICAgICAgMTUwODk3MDk5MyxcbiAgICAgIDI0NTM2MzU3NDgsXG4gICAgICAyODcwNzYzMjIxLFxuICAgICAgMzYyNDM4MTA4MCxcbiAgICAgIDMxMDU5ODQwMSxcbiAgICAgIDYwNzIyNTI3OCxcbiAgICAgIDE0MjY4ODE5ODcsXG4gICAgICAxOTI1MDc4Mzg4LFxuICAgICAgMjE2MjA3ODIwNixcbiAgICAgIDI2MTQ4ODgxMDMsXG4gICAgICAzMjQ4MjIyNTgwLFxuICAgICAgMzgzNTM5MDQwMSxcbiAgICAgIDQwMjIyMjQ3NzQsXG4gICAgICAyNjQzNDcwNzgsXG4gICAgICA2MDQ4MDc2MjgsXG4gICAgICA3NzAyNTU5ODMsXG4gICAgICAxMjQ5MTUwMTIyLFxuICAgICAgMTU1NTA4MTY5MixcbiAgICAgIDE5OTYwNjQ5ODYsXG4gICAgICAyNTU0MjIwODgyLFxuICAgICAgMjgyMTgzNDM0OSxcbiAgICAgIDI5NTI5OTY4MDgsXG4gICAgICAzMjEwMzEzNjcxLFxuICAgICAgMzMzNjU3MTg5MSxcbiAgICAgIDM1ODQ1Mjg3MTEsXG4gICAgICAxMTM5MjY5OTMsXG4gICAgICAzMzgyNDE4OTUsXG4gICAgICA2NjYzMDcyMDUsXG4gICAgICA3NzM1Mjk5MTIsXG4gICAgICAxMjk0NzU3MzcyLFxuICAgICAgMTM5NjE4MjI5MSxcbiAgICAgIDE2OTUxODM3MDAsXG4gICAgICAxOTg2NjYxMDUxLFxuICAgICAgMjE3NzAyNjM1MCxcbiAgICAgIDI0NTY5NTYwMzcsXG4gICAgICAyNzMwNDg1OTIxLFxuICAgICAgMjgyMDMwMjQxMSxcbiAgICAgIDMyNTk3MzA4MDAsXG4gICAgICAzMzQ1NzY0NzcxLFxuICAgICAgMzUxNjA2NTgxNyxcbiAgICAgIDM2MDAzNTI4MDQsXG4gICAgICA0MDk0NTcxOTA5LFxuICAgICAgMjc1NDIzMzQ0LFxuICAgICAgNDMwMjI3NzM0LFxuICAgICAgNTA2OTQ4NjE2LFxuICAgICAgNjU5MDYwNTU2LFxuICAgICAgODgzOTk3ODc3LFxuICAgICAgOTU4MTM5NTcxLFxuICAgICAgMTMyMjgyMjIxOCxcbiAgICAgIDE1MzcwMDIwNjMsXG4gICAgICAxNzQ3ODczNzc5LFxuICAgICAgMTk1NTU2MjIyMixcbiAgICAgIDIwMjQxMDQ4MTUsXG4gICAgICAyMjI3NzMwNDUyLFxuICAgICAgMjM2MTg1MjQyNCxcbiAgICAgIDI0Mjg0MzY0NzQsXG4gICAgICAyNzU2NzM0MTg3LFxuICAgICAgMzIwNDAzMTQ3OSxcbiAgICAgIDMzMjkzMjUyOThcbiAgICBdKTtcbiAgICBmdW5jdGlvbiBoYXNoQmxvY2tzKHcsIHYsIHAsIHBvcywgbGVuKSB7XG4gICAgICB3aGlsZSAobGVuID49IDY0KSB7XG4gICAgICAgIHZhciBhID0gdlswXTtcbiAgICAgICAgdmFyIGIgPSB2WzFdO1xuICAgICAgICB2YXIgYyA9IHZbMl07XG4gICAgICAgIHZhciBkID0gdlszXTtcbiAgICAgICAgdmFyIGUgPSB2WzRdO1xuICAgICAgICB2YXIgZiA9IHZbNV07XG4gICAgICAgIHZhciBnID0gdls2XTtcbiAgICAgICAgdmFyIGggPSB2WzddO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyBpKyspIHtcbiAgICAgICAgICB2YXIgaiA9IHBvcyArIGkgKiA0O1xuICAgICAgICAgIHdbaV0gPSBiaW5hcnlfMS5yZWFkVWludDMyQkUocCwgaik7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSA9IDE2OyBpIDwgNjQ7IGkrKykge1xuICAgICAgICAgIHZhciB1ID0gd1tpIC0gMl07XG4gICAgICAgICAgdmFyIHQxID0gKHUgPj4+IDE3IHwgdSA8PCAzMiAtIDE3KSBeICh1ID4+PiAxOSB8IHUgPDwgMzIgLSAxOSkgXiB1ID4+PiAxMDtcbiAgICAgICAgICB1ID0gd1tpIC0gMTVdO1xuICAgICAgICAgIHZhciB0MiA9ICh1ID4+PiA3IHwgdSA8PCAzMiAtIDcpIF4gKHUgPj4+IDE4IHwgdSA8PCAzMiAtIDE4KSBeIHUgPj4+IDM7XG4gICAgICAgICAgd1tpXSA9ICh0MSArIHdbaSAtIDddIHwgMCkgKyAodDIgKyB3W2kgLSAxNl0gfCAwKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDY0OyBpKyspIHtcbiAgICAgICAgICB2YXIgdDEgPSAoKChlID4+PiA2IHwgZSA8PCAzMiAtIDYpIF4gKGUgPj4+IDExIHwgZSA8PCAzMiAtIDExKSBeIChlID4+PiAyNSB8IGUgPDwgMzIgLSAyNSkpICsgKGUgJiBmIF4gfmUgJiBnKSB8IDApICsgKGggKyAoS1tpXSArIHdbaV0gfCAwKSB8IDApIHwgMDtcbiAgICAgICAgICB2YXIgdDIgPSAoKGEgPj4+IDIgfCBhIDw8IDMyIC0gMikgXiAoYSA+Pj4gMTMgfCBhIDw8IDMyIC0gMTMpIF4gKGEgPj4+IDIyIHwgYSA8PCAzMiAtIDIyKSkgKyAoYSAmIGIgXiBhICYgYyBeIGIgJiBjKSB8IDA7XG4gICAgICAgICAgaCA9IGc7XG4gICAgICAgICAgZyA9IGY7XG4gICAgICAgICAgZiA9IGU7XG4gICAgICAgICAgZSA9IGQgKyB0MSB8IDA7XG4gICAgICAgICAgZCA9IGM7XG4gICAgICAgICAgYyA9IGI7XG4gICAgICAgICAgYiA9IGE7XG4gICAgICAgICAgYSA9IHQxICsgdDIgfCAwO1xuICAgICAgICB9XG4gICAgICAgIHZbMF0gKz0gYTtcbiAgICAgICAgdlsxXSArPSBiO1xuICAgICAgICB2WzJdICs9IGM7XG4gICAgICAgIHZbM10gKz0gZDtcbiAgICAgICAgdls0XSArPSBlO1xuICAgICAgICB2WzVdICs9IGY7XG4gICAgICAgIHZbNl0gKz0gZztcbiAgICAgICAgdls3XSArPSBoO1xuICAgICAgICBwb3MgKz0gNjQ7XG4gICAgICAgIGxlbiAtPSA2NDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwb3M7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhc2goZGF0YSkge1xuICAgICAgdmFyIGggPSBuZXcgU0hBMjU2KCk7XG4gICAgICBoLnVwZGF0ZShkYXRhKTtcbiAgICAgIHZhciBkaWdlc3QgPSBoLmRpZ2VzdCgpO1xuICAgICAgaC5jbGVhbigpO1xuICAgICAgcmV0dXJuIGRpZ2VzdDtcbiAgICB9XG4gICAgZXhwb3J0cy5oYXNoID0gaGFzaDtcbiAgfVxufSk7XG52YXIgcmVxdWlyZV9oYWxmc2lwaGFzaCA9IF9fY29tbW9uSlMyKHtcbiAgXCJub2RlX21vZHVsZXMvQHN0YWJsZWxpYi9oYWxmc2lwaGFzaC9saWIvaGFsZnNpcGhhc2guanNcIihleHBvcnRzKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7dmFsdWU6IHRydWV9KTtcbiAgICB2YXIgYmluYXJ5XzEgPSByZXF1aXJlX2JpbmFyeSgpO1xuICAgIHZhciBpbnRfMSA9IHJlcXVpcmVfaW50KCk7XG4gICAgZXhwb3J0cy5LRVlfTEVOR1RIID0gODtcbiAgICBleHBvcnRzLkRJR0VTVF9MRU5HVEggPSA0O1xuICAgIGZ1bmN0aW9uIGhhbGZTaXBIYXNoMihrZXksIGRhdGEpIHtcbiAgICAgIGlmIChrZXkubGVuZ3RoICE9PSBleHBvcnRzLktFWV9MRU5HVEgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaGFsZlNpcEhhc2g6IGluY29ycmVjdCBrZXkgbGVuZ3RoXCIpO1xuICAgICAgfVxuICAgICAgdmFyIGswID0gYmluYXJ5XzEucmVhZFVpbnQzMkxFKGtleSwgMCk7XG4gICAgICB2YXIgazEgPSBiaW5hcnlfMS5yZWFkVWludDMyTEUoa2V5LCA0KTtcbiAgICAgIHJldHVybiBiaW5hcnlfMS53cml0ZVVpbnQzMkxFKGhhbGZTaXBIYXNoTnVtKGswLCBrMSwgZGF0YSkpO1xuICAgIH1cbiAgICBleHBvcnRzLmhhbGZTaXBIYXNoID0gaGFsZlNpcEhhc2gyO1xuICAgIGZ1bmN0aW9uIGhhbGZTaXBIYXNoTnVtKGswLCBrMSwgZGF0YSkge1xuICAgICAgdmFyIHYwID0gazA7XG4gICAgICB2YXIgdjEgPSBrMTtcbiAgICAgIHZhciB2MiA9IGswIF4gMTgxOTg5NTY1MztcbiAgICAgIHZhciB2MyA9IGsxIF4gMTk1MjgwMTg5MDtcbiAgICAgIHZhciBwb3MgPSAwO1xuICAgICAgdmFyIGxlbiA9IGRhdGEubGVuZ3RoO1xuICAgICAgdmFyIGZpbiA9IGxlbiAlIDI1NiA8PCAyNDtcbiAgICAgIHdoaWxlIChsZW4gPj0gNCkge1xuICAgICAgICB2YXIgbSA9IGJpbmFyeV8xLnJlYWRVaW50MzJMRShkYXRhLCBwb3MpO1xuICAgICAgICB2MyBePSBtO1xuICAgICAgICB2MCA9IGludF8xLmFkZCh2MCwgdjEpO1xuICAgICAgICB2MSA9IGludF8xLnJvdGwodjEsIDUpO1xuICAgICAgICB2MSBePSB2MDtcbiAgICAgICAgdjAgPSBpbnRfMS5yb3RsKHYwLCAxNik7XG4gICAgICAgIHYyID0gaW50XzEuYWRkKHYyLCB2Myk7XG4gICAgICAgIHYzID0gaW50XzEucm90bCh2MywgOCk7XG4gICAgICAgIHYzIF49IHYyO1xuICAgICAgICB2MCA9IGludF8xLmFkZCh2MCwgdjMpO1xuICAgICAgICB2MyA9IGludF8xLnJvdGwodjMsIDcpO1xuICAgICAgICB2MyBePSB2MDtcbiAgICAgICAgdjIgPSBpbnRfMS5hZGQodjIsIHYxKTtcbiAgICAgICAgdjEgPSBpbnRfMS5yb3RsKHYxLCAxMyk7XG4gICAgICAgIHYxIF49IHYyO1xuICAgICAgICB2MiA9IGludF8xLnJvdGwodjIsIDE2KTtcbiAgICAgICAgdjAgPSBpbnRfMS5hZGQodjAsIHYxKTtcbiAgICAgICAgdjEgPSBpbnRfMS5yb3RsKHYxLCA1KTtcbiAgICAgICAgdjEgXj0gdjA7XG4gICAgICAgIHYwID0gaW50XzEucm90bCh2MCwgMTYpO1xuICAgICAgICB2MiA9IGludF8xLmFkZCh2MiwgdjMpO1xuICAgICAgICB2MyA9IGludF8xLnJvdGwodjMsIDgpO1xuICAgICAgICB2MyBePSB2MjtcbiAgICAgICAgdjAgPSBpbnRfMS5hZGQodjAsIHYzKTtcbiAgICAgICAgdjMgPSBpbnRfMS5yb3RsKHYzLCA3KTtcbiAgICAgICAgdjMgXj0gdjA7XG4gICAgICAgIHYyID0gaW50XzEuYWRkKHYyLCB2MSk7XG4gICAgICAgIHYxID0gaW50XzEucm90bCh2MSwgMTMpO1xuICAgICAgICB2MSBePSB2MjtcbiAgICAgICAgdjIgPSBpbnRfMS5yb3RsKHYyLCAxNik7XG4gICAgICAgIHYwIF49IG07XG4gICAgICAgIHBvcyArPSA0O1xuICAgICAgICBsZW4gLT0gNDtcbiAgICAgIH1cbiAgICAgIHN3aXRjaCAobGVuKSB7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBmaW4gfD0gZGF0YVtwb3MgKyAyXSA8PCAxNjtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIGZpbiB8PSBkYXRhW3BvcyArIDFdIDw8IDg7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBmaW4gfD0gZGF0YVtwb3NdO1xuICAgICAgfVxuICAgICAgdjMgXj0gZmluO1xuICAgICAgdjAgPSBpbnRfMS5hZGQodjAsIHYxKTtcbiAgICAgIHYxID0gaW50XzEucm90bCh2MSwgNSk7XG4gICAgICB2MSBePSB2MDtcbiAgICAgIHYwID0gaW50XzEucm90bCh2MCwgMTYpO1xuICAgICAgdjIgPSBpbnRfMS5hZGQodjIsIHYzKTtcbiAgICAgIHYzID0gaW50XzEucm90bCh2MywgOCk7XG4gICAgICB2MyBePSB2MjtcbiAgICAgIHYwID0gaW50XzEuYWRkKHYwLCB2Myk7XG4gICAgICB2MyA9IGludF8xLnJvdGwodjMsIDcpO1xuICAgICAgdjMgXj0gdjA7XG4gICAgICB2MiA9IGludF8xLmFkZCh2MiwgdjEpO1xuICAgICAgdjEgPSBpbnRfMS5yb3RsKHYxLCAxMyk7XG4gICAgICB2MSBePSB2MjtcbiAgICAgIHYyID0gaW50XzEucm90bCh2MiwgMTYpO1xuICAgICAgdjAgPSBpbnRfMS5hZGQodjAsIHYxKTtcbiAgICAgIHYxID0gaW50XzEucm90bCh2MSwgNSk7XG4gICAgICB2MSBePSB2MDtcbiAgICAgIHYwID0gaW50XzEucm90bCh2MCwgMTYpO1xuICAgICAgdjIgPSBpbnRfMS5hZGQodjIsIHYzKTtcbiAgICAgIHYzID0gaW50XzEucm90bCh2MywgOCk7XG4gICAgICB2MyBePSB2MjtcbiAgICAgIHYwID0gaW50XzEuYWRkKHYwLCB2Myk7XG4gICAgICB2MyA9IGludF8xLnJvdGwodjMsIDcpO1xuICAgICAgdjMgXj0gdjA7XG4gICAgICB2MiA9IGludF8xLmFkZCh2MiwgdjEpO1xuICAgICAgdjEgPSBpbnRfMS5yb3RsKHYxLCAxMyk7XG4gICAgICB2MSBePSB2MjtcbiAgICAgIHYyID0gaW50XzEucm90bCh2MiwgMTYpO1xuICAgICAgdjAgXj0gZmluO1xuICAgICAgdjIgXj0gMjU1O1xuICAgICAgdjAgPSBpbnRfMS5hZGQodjAsIHYxKTtcbiAgICAgIHYxID0gaW50XzEucm90bCh2MSwgNSk7XG4gICAgICB2MSBePSB2MDtcbiAgICAgIHYwID0gaW50XzEucm90bCh2MCwgMTYpO1xuICAgICAgdjIgPSBpbnRfMS5hZGQodjIsIHYzKTtcbiAgICAgIHYzID0gaW50XzEucm90bCh2MywgOCk7XG4gICAgICB2MyBePSB2MjtcbiAgICAgIHYwID0gaW50XzEuYWRkKHYwLCB2Myk7XG4gICAgICB2MyA9IGludF8xLnJvdGwodjMsIDcpO1xuICAgICAgdjMgXj0gdjA7XG4gICAgICB2MiA9IGludF8xLmFkZCh2MiwgdjEpO1xuICAgICAgdjEgPSBpbnRfMS5yb3RsKHYxLCAxMyk7XG4gICAgICB2MSBePSB2MjtcbiAgICAgIHYyID0gaW50XzEucm90bCh2MiwgMTYpO1xuICAgICAgdjAgPSBpbnRfMS5hZGQodjAsIHYxKTtcbiAgICAgIHYxID0gaW50XzEucm90bCh2MSwgNSk7XG4gICAgICB2MSBePSB2MDtcbiAgICAgIHYwID0gaW50XzEucm90bCh2MCwgMTYpO1xuICAgICAgdjIgPSBpbnRfMS5hZGQodjIsIHYzKTtcbiAgICAgIHYzID0gaW50XzEucm90bCh2MywgOCk7XG4gICAgICB2MyBePSB2MjtcbiAgICAgIHYwID0gaW50XzEuYWRkKHYwLCB2Myk7XG4gICAgICB2MyA9IGludF8xLnJvdGwodjMsIDcpO1xuICAgICAgdjMgXj0gdjA7XG4gICAgICB2MiA9IGludF8xLmFkZCh2MiwgdjEpO1xuICAgICAgdjEgPSBpbnRfMS5yb3RsKHYxLCAxMyk7XG4gICAgICB2MSBePSB2MjtcbiAgICAgIHYyID0gaW50XzEucm90bCh2MiwgMTYpO1xuICAgICAgdjAgPSBpbnRfMS5hZGQodjAsIHYxKTtcbiAgICAgIHYxID0gaW50XzEucm90bCh2MSwgNSk7XG4gICAgICB2MSBePSB2MDtcbiAgICAgIHYwID0gaW50XzEucm90bCh2MCwgMTYpO1xuICAgICAgdjIgPSBpbnRfMS5hZGQodjIsIHYzKTtcbiAgICAgIHYzID0gaW50XzEucm90bCh2MywgOCk7XG4gICAgICB2MyBePSB2MjtcbiAgICAgIHYwID0gaW50XzEuYWRkKHYwLCB2Myk7XG4gICAgICB2MyA9IGludF8xLnJvdGwodjMsIDcpO1xuICAgICAgdjMgXj0gdjA7XG4gICAgICB2MiA9IGludF8xLmFkZCh2MiwgdjEpO1xuICAgICAgdjEgPSBpbnRfMS5yb3RsKHYxLCAxMyk7XG4gICAgICB2MSBePSB2MjtcbiAgICAgIHYyID0gaW50XzEucm90bCh2MiwgMTYpO1xuICAgICAgdjAgPSBpbnRfMS5hZGQodjAsIHYxKTtcbiAgICAgIHYxID0gaW50XzEucm90bCh2MSwgNSk7XG4gICAgICB2MSBePSB2MDtcbiAgICAgIHYwID0gaW50XzEucm90bCh2MCwgMTYpO1xuICAgICAgdjIgPSBpbnRfMS5hZGQodjIsIHYzKTtcbiAgICAgIHYzID0gaW50XzEucm90bCh2MywgOCk7XG4gICAgICB2MyBePSB2MjtcbiAgICAgIHYwID0gaW50XzEuYWRkKHYwLCB2Myk7XG4gICAgICB2MyA9IGludF8xLnJvdGwodjMsIDcpO1xuICAgICAgdjMgXj0gdjA7XG4gICAgICB2MiA9IGludF8xLmFkZCh2MiwgdjEpO1xuICAgICAgdjEgPSBpbnRfMS5yb3RsKHYxLCAxMyk7XG4gICAgICB2MSBePSB2MjtcbiAgICAgIHJldHVybiAodjEgXiB2MykgPj4+IDA7XG4gICAgfVxuICAgIGV4cG9ydHMuaGFsZlNpcEhhc2hOdW0gPSBoYWxmU2lwSGFzaE51bTtcbiAgfVxufSk7XG52YXIgcmVxdWlyZV9jb25zdGFudF90aW1lID0gX19jb21tb25KUzIoe1xuICBcIm5vZGVfbW9kdWxlcy9Ac3RhYmxlbGliL2NvbnN0YW50LXRpbWUvbGliL2NvbnN0YW50LXRpbWUuanNcIihleHBvcnRzKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7dmFsdWU6IHRydWV9KTtcbiAgICBmdW5jdGlvbiBzZWxlY3Qoc3ViamVjdCwgcmVzdWx0SWZPbmUsIHJlc3VsdElmWmVybykge1xuICAgICAgcmV0dXJuIH4oc3ViamVjdCAtIDEpICYgcmVzdWx0SWZPbmUgfCBzdWJqZWN0IC0gMSAmIHJlc3VsdElmWmVybztcbiAgICB9XG4gICAgZXhwb3J0cy5zZWxlY3QgPSBzZWxlY3Q7XG4gICAgZnVuY3Rpb24gbGVzc09yRXF1YWwoYSwgYikge1xuICAgICAgcmV0dXJuIChhIHwgMCkgLSAoYiB8IDApIC0gMSA+Pj4gMzEgJiAxO1xuICAgIH1cbiAgICBleHBvcnRzLmxlc3NPckVxdWFsID0gbGVzc09yRXF1YWw7XG4gICAgZnVuY3Rpb24gY29tcGFyZTIoYSwgYikge1xuICAgICAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCB8PSBhW2ldIF4gYltpXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAxICYgcmVzdWx0IC0gMSA+Pj4gODtcbiAgICB9XG4gICAgZXhwb3J0cy5jb21wYXJlID0gY29tcGFyZTI7XG4gICAgZnVuY3Rpb24gZXF1YWwyMihhLCBiKSB7XG4gICAgICBpZiAoYS5sZW5ndGggPT09IDAgfHwgYi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbXBhcmUyKGEsIGIpICE9PSAwO1xuICAgIH1cbiAgICBleHBvcnRzLmVxdWFsID0gZXF1YWwyMjtcbiAgfVxufSk7XG52YXIgcmVxdWlyZV9saWIgPSBfX2NvbW1vbkpTMih7XG4gIFwibm9kZV9tb2R1bGVzL0BzY3VyZS9iYXNlL2xpYi9pbmRleC5qc1wiKGV4cG9ydHMpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHt2YWx1ZTogdHJ1ZX0pO1xuICAgIGV4cG9ydHMuYnl0ZXMgPSBleHBvcnRzLnN0cmluZ1RvQnl0ZXMgPSBleHBvcnRzLnN0ciA9IGV4cG9ydHMuYnl0ZXNUb1N0cmluZyA9IGV4cG9ydHMuaGV4ID0gZXhwb3J0cy51dGY4ID0gZXhwb3J0cy5iZWNoMzJtID0gZXhwb3J0cy5iZWNoMzIgPSBleHBvcnRzLmJhc2U1OGNoZWNrID0gZXhwb3J0cy5iYXNlNTh4bXIgPSBleHBvcnRzLmJhc2U1OHhycCA9IGV4cG9ydHMuYmFzZTU4ZmxpY2tyID0gZXhwb3J0cy5iYXNlNTggPSBleHBvcnRzLmJhc2U2NHVybCA9IGV4cG9ydHMuYmFzZTY0ID0gZXhwb3J0cy5iYXNlMzJjcm9ja2ZvcmQgPSBleHBvcnRzLmJhc2UzMmhleCA9IGV4cG9ydHMuYmFzZTMyID0gZXhwb3J0cy5iYXNlMTYgPSBleHBvcnRzLnV0aWxzID0gZXhwb3J0cy5hc3NlcnROdW1iZXIgPSB2b2lkIDA7XG4gICAgZnVuY3Rpb24gYXNzZXJ0TnVtYmVyKG4yKSB7XG4gICAgICBpZiAoIU51bWJlci5pc1NhZmVJbnRlZ2VyKG4yKSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBXcm9uZyBpbnRlZ2VyOiAke24yfWApO1xuICAgIH1cbiAgICBleHBvcnRzLmFzc2VydE51bWJlciA9IGFzc2VydE51bWJlcjtcbiAgICBmdW5jdGlvbiBjaGFpbiguLi5hcmdzKSB7XG4gICAgICBjb25zdCB3cmFwID0gKGEsIGIpID0+IChjKSA9PiBhKGIoYykpO1xuICAgICAgY29uc3QgZW5jb2RlMiA9IEFycmF5LmZyb20oYXJncykucmV2ZXJzZSgpLnJlZHVjZSgoYWNjLCBpKSA9PiBhY2MgPyB3cmFwKGFjYywgaS5lbmNvZGUpIDogaS5lbmNvZGUsIHZvaWQgMCk7XG4gICAgICBjb25zdCBkZWNvZGUyID0gYXJncy5yZWR1Y2UoKGFjYywgaSkgPT4gYWNjID8gd3JhcChhY2MsIGkuZGVjb2RlKSA6IGkuZGVjb2RlLCB2b2lkIDApO1xuICAgICAgcmV0dXJuIHtlbmNvZGU6IGVuY29kZTIsIGRlY29kZTogZGVjb2RlMn07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFscGhhYmV0KGFscGhhYmV0Mikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZW5jb2RlOiAoZGlnaXRzKSA9PiB7XG4gICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGRpZ2l0cykgfHwgZGlnaXRzLmxlbmd0aCAmJiB0eXBlb2YgZGlnaXRzWzBdICE9PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYWxwaGFiZXQuZW5jb2RlIGlucHV0IHNob3VsZCBiZSBhbiBhcnJheSBvZiBudW1iZXJzXCIpO1xuICAgICAgICAgIHJldHVybiBkaWdpdHMubWFwKChpKSA9PiB7XG4gICAgICAgICAgICBhc3NlcnROdW1iZXIoaSk7XG4gICAgICAgICAgICBpZiAoaSA8IDAgfHwgaSA+PSBhbHBoYWJldDIubGVuZ3RoKVxuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYERpZ2l0IGluZGV4IG91dHNpZGUgYWxwaGFiZXQ6ICR7aX0gKGFscGhhYmV0OiAke2FscGhhYmV0Mi5sZW5ndGh9KWApO1xuICAgICAgICAgICAgcmV0dXJuIGFscGhhYmV0MltpXTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgZGVjb2RlOiAoaW5wdXQpID0+IHtcbiAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoaW5wdXQpIHx8IGlucHV0Lmxlbmd0aCAmJiB0eXBlb2YgaW5wdXRbMF0gIT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJhbHBoYWJldC5kZWNvZGUgaW5wdXQgc2hvdWxkIGJlIGFycmF5IG9mIHN0cmluZ3NcIik7XG4gICAgICAgICAgcmV0dXJuIGlucHV0Lm1hcCgobGV0dGVyKSA9PiB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGxldHRlciAhPT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBhbHBoYWJldC5kZWNvZGU6IG5vdCBzdHJpbmcgZWxlbWVudD0ke2xldHRlcn1gKTtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gYWxwaGFiZXQyLmluZGV4T2YobGV0dGVyKTtcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gLTEpXG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBsZXR0ZXI6IFwiJHtsZXR0ZXJ9XCIuIEFsbG93ZWQ6ICR7YWxwaGFiZXQyfWApO1xuICAgICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBqb2luKHNlcGFyYXRvciA9IFwiXCIpIHtcbiAgICAgIGlmICh0eXBlb2Ygc2VwYXJhdG9yICE9PSBcInN0cmluZ1wiKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJqb2luIHNlcGFyYXRvciBzaG91bGQgYmUgc3RyaW5nXCIpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZW5jb2RlOiAoZnJvbSkgPT4ge1xuICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShmcm9tKSB8fCBmcm9tLmxlbmd0aCAmJiB0eXBlb2YgZnJvbVswXSAhPT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImpvaW4uZW5jb2RlIGlucHV0IHNob3VsZCBiZSBhcnJheSBvZiBzdHJpbmdzXCIpO1xuICAgICAgICAgIGZvciAobGV0IGkgb2YgZnJvbSlcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaSAhPT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBqb2luLmVuY29kZTogbm9uLXN0cmluZyBpbnB1dD0ke2l9YCk7XG4gICAgICAgICAgcmV0dXJuIGZyb20uam9pbihzZXBhcmF0b3IpO1xuICAgICAgICB9LFxuICAgICAgICBkZWNvZGU6ICh0bykgPT4ge1xuICAgICAgICAgIGlmICh0eXBlb2YgdG8gIT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJqb2luLmRlY29kZSBpbnB1dCBzaG91bGQgYmUgc3RyaW5nXCIpO1xuICAgICAgICAgIHJldHVybiB0by5zcGxpdChzZXBhcmF0b3IpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBwYWRkaW5nKGJpdHMsIGNociA9IFwiPVwiKSB7XG4gICAgICBhc3NlcnROdW1iZXIoYml0cyk7XG4gICAgICBpZiAodHlwZW9mIGNociAhPT0gXCJzdHJpbmdcIilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicGFkZGluZyBjaHIgc2hvdWxkIGJlIHN0cmluZ1wiKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVuY29kZShkYXRhKSB7XG4gICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGRhdGEpIHx8IGRhdGEubGVuZ3RoICYmIHR5cGVvZiBkYXRhWzBdICE9PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicGFkZGluZy5lbmNvZGUgaW5wdXQgc2hvdWxkIGJlIGFycmF5IG9mIHN0cmluZ3NcIik7XG4gICAgICAgICAgZm9yIChsZXQgaSBvZiBkYXRhKVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBpICE9PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHBhZGRpbmcuZW5jb2RlOiBub24tc3RyaW5nIGlucHV0PSR7aX1gKTtcbiAgICAgICAgICB3aGlsZSAoZGF0YS5sZW5ndGggKiBiaXRzICUgOClcbiAgICAgICAgICAgIGRhdGEucHVzaChjaHIpO1xuICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICB9LFxuICAgICAgICBkZWNvZGUoaW5wdXQpIHtcbiAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoaW5wdXQpIHx8IGlucHV0Lmxlbmd0aCAmJiB0eXBlb2YgaW5wdXRbMF0gIT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJwYWRkaW5nLmVuY29kZSBpbnB1dCBzaG91bGQgYmUgYXJyYXkgb2Ygc3RyaW5nc1wiKTtcbiAgICAgICAgICBmb3IgKGxldCBpIG9mIGlucHV0KVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBpICE9PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHBhZGRpbmcuZGVjb2RlOiBub24tc3RyaW5nIGlucHV0PSR7aX1gKTtcbiAgICAgICAgICBsZXQgZW5kID0gaW5wdXQubGVuZ3RoO1xuICAgICAgICAgIGlmIChlbmQgKiBiaXRzICUgOClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcGFkZGluZzogc3RyaW5nIHNob3VsZCBoYXZlIHdob2xlIG51bWJlciBvZiBieXRlc1wiKTtcbiAgICAgICAgICBmb3IgKDsgZW5kID4gMCAmJiBpbnB1dFtlbmQgLSAxXSA9PT0gY2hyOyBlbmQtLSkge1xuICAgICAgICAgICAgaWYgKCEoKGVuZCAtIDEpICogYml0cyAlIDgpKVxuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHBhZGRpbmc6IHN0cmluZyBoYXMgdG9vIG11Y2ggcGFkZGluZ1wiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGlucHV0LnNsaWNlKDAsIGVuZCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZShmbikge1xuICAgICAgaWYgKHR5cGVvZiBmbiAhPT0gXCJmdW5jdGlvblwiKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub3JtYWxpemUgZm4gc2hvdWxkIGJlIGZ1bmN0aW9uXCIpO1xuICAgICAgcmV0dXJuIHtlbmNvZGU6IChmcm9tKSA9PiBmcm9tLCBkZWNvZGU6ICh0bykgPT4gZm4odG8pfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY29udmVydFJhZGl4KGRhdGEsIGZyb20sIHRvKSB7XG4gICAgICBpZiAoZnJvbSA8IDIpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgY29udmVydFJhZGl4OiB3cm9uZyBmcm9tPSR7ZnJvbX0sIGJhc2UgY2Fubm90IGJlIGxlc3MgdGhhbiAyYCk7XG4gICAgICBpZiAodG8gPCAyKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGNvbnZlcnRSYWRpeDogd3JvbmcgdG89JHt0b30sIGJhc2UgY2Fubm90IGJlIGxlc3MgdGhhbiAyYCk7XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZGF0YSkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImNvbnZlcnRSYWRpeDogZGF0YSBzaG91bGQgYmUgYXJyYXlcIik7XG4gICAgICBpZiAoIWRhdGEubGVuZ3RoKVxuICAgICAgICByZXR1cm4gW107XG4gICAgICBsZXQgcG9zID0gMDtcbiAgICAgIGNvbnN0IHJlcyA9IFtdO1xuICAgICAgY29uc3QgZGlnaXRzID0gQXJyYXkuZnJvbShkYXRhKTtcbiAgICAgIGRpZ2l0cy5mb3JFYWNoKChkKSA9PiB7XG4gICAgICAgIGFzc2VydE51bWJlcihkKTtcbiAgICAgICAgaWYgKGQgPCAwIHx8IGQgPj0gZnJvbSlcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFdyb25nIGludGVnZXI6ICR7ZH1gKTtcbiAgICAgIH0pO1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgbGV0IGNhcnJ5ID0gMDtcbiAgICAgICAgbGV0IGRvbmUgPSB0cnVlO1xuICAgICAgICBmb3IgKGxldCBpID0gcG9zOyBpIDwgZGlnaXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgZGlnaXQgPSBkaWdpdHNbaV07XG4gICAgICAgICAgY29uc3QgZGlnaXRCYXNlID0gZnJvbSAqIGNhcnJ5ICsgZGlnaXQ7XG4gICAgICAgICAgaWYgKCFOdW1iZXIuaXNTYWZlSW50ZWdlcihkaWdpdEJhc2UpIHx8IGZyb20gKiBjYXJyeSAvIGZyb20gIT09IGNhcnJ5IHx8IGRpZ2l0QmFzZSAtIGRpZ2l0ICE9PSBmcm9tICogY2FycnkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImNvbnZlcnRSYWRpeDogY2Fycnkgb3ZlcmZsb3dcIik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhcnJ5ID0gZGlnaXRCYXNlICUgdG87XG4gICAgICAgICAgZGlnaXRzW2ldID0gTWF0aC5mbG9vcihkaWdpdEJhc2UgLyB0byk7XG4gICAgICAgICAgaWYgKCFOdW1iZXIuaXNTYWZlSW50ZWdlcihkaWdpdHNbaV0pIHx8IGRpZ2l0c1tpXSAqIHRvICsgY2FycnkgIT09IGRpZ2l0QmFzZSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImNvbnZlcnRSYWRpeDogY2Fycnkgb3ZlcmZsb3dcIik7XG4gICAgICAgICAgaWYgKCFkb25lKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgZWxzZSBpZiAoIWRpZ2l0c1tpXSlcbiAgICAgICAgICAgIHBvcyA9IGk7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgZG9uZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJlcy5wdXNoKGNhcnJ5KTtcbiAgICAgICAgaWYgKGRvbmUpXG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoIC0gMSAmJiBkYXRhW2ldID09PSAwOyBpKyspXG4gICAgICAgIHJlcy5wdXNoKDApO1xuICAgICAgcmV0dXJuIHJlcy5yZXZlcnNlKCk7XG4gICAgfVxuICAgIHZhciBnY2QgPSAoYSwgYikgPT4gIWIgPyBhIDogZ2NkKGIsIGEgJSBiKTtcbiAgICB2YXIgcmFkaXgyY2FycnkgPSAoZnJvbSwgdG8pID0+IGZyb20gKyAodG8gLSBnY2QoZnJvbSwgdG8pKTtcbiAgICBmdW5jdGlvbiBjb252ZXJ0UmFkaXgyKGRhdGEsIGZyb20sIHRvLCBwYWRkaW5nMikge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGRhdGEpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjb252ZXJ0UmFkaXgyOiBkYXRhIHNob3VsZCBiZSBhcnJheVwiKTtcbiAgICAgIGlmIChmcm9tIDw9IDAgfHwgZnJvbSA+IDMyKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGNvbnZlcnRSYWRpeDI6IHdyb25nIGZyb209JHtmcm9tfWApO1xuICAgICAgaWYgKHRvIDw9IDAgfHwgdG8gPiAzMilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBjb252ZXJ0UmFkaXgyOiB3cm9uZyB0bz0ke3RvfWApO1xuICAgICAgaWYgKHJhZGl4MmNhcnJ5KGZyb20sIHRvKSA+IDMyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgY29udmVydFJhZGl4MjogY2Fycnkgb3ZlcmZsb3cgZnJvbT0ke2Zyb219IHRvPSR7dG99IGNhcnJ5Qml0cz0ke3JhZGl4MmNhcnJ5KGZyb20sIHRvKX1gKTtcbiAgICAgIH1cbiAgICAgIGxldCBjYXJyeSA9IDA7XG4gICAgICBsZXQgcG9zID0gMDtcbiAgICAgIGNvbnN0IG1hc2sgPSAyICoqIHRvIC0gMTtcbiAgICAgIGNvbnN0IHJlcyA9IFtdO1xuICAgICAgZm9yIChjb25zdCBuMiBvZiBkYXRhKSB7XG4gICAgICAgIGFzc2VydE51bWJlcihuMik7XG4gICAgICAgIGlmIChuMiA+PSAyICoqIGZyb20pXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBjb252ZXJ0UmFkaXgyOiBpbnZhbGlkIGRhdGEgd29yZD0ke24yfSBmcm9tPSR7ZnJvbX1gKTtcbiAgICAgICAgY2FycnkgPSBjYXJyeSA8PCBmcm9tIHwgbjI7XG4gICAgICAgIGlmIChwb3MgKyBmcm9tID4gMzIpXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBjb252ZXJ0UmFkaXgyOiBjYXJyeSBvdmVyZmxvdyBwb3M9JHtwb3N9IGZyb209JHtmcm9tfWApO1xuICAgICAgICBwb3MgKz0gZnJvbTtcbiAgICAgICAgZm9yICg7IHBvcyA+PSB0bzsgcG9zIC09IHRvKVxuICAgICAgICAgIHJlcy5wdXNoKChjYXJyeSA+PiBwb3MgLSB0byAmIG1hc2spID4+PiAwKTtcbiAgICAgICAgY2FycnkgJj0gMiAqKiBwb3MgLSAxO1xuICAgICAgfVxuICAgICAgY2FycnkgPSBjYXJyeSA8PCB0byAtIHBvcyAmIG1hc2s7XG4gICAgICBpZiAoIXBhZGRpbmcyICYmIHBvcyA+PSBmcm9tKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeGNlc3MgcGFkZGluZ1wiKTtcbiAgICAgIGlmICghcGFkZGluZzIgJiYgY2FycnkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgTm9uLXplcm8gcGFkZGluZzogJHtjYXJyeX1gKTtcbiAgICAgIGlmIChwYWRkaW5nMiAmJiBwb3MgPiAwKVxuICAgICAgICByZXMucHVzaChjYXJyeSA+Pj4gMCk7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBmdW5jdGlvbiByYWRpeChudW0pIHtcbiAgICAgIGFzc2VydE51bWJlcihudW0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZW5jb2RlOiAoYnl0ZXMyKSA9PiB7XG4gICAgICAgICAgaWYgKCEoYnl0ZXMyIGluc3RhbmNlb2YgVWludDhBcnJheSkpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJyYWRpeC5lbmNvZGUgaW5wdXQgc2hvdWxkIGJlIFVpbnQ4QXJyYXlcIik7XG4gICAgICAgICAgcmV0dXJuIGNvbnZlcnRSYWRpeChBcnJheS5mcm9tKGJ5dGVzMiksIDIgKiogOCwgbnVtKTtcbiAgICAgICAgfSxcbiAgICAgICAgZGVjb2RlOiAoZGlnaXRzKSA9PiB7XG4gICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGRpZ2l0cykgfHwgZGlnaXRzLmxlbmd0aCAmJiB0eXBlb2YgZGlnaXRzWzBdICE9PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmFkaXguZGVjb2RlIGlucHV0IHNob3VsZCBiZSBhcnJheSBvZiBzdHJpbmdzXCIpO1xuICAgICAgICAgIHJldHVybiBVaW50OEFycmF5LmZyb20oY29udmVydFJhZGl4KGRpZ2l0cywgbnVtLCAyICoqIDgpKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmFkaXgyKGJpdHMsIHJldlBhZGRpbmcgPSBmYWxzZSkge1xuICAgICAgYXNzZXJ0TnVtYmVyKGJpdHMpO1xuICAgICAgaWYgKGJpdHMgPD0gMCB8fCBiaXRzID4gMzIpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcInJhZGl4MjogYml0cyBzaG91bGQgYmUgaW4gKDAuLjMyXVwiKTtcbiAgICAgIGlmIChyYWRpeDJjYXJyeSg4LCBiaXRzKSA+IDMyIHx8IHJhZGl4MmNhcnJ5KGJpdHMsIDgpID4gMzIpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcInJhZGl4MjogY2Fycnkgb3ZlcmZsb3dcIik7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBlbmNvZGU6IChieXRlczIpID0+IHtcbiAgICAgICAgICBpZiAoIShieXRlczIgaW5zdGFuY2VvZiBVaW50OEFycmF5KSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInJhZGl4Mi5lbmNvZGUgaW5wdXQgc2hvdWxkIGJlIFVpbnQ4QXJyYXlcIik7XG4gICAgICAgICAgcmV0dXJuIGNvbnZlcnRSYWRpeDIoQXJyYXkuZnJvbShieXRlczIpLCA4LCBiaXRzLCAhcmV2UGFkZGluZyk7XG4gICAgICAgIH0sXG4gICAgICAgIGRlY29kZTogKGRpZ2l0cykgPT4ge1xuICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShkaWdpdHMpIHx8IGRpZ2l0cy5sZW5ndGggJiYgdHlwZW9mIGRpZ2l0c1swXSAhPT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInJhZGl4Mi5kZWNvZGUgaW5wdXQgc2hvdWxkIGJlIGFycmF5IG9mIHN0cmluZ3NcIik7XG4gICAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkuZnJvbShjb252ZXJ0UmFkaXgyKGRpZ2l0cywgYml0cywgOCwgcmV2UGFkZGluZykpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiB1bnNhZmVXcmFwcGVyKGZuKSB7XG4gICAgICBpZiAodHlwZW9mIGZuICE9PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcInVuc2FmZVdyYXBwZXIgZm4gc2hvdWxkIGJlIGZ1bmN0aW9uXCIpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKC4uLmFyZ3MpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gZm4uYXBwbHkobnVsbCwgYXJncyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY2hlY2tzdW0obGVuLCBmbikge1xuICAgICAgYXNzZXJ0TnVtYmVyKGxlbik7XG4gICAgICBpZiAodHlwZW9mIGZuICE9PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImNoZWNrc3VtIGZuIHNob3VsZCBiZSBmdW5jdGlvblwiKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVuY29kZShkYXRhKSB7XG4gICAgICAgICAgaWYgKCEoZGF0YSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY2hlY2tzdW0uZW5jb2RlOiBpbnB1dCBzaG91bGQgYmUgVWludDhBcnJheVwiKTtcbiAgICAgICAgICBjb25zdCBjaGVja3N1bTIgPSBmbihkYXRhKS5zbGljZSgwLCBsZW4pO1xuICAgICAgICAgIGNvbnN0IHJlcyA9IG5ldyBVaW50OEFycmF5KGRhdGEubGVuZ3RoICsgbGVuKTtcbiAgICAgICAgICByZXMuc2V0KGRhdGEpO1xuICAgICAgICAgIHJlcy5zZXQoY2hlY2tzdW0yLCBkYXRhLmxlbmd0aCk7XG4gICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfSxcbiAgICAgICAgZGVjb2RlKGRhdGEpIHtcbiAgICAgICAgICBpZiAoIShkYXRhIGluc3RhbmNlb2YgVWludDhBcnJheSkpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjaGVja3N1bS5kZWNvZGU6IGlucHV0IHNob3VsZCBiZSBVaW50OEFycmF5XCIpO1xuICAgICAgICAgIGNvbnN0IHBheWxvYWQgPSBkYXRhLnNsaWNlKDAsIC1sZW4pO1xuICAgICAgICAgIGNvbnN0IG5ld0NoZWNrc3VtID0gZm4ocGF5bG9hZCkuc2xpY2UoMCwgbGVuKTtcbiAgICAgICAgICBjb25zdCBvbGRDaGVja3N1bSA9IGRhdGEuc2xpY2UoLWxlbik7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKylcbiAgICAgICAgICAgIGlmIChuZXdDaGVja3N1bVtpXSAhPT0gb2xkQ2hlY2tzdW1baV0pXG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgY2hlY2tzdW1cIik7XG4gICAgICAgICAgcmV0dXJuIHBheWxvYWQ7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICAgIGV4cG9ydHMudXRpbHMgPSB7YWxwaGFiZXQsIGNoYWluLCBjaGVja3N1bSwgcmFkaXgsIHJhZGl4Miwgam9pbiwgcGFkZGluZ307XG4gICAgZXhwb3J0cy5iYXNlMTYgPSBjaGFpbihyYWRpeDIoNCksIGFscGhhYmV0KFwiMDEyMzQ1Njc4OUFCQ0RFRlwiKSwgam9pbihcIlwiKSk7XG4gICAgZXhwb3J0cy5iYXNlMzIgPSBjaGFpbihyYWRpeDIoNSksIGFscGhhYmV0KFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVoyMzQ1NjdcIiksIHBhZGRpbmcoNSksIGpvaW4oXCJcIikpO1xuICAgIGV4cG9ydHMuYmFzZTMyaGV4ID0gY2hhaW4ocmFkaXgyKDUpLCBhbHBoYWJldChcIjAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWXCIpLCBwYWRkaW5nKDUpLCBqb2luKFwiXCIpKTtcbiAgICBleHBvcnRzLmJhc2UzMmNyb2NrZm9yZCA9IGNoYWluKHJhZGl4Mig1KSwgYWxwaGFiZXQoXCIwMTIzNDU2Nzg5QUJDREVGR0hKS01OUFFSU1RWV1hZWlwiKSwgam9pbihcIlwiKSwgbm9ybWFsaXplKChzMikgPT4gczIudG9VcHBlckNhc2UoKS5yZXBsYWNlKC9PL2csIFwiMFwiKS5yZXBsYWNlKC9bSUxdL2csIFwiMVwiKSkpO1xuICAgIGV4cG9ydHMuYmFzZTY0ID0gY2hhaW4ocmFkaXgyKDYpLCBhbHBoYWJldChcIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky9cIiksIHBhZGRpbmcoNiksIGpvaW4oXCJcIikpO1xuICAgIGV4cG9ydHMuYmFzZTY0dXJsID0gY2hhaW4ocmFkaXgyKDYpLCBhbHBoYWJldChcIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5LV9cIiksIHBhZGRpbmcoNiksIGpvaW4oXCJcIikpO1xuICAgIHZhciBnZW5CYXNlNTggPSAoYWJjKSA9PiBjaGFpbihyYWRpeCg1OCksIGFscGhhYmV0KGFiYyksIGpvaW4oXCJcIikpO1xuICAgIGV4cG9ydHMuYmFzZTU4ID0gZ2VuQmFzZTU4KFwiMTIzNDU2Nzg5QUJDREVGR0hKS0xNTlBRUlNUVVZXWFlaYWJjZGVmZ2hpamttbm9wcXJzdHV2d3h5elwiKTtcbiAgICBleHBvcnRzLmJhc2U1OGZsaWNrciA9IGdlbkJhc2U1OChcIjEyMzQ1Njc4OWFiY2RlZmdoaWprbW5vcHFyc3R1dnd4eXpBQkNERUZHSEpLTE1OUFFSU1RVVldYWVpcIik7XG4gICAgZXhwb3J0cy5iYXNlNTh4cnAgPSBnZW5CYXNlNTgoXCJycHNobmFmMzl3QlVETkVHSEpLTE00UFFSU1Q3VldYWVoyYmNkZUNnNjVqa204b0ZxaTF0dXZBeHl6XCIpO1xuICAgIHZhciBYTVJfQkxPQ0tfTEVOID0gWzAsIDIsIDMsIDUsIDYsIDcsIDksIDEwLCAxMV07XG4gICAgZXhwb3J0cy5iYXNlNTh4bXIgPSB7XG4gICAgICBlbmNvZGUoZGF0YSkge1xuICAgICAgICBsZXQgcmVzID0gXCJcIjtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSArPSA4KSB7XG4gICAgICAgICAgY29uc3QgYmxvY2sgPSBkYXRhLnN1YmFycmF5KGksIGkgKyA4KTtcbiAgICAgICAgICByZXMgKz0gZXhwb3J0cy5iYXNlNTguZW5jb2RlKGJsb2NrKS5wYWRTdGFydChYTVJfQkxPQ0tfTEVOW2Jsb2NrLmxlbmd0aF0sIFwiMVwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgfSxcbiAgICAgIGRlY29kZShzdHIpIHtcbiAgICAgICAgbGV0IHJlcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkgKz0gMTEpIHtcbiAgICAgICAgICBjb25zdCBzbGljZSA9IHN0ci5zbGljZShpLCBpICsgMTEpO1xuICAgICAgICAgIGNvbnN0IGJsb2NrTGVuID0gWE1SX0JMT0NLX0xFTi5pbmRleE9mKHNsaWNlLmxlbmd0aCk7XG4gICAgICAgICAgY29uc3QgYmxvY2sgPSBleHBvcnRzLmJhc2U1OC5kZWNvZGUoc2xpY2UpO1xuICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgYmxvY2subGVuZ3RoIC0gYmxvY2tMZW47IGorKykge1xuICAgICAgICAgICAgaWYgKGJsb2NrW2pdICE9PSAwKVxuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJiYXNlNTh4bXI6IHdyb25nIHBhZGRpbmdcIik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlcyA9IHJlcy5jb25jYXQoQXJyYXkuZnJvbShibG9jay5zbGljZShibG9jay5sZW5ndGggLSBibG9ja0xlbikpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gVWludDhBcnJheS5mcm9tKHJlcyk7XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgYmFzZTU4Y2hlY2syID0gKHNoYTI1NjIpID0+IGNoYWluKGNoZWNrc3VtKDQsIChkYXRhKSA9PiBzaGEyNTYyKHNoYTI1NjIoZGF0YSkpKSwgZXhwb3J0cy5iYXNlNTgpO1xuICAgIGV4cG9ydHMuYmFzZTU4Y2hlY2sgPSBiYXNlNThjaGVjazI7XG4gICAgdmFyIEJFQ0hfQUxQSEFCRVQgPSBjaGFpbihhbHBoYWJldChcInFwenJ5OXg4Z2YydHZkdzBzM2puNTRraGNlNm11YTdsXCIpLCBqb2luKFwiXCIpKTtcbiAgICB2YXIgUE9MWU1PRF9HRU5FUkFUT1JTID0gWzk5NjgyNTAxMCwgNjQyODEzNTQ5LCA1MTM4NzQ0MjYsIDEwMjc3NDg4MjksIDcwNTk3OTA1OV07XG4gICAgZnVuY3Rpb24gYmVjaDMyUG9seW1vZChwcmUpIHtcbiAgICAgIGNvbnN0IGIgPSBwcmUgPj4gMjU7XG4gICAgICBsZXQgY2hrID0gKHByZSAmIDMzNTU0NDMxKSA8PCA1O1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBQT0xZTU9EX0dFTkVSQVRPUlMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKChiID4+IGkgJiAxKSA9PT0gMSlcbiAgICAgICAgICBjaGsgXj0gUE9MWU1PRF9HRU5FUkFUT1JTW2ldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNoaztcbiAgICB9XG4gICAgZnVuY3Rpb24gYmVjaENoZWNrc3VtKHByZWZpeCwgd29yZHMsIGVuY29kaW5nQ29uc3QgPSAxKSB7XG4gICAgICBjb25zdCBsZW4gPSBwcmVmaXgubGVuZ3RoO1xuICAgICAgbGV0IGNoayA9IDE7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGMgPSBwcmVmaXguY2hhckNvZGVBdChpKTtcbiAgICAgICAgaWYgKGMgPCAzMyB8fCBjID4gMTI2KVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBwcmVmaXggKCR7cHJlZml4fSlgKTtcbiAgICAgICAgY2hrID0gYmVjaDMyUG9seW1vZChjaGspIF4gYyA+PiA1O1xuICAgICAgfVxuICAgICAgY2hrID0gYmVjaDMyUG9seW1vZChjaGspO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKylcbiAgICAgICAgY2hrID0gYmVjaDMyUG9seW1vZChjaGspIF4gcHJlZml4LmNoYXJDb2RlQXQoaSkgJiAzMTtcbiAgICAgIGZvciAobGV0IHYgb2Ygd29yZHMpXG4gICAgICAgIGNoayA9IGJlY2gzMlBvbHltb2QoY2hrKSBeIHY7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDY7IGkrKylcbiAgICAgICAgY2hrID0gYmVjaDMyUG9seW1vZChjaGspO1xuICAgICAgY2hrIF49IGVuY29kaW5nQ29uc3Q7XG4gICAgICByZXR1cm4gQkVDSF9BTFBIQUJFVC5lbmNvZGUoY29udmVydFJhZGl4MihbY2hrICUgMiAqKiAzMF0sIDMwLCA1LCBmYWxzZSkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZW5CZWNoMzIoZW5jb2RpbmcpIHtcbiAgICAgIGNvbnN0IEVOQ09ESU5HX0NPTlNUID0gZW5jb2RpbmcgPT09IFwiYmVjaDMyXCIgPyAxIDogNzM0NTM5OTM5O1xuICAgICAgY29uc3QgX3dvcmRzID0gcmFkaXgyKDUpO1xuICAgICAgY29uc3QgZnJvbVdvcmRzID0gX3dvcmRzLmRlY29kZTtcbiAgICAgIGNvbnN0IHRvV29yZHMgPSBfd29yZHMuZW5jb2RlO1xuICAgICAgY29uc3QgZnJvbVdvcmRzVW5zYWZlID0gdW5zYWZlV3JhcHBlcihmcm9tV29yZHMpO1xuICAgICAgZnVuY3Rpb24gZW5jb2RlMihwcmVmaXgsIHdvcmRzLCBsaW1pdCA9IDkwKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcHJlZml4ICE9PSBcInN0cmluZ1wiKVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgYmVjaDMyLmVuY29kZSBwcmVmaXggc2hvdWxkIGJlIHN0cmluZywgbm90ICR7dHlwZW9mIHByZWZpeH1gKTtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHdvcmRzKSB8fCB3b3Jkcy5sZW5ndGggJiYgdHlwZW9mIHdvcmRzWzBdICE9PSBcIm51bWJlclwiKVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgYmVjaDMyLmVuY29kZSB3b3JkcyBzaG91bGQgYmUgYXJyYXkgb2YgbnVtYmVycywgbm90ICR7dHlwZW9mIHdvcmRzfWApO1xuICAgICAgICBjb25zdCBhY3R1YWxMZW5ndGggPSBwcmVmaXgubGVuZ3RoICsgNyArIHdvcmRzLmxlbmd0aDtcbiAgICAgICAgaWYgKGxpbWl0ICE9PSBmYWxzZSAmJiBhY3R1YWxMZW5ndGggPiBsaW1pdClcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBMZW5ndGggJHthY3R1YWxMZW5ndGh9IGV4Y2VlZHMgbGltaXQgJHtsaW1pdH1gKTtcbiAgICAgICAgcHJlZml4ID0gcHJlZml4LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIHJldHVybiBgJHtwcmVmaXh9MSR7QkVDSF9BTFBIQUJFVC5lbmNvZGUod29yZHMpfSR7YmVjaENoZWNrc3VtKHByZWZpeCwgd29yZHMsIEVOQ09ESU5HX0NPTlNUKX1gO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gZGVjb2RlMihzdHIsIGxpbWl0ID0gOTApIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzdHIgIT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBiZWNoMzIuZGVjb2RlIGlucHV0IHNob3VsZCBiZSBzdHJpbmcsIG5vdCAke3R5cGVvZiBzdHJ9YCk7XG4gICAgICAgIGlmIChzdHIubGVuZ3RoIDwgOCB8fCBsaW1pdCAhPT0gZmFsc2UgJiYgc3RyLmxlbmd0aCA+IGxpbWl0KVxuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFdyb25nIHN0cmluZyBsZW5ndGg6ICR7c3RyLmxlbmd0aH0gKCR7c3RyfSkuIEV4cGVjdGVkICg4Li4ke2xpbWl0fSlgKTtcbiAgICAgICAgY29uc3QgbG93ZXJlZCA9IHN0ci50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoc3RyICE9PSBsb3dlcmVkICYmIHN0ciAhPT0gc3RyLnRvVXBwZXJDYXNlKCkpXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBTdHJpbmcgbXVzdCBiZSBsb3dlcmNhc2Ugb3IgdXBwZXJjYXNlYCk7XG4gICAgICAgIHN0ciA9IGxvd2VyZWQ7XG4gICAgICAgIGNvbnN0IHNlcEluZGV4ID0gc3RyLmxhc3RJbmRleE9mKFwiMVwiKTtcbiAgICAgICAgaWYgKHNlcEluZGV4ID09PSAwIHx8IHNlcEluZGV4ID09PSAtMSlcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYExldHRlciBcIjFcIiBtdXN0IGJlIHByZXNlbnQgYmV0d2VlbiBwcmVmaXggYW5kIGRhdGEgb25seWApO1xuICAgICAgICBjb25zdCBwcmVmaXggPSBzdHIuc2xpY2UoMCwgc2VwSW5kZXgpO1xuICAgICAgICBjb25zdCBfd29yZHMyID0gc3RyLnNsaWNlKHNlcEluZGV4ICsgMSk7XG4gICAgICAgIGlmIChfd29yZHMyLmxlbmd0aCA8IDYpXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRGF0YSBtdXN0IGJlIGF0IGxlYXN0IDYgY2hhcmFjdGVycyBsb25nXCIpO1xuICAgICAgICBjb25zdCB3b3JkcyA9IEJFQ0hfQUxQSEFCRVQuZGVjb2RlKF93b3JkczIpLnNsaWNlKDAsIC02KTtcbiAgICAgICAgY29uc3Qgc3VtID0gYmVjaENoZWNrc3VtKHByZWZpeCwgd29yZHMsIEVOQ09ESU5HX0NPTlNUKTtcbiAgICAgICAgaWYgKCFfd29yZHMyLmVuZHNXaXRoKHN1bSkpXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGNoZWNrc3VtIGluICR7c3RyfTogZXhwZWN0ZWQgXCIke3N1bX1cImApO1xuICAgICAgICByZXR1cm4ge3ByZWZpeCwgd29yZHN9O1xuICAgICAgfVxuICAgICAgY29uc3QgZGVjb2RlVW5zYWZlID0gdW5zYWZlV3JhcHBlcihkZWNvZGUyKTtcbiAgICAgIGZ1bmN0aW9uIGRlY29kZVRvQnl0ZXMoc3RyKSB7XG4gICAgICAgIGNvbnN0IHtwcmVmaXgsIHdvcmRzfSA9IGRlY29kZTIoc3RyLCBmYWxzZSk7XG4gICAgICAgIHJldHVybiB7cHJlZml4LCB3b3JkcywgYnl0ZXM6IGZyb21Xb3Jkcyh3b3Jkcyl9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtlbmNvZGU6IGVuY29kZTIsIGRlY29kZTogZGVjb2RlMiwgZGVjb2RlVG9CeXRlcywgZGVjb2RlVW5zYWZlLCBmcm9tV29yZHMsIGZyb21Xb3Jkc1Vuc2FmZSwgdG9Xb3Jkc307XG4gICAgfVxuICAgIGV4cG9ydHMuYmVjaDMyID0gZ2VuQmVjaDMyKFwiYmVjaDMyXCIpO1xuICAgIGV4cG9ydHMuYmVjaDMybSA9IGdlbkJlY2gzMihcImJlY2gzMm1cIik7XG4gICAgZXhwb3J0cy51dGY4ID0ge1xuICAgICAgZW5jb2RlOiAoZGF0YSkgPT4gbmV3IFRleHREZWNvZGVyKCkuZGVjb2RlKGRhdGEpLFxuICAgICAgZGVjb2RlOiAoc3RyKSA9PiBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoc3RyKVxuICAgIH07XG4gICAgZXhwb3J0cy5oZXggPSBjaGFpbihyYWRpeDIoNCksIGFscGhhYmV0KFwiMDEyMzQ1Njc4OWFiY2RlZlwiKSwgam9pbihcIlwiKSwgbm9ybWFsaXplKChzMikgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBzMiAhPT0gXCJzdHJpbmdcIiB8fCBzMi5sZW5ndGggJSAyKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBoZXguZGVjb2RlOiBleHBlY3RlZCBzdHJpbmcsIGdvdCAke3R5cGVvZiBzMn0gd2l0aCBsZW5ndGggJHtzMi5sZW5ndGh9YCk7XG4gICAgICByZXR1cm4gczIudG9Mb3dlckNhc2UoKTtcbiAgICB9KSk7XG4gICAgdmFyIENPREVSUyA9IHtcbiAgICAgIHV0Zjg6IGV4cG9ydHMudXRmOCxcbiAgICAgIGhleDogZXhwb3J0cy5oZXgsXG4gICAgICBiYXNlMTY6IGV4cG9ydHMuYmFzZTE2LFxuICAgICAgYmFzZTMyOiBleHBvcnRzLmJhc2UzMixcbiAgICAgIGJhc2U2NDogZXhwb3J0cy5iYXNlNjQsXG4gICAgICBiYXNlNjR1cmw6IGV4cG9ydHMuYmFzZTY0dXJsLFxuICAgICAgYmFzZTU4OiBleHBvcnRzLmJhc2U1OCxcbiAgICAgIGJhc2U1OHhtcjogZXhwb3J0cy5iYXNlNTh4bXJcbiAgICB9O1xuICAgIHZhciBjb2RlclR5cGVFcnJvciA9IGBJbnZhbGlkIGVuY29kaW5nIHR5cGUuIEF2YWlsYWJsZSB0eXBlczogJHtPYmplY3Qua2V5cyhDT0RFUlMpLmpvaW4oXCIsIFwiKX1gO1xuICAgIHZhciBieXRlc1RvU3RyaW5nID0gKHR5cGUsIGJ5dGVzMikgPT4ge1xuICAgICAgaWYgKHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiIHx8ICFDT0RFUlMuaGFzT3duUHJvcGVydHkodHlwZSkpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoY29kZXJUeXBlRXJyb3IpO1xuICAgICAgaWYgKCEoYnl0ZXMyIGluc3RhbmNlb2YgVWludDhBcnJheSkpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJieXRlc1RvU3RyaW5nKCkgZXhwZWN0cyBVaW50OEFycmF5XCIpO1xuICAgICAgcmV0dXJuIENPREVSU1t0eXBlXS5lbmNvZGUoYnl0ZXMyKTtcbiAgICB9O1xuICAgIGV4cG9ydHMuYnl0ZXNUb1N0cmluZyA9IGJ5dGVzVG9TdHJpbmc7XG4gICAgZXhwb3J0cy5zdHIgPSBleHBvcnRzLmJ5dGVzVG9TdHJpbmc7XG4gICAgdmFyIHN0cmluZ1RvQnl0ZXMgPSAodHlwZSwgc3RyKSA9PiB7XG4gICAgICBpZiAoIUNPREVSUy5oYXNPd25Qcm9wZXJ0eSh0eXBlKSlcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihjb2RlclR5cGVFcnJvcik7XG4gICAgICBpZiAodHlwZW9mIHN0ciAhPT0gXCJzdHJpbmdcIilcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcInN0cmluZ1RvQnl0ZXMoKSBleHBlY3RzIHN0cmluZ1wiKTtcbiAgICAgIHJldHVybiBDT0RFUlNbdHlwZV0uZGVjb2RlKHN0cik7XG4gICAgfTtcbiAgICBleHBvcnRzLnN0cmluZ1RvQnl0ZXMgPSBzdHJpbmdUb0J5dGVzO1xuICAgIGV4cG9ydHMuYnl0ZXMgPSBleHBvcnRzLnN0cmluZ1RvQnl0ZXM7XG4gIH1cbn0pO1xuZnVuY3Rpb24gY3JlYXRlQ29udGV4dChzaXplID0gNDA5Nikge1xuICBjb25zdCBidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoc2l6ZSk7XG4gIHJldHVybiB7XG4gICAgaTogMCxcbiAgICB2aWV3OiBuZXcgRGF0YVZpZXcoYnVmZmVyKSxcbiAgICBieXRlczogbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKVxuICB9O1xufVxuZnVuY3Rpb24gZ3Jvd0NvbnRleHQoY3R4KSB7XG4gIGN0eC5ieXRlcyA9IG5ldyBVaW50OEFycmF5KGN0eC5ieXRlcy5sZW5ndGggKiAyKTtcbiAgY3R4LnZpZXcgPSBuZXcgRGF0YVZpZXcoY3R4LmJ5dGVzLmJ1ZmZlcik7XG59XG5mdW5jdGlvbiBjb250ZXh0U2VyKGN0eCwgc2VyLCBkYXRhKSB7XG4gIHdoaWxlICh0cnVlKSB7XG4gICAgY29uc3QgbGltaXQgPSBjdHguYnl0ZXMubGVuZ3RoIC0gODtcbiAgICBjdHguaSA9IDA7XG4gICAgdHJ5IHtcbiAgICAgIHNlcihjdHgsIGRhdGEpO1xuICAgICAgaWYgKGN0eC5pIDwgbGltaXQpXG4gICAgICAgIHJldHVybiBjdHguYnl0ZXM7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGlmIChjdHguaSA8IGxpbWl0KVxuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gICAgZ3Jvd0NvbnRleHQoY3R4KTtcbiAgfVxufVxuZnVuY3Rpb24gY29udGV4dERlcyhjdHgsIGRlcywgYnl0ZXMyKSB7XG4gIGNvbnN0IHtsZW5ndGh9ID0gYnl0ZXMyO1xuICBpZiAobGVuZ3RoIDwgNDA5Nikge1xuICAgIGN0eC5ieXRlcy5zZXQoYnl0ZXMyKTtcbiAgICBjdHguaSA9IDA7XG4gICAgY29uc3QgZGF0YSA9IGRlcyhjdHgpO1xuICAgIGlmIChjdHguaSA+IGxlbmd0aClcbiAgICAgIHRocm93IFJhbmdlRXJyb3IoKTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZGVzKGNvbnRleHRGcm9tQnl0ZXMoYnl0ZXMyKSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGNvbnRleHRGcm9tQnl0ZXMoYXJyYXkyKSB7XG4gIHJldHVybiB7XG4gICAgaTogMCxcbiAgICBieXRlczogYXJyYXkyLFxuICAgIHZpZXc6IG5ldyBEYXRhVmlldyhhcnJheTIuYnVmZmVyLCBhcnJheTIuYnl0ZU9mZnNldCwgYXJyYXkyLmJ5dGVMZW5ndGgpXG4gIH07XG59XG5mdW5jdGlvbiBkZWZpbmUoc2VyLCBkZXMpIHtcbiAgcmV0dXJuIHtzZXIsIGRlc307XG59XG52YXIgbGF0aW4xID0ge1xuICBlbmNvZGUoY3R4LCBkYXRhKSB7XG4gICAgY29uc3Qge2xlbmd0aH0gPSBkYXRhO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGN0eC52aWV3LnNldFVpbnQ4KGN0eC5pKyssIGRhdGEuY2hhckNvZGVBdChpKSk7XG4gICAgfVxuICB9LFxuICBkZWNvZGUoY3R4LCBzaXplKSB7XG4gICAgY29uc3QgY29kZXMgPSBuZXcgQXJyYXkoc2l6ZSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaXplOyBpKyspIHtcbiAgICAgIGNvZGVzW2ldID0gY3R4LnZpZXcuZ2V0VWludDgoY3R4LmkrKyk7XG4gICAgfVxuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKC4uLmNvZGVzKTtcbiAgfVxufTtcbnZhciBzdHJpbmcgPSAoZW5jb2RpbmcsIGhlYWRTZCkgPT4gZGVmaW5lKChjdHgsIGRhdGEpID0+IHtcbiAgY29uc3QgaGVhZCA9IGN0eC5pO1xuICBoZWFkU2Quc2VyKGN0eCwgZGF0YS5sZW5ndGgpO1xuICBjb25zdCBiZWdpbiA9IGN0eC5pO1xuICBjb25zdCBoZWFkU2l6ZSA9IGJlZ2luIC0gaGVhZDtcbiAgZW5jb2RpbmcuZW5jb2RlKGN0eCwgZGF0YSk7XG4gIGNvbnN0IGVuZCA9IGN0eC5pO1xuICBjb25zdCBzaXplID0gZW5kIC0gYmVnaW47XG4gIGlmIChzaXplID09PSBkYXRhLmxlbmd0aClcbiAgICByZXR1cm47XG4gIGhlYWRTZC5zZXIoY3R4LCBzaXplKTtcbiAgY29uc3QgcmVxdWlyZWRIZWFkU2l6ZSA9IGN0eC5pIC0gZW5kO1xuICBpZiAoaGVhZFNpemUgIT09IHJlcXVpcmVkSGVhZFNpemUpIHtcbiAgICBjdHguYnl0ZXMuY29weVdpdGhpbihoZWFkICsgcmVxdWlyZWRIZWFkU2l6ZSwgYmVnaW4sIGVuZCk7XG4gIH1cbiAgY3R4LmkgPSBoZWFkO1xuICBoZWFkU2Quc2VyKGN0eCwgc2l6ZSk7XG4gIGN0eC5pID0gZW5kICsgKHJlcXVpcmVkSGVhZFNpemUgLSBoZWFkU2l6ZSk7XG59LCAoY3R4KSA9PiBlbmNvZGluZy5kZWNvZGUoY3R4LCBoZWFkU2QuZGVzKGN0eCkpKTtcbnZhciBieXRlcyA9IChoZWFkU2QpID0+IGRlZmluZSgoY3R4LCBkYXRhKSA9PiB7XG4gIGNvbnN0IHtieXRlTGVuZ3RofSA9IGRhdGE7XG4gIGhlYWRTZC5zZXIoY3R4LCBieXRlTGVuZ3RoKTtcbiAgY3R4LmJ5dGVzLnNldChkYXRhLCBjdHguaSk7XG4gIGN0eC5pICs9IGJ5dGVMZW5ndGg7XG59LCAoY3R4KSA9PiB7XG4gIGNvbnN0IGJ5dGVMZW5ndGggPSBoZWFkU2QuZGVzKGN0eCk7XG4gIHJldHVybiBjdHguYnl0ZXMuc3ViYXJyYXkoY3R4LmksIGN0eC5pICs9IGJ5dGVMZW5ndGgpO1xufSk7XG52YXIgYm9vbGVhbiA9IGRlZmluZSgoY3R4LCBkYXRhKSA9PiB2b2lkIGN0eC52aWV3LnNldFVpbnQ4KGN0eC5pKyssICtkYXRhKSwgKGN0eCkgPT4gISFjdHgudmlldy5nZXRVaW50OChjdHguaSsrKSk7XG5mdW5jdGlvbiB1c2Uoe3NlciwgZGVzfSkge1xuICBjb25zdCBjdHggPSBjcmVhdGVDb250ZXh0KCk7XG4gIHJldHVybiB7XG4gICAgc2VyLFxuICAgIGRlcyxcbiAgICB0b0J5dGVzOiAoZGF0YSkgPT4gY29udGV4dFNlcihjdHgsIHNlciwgZGF0YSkuc2xpY2UoMCwgY3R4LmkpLFxuICAgIHRvVW5zYWZlQnl0ZXM6IChkYXRhKSA9PiBjb250ZXh0U2VyKGN0eCwgc2VyLCBkYXRhKS5zdWJhcnJheSgwLCBjdHguaSksXG4gICAgZnJvbUJ5dGVzOiAoYnl0ZXMyKSA9PiBjb250ZXh0RGVzKGN0eCwgZGVzLCBieXRlczIpXG4gIH07XG59XG52YXIgdWludDggPSBkZWZpbmUoKGN0eCwgZGF0YSkgPT4gY3R4LnZpZXcuc2V0VWludDgoY3R4LmkrKywgZGF0YSksIChjdHgpID0+IGN0eC52aWV3LmdldFVpbnQ4KGN0eC5pKyspKTtcbnZhciBiaWdVaW50NjQgPSBkZWZpbmUoKGN0eCwgZGF0YSkgPT4ge1xuICBjdHgudmlldy5zZXRCaWdVaW50NjQoY3R4LmksIGRhdGEpO1xuICBjdHguaSArPSA4O1xufSwgKGN0eCkgPT4ge1xuICBjb25zdCBkYXRhID0gY3R4LnZpZXcuZ2V0QmlnVWludDY0KGN0eC5pKTtcbiAgY3R4LmkgKz0gODtcbiAgcmV0dXJuIGRhdGE7XG59KTtcbnZhciBzdHJ1Y3QgPSAoZGVmaW5pdGlvbikgPT4ge1xuICBjb25zdCBvYmogPSBkZWZpbml0aW9uIGluc3RhbmNlb2YgQXJyYXkgPyAoKSA9PiBbXSA6ICgpID0+ICh7fSk7XG4gIHJldHVybiBkZWZpbmUoKGN0eCwgZGF0YSkgPT4ge1xuICAgIGZvciAoY29uc3Qga2V5IGluIGRlZmluaXRpb24pIHtcbiAgICAgIGRlZmluaXRpb25ba2V5XS5zZXIoY3R4LCBkYXRhW2tleV0pO1xuICAgIH1cbiAgfSwgKGN0eCkgPT4ge1xuICAgIGNvbnN0IGRhdGEgPSBvYmooKTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBkZWZpbml0aW9uKSB7XG4gICAgICBkYXRhW2tleV0gPSBkZWZpbml0aW9uW2tleV0uZGVzKGN0eCk7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9KTtcbn07XG52YXIgaW1wb3J0X3NoYTI1NiA9IF9fdG9FU00yKHJlcXVpcmVfc2hhMjU2KCksIDEpO1xudmFyIGltcG9ydF9oYWxmc2lwaGFzaCA9IF9fdG9FU00yKHJlcXVpcmVfaGFsZnNpcGhhc2goKSwgMSk7XG52YXIgaW1wb3J0X2NvbnN0YW50X3RpbWUgPSBfX3RvRVNNMihyZXF1aXJlX2NvbnN0YW50X3RpbWUoKSwgMSk7XG52YXIgdXRpbDI7XG4oZnVuY3Rpb24odXRpbDIyKSB7XG4gIGZ1bmN0aW9uIGFzc2VydEVxdWFsKF9jb25kKSB7XG4gIH1cbiAgdXRpbDIyLmFzc2VydEVxdWFsID0gYXNzZXJ0RXF1YWw7XG4gIGZ1bmN0aW9uIGFzc2VydE5ldmVyKF94KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCk7XG4gIH1cbiAgdXRpbDIyLmFzc2VydE5ldmVyID0gYXNzZXJ0TmV2ZXI7XG4gIHV0aWwyMi5hcnJheVRvRW51bSA9IChpdGVtcykgPT4ge1xuICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgIGZvciAoY29uc3QgaXRlbSBvZiBpdGVtcykge1xuICAgICAgb2JqW2l0ZW1dID0gaXRlbTtcbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbiAgfTtcbiAgdXRpbDIyLmdldFZhbGlkRW51bVZhbHVlcyA9IChvYmopID0+IHtcbiAgICBjb25zdCB2YWxpZEtleXMgPSB1dGlsMjIub2JqZWN0S2V5cyhvYmopLmZpbHRlcigoaykgPT4gdHlwZW9mIG9ialtvYmpba11dICE9PSBcIm51bWJlclwiKTtcbiAgICBjb25zdCBmaWx0ZXJlZCA9IHt9O1xuICAgIGZvciAoY29uc3QgayBvZiB2YWxpZEtleXMpIHtcbiAgICAgIGZpbHRlcmVkW2tdID0gb2JqW2tdO1xuICAgIH1cbiAgICByZXR1cm4gdXRpbDIyLm9iamVjdFZhbHVlcyhmaWx0ZXJlZCk7XG4gIH07XG4gIHV0aWwyMi5vYmplY3RWYWx1ZXMgPSAob2JqKSA9PiB7XG4gICAgcmV0dXJuIHV0aWwyMi5vYmplY3RLZXlzKG9iaikubWFwKGZ1bmN0aW9uKGUpIHtcbiAgICAgIHJldHVybiBvYmpbZV07XG4gICAgfSk7XG4gIH07XG4gIHV0aWwyMi5vYmplY3RLZXlzID0gdHlwZW9mIE9iamVjdC5rZXlzID09PSBcImZ1bmN0aW9uXCIgPyAob2JqKSA9PiBPYmplY3Qua2V5cyhvYmopIDogKG9iamVjdCkgPT4ge1xuICAgIGNvbnN0IGtleXMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSB7XG4gICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ga2V5cztcbiAgfTtcbiAgdXRpbDIyLmZpbmQgPSAoYXJyLCBjaGVja2VyKSA9PiB7XG4gICAgZm9yIChjb25zdCBpdGVtIG9mIGFycikge1xuICAgICAgaWYgKGNoZWNrZXIoaXRlbSkpXG4gICAgICAgIHJldHVybiBpdGVtO1xuICAgIH1cbiAgICByZXR1cm4gdm9pZCAwO1xuICB9O1xuICB1dGlsMjIuaXNJbnRlZ2VyID0gdHlwZW9mIE51bWJlci5pc0ludGVnZXIgPT09IFwiZnVuY3Rpb25cIiA/ICh2YWwpID0+IE51bWJlci5pc0ludGVnZXIodmFsKSA6ICh2YWwpID0+IHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgJiYgaXNGaW5pdGUodmFsKSAmJiBNYXRoLmZsb29yKHZhbCkgPT09IHZhbDtcbiAgZnVuY3Rpb24gam9pblZhbHVlcyhhcnJheSwgc2VwYXJhdG9yID0gXCIgfCBcIikge1xuICAgIHJldHVybiBhcnJheS5tYXAoKHZhbCkgPT4gdHlwZW9mIHZhbCA9PT0gXCJzdHJpbmdcIiA/IGAnJHt2YWx9J2AgOiB2YWwpLmpvaW4oc2VwYXJhdG9yKTtcbiAgfVxuICB1dGlsMjIuam9pblZhbHVlcyA9IGpvaW5WYWx1ZXM7XG59KSh1dGlsMiB8fCAodXRpbDIgPSB7fSkpO1xudmFyIFpvZFBhcnNlZFR5cGUyID0gdXRpbDIuYXJyYXlUb0VudW0oW1xuICBcInN0cmluZ1wiLFxuICBcIm5hblwiLFxuICBcIm51bWJlclwiLFxuICBcImludGVnZXJcIixcbiAgXCJmbG9hdFwiLFxuICBcImJvb2xlYW5cIixcbiAgXCJkYXRlXCIsXG4gIFwiYmlnaW50XCIsXG4gIFwic3ltYm9sXCIsXG4gIFwiZnVuY3Rpb25cIixcbiAgXCJ1bmRlZmluZWRcIixcbiAgXCJudWxsXCIsXG4gIFwiYXJyYXlcIixcbiAgXCJvYmplY3RcIixcbiAgXCJ1bmtub3duXCIsXG4gIFwicHJvbWlzZVwiLFxuICBcInZvaWRcIixcbiAgXCJuZXZlclwiLFxuICBcIm1hcFwiLFxuICBcInNldFwiXG5dKTtcbnZhciBnZXRQYXJzZWRUeXBlMiA9IChkYXRhKSA9PiB7XG4gIGNvbnN0IHQgPSB0eXBlb2YgZGF0YTtcbiAgc3dpdGNoICh0KSB7XG4gICAgY2FzZSBcInVuZGVmaW5lZFwiOlxuICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUyLnVuZGVmaW5lZDtcbiAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZTIuc3RyaW5nO1xuICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICAgIHJldHVybiBpc05hTihkYXRhKSA/IFpvZFBhcnNlZFR5cGUyLm5hbiA6IFpvZFBhcnNlZFR5cGUyLm51bWJlcjtcbiAgICBjYXNlIFwiYm9vbGVhblwiOlxuICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUyLmJvb2xlYW47XG4gICAgY2FzZSBcImZ1bmN0aW9uXCI6XG4gICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZTIuZnVuY3Rpb247XG4gICAgY2FzZSBcImJpZ2ludFwiOlxuICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUyLmJpZ2ludDtcbiAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZTIuYXJyYXk7XG4gICAgICB9XG4gICAgICBpZiAoZGF0YSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZTIubnVsbDtcbiAgICAgIH1cbiAgICAgIGlmIChkYXRhLnRoZW4gJiYgdHlwZW9mIGRhdGEudGhlbiA9PT0gXCJmdW5jdGlvblwiICYmIGRhdGEuY2F0Y2ggJiYgdHlwZW9mIGRhdGEuY2F0Y2ggPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZTIucHJvbWlzZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgTWFwICE9PSBcInVuZGVmaW5lZFwiICYmIGRhdGEgaW5zdGFuY2VvZiBNYXApIHtcbiAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUyLm1hcDtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgU2V0ICE9PSBcInVuZGVmaW5lZFwiICYmIGRhdGEgaW5zdGFuY2VvZiBTZXQpIHtcbiAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUyLnNldDtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgRGF0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkYXRhIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZTIuZGF0ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlMi5vYmplY3Q7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlMi51bmtub3duO1xuICB9XG59O1xudmFyIFpvZElzc3VlQ29kZTIgPSB1dGlsMi5hcnJheVRvRW51bShbXG4gIFwiaW52YWxpZF90eXBlXCIsXG4gIFwiaW52YWxpZF9saXRlcmFsXCIsXG4gIFwiY3VzdG9tXCIsXG4gIFwiaW52YWxpZF91bmlvblwiLFxuICBcImludmFsaWRfdW5pb25fZGlzY3JpbWluYXRvclwiLFxuICBcImludmFsaWRfZW51bV92YWx1ZVwiLFxuICBcInVucmVjb2duaXplZF9rZXlzXCIsXG4gIFwiaW52YWxpZF9hcmd1bWVudHNcIixcbiAgXCJpbnZhbGlkX3JldHVybl90eXBlXCIsXG4gIFwiaW52YWxpZF9kYXRlXCIsXG4gIFwiaW52YWxpZF9zdHJpbmdcIixcbiAgXCJ0b29fc21hbGxcIixcbiAgXCJ0b29fYmlnXCIsXG4gIFwiaW52YWxpZF9pbnRlcnNlY3Rpb25fdHlwZXNcIixcbiAgXCJub3RfbXVsdGlwbGVfb2ZcIlxuXSk7XG52YXIgcXVvdGVsZXNzSnNvbjIgPSAob2JqKSA9PiB7XG4gIGNvbnN0IGpzb24gPSBKU09OLnN0cmluZ2lmeShvYmosIG51bGwsIDIpO1xuICByZXR1cm4ganNvbi5yZXBsYWNlKC9cIihbXlwiXSspXCI6L2csIFwiJDE6XCIpO1xufTtcbnZhciBab2RFcnJvcjIgPSBjbGFzcyBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IoaXNzdWVzKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmlzc3VlcyA9IFtdO1xuICAgIHRoaXMuYWRkSXNzdWUgPSAoc3ViKSA9PiB7XG4gICAgICB0aGlzLmlzc3VlcyA9IFsuLi50aGlzLmlzc3Vlcywgc3ViXTtcbiAgICB9O1xuICAgIHRoaXMuYWRkSXNzdWVzID0gKHN1YnMgPSBbXSkgPT4ge1xuICAgICAgdGhpcy5pc3N1ZXMgPSBbLi4udGhpcy5pc3N1ZXMsIC4uLnN1YnNdO1xuICAgIH07XG4gICAgY29uc3QgYWN0dWFsUHJvdG8gPSBuZXcudGFyZ2V0LnByb3RvdHlwZTtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgYWN0dWFsUHJvdG8pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9fcHJvdG9fXyA9IGFjdHVhbFByb3RvO1xuICAgIH1cbiAgICB0aGlzLm5hbWUgPSBcIlpvZEVycm9yXCI7XG4gICAgdGhpcy5pc3N1ZXMgPSBpc3N1ZXM7XG4gIH1cbiAgZ2V0IGVycm9ycygpIHtcbiAgICByZXR1cm4gdGhpcy5pc3N1ZXM7XG4gIH1cbiAgZm9ybWF0KF9tYXBwZXIpIHtcbiAgICBjb25zdCBtYXBwZXIgPSBfbWFwcGVyIHx8IGZ1bmN0aW9uKGlzc3VlKSB7XG4gICAgICByZXR1cm4gaXNzdWUubWVzc2FnZTtcbiAgICB9O1xuICAgIGNvbnN0IGZpZWxkRXJyb3JzID0ge19lcnJvcnM6IFtdfTtcbiAgICBjb25zdCBwcm9jZXNzRXJyb3IgPSAoZXJyb3IpID0+IHtcbiAgICAgIGZvciAoY29uc3QgaXNzdWUgb2YgZXJyb3IuaXNzdWVzKSB7XG4gICAgICAgIGlmIChpc3N1ZS5jb2RlID09PSBcImludmFsaWRfdW5pb25cIikge1xuICAgICAgICAgIGlzc3VlLnVuaW9uRXJyb3JzLm1hcChwcm9jZXNzRXJyb3IpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzc3VlLmNvZGUgPT09IFwiaW52YWxpZF9yZXR1cm5fdHlwZVwiKSB7XG4gICAgICAgICAgcHJvY2Vzc0Vycm9yKGlzc3VlLnJldHVyblR5cGVFcnJvcik7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNzdWUuY29kZSA9PT0gXCJpbnZhbGlkX2FyZ3VtZW50c1wiKSB7XG4gICAgICAgICAgcHJvY2Vzc0Vycm9yKGlzc3VlLmFyZ3VtZW50c0Vycm9yKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc3N1ZS5wYXRoLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGZpZWxkRXJyb3JzLl9lcnJvcnMucHVzaChtYXBwZXIoaXNzdWUpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsZXQgY3VyciA9IGZpZWxkRXJyb3JzO1xuICAgICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgICB3aGlsZSAoaSA8IGlzc3VlLnBhdGgubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBlbCA9IGlzc3VlLnBhdGhbaV07XG4gICAgICAgICAgICBjb25zdCB0ZXJtaW5hbCA9IGkgPT09IGlzc3VlLnBhdGgubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIGlmICghdGVybWluYWwpIHtcbiAgICAgICAgICAgICAgY3VycltlbF0gPSBjdXJyW2VsXSB8fCB7X2Vycm9yczogW119O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY3VycltlbF0gPSBjdXJyW2VsXSB8fCB7X2Vycm9yczogW119O1xuICAgICAgICAgICAgICBjdXJyW2VsXS5fZXJyb3JzLnB1c2gobWFwcGVyKGlzc3VlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJyID0gY3VycltlbF07XG4gICAgICAgICAgICBpKys7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBwcm9jZXNzRXJyb3IodGhpcyk7XG4gICAgcmV0dXJuIGZpZWxkRXJyb3JzO1xuICB9XG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1lc3NhZ2U7XG4gIH1cbiAgZ2V0IG1lc3NhZ2UoKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMuaXNzdWVzLCBqc29uU3RyaW5naWZ5UmVwbGFjZXIyLCAyKTtcbiAgfVxuICBnZXQgaXNFbXB0eSgpIHtcbiAgICByZXR1cm4gdGhpcy5pc3N1ZXMubGVuZ3RoID09PSAwO1xuICB9XG4gIGZsYXR0ZW4obWFwcGVyID0gKGlzc3VlKSA9PiBpc3N1ZS5tZXNzYWdlKSB7XG4gICAgY29uc3QgZmllbGRFcnJvcnMgPSB7fTtcbiAgICBjb25zdCBmb3JtRXJyb3JzID0gW107XG4gICAgZm9yIChjb25zdCBzdWIgb2YgdGhpcy5pc3N1ZXMpIHtcbiAgICAgIGlmIChzdWIucGF0aC5sZW5ndGggPiAwKSB7XG4gICAgICAgIGZpZWxkRXJyb3JzW3N1Yi5wYXRoWzBdXSA9IGZpZWxkRXJyb3JzW3N1Yi5wYXRoWzBdXSB8fCBbXTtcbiAgICAgICAgZmllbGRFcnJvcnNbc3ViLnBhdGhbMF1dLnB1c2gobWFwcGVyKHN1YikpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9ybUVycm9ycy5wdXNoKG1hcHBlcihzdWIpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtmb3JtRXJyb3JzLCBmaWVsZEVycm9yc307XG4gIH1cbiAgZ2V0IGZvcm1FcnJvcnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZmxhdHRlbigpO1xuICB9XG59O1xuWm9kRXJyb3IyLmNyZWF0ZSA9IChpc3N1ZXMpID0+IHtcbiAgY29uc3QgZXJyb3IgPSBuZXcgWm9kRXJyb3IyKGlzc3Vlcyk7XG4gIHJldHVybiBlcnJvcjtcbn07XG52YXIgZGVmYXVsdEVycm9yTWFwMiA9IChpc3N1ZSwgX2N0eCkgPT4ge1xuICBsZXQgbWVzc2FnZTtcbiAgc3dpdGNoIChpc3N1ZS5jb2RlKSB7XG4gICAgY2FzZSBab2RJc3N1ZUNvZGUyLmludmFsaWRfdHlwZTpcbiAgICAgIGlmIChpc3N1ZS5yZWNlaXZlZCA9PT0gWm9kUGFyc2VkVHlwZTIudW5kZWZpbmVkKSB7XG4gICAgICAgIG1lc3NhZ2UgPSBcIlJlcXVpcmVkXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtZXNzYWdlID0gYEV4cGVjdGVkICR7aXNzdWUuZXhwZWN0ZWR9LCByZWNlaXZlZCAke2lzc3VlLnJlY2VpdmVkfWA7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIFpvZElzc3VlQ29kZTIuaW52YWxpZF9saXRlcmFsOlxuICAgICAgbWVzc2FnZSA9IGBJbnZhbGlkIGxpdGVyYWwgdmFsdWUsIGV4cGVjdGVkICR7SlNPTi5zdHJpbmdpZnkoaXNzdWUuZXhwZWN0ZWQsIGpzb25TdHJpbmdpZnlSZXBsYWNlcjIpfWA7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFpvZElzc3VlQ29kZTIudW5yZWNvZ25pemVkX2tleXM6XG4gICAgICBtZXNzYWdlID0gYFVucmVjb2duaXplZCBrZXkocykgaW4gb2JqZWN0OiAke3V0aWwyLmpvaW5WYWx1ZXMoaXNzdWUua2V5cywgXCIsIFwiKX1gO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBab2RJc3N1ZUNvZGUyLmludmFsaWRfdW5pb246XG4gICAgICBtZXNzYWdlID0gYEludmFsaWQgaW5wdXRgO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBab2RJc3N1ZUNvZGUyLmludmFsaWRfdW5pb25fZGlzY3JpbWluYXRvcjpcbiAgICAgIG1lc3NhZ2UgPSBgSW52YWxpZCBkaXNjcmltaW5hdG9yIHZhbHVlLiBFeHBlY3RlZCAke3V0aWwyLmpvaW5WYWx1ZXMoaXNzdWUub3B0aW9ucyl9YDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgWm9kSXNzdWVDb2RlMi5pbnZhbGlkX2VudW1fdmFsdWU6XG4gICAgICBtZXNzYWdlID0gYEludmFsaWQgZW51bSB2YWx1ZS4gRXhwZWN0ZWQgJHt1dGlsMi5qb2luVmFsdWVzKGlzc3VlLm9wdGlvbnMpfSwgcmVjZWl2ZWQgJyR7aXNzdWUucmVjZWl2ZWR9J2A7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFpvZElzc3VlQ29kZTIuaW52YWxpZF9hcmd1bWVudHM6XG4gICAgICBtZXNzYWdlID0gYEludmFsaWQgZnVuY3Rpb24gYXJndW1lbnRzYDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgWm9kSXNzdWVDb2RlMi5pbnZhbGlkX3JldHVybl90eXBlOlxuICAgICAgbWVzc2FnZSA9IGBJbnZhbGlkIGZ1bmN0aW9uIHJldHVybiB0eXBlYDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgWm9kSXNzdWVDb2RlMi5pbnZhbGlkX2RhdGU6XG4gICAgICBtZXNzYWdlID0gYEludmFsaWQgZGF0ZWA7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFpvZElzc3VlQ29kZTIuaW52YWxpZF9zdHJpbmc6XG4gICAgICBpZiAodHlwZW9mIGlzc3VlLnZhbGlkYXRpb24gPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgaWYgKFwic3RhcnRzV2l0aFwiIGluIGlzc3VlLnZhbGlkYXRpb24pIHtcbiAgICAgICAgICBtZXNzYWdlID0gYEludmFsaWQgaW5wdXQ6IG11c3Qgc3RhcnQgd2l0aCBcIiR7aXNzdWUudmFsaWRhdGlvbi5zdGFydHNXaXRofVwiYDtcbiAgICAgICAgfSBlbHNlIGlmIChcImVuZHNXaXRoXCIgaW4gaXNzdWUudmFsaWRhdGlvbikge1xuICAgICAgICAgIG1lc3NhZ2UgPSBgSW52YWxpZCBpbnB1dDogbXVzdCBlbmQgd2l0aCBcIiR7aXNzdWUudmFsaWRhdGlvbi5lbmRzV2l0aH1cImA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdXRpbDIuYXNzZXJ0TmV2ZXIoaXNzdWUudmFsaWRhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaXNzdWUudmFsaWRhdGlvbiAhPT0gXCJyZWdleFwiKSB7XG4gICAgICAgIG1lc3NhZ2UgPSBgSW52YWxpZCAke2lzc3VlLnZhbGlkYXRpb259YDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1lc3NhZ2UgPSBcIkludmFsaWRcIjtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgWm9kSXNzdWVDb2RlMi50b29fc21hbGw6XG4gICAgICBpZiAoaXNzdWUudHlwZSA9PT0gXCJhcnJheVwiKVxuICAgICAgICBtZXNzYWdlID0gYEFycmF5IG11c3QgY29udGFpbiAke2lzc3VlLmluY2x1c2l2ZSA/IGBhdCBsZWFzdGAgOiBgbW9yZSB0aGFuYH0gJHtpc3N1ZS5taW5pbXVtfSBlbGVtZW50KHMpYDtcbiAgICAgIGVsc2UgaWYgKGlzc3VlLnR5cGUgPT09IFwic3RyaW5nXCIpXG4gICAgICAgIG1lc3NhZ2UgPSBgU3RyaW5nIG11c3QgY29udGFpbiAke2lzc3VlLmluY2x1c2l2ZSA/IGBhdCBsZWFzdGAgOiBgb3ZlcmB9ICR7aXNzdWUubWluaW11bX0gY2hhcmFjdGVyKHMpYDtcbiAgICAgIGVsc2UgaWYgKGlzc3VlLnR5cGUgPT09IFwibnVtYmVyXCIpXG4gICAgICAgIG1lc3NhZ2UgPSBgTnVtYmVyIG11c3QgYmUgZ3JlYXRlciB0aGFuICR7aXNzdWUuaW5jbHVzaXZlID8gYG9yIGVxdWFsIHRvIGAgOiBgYH0ke2lzc3VlLm1pbmltdW19YDtcbiAgICAgIGVsc2UgaWYgKGlzc3VlLnR5cGUgPT09IFwiZGF0ZVwiKVxuICAgICAgICBtZXNzYWdlID0gYERhdGUgbXVzdCBiZSBncmVhdGVyIHRoYW4gJHtpc3N1ZS5pbmNsdXNpdmUgPyBgb3IgZXF1YWwgdG8gYCA6IGBgfSR7bmV3IERhdGUoaXNzdWUubWluaW11bSl9YDtcbiAgICAgIGVsc2VcbiAgICAgICAgbWVzc2FnZSA9IFwiSW52YWxpZCBpbnB1dFwiO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBab2RJc3N1ZUNvZGUyLnRvb19iaWc6XG4gICAgICBpZiAoaXNzdWUudHlwZSA9PT0gXCJhcnJheVwiKVxuICAgICAgICBtZXNzYWdlID0gYEFycmF5IG11c3QgY29udGFpbiAke2lzc3VlLmluY2x1c2l2ZSA/IGBhdCBtb3N0YCA6IGBsZXNzIHRoYW5gfSAke2lzc3VlLm1heGltdW19IGVsZW1lbnQocylgO1xuICAgICAgZWxzZSBpZiAoaXNzdWUudHlwZSA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgbWVzc2FnZSA9IGBTdHJpbmcgbXVzdCBjb250YWluICR7aXNzdWUuaW5jbHVzaXZlID8gYGF0IG1vc3RgIDogYHVuZGVyYH0gJHtpc3N1ZS5tYXhpbXVtfSBjaGFyYWN0ZXIocylgO1xuICAgICAgZWxzZSBpZiAoaXNzdWUudHlwZSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgbWVzc2FnZSA9IGBOdW1iZXIgbXVzdCBiZSBsZXNzIHRoYW4gJHtpc3N1ZS5pbmNsdXNpdmUgPyBgb3IgZXF1YWwgdG8gYCA6IGBgfSR7aXNzdWUubWF4aW11bX1gO1xuICAgICAgZWxzZSBpZiAoaXNzdWUudHlwZSA9PT0gXCJkYXRlXCIpXG4gICAgICAgIG1lc3NhZ2UgPSBgRGF0ZSBtdXN0IGJlIHNtYWxsZXIgdGhhbiAke2lzc3VlLmluY2x1c2l2ZSA/IGBvciBlcXVhbCB0byBgIDogYGB9JHtuZXcgRGF0ZShpc3N1ZS5tYXhpbXVtKX1gO1xuICAgICAgZWxzZVxuICAgICAgICBtZXNzYWdlID0gXCJJbnZhbGlkIGlucHV0XCI7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFpvZElzc3VlQ29kZTIuY3VzdG9tOlxuICAgICAgbWVzc2FnZSA9IGBJbnZhbGlkIGlucHV0YDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgWm9kSXNzdWVDb2RlMi5pbnZhbGlkX2ludGVyc2VjdGlvbl90eXBlczpcbiAgICAgIG1lc3NhZ2UgPSBgSW50ZXJzZWN0aW9uIHJlc3VsdHMgY291bGQgbm90IGJlIG1lcmdlZGA7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFpvZElzc3VlQ29kZTIubm90X211bHRpcGxlX29mOlxuICAgICAgbWVzc2FnZSA9IGBOdW1iZXIgbXVzdCBiZSBhIG11bHRpcGxlIG9mICR7aXNzdWUubXVsdGlwbGVPZn1gO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIG1lc3NhZ2UgPSBfY3R4LmRlZmF1bHRFcnJvcjtcbiAgICAgIHV0aWwyLmFzc2VydE5ldmVyKGlzc3VlKTtcbiAgfVxuICByZXR1cm4ge21lc3NhZ2V9O1xufTtcbnZhciBvdmVycmlkZUVycm9yTWFwMiA9IGRlZmF1bHRFcnJvck1hcDI7XG5mdW5jdGlvbiBzZXRFcnJvck1hcDIobWFwKSB7XG4gIG92ZXJyaWRlRXJyb3JNYXAyID0gbWFwO1xufVxuZnVuY3Rpb24gZ2V0RXJyb3JNYXAyKCkge1xuICByZXR1cm4gb3ZlcnJpZGVFcnJvck1hcDI7XG59XG52YXIgbWFrZUlzc3VlMiA9IChwYXJhbXMpID0+IHtcbiAgY29uc3Qge2RhdGEsIHBhdGgsIGVycm9yTWFwcywgaXNzdWVEYXRhfSA9IHBhcmFtcztcbiAgY29uc3QgZnVsbFBhdGggPSBbLi4ucGF0aCwgLi4uaXNzdWVEYXRhLnBhdGggfHwgW11dO1xuICBjb25zdCBmdWxsSXNzdWUgPSB7XG4gICAgLi4uaXNzdWVEYXRhLFxuICAgIHBhdGg6IGZ1bGxQYXRoXG4gIH07XG4gIGxldCBlcnJvck1lc3NhZ2UgPSBcIlwiO1xuICBjb25zdCBtYXBzID0gZXJyb3JNYXBzLmZpbHRlcigobSkgPT4gISFtKS5zbGljZSgpLnJldmVyc2UoKTtcbiAgZm9yIChjb25zdCBtYXAgb2YgbWFwcykge1xuICAgIGVycm9yTWVzc2FnZSA9IG1hcChmdWxsSXNzdWUsIHtkYXRhLCBkZWZhdWx0RXJyb3I6IGVycm9yTWVzc2FnZX0pLm1lc3NhZ2U7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICAuLi5pc3N1ZURhdGEsXG4gICAgcGF0aDogZnVsbFBhdGgsXG4gICAgbWVzc2FnZTogaXNzdWVEYXRhLm1lc3NhZ2UgfHwgZXJyb3JNZXNzYWdlXG4gIH07XG59O1xudmFyIEVNUFRZX1BBVEgyID0gW107XG5mdW5jdGlvbiBhZGRJc3N1ZVRvQ29udGV4dDIoY3R4LCBpc3N1ZURhdGEpIHtcbiAgY29uc3QgaXNzdWUgPSBtYWtlSXNzdWUyKHtcbiAgICBpc3N1ZURhdGEsXG4gICAgZGF0YTogY3R4LmRhdGEsXG4gICAgcGF0aDogY3R4LnBhdGgsXG4gICAgZXJyb3JNYXBzOiBbXG4gICAgICBjdHguY29tbW9uLmNvbnRleHR1YWxFcnJvck1hcCxcbiAgICAgIGN0eC5zY2hlbWFFcnJvck1hcCxcbiAgICAgIGdldEVycm9yTWFwMigpLFxuICAgICAgZGVmYXVsdEVycm9yTWFwMlxuICAgIF0uZmlsdGVyKCh4KSA9PiAhIXgpXG4gIH0pO1xuICBjdHguY29tbW9uLmlzc3Vlcy5wdXNoKGlzc3VlKTtcbn1cbnZhciBQYXJzZVN0YXR1czIgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMudmFsdWUgPSBcInZhbGlkXCI7XG4gIH1cbiAgZGlydHkoKSB7XG4gICAgaWYgKHRoaXMudmFsdWUgPT09IFwidmFsaWRcIilcbiAgICAgIHRoaXMudmFsdWUgPSBcImRpcnR5XCI7XG4gIH1cbiAgYWJvcnQoKSB7XG4gICAgaWYgKHRoaXMudmFsdWUgIT09IFwiYWJvcnRlZFwiKVxuICAgICAgdGhpcy52YWx1ZSA9IFwiYWJvcnRlZFwiO1xuICB9XG4gIHN0YXRpYyBtZXJnZUFycmF5KHN0YXR1cywgcmVzdWx0cykge1xuICAgIGNvbnN0IGFycmF5VmFsdWUgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHMyIG9mIHJlc3VsdHMpIHtcbiAgICAgIGlmIChzMi5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKVxuICAgICAgICByZXR1cm4gSU5WQUxJRDU7XG4gICAgICBpZiAoczIuc3RhdHVzID09PSBcImRpcnR5XCIpXG4gICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgYXJyYXlWYWx1ZS5wdXNoKHMyLnZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHtzdGF0dXM6IHN0YXR1cy52YWx1ZSwgdmFsdWU6IGFycmF5VmFsdWV9O1xuICB9XG4gIHN0YXRpYyBhc3luYyBtZXJnZU9iamVjdEFzeW5jKHN0YXR1cywgcGFpcnMpIHtcbiAgICBjb25zdCBzeW5jUGFpcnMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHBhaXIgb2YgcGFpcnMpIHtcbiAgICAgIHN5bmNQYWlycy5wdXNoKHtcbiAgICAgICAga2V5OiBhd2FpdCBwYWlyLmtleSxcbiAgICAgICAgdmFsdWU6IGF3YWl0IHBhaXIudmFsdWVcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gUGFyc2VTdGF0dXMyLm1lcmdlT2JqZWN0U3luYyhzdGF0dXMsIHN5bmNQYWlycyk7XG4gIH1cbiAgc3RhdGljIG1lcmdlT2JqZWN0U3luYyhzdGF0dXMsIHBhaXJzKSB7XG4gICAgY29uc3QgZmluYWxPYmplY3QgPSB7fTtcbiAgICBmb3IgKGNvbnN0IHBhaXIgb2YgcGFpcnMpIHtcbiAgICAgIGNvbnN0IHtrZXksIHZhbHVlfSA9IHBhaXI7XG4gICAgICBpZiAoa2V5LnN0YXR1cyA9PT0gXCJhYm9ydGVkXCIpXG4gICAgICAgIHJldHVybiBJTlZBTElENTtcbiAgICAgIGlmICh2YWx1ZS5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKVxuICAgICAgICByZXR1cm4gSU5WQUxJRDU7XG4gICAgICBpZiAoa2V5LnN0YXR1cyA9PT0gXCJkaXJ0eVwiKVxuICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgIGlmICh2YWx1ZS5zdGF0dXMgPT09IFwiZGlydHlcIilcbiAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlLnZhbHVlICE9PSBcInVuZGVmaW5lZFwiIHx8IHBhaXIuYWx3YXlzU2V0KSB7XG4gICAgICAgIGZpbmFsT2JqZWN0W2tleS52YWx1ZV0gPSB2YWx1ZS52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtzdGF0dXM6IHN0YXR1cy52YWx1ZSwgdmFsdWU6IGZpbmFsT2JqZWN0fTtcbiAgfVxufTtcbnZhciBJTlZBTElENSA9IE9iamVjdC5mcmVlemUoe1xuICBzdGF0dXM6IFwiYWJvcnRlZFwiXG59KTtcbnZhciBESVJUWTIgPSAodmFsdWUpID0+ICh7c3RhdHVzOiBcImRpcnR5XCIsIHZhbHVlfSk7XG52YXIgT0syID0gKHZhbHVlKSA9PiAoe3N0YXR1czogXCJ2YWxpZFwiLCB2YWx1ZX0pO1xudmFyIGlzQWJvcnRlZDIgPSAoeCkgPT4geC5zdGF0dXMgPT09IFwiYWJvcnRlZFwiO1xudmFyIGlzRGlydHkyID0gKHgpID0+IHguc3RhdHVzID09PSBcImRpcnR5XCI7XG52YXIgaXNWYWxpZDIgPSAoeCkgPT4geC5zdGF0dXMgPT09IFwidmFsaWRcIjtcbnZhciBpc0FzeW5jMiA9ICh4KSA9PiB0eXBlb2YgUHJvbWlzZSAhPT0gdm9pZCAwICYmIHggaW5zdGFuY2VvZiBQcm9taXNlO1xudmFyIGpzb25TdHJpbmdpZnlSZXBsYWNlcjIgPSAoXywgdmFsdWUpID0+IHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJiaWdpbnRcIikge1xuICAgIHJldHVybiB2YWx1ZS50b1N0cmluZygpO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn07XG52YXIgZXJyb3JVdGlsMjtcbihmdW5jdGlvbihlcnJvclV0aWwyMikge1xuICBlcnJvclV0aWwyMi5lcnJUb09iaiA9IChtZXNzYWdlKSA9PiB0eXBlb2YgbWVzc2FnZSA9PT0gXCJzdHJpbmdcIiA/IHttZXNzYWdlfSA6IG1lc3NhZ2UgfHwge307XG4gIGVycm9yVXRpbDIyLnRvU3RyaW5nID0gKG1lc3NhZ2UpID0+IHR5cGVvZiBtZXNzYWdlID09PSBcInN0cmluZ1wiID8gbWVzc2FnZSA6IG1lc3NhZ2UgPT09IG51bGwgfHwgbWVzc2FnZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogbWVzc2FnZS5tZXNzYWdlO1xufSkoZXJyb3JVdGlsMiB8fCAoZXJyb3JVdGlsMiA9IHt9KSk7XG52YXIgUGFyc2VJbnB1dExhenlQYXRoMiA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IocGFyZW50LCB2YWx1ZSwgcGF0aCwga2V5KSB7XG4gICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgdGhpcy5kYXRhID0gdmFsdWU7XG4gICAgdGhpcy5fcGF0aCA9IHBhdGg7XG4gICAgdGhpcy5fa2V5ID0ga2V5O1xuICB9XG4gIGdldCBwYXRoKCkge1xuICAgIHJldHVybiB0aGlzLl9wYXRoLmNvbmNhdCh0aGlzLl9rZXkpO1xuICB9XG59O1xudmFyIGhhbmRsZVJlc3VsdDIgPSAoY3R4LCByZXN1bHQpID0+IHtcbiAgaWYgKGlzVmFsaWQyKHJlc3VsdCkpIHtcbiAgICByZXR1cm4ge3N1Y2Nlc3M6IHRydWUsIGRhdGE6IHJlc3VsdC52YWx1ZX07XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFjdHguY29tbW9uLmlzc3Vlcy5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlZhbGlkYXRpb24gZmFpbGVkIGJ1dCBubyBpc3N1ZXMgZGV0ZWN0ZWQuXCIpO1xuICAgIH1cbiAgICBjb25zdCBlcnJvciA9IG5ldyBab2RFcnJvcjIoY3R4LmNvbW1vbi5pc3N1ZXMpO1xuICAgIHJldHVybiB7c3VjY2VzczogZmFsc2UsIGVycm9yfTtcbiAgfVxufTtcbmZ1bmN0aW9uIHByb2Nlc3NDcmVhdGVQYXJhbXMyKHBhcmFtcykge1xuICBpZiAoIXBhcmFtcylcbiAgICByZXR1cm4ge307XG4gIGNvbnN0IHtlcnJvck1hcCwgaW52YWxpZF90eXBlX2Vycm9yLCByZXF1aXJlZF9lcnJvciwgZGVzY3JpcHRpb259ID0gcGFyYW1zO1xuICBpZiAoZXJyb3JNYXAgJiYgKGludmFsaWRfdHlwZV9lcnJvciB8fCByZXF1aXJlZF9lcnJvcikpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYENhbid0IHVzZSBcImludmFsaWRcIiBvciBcInJlcXVpcmVkXCIgaW4gY29uanVuY3Rpb24gd2l0aCBjdXN0b20gZXJyb3IgbWFwLmApO1xuICB9XG4gIGlmIChlcnJvck1hcClcbiAgICByZXR1cm4ge2Vycm9yTWFwLCBkZXNjcmlwdGlvbn07XG4gIGNvbnN0IGN1c3RvbU1hcCA9IChpc3MsIGN0eCkgPT4ge1xuICAgIGlmIChpc3MuY29kZSAhPT0gXCJpbnZhbGlkX3R5cGVcIilcbiAgICAgIHJldHVybiB7bWVzc2FnZTogY3R4LmRlZmF1bHRFcnJvcn07XG4gICAgaWYgKHR5cGVvZiBjdHguZGF0YSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHttZXNzYWdlOiByZXF1aXJlZF9lcnJvciAhPT0gbnVsbCAmJiByZXF1aXJlZF9lcnJvciAhPT0gdm9pZCAwID8gcmVxdWlyZWRfZXJyb3IgOiBjdHguZGVmYXVsdEVycm9yfTtcbiAgICB9XG4gICAgcmV0dXJuIHttZXNzYWdlOiBpbnZhbGlkX3R5cGVfZXJyb3IgIT09IG51bGwgJiYgaW52YWxpZF90eXBlX2Vycm9yICE9PSB2b2lkIDAgPyBpbnZhbGlkX3R5cGVfZXJyb3IgOiBjdHguZGVmYXVsdEVycm9yfTtcbiAgfTtcbiAgcmV0dXJuIHtlcnJvck1hcDogY3VzdG9tTWFwLCBkZXNjcmlwdGlvbn07XG59XG52YXIgWm9kVHlwZTIgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGRlZikge1xuICAgIHRoaXMuc3BhID0gdGhpcy5zYWZlUGFyc2VBc3luYztcbiAgICB0aGlzLnN1cGVyUmVmaW5lID0gdGhpcy5fcmVmaW5lbWVudDtcbiAgICB0aGlzLl9kZWYgPSBkZWY7XG4gICAgdGhpcy5wYXJzZSA9IHRoaXMucGFyc2UuYmluZCh0aGlzKTtcbiAgICB0aGlzLnNhZmVQYXJzZSA9IHRoaXMuc2FmZVBhcnNlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5wYXJzZUFzeW5jID0gdGhpcy5wYXJzZUFzeW5jLmJpbmQodGhpcyk7XG4gICAgdGhpcy5zYWZlUGFyc2VBc3luYyA9IHRoaXMuc2FmZVBhcnNlQXN5bmMuYmluZCh0aGlzKTtcbiAgICB0aGlzLnNwYSA9IHRoaXMuc3BhLmJpbmQodGhpcyk7XG4gICAgdGhpcy5yZWZpbmUgPSB0aGlzLnJlZmluZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMucmVmaW5lbWVudCA9IHRoaXMucmVmaW5lbWVudC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc3VwZXJSZWZpbmUgPSB0aGlzLnN1cGVyUmVmaW5lLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vcHRpb25hbCA9IHRoaXMub3B0aW9uYWwuYmluZCh0aGlzKTtcbiAgICB0aGlzLm51bGxhYmxlID0gdGhpcy5udWxsYWJsZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMubnVsbGlzaCA9IHRoaXMubnVsbGlzaC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuYXJyYXkgPSB0aGlzLmFycmF5LmJpbmQodGhpcyk7XG4gICAgdGhpcy5wcm9taXNlID0gdGhpcy5wcm9taXNlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vciA9IHRoaXMub3IuYmluZCh0aGlzKTtcbiAgICB0aGlzLmFuZCA9IHRoaXMuYW5kLmJpbmQodGhpcyk7XG4gICAgdGhpcy50cmFuc2Zvcm0gPSB0aGlzLnRyYW5zZm9ybS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuZGVmYXVsdCA9IHRoaXMuZGVmYXVsdC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuZGVzY3JpYmUgPSB0aGlzLmRlc2NyaWJlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5pc051bGxhYmxlID0gdGhpcy5pc051bGxhYmxlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5pc09wdGlvbmFsID0gdGhpcy5pc09wdGlvbmFsLmJpbmQodGhpcyk7XG4gIH1cbiAgZ2V0IGRlc2NyaXB0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9kZWYuZGVzY3JpcHRpb247XG4gIH1cbiAgX2dldFR5cGUoaW5wdXQpIHtcbiAgICByZXR1cm4gZ2V0UGFyc2VkVHlwZTIoaW5wdXQuZGF0YSk7XG4gIH1cbiAgX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpIHtcbiAgICByZXR1cm4gY3R4IHx8IHtcbiAgICAgIGNvbW1vbjogaW5wdXQucGFyZW50LmNvbW1vbixcbiAgICAgIGRhdGE6IGlucHV0LmRhdGEsXG4gICAgICBwYXJzZWRUeXBlOiBnZXRQYXJzZWRUeXBlMihpbnB1dC5kYXRhKSxcbiAgICAgIHNjaGVtYUVycm9yTWFwOiB0aGlzLl9kZWYuZXJyb3JNYXAsXG4gICAgICBwYXRoOiBpbnB1dC5wYXRoLFxuICAgICAgcGFyZW50OiBpbnB1dC5wYXJlbnRcbiAgICB9O1xuICB9XG4gIF9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3RhdHVzOiBuZXcgUGFyc2VTdGF0dXMyKCksXG4gICAgICBjdHg6IHtcbiAgICAgICAgY29tbW9uOiBpbnB1dC5wYXJlbnQuY29tbW9uLFxuICAgICAgICBkYXRhOiBpbnB1dC5kYXRhLFxuICAgICAgICBwYXJzZWRUeXBlOiBnZXRQYXJzZWRUeXBlMihpbnB1dC5kYXRhKSxcbiAgICAgICAgc2NoZW1hRXJyb3JNYXA6IHRoaXMuX2RlZi5lcnJvck1hcCxcbiAgICAgICAgcGF0aDogaW5wdXQucGF0aCxcbiAgICAgICAgcGFyZW50OiBpbnB1dC5wYXJlbnRcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIF9wYXJzZVN5bmMoaW5wdXQpIHtcbiAgICBjb25zdCByZXN1bHQgPSB0aGlzLl9wYXJzZShpbnB1dCk7XG4gICAgaWYgKGlzQXN5bmMyKHJlc3VsdCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlN5bmNocm9ub3VzIHBhcnNlIGVuY291bnRlcmVkIHByb21pc2UuXCIpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIF9wYXJzZUFzeW5jKGlucHV0KSB7XG4gICAgY29uc3QgcmVzdWx0ID0gdGhpcy5fcGFyc2UoaW5wdXQpO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzdWx0KTtcbiAgfVxuICBwYXJzZShkYXRhLCBwYXJhbXMpIHtcbiAgICBjb25zdCByZXN1bHQgPSB0aGlzLnNhZmVQYXJzZShkYXRhLCBwYXJhbXMpO1xuICAgIGlmIChyZXN1bHQuc3VjY2VzcylcbiAgICAgIHJldHVybiByZXN1bHQuZGF0YTtcbiAgICB0aHJvdyByZXN1bHQuZXJyb3I7XG4gIH1cbiAgc2FmZVBhcnNlKGRhdGEsIHBhcmFtcykge1xuICAgIHZhciBfYTtcbiAgICBjb25zdCBjdHggPSB7XG4gICAgICBjb21tb246IHtcbiAgICAgICAgaXNzdWVzOiBbXSxcbiAgICAgICAgYXN5bmM6IChfYSA9IHBhcmFtcyA9PT0gbnVsbCB8fCBwYXJhbXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhcmFtcy5hc3luYykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZmFsc2UsXG4gICAgICAgIGNvbnRleHR1YWxFcnJvck1hcDogcGFyYW1zID09PSBudWxsIHx8IHBhcmFtcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyYW1zLmVycm9yTWFwXG4gICAgICB9LFxuICAgICAgcGF0aDogKHBhcmFtcyA9PT0gbnVsbCB8fCBwYXJhbXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhcmFtcy5wYXRoKSB8fCBbXSxcbiAgICAgIHNjaGVtYUVycm9yTWFwOiB0aGlzLl9kZWYuZXJyb3JNYXAsXG4gICAgICBwYXJlbnQ6IG51bGwsXG4gICAgICBkYXRhLFxuICAgICAgcGFyc2VkVHlwZTogZ2V0UGFyc2VkVHlwZTIoZGF0YSlcbiAgICB9O1xuICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuX3BhcnNlU3luYyh7ZGF0YSwgcGF0aDogY3R4LnBhdGgsIHBhcmVudDogY3R4fSk7XG4gICAgcmV0dXJuIGhhbmRsZVJlc3VsdDIoY3R4LCByZXN1bHQpO1xuICB9XG4gIGFzeW5jIHBhcnNlQXN5bmMoZGF0YSwgcGFyYW1zKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5zYWZlUGFyc2VBc3luYyhkYXRhLCBwYXJhbXMpO1xuICAgIGlmIChyZXN1bHQuc3VjY2VzcylcbiAgICAgIHJldHVybiByZXN1bHQuZGF0YTtcbiAgICB0aHJvdyByZXN1bHQuZXJyb3I7XG4gIH1cbiAgYXN5bmMgc2FmZVBhcnNlQXN5bmMoZGF0YSwgcGFyYW1zKSB7XG4gICAgY29uc3QgY3R4ID0ge1xuICAgICAgY29tbW9uOiB7XG4gICAgICAgIGlzc3VlczogW10sXG4gICAgICAgIGNvbnRleHR1YWxFcnJvck1hcDogcGFyYW1zID09PSBudWxsIHx8IHBhcmFtcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyYW1zLmVycm9yTWFwLFxuICAgICAgICBhc3luYzogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHBhdGg6IChwYXJhbXMgPT09IG51bGwgfHwgcGFyYW1zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJhbXMucGF0aCkgfHwgW10sXG4gICAgICBzY2hlbWFFcnJvck1hcDogdGhpcy5fZGVmLmVycm9yTWFwLFxuICAgICAgcGFyZW50OiBudWxsLFxuICAgICAgZGF0YSxcbiAgICAgIHBhcnNlZFR5cGU6IGdldFBhcnNlZFR5cGUyKGRhdGEpXG4gICAgfTtcbiAgICBjb25zdCBtYXliZUFzeW5jUmVzdWx0ID0gdGhpcy5fcGFyc2Uoe2RhdGEsIHBhdGg6IFtdLCBwYXJlbnQ6IGN0eH0pO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IChpc0FzeW5jMihtYXliZUFzeW5jUmVzdWx0KSA/IG1heWJlQXN5bmNSZXN1bHQgOiBQcm9taXNlLnJlc29sdmUobWF5YmVBc3luY1Jlc3VsdCkpO1xuICAgIHJldHVybiBoYW5kbGVSZXN1bHQyKGN0eCwgcmVzdWx0KTtcbiAgfVxuICByZWZpbmUoY2hlY2ssIG1lc3NhZ2UpIHtcbiAgICBjb25zdCBnZXRJc3N1ZVByb3BlcnRpZXMgPSAodmFsKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIG1lc3NhZ2UgPT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIG1lc3NhZ2UgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIHttZXNzYWdlfTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG1lc3NhZ2UgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gbWVzc2FnZSh2YWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5fcmVmaW5lbWVudCgodmFsLCBjdHgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGNoZWNrKHZhbCk7XG4gICAgICBjb25zdCBzZXRFcnJvciA9ICgpID0+IGN0eC5hZGRJc3N1ZSh7XG4gICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZTIuY3VzdG9tLFxuICAgICAgICAuLi5nZXRJc3N1ZVByb3BlcnRpZXModmFsKVxuICAgICAgfSk7XG4gICAgICBpZiAodHlwZW9mIFByb21pc2UgIT09IFwidW5kZWZpbmVkXCIgJiYgcmVzdWx0IGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICByZXR1cm4gcmVzdWx0LnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICAgIHNldEVycm9yKCk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICBzZXRFcnJvcigpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICByZWZpbmVtZW50KGNoZWNrLCByZWZpbmVtZW50RGF0YSkge1xuICAgIHJldHVybiB0aGlzLl9yZWZpbmVtZW50KCh2YWwsIGN0eCkgPT4ge1xuICAgICAgaWYgKCFjaGVjayh2YWwpKSB7XG4gICAgICAgIGN0eC5hZGRJc3N1ZSh0eXBlb2YgcmVmaW5lbWVudERhdGEgPT09IFwiZnVuY3Rpb25cIiA/IHJlZmluZW1lbnREYXRhKHZhbCwgY3R4KSA6IHJlZmluZW1lbnREYXRhKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgX3JlZmluZW1lbnQocmVmaW5lbWVudCkge1xuICAgIHJldHVybiBuZXcgWm9kRWZmZWN0czIoe1xuICAgICAgc2NoZW1hOiB0aGlzLFxuICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZDIuWm9kRWZmZWN0cyxcbiAgICAgIGVmZmVjdDoge3R5cGU6IFwicmVmaW5lbWVudFwiLCByZWZpbmVtZW50fVxuICAgIH0pO1xuICB9XG4gIG9wdGlvbmFsKCkge1xuICAgIHJldHVybiBab2RPcHRpb25hbDIuY3JlYXRlKHRoaXMpO1xuICB9XG4gIG51bGxhYmxlKCkge1xuICAgIHJldHVybiBab2ROdWxsYWJsZTIuY3JlYXRlKHRoaXMpO1xuICB9XG4gIG51bGxpc2goKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9uYWwoKS5udWxsYWJsZSgpO1xuICB9XG4gIGFycmF5KCkge1xuICAgIHJldHVybiBab2RBcnJheTIuY3JlYXRlKHRoaXMpO1xuICB9XG4gIHByb21pc2UoKSB7XG4gICAgcmV0dXJuIFpvZFByb21pc2UyLmNyZWF0ZSh0aGlzKTtcbiAgfVxuICBvcihvcHRpb24pIHtcbiAgICByZXR1cm4gWm9kVW5pb24yLmNyZWF0ZShbdGhpcywgb3B0aW9uXSk7XG4gIH1cbiAgYW5kKGluY29taW5nKSB7XG4gICAgcmV0dXJuIFpvZEludGVyc2VjdGlvbjIuY3JlYXRlKHRoaXMsIGluY29taW5nKTtcbiAgfVxuICB0cmFuc2Zvcm0odHJhbnNmb3JtKSB7XG4gICAgcmV0dXJuIG5ldyBab2RFZmZlY3RzMih7XG4gICAgICBzY2hlbWE6IHRoaXMsXG4gICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMi5ab2RFZmZlY3RzLFxuICAgICAgZWZmZWN0OiB7dHlwZTogXCJ0cmFuc2Zvcm1cIiwgdHJhbnNmb3JtfVxuICAgIH0pO1xuICB9XG4gIGRlZmF1bHQoZGVmKSB7XG4gICAgY29uc3QgZGVmYXVsdFZhbHVlRnVuYyA9IHR5cGVvZiBkZWYgPT09IFwiZnVuY3Rpb25cIiA/IGRlZiA6ICgpID0+IGRlZjtcbiAgICByZXR1cm4gbmV3IFpvZERlZmF1bHQyKHtcbiAgICAgIGlubmVyVHlwZTogdGhpcyxcbiAgICAgIGRlZmF1bHRWYWx1ZTogZGVmYXVsdFZhbHVlRnVuYyxcbiAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQyLlpvZERlZmF1bHRcbiAgICB9KTtcbiAgfVxuICBkZXNjcmliZShkZXNjcmlwdGlvbikge1xuICAgIGNvbnN0IFRoaXMgPSB0aGlzLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBuZXcgVGhpcyh7XG4gICAgICAuLi50aGlzLl9kZWYsXG4gICAgICBkZXNjcmlwdGlvblxuICAgIH0pO1xuICB9XG4gIGlzT3B0aW9uYWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2FmZVBhcnNlKHZvaWQgMCkuc3VjY2VzcztcbiAgfVxuICBpc051bGxhYmxlKCkge1xuICAgIHJldHVybiB0aGlzLnNhZmVQYXJzZShudWxsKS5zdWNjZXNzO1xuICB9XG59O1xudmFyIGN1aWRSZWdleDIgPSAvXmNbXlxccy1dezgsfSQvaTtcbnZhciB1dWlkUmVnZXgyID0gL14oW2EtZjAtOV17OH0tW2EtZjAtOV17NH0tWzEtNV1bYS1mMC05XXszfS1bYS1mMC05XXs0fS1bYS1mMC05XXsxMn18MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwKSQvaTtcbnZhciBlbWFpbFJlZ2V4MiA9IC9eKChbXjw+KClbXFxdXFwuLDs6XFxzQFxcXCJdKyhcXC5bXjw+KClbXFxdXFwuLDs6XFxzQFxcXCJdKykqKXwoXFxcIi4rXFxcIikpQCgoW148PigpW1xcXVxcLiw7Olxcc0BcXFwiXStcXC4pK1tePD4oKVtcXF1cXC4sOzpcXHNAXFxcIl17Mix9KSQvaTtcbnZhciBab2RTdHJpbmcyID0gY2xhc3MgZXh0ZW5kcyBab2RUeXBlMiB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgdGhpcy5fcmVnZXggPSAocmVnZXgsIHZhbGlkYXRpb24sIG1lc3NhZ2UpID0+IHRoaXMucmVmaW5lbWVudCgoZGF0YSkgPT4gcmVnZXgudGVzdChkYXRhKSwge1xuICAgICAgdmFsaWRhdGlvbixcbiAgICAgIGNvZGU6IFpvZElzc3VlQ29kZTIuaW52YWxpZF9zdHJpbmcsXG4gICAgICAuLi5lcnJvclV0aWwyLmVyclRvT2JqKG1lc3NhZ2UpXG4gICAgfSk7XG4gICAgdGhpcy5ub25lbXB0eSA9IChtZXNzYWdlKSA9PiB0aGlzLm1pbigxLCBlcnJvclV0aWwyLmVyclRvT2JqKG1lc3NhZ2UpKTtcbiAgICB0aGlzLnRyaW0gPSAoKSA9PiBuZXcgWm9kU3RyaW5nMih7XG4gICAgICAuLi50aGlzLl9kZWYsXG4gICAgICBjaGVja3M6IFsuLi50aGlzLl9kZWYuY2hlY2tzLCB7a2luZDogXCJ0cmltXCJ9XVxuICAgIH0pO1xuICB9XG4gIF9wYXJzZShpbnB1dCkge1xuICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICBpZiAocGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZTIuc3RyaW5nKSB7XG4gICAgICBjb25zdCBjdHgyID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgYWRkSXNzdWVUb0NvbnRleHQyKGN0eDIsIHtcbiAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlMi5pbnZhbGlkX3R5cGUsXG4gICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlMi5zdHJpbmcsXG4gICAgICAgIHJlY2VpdmVkOiBjdHgyLnBhcnNlZFR5cGVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIElOVkFMSUQ1O1xuICAgIH1cbiAgICBjb25zdCBzdGF0dXMgPSBuZXcgUGFyc2VTdGF0dXMyKCk7XG4gICAgbGV0IGN0eCA9IHZvaWQgMDtcbiAgICBmb3IgKGNvbnN0IGNoZWNrIG9mIHRoaXMuX2RlZi5jaGVja3MpIHtcbiAgICAgIGlmIChjaGVjay5raW5kID09PSBcIm1pblwiKSB7XG4gICAgICAgIGlmIChpbnB1dC5kYXRhLmxlbmd0aCA8IGNoZWNrLnZhbHVlKSB7XG4gICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQyKGN0eCwge1xuICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlMi50b29fc21hbGwsXG4gICAgICAgICAgICBtaW5pbXVtOiBjaGVjay52YWx1ZSxcbiAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJtYXhcIikge1xuICAgICAgICBpZiAoaW5wdXQuZGF0YS5sZW5ndGggPiBjaGVjay52YWx1ZSkge1xuICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0MihjdHgsIHtcbiAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZTIudG9vX2JpZyxcbiAgICAgICAgICAgIG1heGltdW06IGNoZWNrLnZhbHVlLFxuICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjaGVjay5raW5kID09PSBcImVtYWlsXCIpIHtcbiAgICAgICAgaWYgKCFlbWFpbFJlZ2V4Mi50ZXN0KGlucHV0LmRhdGEpKSB7XG4gICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQyKGN0eCwge1xuICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJlbWFpbFwiLFxuICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlMi5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjaGVjay5raW5kID09PSBcInV1aWRcIikge1xuICAgICAgICBpZiAoIXV1aWRSZWdleDIudGVzdChpbnB1dC5kYXRhKSkge1xuICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0MihjdHgsIHtcbiAgICAgICAgICAgIHZhbGlkYXRpb246IFwidXVpZFwiLFxuICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlMi5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjaGVjay5raW5kID09PSBcImN1aWRcIikge1xuICAgICAgICBpZiAoIWN1aWRSZWdleDIudGVzdChpbnB1dC5kYXRhKSkge1xuICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0MihjdHgsIHtcbiAgICAgICAgICAgIHZhbGlkYXRpb246IFwiY3VpZFwiLFxuICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlMi5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjaGVjay5raW5kID09PSBcInVybFwiKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgbmV3IFVSTChpbnB1dC5kYXRhKTtcbiAgICAgICAgfSBjYXRjaCAoX2EpIHtcbiAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dDIoY3R4LCB7XG4gICAgICAgICAgICB2YWxpZGF0aW9uOiBcInVybFwiLFxuICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlMi5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjaGVjay5raW5kID09PSBcInJlZ2V4XCIpIHtcbiAgICAgICAgY2hlY2sucmVnZXgubGFzdEluZGV4ID0gMDtcbiAgICAgICAgY29uc3QgdGVzdFJlc3VsdCA9IGNoZWNrLnJlZ2V4LnRlc3QoaW5wdXQuZGF0YSk7XG4gICAgICAgIGlmICghdGVzdFJlc3VsdCkge1xuICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0MihjdHgsIHtcbiAgICAgICAgICAgIHZhbGlkYXRpb246IFwicmVnZXhcIixcbiAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZTIuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJ0cmltXCIpIHtcbiAgICAgICAgaW5wdXQuZGF0YSA9IGlucHV0LmRhdGEudHJpbSgpO1xuICAgICAgfSBlbHNlIGlmIChjaGVjay5raW5kID09PSBcInN0YXJ0c1dpdGhcIikge1xuICAgICAgICBpZiAoIWlucHV0LmRhdGEuc3RhcnRzV2l0aChjaGVjay52YWx1ZSkpIHtcbiAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dDIoY3R4LCB7XG4gICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUyLmludmFsaWRfc3RyaW5nLFxuICAgICAgICAgICAgdmFsaWRhdGlvbjoge3N0YXJ0c1dpdGg6IGNoZWNrLnZhbHVlfSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjaGVjay5raW5kID09PSBcImVuZHNXaXRoXCIpIHtcbiAgICAgICAgaWYgKCFpbnB1dC5kYXRhLmVuZHNXaXRoKGNoZWNrLnZhbHVlKSkge1xuICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0MihjdHgsIHtcbiAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZTIuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICB2YWxpZGF0aW9uOiB7ZW5kc1dpdGg6IGNoZWNrLnZhbHVlfSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXRpbDIuYXNzZXJ0TmV2ZXIoY2hlY2spO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge3N0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogaW5wdXQuZGF0YX07XG4gIH1cbiAgX2FkZENoZWNrKGNoZWNrKSB7XG4gICAgcmV0dXJuIG5ldyBab2RTdHJpbmcyKHtcbiAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgIGNoZWNrczogWy4uLnRoaXMuX2RlZi5jaGVja3MsIGNoZWNrXVxuICAgIH0pO1xuICB9XG4gIGVtYWlsKG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe2tpbmQ6IFwiZW1haWxcIiwgLi4uZXJyb3JVdGlsMi5lcnJUb09iaihtZXNzYWdlKX0pO1xuICB9XG4gIHVybChtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtraW5kOiBcInVybFwiLCAuLi5lcnJvclV0aWwyLmVyclRvT2JqKG1lc3NhZ2UpfSk7XG4gIH1cbiAgdXVpZChtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtraW5kOiBcInV1aWRcIiwgLi4uZXJyb3JVdGlsMi5lcnJUb09iaihtZXNzYWdlKX0pO1xuICB9XG4gIGN1aWQobWVzc2FnZSkge1xuICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7a2luZDogXCJjdWlkXCIsIC4uLmVycm9yVXRpbDIuZXJyVG9PYmoobWVzc2FnZSl9KTtcbiAgfVxuICByZWdleChyZWdleCwgbWVzc2FnZSkge1xuICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICBraW5kOiBcInJlZ2V4XCIsXG4gICAgICByZWdleCxcbiAgICAgIC4uLmVycm9yVXRpbDIuZXJyVG9PYmoobWVzc2FnZSlcbiAgICB9KTtcbiAgfVxuICBzdGFydHNXaXRoKHZhbHVlLCBtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgIGtpbmQ6IFwic3RhcnRzV2l0aFwiLFxuICAgICAgdmFsdWUsXG4gICAgICAuLi5lcnJvclV0aWwyLmVyclRvT2JqKG1lc3NhZ2UpXG4gICAgfSk7XG4gIH1cbiAgZW5kc1dpdGgodmFsdWUsIG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAga2luZDogXCJlbmRzV2l0aFwiLFxuICAgICAgdmFsdWUsXG4gICAgICAuLi5lcnJvclV0aWwyLmVyclRvT2JqKG1lc3NhZ2UpXG4gICAgfSk7XG4gIH1cbiAgbWluKG1pbkxlbmd0aCwgbWVzc2FnZSkge1xuICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICBraW5kOiBcIm1pblwiLFxuICAgICAgdmFsdWU6IG1pbkxlbmd0aCxcbiAgICAgIC4uLmVycm9yVXRpbDIuZXJyVG9PYmoobWVzc2FnZSlcbiAgICB9KTtcbiAgfVxuICBtYXgobWF4TGVuZ3RoLCBtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgIGtpbmQ6IFwibWF4XCIsXG4gICAgICB2YWx1ZTogbWF4TGVuZ3RoLFxuICAgICAgLi4uZXJyb3JVdGlsMi5lcnJUb09iaihtZXNzYWdlKVxuICAgIH0pO1xuICB9XG4gIGxlbmd0aChsZW4sIG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5taW4obGVuLCBtZXNzYWdlKS5tYXgobGVuLCBtZXNzYWdlKTtcbiAgfVxuICBnZXQgaXNFbWFpbCgpIHtcbiAgICByZXR1cm4gISF0aGlzLl9kZWYuY2hlY2tzLmZpbmQoKGNoKSA9PiBjaC5raW5kID09PSBcImVtYWlsXCIpO1xuICB9XG4gIGdldCBpc1VSTCgpIHtcbiAgICByZXR1cm4gISF0aGlzLl9kZWYuY2hlY2tzLmZpbmQoKGNoKSA9PiBjaC5raW5kID09PSBcInVybFwiKTtcbiAgfVxuICBnZXQgaXNVVUlEKCkge1xuICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwidXVpZFwiKTtcbiAgfVxuICBnZXQgaXNDVUlEKCkge1xuICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwiY3VpZFwiKTtcbiAgfVxuICBnZXQgbWluTGVuZ3RoKCkge1xuICAgIGxldCBtaW4gPSBudWxsO1xuICAgIGZvciAoY29uc3QgY2ggb2YgdGhpcy5fZGVmLmNoZWNrcykge1xuICAgICAgaWYgKGNoLmtpbmQgPT09IFwibWluXCIpIHtcbiAgICAgICAgaWYgKG1pbiA9PT0gbnVsbCB8fCBjaC52YWx1ZSA+IG1pbilcbiAgICAgICAgICBtaW4gPSBjaC52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1pbjtcbiAgfVxuICBnZXQgbWF4TGVuZ3RoKCkge1xuICAgIGxldCBtYXggPSBudWxsO1xuICAgIGZvciAoY29uc3QgY2ggb2YgdGhpcy5fZGVmLmNoZWNrcykge1xuICAgICAgaWYgKGNoLmtpbmQgPT09IFwibWF4XCIpIHtcbiAgICAgICAgaWYgKG1heCA9PT0gbnVsbCB8fCBjaC52YWx1ZSA8IG1heClcbiAgICAgICAgICBtYXggPSBjaC52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1heDtcbiAgfVxufTtcblpvZFN0cmluZzIuY3JlYXRlID0gKHBhcmFtcykgPT4ge1xuICByZXR1cm4gbmV3IFpvZFN0cmluZzIoe1xuICAgIGNoZWNrczogW10sXG4gICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZDIuWm9kU3RyaW5nLFxuICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMyKHBhcmFtcylcbiAgfSk7XG59O1xuZnVuY3Rpb24gZmxvYXRTYWZlUmVtYWluZGVyMih2YWwsIHN0ZXApIHtcbiAgY29uc3QgdmFsRGVjQ291bnQgPSAodmFsLnRvU3RyaW5nKCkuc3BsaXQoXCIuXCIpWzFdIHx8IFwiXCIpLmxlbmd0aDtcbiAgY29uc3Qgc3RlcERlY0NvdW50ID0gKHN0ZXAudG9TdHJpbmcoKS5zcGxpdChcIi5cIilbMV0gfHwgXCJcIikubGVuZ3RoO1xuICBjb25zdCBkZWNDb3VudCA9IHZhbERlY0NvdW50ID4gc3RlcERlY0NvdW50ID8gdmFsRGVjQ291bnQgOiBzdGVwRGVjQ291bnQ7XG4gIGNvbnN0IHZhbEludCA9IHBhcnNlSW50KHZhbC50b0ZpeGVkKGRlY0NvdW50KS5yZXBsYWNlKFwiLlwiLCBcIlwiKSk7XG4gIGNvbnN0IHN0ZXBJbnQgPSBwYXJzZUludChzdGVwLnRvRml4ZWQoZGVjQ291bnQpLnJlcGxhY2UoXCIuXCIsIFwiXCIpKTtcbiAgcmV0dXJuIHZhbEludCAlIHN0ZXBJbnQgLyBNYXRoLnBvdygxMCwgZGVjQ291bnQpO1xufVxudmFyIFpvZE51bWJlcjIgPSBjbGFzcyBleHRlbmRzIFpvZFR5cGUyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICB0aGlzLm1pbiA9IHRoaXMuZ3RlO1xuICAgIHRoaXMubWF4ID0gdGhpcy5sdGU7XG4gICAgdGhpcy5zdGVwID0gdGhpcy5tdWx0aXBsZU9mO1xuICB9XG4gIF9wYXJzZShpbnB1dCkge1xuICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICBpZiAocGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZTIubnVtYmVyKSB7XG4gICAgICBjb25zdCBjdHgyID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgYWRkSXNzdWVUb0NvbnRleHQyKGN0eDIsIHtcbiAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlMi5pbnZhbGlkX3R5cGUsXG4gICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlMi5udW1iZXIsXG4gICAgICAgIHJlY2VpdmVkOiBjdHgyLnBhcnNlZFR5cGVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIElOVkFMSUQ1O1xuICAgIH1cbiAgICBsZXQgY3R4ID0gdm9pZCAwO1xuICAgIGNvbnN0IHN0YXR1cyA9IG5ldyBQYXJzZVN0YXR1czIoKTtcbiAgICBmb3IgKGNvbnN0IGNoZWNrIG9mIHRoaXMuX2RlZi5jaGVja3MpIHtcbiAgICAgIGlmIChjaGVjay5raW5kID09PSBcImludFwiKSB7XG4gICAgICAgIGlmICghdXRpbDIuaXNJbnRlZ2VyKGlucHV0LmRhdGEpKSB7XG4gICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQyKGN0eCwge1xuICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlMi5pbnZhbGlkX3R5cGUsXG4gICAgICAgICAgICBleHBlY3RlZDogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgICByZWNlaXZlZDogXCJmbG9hdFwiLFxuICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwibWluXCIpIHtcbiAgICAgICAgY29uc3QgdG9vU21hbGwgPSBjaGVjay5pbmNsdXNpdmUgPyBpbnB1dC5kYXRhIDwgY2hlY2sudmFsdWUgOiBpbnB1dC5kYXRhIDw9IGNoZWNrLnZhbHVlO1xuICAgICAgICBpZiAodG9vU21hbGwpIHtcbiAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dDIoY3R4LCB7XG4gICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUyLnRvb19zbWFsbCxcbiAgICAgICAgICAgIG1pbmltdW06IGNoZWNrLnZhbHVlLFxuICAgICAgICAgICAgdHlwZTogXCJudW1iZXJcIixcbiAgICAgICAgICAgIGluY2x1c2l2ZTogY2hlY2suaW5jbHVzaXZlLFxuICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwibWF4XCIpIHtcbiAgICAgICAgY29uc3QgdG9vQmlnID0gY2hlY2suaW5jbHVzaXZlID8gaW5wdXQuZGF0YSA+IGNoZWNrLnZhbHVlIDogaW5wdXQuZGF0YSA+PSBjaGVjay52YWx1ZTtcbiAgICAgICAgaWYgKHRvb0JpZykge1xuICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0MihjdHgsIHtcbiAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZTIudG9vX2JpZyxcbiAgICAgICAgICAgIG1heGltdW06IGNoZWNrLnZhbHVlLFxuICAgICAgICAgICAgdHlwZTogXCJudW1iZXJcIixcbiAgICAgICAgICAgIGluY2x1c2l2ZTogY2hlY2suaW5jbHVzaXZlLFxuICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwibXVsdGlwbGVPZlwiKSB7XG4gICAgICAgIGlmIChmbG9hdFNhZmVSZW1haW5kZXIyKGlucHV0LmRhdGEsIGNoZWNrLnZhbHVlKSAhPT0gMCkge1xuICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0MihjdHgsIHtcbiAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZTIubm90X211bHRpcGxlX29mLFxuICAgICAgICAgICAgbXVsdGlwbGVPZjogY2hlY2sudmFsdWUsXG4gICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHV0aWwyLmFzc2VydE5ldmVyKGNoZWNrKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtzdGF0dXM6IHN0YXR1cy52YWx1ZSwgdmFsdWU6IGlucHV0LmRhdGF9O1xuICB9XG4gIGd0ZSh2YWx1ZSwgbWVzc2FnZSkge1xuICAgIHJldHVybiB0aGlzLnNldExpbWl0KFwibWluXCIsIHZhbHVlLCB0cnVlLCBlcnJvclV0aWwyLnRvU3RyaW5nKG1lc3NhZ2UpKTtcbiAgfVxuICBndCh2YWx1ZSwgbWVzc2FnZSkge1xuICAgIHJldHVybiB0aGlzLnNldExpbWl0KFwibWluXCIsIHZhbHVlLCBmYWxzZSwgZXJyb3JVdGlsMi50b1N0cmluZyhtZXNzYWdlKSk7XG4gIH1cbiAgbHRlKHZhbHVlLCBtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMuc2V0TGltaXQoXCJtYXhcIiwgdmFsdWUsIHRydWUsIGVycm9yVXRpbDIudG9TdHJpbmcobWVzc2FnZSkpO1xuICB9XG4gIGx0KHZhbHVlLCBtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMuc2V0TGltaXQoXCJtYXhcIiwgdmFsdWUsIGZhbHNlLCBlcnJvclV0aWwyLnRvU3RyaW5nKG1lc3NhZ2UpKTtcbiAgfVxuICBzZXRMaW1pdChraW5kLCB2YWx1ZSwgaW5jbHVzaXZlLCBtZXNzYWdlKSB7XG4gICAgcmV0dXJuIG5ldyBab2ROdW1iZXIyKHtcbiAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgIGNoZWNrczogW1xuICAgICAgICAuLi50aGlzLl9kZWYuY2hlY2tzLFxuICAgICAgICB7XG4gICAgICAgICAga2luZCxcbiAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICBpbmNsdXNpdmUsXG4gICAgICAgICAgbWVzc2FnZTogZXJyb3JVdGlsMi50b1N0cmluZyhtZXNzYWdlKVxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSk7XG4gIH1cbiAgX2FkZENoZWNrKGNoZWNrKSB7XG4gICAgcmV0dXJuIG5ldyBab2ROdW1iZXIyKHtcbiAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgIGNoZWNrczogWy4uLnRoaXMuX2RlZi5jaGVja3MsIGNoZWNrXVxuICAgIH0pO1xuICB9XG4gIGludChtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgIGtpbmQ6IFwiaW50XCIsXG4gICAgICBtZXNzYWdlOiBlcnJvclV0aWwyLnRvU3RyaW5nKG1lc3NhZ2UpXG4gICAgfSk7XG4gIH1cbiAgcG9zaXRpdmUobWVzc2FnZSkge1xuICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICBraW5kOiBcIm1pblwiLFxuICAgICAgdmFsdWU6IDAsXG4gICAgICBpbmNsdXNpdmU6IGZhbHNlLFxuICAgICAgbWVzc2FnZTogZXJyb3JVdGlsMi50b1N0cmluZyhtZXNzYWdlKVxuICAgIH0pO1xuICB9XG4gIG5lZ2F0aXZlKG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAga2luZDogXCJtYXhcIixcbiAgICAgIHZhbHVlOiAwLFxuICAgICAgaW5jbHVzaXZlOiBmYWxzZSxcbiAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbDIudG9TdHJpbmcobWVzc2FnZSlcbiAgICB9KTtcbiAgfVxuICBub25wb3NpdGl2ZShtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgIGtpbmQ6IFwibWF4XCIsXG4gICAgICB2YWx1ZTogMCxcbiAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbDIudG9TdHJpbmcobWVzc2FnZSlcbiAgICB9KTtcbiAgfVxuICBub25uZWdhdGl2ZShtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgIGtpbmQ6IFwibWluXCIsXG4gICAgICB2YWx1ZTogMCxcbiAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbDIudG9TdHJpbmcobWVzc2FnZSlcbiAgICB9KTtcbiAgfVxuICBtdWx0aXBsZU9mKHZhbHVlLCBtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgIGtpbmQ6IFwibXVsdGlwbGVPZlwiLFxuICAgICAgdmFsdWUsXG4gICAgICBtZXNzYWdlOiBlcnJvclV0aWwyLnRvU3RyaW5nKG1lc3NhZ2UpXG4gICAgfSk7XG4gIH1cbiAgZ2V0IG1pblZhbHVlKCkge1xuICAgIGxldCBtaW4gPSBudWxsO1xuICAgIGZvciAoY29uc3QgY2ggb2YgdGhpcy5fZGVmLmNoZWNrcykge1xuICAgICAgaWYgKGNoLmtpbmQgPT09IFwibWluXCIpIHtcbiAgICAgICAgaWYgKG1pbiA9PT0gbnVsbCB8fCBjaC52YWx1ZSA+IG1pbilcbiAgICAgICAgICBtaW4gPSBjaC52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1pbjtcbiAgfVxuICBnZXQgbWF4VmFsdWUoKSB7XG4gICAgbGV0IG1heCA9IG51bGw7XG4gICAgZm9yIChjb25zdCBjaCBvZiB0aGlzLl9kZWYuY2hlY2tzKSB7XG4gICAgICBpZiAoY2gua2luZCA9PT0gXCJtYXhcIikge1xuICAgICAgICBpZiAobWF4ID09PSBudWxsIHx8IGNoLnZhbHVlIDwgbWF4KVxuICAgICAgICAgIG1heCA9IGNoLnZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWF4O1xuICB9XG4gIGdldCBpc0ludCgpIHtcbiAgICByZXR1cm4gISF0aGlzLl9kZWYuY2hlY2tzLmZpbmQoKGNoKSA9PiBjaC5raW5kID09PSBcImludFwiKTtcbiAgfVxufTtcblpvZE51bWJlcjIuY3JlYXRlID0gKHBhcmFtcykgPT4ge1xuICByZXR1cm4gbmV3IFpvZE51bWJlcjIoe1xuICAgIGNoZWNrczogW10sXG4gICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZDIuWm9kTnVtYmVyLFxuICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMyKHBhcmFtcylcbiAgfSk7XG59O1xudmFyIFpvZEJpZ0ludDIgPSBjbGFzcyBleHRlbmRzIFpvZFR5cGUyIHtcbiAgX3BhcnNlKGlucHV0KSB7XG4gICAgY29uc3QgcGFyc2VkVHlwZSA9IHRoaXMuX2dldFR5cGUoaW5wdXQpO1xuICAgIGlmIChwYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlMi5iaWdpbnQpIHtcbiAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcbiAgICAgIGFkZElzc3VlVG9Db250ZXh0MihjdHgsIHtcbiAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlMi5pbnZhbGlkX3R5cGUsXG4gICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlMi5iaWdpbnQsXG4gICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gSU5WQUxJRDU7XG4gICAgfVxuICAgIHJldHVybiBPSzIoaW5wdXQuZGF0YSk7XG4gIH1cbn07XG5ab2RCaWdJbnQyLmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2RCaWdJbnQyKHtcbiAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMi5ab2RCaWdJbnQsXG4gICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtczIocGFyYW1zKVxuICB9KTtcbn07XG52YXIgWm9kQm9vbGVhbjIgPSBjbGFzcyBleHRlbmRzIFpvZFR5cGUyIHtcbiAgX3BhcnNlKGlucHV0KSB7XG4gICAgY29uc3QgcGFyc2VkVHlwZSA9IHRoaXMuX2dldFR5cGUoaW5wdXQpO1xuICAgIGlmIChwYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlMi5ib29sZWFuKSB7XG4gICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICBhZGRJc3N1ZVRvQ29udGV4dDIoY3R4LCB7XG4gICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZTIuaW52YWxpZF90eXBlLFxuICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZTIuYm9vbGVhbixcbiAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBJTlZBTElENTtcbiAgICB9XG4gICAgcmV0dXJuIE9LMihpbnB1dC5kYXRhKTtcbiAgfVxufTtcblpvZEJvb2xlYW4yLmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2RCb29sZWFuMih7XG4gICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZDIuWm9kQm9vbGVhbixcbiAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zMihwYXJhbXMpXG4gIH0pO1xufTtcbnZhciBab2REYXRlMiA9IGNsYXNzIGV4dGVuZHMgWm9kVHlwZTIge1xuICBfcGFyc2UoaW5wdXQpIHtcbiAgICBjb25zdCBwYXJzZWRUeXBlID0gdGhpcy5fZ2V0VHlwZShpbnB1dCk7XG4gICAgaWYgKHBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUyLmRhdGUpIHtcbiAgICAgIGNvbnN0IGN0eDIgPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICBhZGRJc3N1ZVRvQ29udGV4dDIoY3R4Miwge1xuICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUyLmludmFsaWRfdHlwZSxcbiAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUyLmRhdGUsXG4gICAgICAgIHJlY2VpdmVkOiBjdHgyLnBhcnNlZFR5cGVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIElOVkFMSUQ1O1xuICAgIH1cbiAgICBpZiAoaXNOYU4oaW5wdXQuZGF0YS5nZXRUaW1lKCkpKSB7XG4gICAgICBjb25zdCBjdHgyID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgYWRkSXNzdWVUb0NvbnRleHQyKGN0eDIsIHtcbiAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlMi5pbnZhbGlkX2RhdGVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIElOVkFMSUQ1O1xuICAgIH1cbiAgICBjb25zdCBzdGF0dXMgPSBuZXcgUGFyc2VTdGF0dXMyKCk7XG4gICAgbGV0IGN0eCA9IHZvaWQgMDtcbiAgICBmb3IgKGNvbnN0IGNoZWNrIG9mIHRoaXMuX2RlZi5jaGVja3MpIHtcbiAgICAgIGlmIChjaGVjay5raW5kID09PSBcIm1pblwiKSB7XG4gICAgICAgIGlmIChpbnB1dC5kYXRhLmdldFRpbWUoKSA8IGNoZWNrLnZhbHVlKSB7XG4gICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQyKGN0eCwge1xuICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlMi50b29fc21hbGwsXG4gICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxuICAgICAgICAgICAgbWluaW11bTogY2hlY2sudmFsdWUsXG4gICAgICAgICAgICB0eXBlOiBcImRhdGVcIlxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGNoZWNrLmtpbmQgPT09IFwibWF4XCIpIHtcbiAgICAgICAgaWYgKGlucHV0LmRhdGEuZ2V0VGltZSgpID4gY2hlY2sudmFsdWUpIHtcbiAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dDIoY3R4LCB7XG4gICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUyLnRvb19iaWcsXG4gICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlLFxuICAgICAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxuICAgICAgICAgICAgbWF4aW11bTogY2hlY2sudmFsdWUsXG4gICAgICAgICAgICB0eXBlOiBcImRhdGVcIlxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1dGlsMi5hc3NlcnROZXZlcihjaGVjayk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBzdGF0dXM6IHN0YXR1cy52YWx1ZSxcbiAgICAgIHZhbHVlOiBuZXcgRGF0ZShpbnB1dC5kYXRhLmdldFRpbWUoKSlcbiAgICB9O1xuICB9XG4gIF9hZGRDaGVjayhjaGVjaykge1xuICAgIHJldHVybiBuZXcgWm9kRGF0ZTIoe1xuICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgY2hlY2tzOiBbLi4udGhpcy5fZGVmLmNoZWNrcywgY2hlY2tdXG4gICAgfSk7XG4gIH1cbiAgbWluKG1pbkRhdGUsIG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAga2luZDogXCJtaW5cIixcbiAgICAgIHZhbHVlOiBtaW5EYXRlLmdldFRpbWUoKSxcbiAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbDIudG9TdHJpbmcobWVzc2FnZSlcbiAgICB9KTtcbiAgfVxuICBtYXgobWF4RGF0ZSwgbWVzc2FnZSkge1xuICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICBraW5kOiBcIm1heFwiLFxuICAgICAgdmFsdWU6IG1heERhdGUuZ2V0VGltZSgpLFxuICAgICAgbWVzc2FnZTogZXJyb3JVdGlsMi50b1N0cmluZyhtZXNzYWdlKVxuICAgIH0pO1xuICB9XG4gIGdldCBtaW5EYXRlKCkge1xuICAgIGxldCBtaW4gPSBudWxsO1xuICAgIGZvciAoY29uc3QgY2ggb2YgdGhpcy5fZGVmLmNoZWNrcykge1xuICAgICAgaWYgKGNoLmtpbmQgPT09IFwibWluXCIpIHtcbiAgICAgICAgaWYgKG1pbiA9PT0gbnVsbCB8fCBjaC52YWx1ZSA+IG1pbilcbiAgICAgICAgICBtaW4gPSBjaC52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1pbiAhPSBudWxsID8gbmV3IERhdGUobWluKSA6IG51bGw7XG4gIH1cbiAgZ2V0IG1heERhdGUoKSB7XG4gICAgbGV0IG1heCA9IG51bGw7XG4gICAgZm9yIChjb25zdCBjaCBvZiB0aGlzLl9kZWYuY2hlY2tzKSB7XG4gICAgICBpZiAoY2gua2luZCA9PT0gXCJtYXhcIikge1xuICAgICAgICBpZiAobWF4ID09PSBudWxsIHx8IGNoLnZhbHVlIDwgbWF4KVxuICAgICAgICAgIG1heCA9IGNoLnZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWF4ICE9IG51bGwgPyBuZXcgRGF0ZShtYXgpIDogbnVsbDtcbiAgfVxufTtcblpvZERhdGUyLmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2REYXRlMih7XG4gICAgY2hlY2tzOiBbXSxcbiAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMi5ab2REYXRlLFxuICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMyKHBhcmFtcylcbiAgfSk7XG59O1xudmFyIFpvZFVuZGVmaW5lZDIgPSBjbGFzcyBleHRlbmRzIFpvZFR5cGUyIHtcbiAgX3BhcnNlKGlucHV0KSB7XG4gICAgY29uc3QgcGFyc2VkVHlwZSA9IHRoaXMuX2dldFR5cGUoaW5wdXQpO1xuICAgIGlmIChwYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlMi51bmRlZmluZWQpIHtcbiAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcbiAgICAgIGFkZElzc3VlVG9Db250ZXh0MihjdHgsIHtcbiAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlMi5pbnZhbGlkX3R5cGUsXG4gICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlMi51bmRlZmluZWQsXG4gICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gSU5WQUxJRDU7XG4gICAgfVxuICAgIHJldHVybiBPSzIoaW5wdXQuZGF0YSk7XG4gIH1cbn07XG5ab2RVbmRlZmluZWQyLmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2RVbmRlZmluZWQyKHtcbiAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMi5ab2RVbmRlZmluZWQsXG4gICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtczIocGFyYW1zKVxuICB9KTtcbn07XG52YXIgWm9kTnVsbDIgPSBjbGFzcyBleHRlbmRzIFpvZFR5cGUyIHtcbiAgX3BhcnNlKGlucHV0KSB7XG4gICAgY29uc3QgcGFyc2VkVHlwZSA9IHRoaXMuX2dldFR5cGUoaW5wdXQpO1xuICAgIGlmIChwYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlMi5udWxsKSB7XG4gICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICBhZGRJc3N1ZVRvQ29udGV4dDIoY3R4LCB7XG4gICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZTIuaW52YWxpZF90eXBlLFxuICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZTIubnVsbCxcbiAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBJTlZBTElENTtcbiAgICB9XG4gICAgcmV0dXJuIE9LMihpbnB1dC5kYXRhKTtcbiAgfVxufTtcblpvZE51bGwyLmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2ROdWxsMih7XG4gICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZDIuWm9kTnVsbCxcbiAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zMihwYXJhbXMpXG4gIH0pO1xufTtcbnZhciBab2RBbnkyID0gY2xhc3MgZXh0ZW5kcyBab2RUeXBlMiB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgdGhpcy5fYW55ID0gdHJ1ZTtcbiAgfVxuICBfcGFyc2UoaW5wdXQpIHtcbiAgICByZXR1cm4gT0syKGlucHV0LmRhdGEpO1xuICB9XG59O1xuWm9kQW55Mi5jcmVhdGUgPSAocGFyYW1zKSA9PiB7XG4gIHJldHVybiBuZXcgWm9kQW55Mih7XG4gICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZDIuWm9kQW55LFxuICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMyKHBhcmFtcylcbiAgfSk7XG59O1xudmFyIFpvZFVua25vd24yID0gY2xhc3MgZXh0ZW5kcyBab2RUeXBlMiB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgdGhpcy5fdW5rbm93biA9IHRydWU7XG4gIH1cbiAgX3BhcnNlKGlucHV0KSB7XG4gICAgcmV0dXJuIE9LMihpbnB1dC5kYXRhKTtcbiAgfVxufTtcblpvZFVua25vd24yLmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2RVbmtub3duMih7XG4gICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZDIuWm9kVW5rbm93bixcbiAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zMihwYXJhbXMpXG4gIH0pO1xufTtcbnZhciBab2ROZXZlcjIgPSBjbGFzcyBleHRlbmRzIFpvZFR5cGUyIHtcbiAgX3BhcnNlKGlucHV0KSB7XG4gICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgIGFkZElzc3VlVG9Db250ZXh0MihjdHgsIHtcbiAgICAgIGNvZGU6IFpvZElzc3VlQ29kZTIuaW52YWxpZF90eXBlLFxuICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUyLm5ldmVyLFxuICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlXG4gICAgfSk7XG4gICAgcmV0dXJuIElOVkFMSUQ1O1xuICB9XG59O1xuWm9kTmV2ZXIyLmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2ROZXZlcjIoe1xuICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQyLlpvZE5ldmVyLFxuICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMyKHBhcmFtcylcbiAgfSk7XG59O1xudmFyIFpvZFZvaWQyID0gY2xhc3MgZXh0ZW5kcyBab2RUeXBlMiB7XG4gIF9wYXJzZShpbnB1dCkge1xuICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICBpZiAocGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZTIudW5kZWZpbmVkKSB7XG4gICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICBhZGRJc3N1ZVRvQ29udGV4dDIoY3R4LCB7XG4gICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZTIuaW52YWxpZF90eXBlLFxuICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZTIudm9pZCxcbiAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBJTlZBTElENTtcbiAgICB9XG4gICAgcmV0dXJuIE9LMihpbnB1dC5kYXRhKTtcbiAgfVxufTtcblpvZFZvaWQyLmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2RWb2lkMih7XG4gICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZDIuWm9kVm9pZCxcbiAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zMihwYXJhbXMpXG4gIH0pO1xufTtcbnZhciBab2RBcnJheTIgPSBjbGFzcyBleHRlbmRzIFpvZFR5cGUyIHtcbiAgX3BhcnNlKGlucHV0KSB7XG4gICAgY29uc3Qge2N0eCwgc3RhdHVzfSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XG4gICAgY29uc3QgZGVmID0gdGhpcy5fZGVmO1xuICAgIGlmIChjdHgucGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZTIuYXJyYXkpIHtcbiAgICAgIGFkZElzc3VlVG9Db250ZXh0MihjdHgsIHtcbiAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlMi5pbnZhbGlkX3R5cGUsXG4gICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlMi5hcnJheSxcbiAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBJTlZBTElENTtcbiAgICB9XG4gICAgaWYgKGRlZi5taW5MZW5ndGggIT09IG51bGwpIHtcbiAgICAgIGlmIChjdHguZGF0YS5sZW5ndGggPCBkZWYubWluTGVuZ3RoLnZhbHVlKSB7XG4gICAgICAgIGFkZElzc3VlVG9Db250ZXh0MihjdHgsIHtcbiAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUyLnRvb19zbWFsbCxcbiAgICAgICAgICBtaW5pbXVtOiBkZWYubWluTGVuZ3RoLnZhbHVlLFxuICAgICAgICAgIHR5cGU6IFwiYXJyYXlcIixcbiAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgbWVzc2FnZTogZGVmLm1pbkxlbmd0aC5tZXNzYWdlXG4gICAgICAgIH0pO1xuICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGRlZi5tYXhMZW5ndGggIT09IG51bGwpIHtcbiAgICAgIGlmIChjdHguZGF0YS5sZW5ndGggPiBkZWYubWF4TGVuZ3RoLnZhbHVlKSB7XG4gICAgICAgIGFkZElzc3VlVG9Db250ZXh0MihjdHgsIHtcbiAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUyLnRvb19iaWcsXG4gICAgICAgICAgbWF4aW11bTogZGVmLm1heExlbmd0aC52YWx1ZSxcbiAgICAgICAgICB0eXBlOiBcImFycmF5XCIsXG4gICAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxuICAgICAgICAgIG1lc3NhZ2U6IGRlZi5tYXhMZW5ndGgubWVzc2FnZVxuICAgICAgICB9KTtcbiAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChjdHguY29tbW9uLmFzeW5jKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5hbGwoY3R4LmRhdGEubWFwKChpdGVtLCBpKSA9PiB7XG4gICAgICAgIHJldHVybiBkZWYudHlwZS5fcGFyc2VBc3luYyhuZXcgUGFyc2VJbnB1dExhenlQYXRoMihjdHgsIGl0ZW0sIGN0eC5wYXRoLCBpKSk7XG4gICAgICB9KSkudGhlbigocmVzdWx0MikgPT4ge1xuICAgICAgICByZXR1cm4gUGFyc2VTdGF0dXMyLm1lcmdlQXJyYXkoc3RhdHVzLCByZXN1bHQyKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSBjdHguZGF0YS5tYXAoKGl0ZW0sIGkpID0+IHtcbiAgICAgIHJldHVybiBkZWYudHlwZS5fcGFyc2VTeW5jKG5ldyBQYXJzZUlucHV0TGF6eVBhdGgyKGN0eCwgaXRlbSwgY3R4LnBhdGgsIGkpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gUGFyc2VTdGF0dXMyLm1lcmdlQXJyYXkoc3RhdHVzLCByZXN1bHQpO1xuICB9XG4gIGdldCBlbGVtZW50KCkge1xuICAgIHJldHVybiB0aGlzLl9kZWYudHlwZTtcbiAgfVxuICBtaW4obWluTGVuZ3RoLCBtZXNzYWdlKSB7XG4gICAgcmV0dXJuIG5ldyBab2RBcnJheTIoe1xuICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgbWluTGVuZ3RoOiB7dmFsdWU6IG1pbkxlbmd0aCwgbWVzc2FnZTogZXJyb3JVdGlsMi50b1N0cmluZyhtZXNzYWdlKX1cbiAgICB9KTtcbiAgfVxuICBtYXgobWF4TGVuZ3RoLCBtZXNzYWdlKSB7XG4gICAgcmV0dXJuIG5ldyBab2RBcnJheTIoe1xuICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgbWF4TGVuZ3RoOiB7dmFsdWU6IG1heExlbmd0aCwgbWVzc2FnZTogZXJyb3JVdGlsMi50b1N0cmluZyhtZXNzYWdlKX1cbiAgICB9KTtcbiAgfVxuICBsZW5ndGgobGVuLCBtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMubWluKGxlbiwgbWVzc2FnZSkubWF4KGxlbiwgbWVzc2FnZSk7XG4gIH1cbiAgbm9uZW1wdHkobWVzc2FnZSkge1xuICAgIHJldHVybiB0aGlzLm1pbigxLCBtZXNzYWdlKTtcbiAgfVxufTtcblpvZEFycmF5Mi5jcmVhdGUgPSAoc2NoZW1hLCBwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2RBcnJheTIoe1xuICAgIHR5cGU6IHNjaGVtYSxcbiAgICBtaW5MZW5ndGg6IG51bGwsXG4gICAgbWF4TGVuZ3RoOiBudWxsLFxuICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQyLlpvZEFycmF5LFxuICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMyKHBhcmFtcylcbiAgfSk7XG59O1xudmFyIG9iamVjdFV0aWwyO1xuKGZ1bmN0aW9uKG9iamVjdFV0aWwyMikge1xuICBvYmplY3RVdGlsMjIubWVyZ2VTaGFwZXMgPSAoZmlyc3QsIHNlY29uZCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAuLi5maXJzdCxcbiAgICAgIC4uLnNlY29uZFxuICAgIH07XG4gIH07XG59KShvYmplY3RVdGlsMiB8fCAob2JqZWN0VXRpbDIgPSB7fSkpO1xudmFyIEF1Z21lbnRGYWN0b3J5MiA9IChkZWYpID0+IChhdWdtZW50YXRpb24pID0+IHtcbiAgcmV0dXJuIG5ldyBab2RPYmplY3QyKHtcbiAgICAuLi5kZWYsXG4gICAgc2hhcGU6ICgpID0+ICh7XG4gICAgICAuLi5kZWYuc2hhcGUoKSxcbiAgICAgIC4uLmF1Z21lbnRhdGlvblxuICAgIH0pXG4gIH0pO1xufTtcbmZ1bmN0aW9uIGRlZXBQYXJ0aWFsaWZ5MihzY2hlbWEpIHtcbiAgaWYgKHNjaGVtYSBpbnN0YW5jZW9mIFpvZE9iamVjdDIpIHtcbiAgICBjb25zdCBuZXdTaGFwZSA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIHNjaGVtYS5zaGFwZSkge1xuICAgICAgY29uc3QgZmllbGRTY2hlbWEgPSBzY2hlbWEuc2hhcGVba2V5XTtcbiAgICAgIG5ld1NoYXBlW2tleV0gPSBab2RPcHRpb25hbDIuY3JlYXRlKGRlZXBQYXJ0aWFsaWZ5MihmaWVsZFNjaGVtYSkpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFpvZE9iamVjdDIoe1xuICAgICAgLi4uc2NoZW1hLl9kZWYsXG4gICAgICBzaGFwZTogKCkgPT4gbmV3U2hhcGVcbiAgICB9KTtcbiAgfSBlbHNlIGlmIChzY2hlbWEgaW5zdGFuY2VvZiBab2RBcnJheTIpIHtcbiAgICByZXR1cm4gWm9kQXJyYXkyLmNyZWF0ZShkZWVwUGFydGlhbGlmeTIoc2NoZW1hLmVsZW1lbnQpKTtcbiAgfSBlbHNlIGlmIChzY2hlbWEgaW5zdGFuY2VvZiBab2RPcHRpb25hbDIpIHtcbiAgICByZXR1cm4gWm9kT3B0aW9uYWwyLmNyZWF0ZShkZWVwUGFydGlhbGlmeTIoc2NoZW1hLnVud3JhcCgpKSk7XG4gIH0gZWxzZSBpZiAoc2NoZW1hIGluc3RhbmNlb2YgWm9kTnVsbGFibGUyKSB7XG4gICAgcmV0dXJuIFpvZE51bGxhYmxlMi5jcmVhdGUoZGVlcFBhcnRpYWxpZnkyKHNjaGVtYS51bndyYXAoKSkpO1xuICB9IGVsc2UgaWYgKHNjaGVtYSBpbnN0YW5jZW9mIFpvZFR1cGxlMikge1xuICAgIHJldHVybiBab2RUdXBsZTIuY3JlYXRlKHNjaGVtYS5pdGVtcy5tYXAoKGl0ZW0pID0+IGRlZXBQYXJ0aWFsaWZ5MihpdGVtKSkpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzY2hlbWE7XG4gIH1cbn1cbnZhciBab2RPYmplY3QyID0gY2xhc3MgZXh0ZW5kcyBab2RUeXBlMiB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgdGhpcy5fY2FjaGVkID0gbnVsbDtcbiAgICB0aGlzLm5vbnN0cmljdCA9IHRoaXMucGFzc3Rocm91Z2g7XG4gICAgdGhpcy5hdWdtZW50ID0gQXVnbWVudEZhY3RvcnkyKHRoaXMuX2RlZik7XG4gICAgdGhpcy5leHRlbmQgPSBBdWdtZW50RmFjdG9yeTIodGhpcy5fZGVmKTtcbiAgfVxuICBfZ2V0Q2FjaGVkKCkge1xuICAgIGlmICh0aGlzLl9jYWNoZWQgIT09IG51bGwpXG4gICAgICByZXR1cm4gdGhpcy5fY2FjaGVkO1xuICAgIGNvbnN0IHNoYXBlID0gdGhpcy5fZGVmLnNoYXBlKCk7XG4gICAgY29uc3Qga2V5cyA9IHV0aWwyLm9iamVjdEtleXMoc2hhcGUpO1xuICAgIHJldHVybiB0aGlzLl9jYWNoZWQgPSB7c2hhcGUsIGtleXN9O1xuICB9XG4gIF9wYXJzZShpbnB1dCkge1xuICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICBpZiAocGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZTIub2JqZWN0KSB7XG4gICAgICBjb25zdCBjdHgyID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgYWRkSXNzdWVUb0NvbnRleHQyKGN0eDIsIHtcbiAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlMi5pbnZhbGlkX3R5cGUsXG4gICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlMi5vYmplY3QsXG4gICAgICAgIHJlY2VpdmVkOiBjdHgyLnBhcnNlZFR5cGVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIElOVkFMSUQ1O1xuICAgIH1cbiAgICBjb25zdCB7c3RhdHVzLCBjdHh9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICBjb25zdCB7c2hhcGUsIGtleXM6IHNoYXBlS2V5c30gPSB0aGlzLl9nZXRDYWNoZWQoKTtcbiAgICBjb25zdCBleHRyYUtleXMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBjdHguZGF0YSkge1xuICAgICAgaWYgKCFzaGFwZUtleXMuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICBleHRyYUtleXMucHVzaChrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBwYWlycyA9IFtdO1xuICAgIGZvciAoY29uc3Qga2V5IG9mIHNoYXBlS2V5cykge1xuICAgICAgY29uc3Qga2V5VmFsaWRhdG9yID0gc2hhcGVba2V5XTtcbiAgICAgIGNvbnN0IHZhbHVlID0gY3R4LmRhdGFba2V5XTtcbiAgICAgIHBhaXJzLnB1c2goe1xuICAgICAgICBrZXk6IHtzdGF0dXM6IFwidmFsaWRcIiwgdmFsdWU6IGtleX0sXG4gICAgICAgIHZhbHVlOiBrZXlWYWxpZGF0b3IuX3BhcnNlKG5ldyBQYXJzZUlucHV0TGF6eVBhdGgyKGN0eCwgdmFsdWUsIGN0eC5wYXRoLCBrZXkpKSxcbiAgICAgICAgYWx3YXlzU2V0OiBrZXkgaW4gY3R4LmRhdGFcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAodGhpcy5fZGVmLmNhdGNoYWxsIGluc3RhbmNlb2YgWm9kTmV2ZXIyKSB7XG4gICAgICBjb25zdCB1bmtub3duS2V5cyA9IHRoaXMuX2RlZi51bmtub3duS2V5cztcbiAgICAgIGlmICh1bmtub3duS2V5cyA9PT0gXCJwYXNzdGhyb3VnaFwiKSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIGV4dHJhS2V5cykge1xuICAgICAgICAgIHBhaXJzLnB1c2goe1xuICAgICAgICAgICAga2V5OiB7c3RhdHVzOiBcInZhbGlkXCIsIHZhbHVlOiBrZXl9LFxuICAgICAgICAgICAgdmFsdWU6IHtzdGF0dXM6IFwidmFsaWRcIiwgdmFsdWU6IGN0eC5kYXRhW2tleV19XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodW5rbm93bktleXMgPT09IFwic3RyaWN0XCIpIHtcbiAgICAgICAgaWYgKGV4dHJhS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQyKGN0eCwge1xuICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlMi51bnJlY29nbml6ZWRfa2V5cyxcbiAgICAgICAgICAgIGtleXM6IGV4dHJhS2V5c1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHVua25vd25LZXlzID09PSBcInN0cmlwXCIpXG4gICAgICAgIDtcbiAgICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludGVybmFsIFpvZE9iamVjdCBlcnJvcjogaW52YWxpZCB1bmtub3duS2V5cyB2YWx1ZS5gKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgY2F0Y2hhbGwgPSB0aGlzLl9kZWYuY2F0Y2hhbGw7XG4gICAgICBmb3IgKGNvbnN0IGtleSBvZiBleHRyYUtleXMpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBjdHguZGF0YVtrZXldO1xuICAgICAgICBwYWlycy5wdXNoKHtcbiAgICAgICAgICBrZXk6IHtzdGF0dXM6IFwidmFsaWRcIiwgdmFsdWU6IGtleX0sXG4gICAgICAgICAgdmFsdWU6IGNhdGNoYWxsLl9wYXJzZShuZXcgUGFyc2VJbnB1dExhenlQYXRoMihjdHgsIHZhbHVlLCBjdHgucGF0aCwga2V5KSksXG4gICAgICAgICAgYWx3YXlzU2V0OiBrZXkgaW4gY3R4LmRhdGFcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChjdHguY29tbW9uLmFzeW5jKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHN5bmNQYWlycyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IHBhaXIgb2YgcGFpcnMpIHtcbiAgICAgICAgICBjb25zdCBrZXkgPSBhd2FpdCBwYWlyLmtleTtcbiAgICAgICAgICBzeW5jUGFpcnMucHVzaCh7XG4gICAgICAgICAgICBrZXksXG4gICAgICAgICAgICB2YWx1ZTogYXdhaXQgcGFpci52YWx1ZSxcbiAgICAgICAgICAgIGFsd2F5c1NldDogcGFpci5hbHdheXNTZXRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3luY1BhaXJzO1xuICAgICAgfSkudGhlbigoc3luY1BhaXJzKSA9PiB7XG4gICAgICAgIHJldHVybiBQYXJzZVN0YXR1czIubWVyZ2VPYmplY3RTeW5jKHN0YXR1cywgc3luY1BhaXJzKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gUGFyc2VTdGF0dXMyLm1lcmdlT2JqZWN0U3luYyhzdGF0dXMsIHBhaXJzKTtcbiAgICB9XG4gIH1cbiAgZ2V0IHNoYXBlKCkge1xuICAgIHJldHVybiB0aGlzLl9kZWYuc2hhcGUoKTtcbiAgfVxuICBzdHJpY3QobWVzc2FnZSkge1xuICAgIGVycm9yVXRpbDIuZXJyVG9PYmo7XG4gICAgcmV0dXJuIG5ldyBab2RPYmplY3QyKHtcbiAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgIHVua25vd25LZXlzOiBcInN0cmljdFwiLFxuICAgICAgLi4ubWVzc2FnZSAhPT0gdm9pZCAwID8ge1xuICAgICAgICBlcnJvck1hcDogKGlzc3VlLCBjdHgpID0+IHtcbiAgICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgICAgICAgY29uc3QgZGVmYXVsdEVycm9yID0gKF9jID0gKF9iID0gKF9hID0gdGhpcy5fZGVmKS5lcnJvck1hcCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EsIGlzc3VlLCBjdHgpLm1lc3NhZ2UpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IGN0eC5kZWZhdWx0RXJyb3I7XG4gICAgICAgICAgaWYgKGlzc3VlLmNvZGUgPT09IFwidW5yZWNvZ25pemVkX2tleXNcIilcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIG1lc3NhZ2U6IChfZCA9IGVycm9yVXRpbDIuZXJyVG9PYmoobWVzc2FnZSkubWVzc2FnZSkgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogZGVmYXVsdEVycm9yXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtZXNzYWdlOiBkZWZhdWx0RXJyb3JcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9IDoge31cbiAgICB9KTtcbiAgfVxuICBzdHJpcCgpIHtcbiAgICByZXR1cm4gbmV3IFpvZE9iamVjdDIoe1xuICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgdW5rbm93bktleXM6IFwic3RyaXBcIlxuICAgIH0pO1xuICB9XG4gIHBhc3N0aHJvdWdoKCkge1xuICAgIHJldHVybiBuZXcgWm9kT2JqZWN0Mih7XG4gICAgICAuLi50aGlzLl9kZWYsXG4gICAgICB1bmtub3duS2V5czogXCJwYXNzdGhyb3VnaFwiXG4gICAgfSk7XG4gIH1cbiAgc2V0S2V5KGtleSwgc2NoZW1hKSB7XG4gICAgcmV0dXJuIHRoaXMuYXVnbWVudCh7W2tleV06IHNjaGVtYX0pO1xuICB9XG4gIG1lcmdlKG1lcmdpbmcpIHtcbiAgICBjb25zdCBtZXJnZWQgPSBuZXcgWm9kT2JqZWN0Mih7XG4gICAgICB1bmtub3duS2V5czogbWVyZ2luZy5fZGVmLnVua25vd25LZXlzLFxuICAgICAgY2F0Y2hhbGw6IG1lcmdpbmcuX2RlZi5jYXRjaGFsbCxcbiAgICAgIHNoYXBlOiAoKSA9PiBvYmplY3RVdGlsMi5tZXJnZVNoYXBlcyh0aGlzLl9kZWYuc2hhcGUoKSwgbWVyZ2luZy5fZGVmLnNoYXBlKCkpLFxuICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZDIuWm9kT2JqZWN0XG4gICAgfSk7XG4gICAgcmV0dXJuIG1lcmdlZDtcbiAgfVxuICBjYXRjaGFsbChpbmRleCkge1xuICAgIHJldHVybiBuZXcgWm9kT2JqZWN0Mih7XG4gICAgICAuLi50aGlzLl9kZWYsXG4gICAgICBjYXRjaGFsbDogaW5kZXhcbiAgICB9KTtcbiAgfVxuICBwaWNrKG1hc2spIHtcbiAgICBjb25zdCBzaGFwZSA9IHt9O1xuICAgIHV0aWwyLm9iamVjdEtleXMobWFzaykubWFwKChrZXkpID0+IHtcbiAgICAgIGlmICh0aGlzLnNoYXBlW2tleV0pXG4gICAgICAgIHNoYXBlW2tleV0gPSB0aGlzLnNoYXBlW2tleV07XG4gICAgfSk7XG4gICAgcmV0dXJuIG5ldyBab2RPYmplY3QyKHtcbiAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgIHNoYXBlOiAoKSA9PiBzaGFwZVxuICAgIH0pO1xuICB9XG4gIG9taXQobWFzaykge1xuICAgIGNvbnN0IHNoYXBlID0ge307XG4gICAgdXRpbDIub2JqZWN0S2V5cyh0aGlzLnNoYXBlKS5tYXAoKGtleSkgPT4ge1xuICAgICAgaWYgKHV0aWwyLm9iamVjdEtleXMobWFzaykuaW5kZXhPZihrZXkpID09PSAtMSkge1xuICAgICAgICBzaGFwZVtrZXldID0gdGhpcy5zaGFwZVtrZXldO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBuZXcgWm9kT2JqZWN0Mih7XG4gICAgICAuLi50aGlzLl9kZWYsXG4gICAgICBzaGFwZTogKCkgPT4gc2hhcGVcbiAgICB9KTtcbiAgfVxuICBkZWVwUGFydGlhbCgpIHtcbiAgICByZXR1cm4gZGVlcFBhcnRpYWxpZnkyKHRoaXMpO1xuICB9XG4gIHBhcnRpYWwobWFzaykge1xuICAgIGNvbnN0IG5ld1NoYXBlID0ge307XG4gICAgaWYgKG1hc2spIHtcbiAgICAgIHV0aWwyLm9iamVjdEtleXModGhpcy5zaGFwZSkubWFwKChrZXkpID0+IHtcbiAgICAgICAgaWYgKHV0aWwyLm9iamVjdEtleXMobWFzaykuaW5kZXhPZihrZXkpID09PSAtMSkge1xuICAgICAgICAgIG5ld1NoYXBlW2tleV0gPSB0aGlzLnNoYXBlW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3U2hhcGVba2V5XSA9IHRoaXMuc2hhcGVba2V5XS5vcHRpb25hbCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBuZXcgWm9kT2JqZWN0Mih7XG4gICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgc2hhcGU6ICgpID0+IG5ld1NoYXBlXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5zaGFwZSkge1xuICAgICAgICBjb25zdCBmaWVsZFNjaGVtYSA9IHRoaXMuc2hhcGVba2V5XTtcbiAgICAgICAgbmV3U2hhcGVba2V5XSA9IGZpZWxkU2NoZW1hLm9wdGlvbmFsKCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgWm9kT2JqZWN0Mih7XG4gICAgICAuLi50aGlzLl9kZWYsXG4gICAgICBzaGFwZTogKCkgPT4gbmV3U2hhcGVcbiAgICB9KTtcbiAgfVxuICByZXF1aXJlZCgpIHtcbiAgICBjb25zdCBuZXdTaGFwZSA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuc2hhcGUpIHtcbiAgICAgIGNvbnN0IGZpZWxkU2NoZW1hID0gdGhpcy5zaGFwZVtrZXldO1xuICAgICAgbGV0IG5ld0ZpZWxkID0gZmllbGRTY2hlbWE7XG4gICAgICB3aGlsZSAobmV3RmllbGQgaW5zdGFuY2VvZiBab2RPcHRpb25hbDIpIHtcbiAgICAgICAgbmV3RmllbGQgPSBuZXdGaWVsZC5fZGVmLmlubmVyVHlwZTtcbiAgICAgIH1cbiAgICAgIG5ld1NoYXBlW2tleV0gPSBuZXdGaWVsZDtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBab2RPYmplY3QyKHtcbiAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgIHNoYXBlOiAoKSA9PiBuZXdTaGFwZVxuICAgIH0pO1xuICB9XG4gIGtleW9mKCkge1xuICAgIHJldHVybiBjcmVhdGVab2RFbnVtMih1dGlsMi5vYmplY3RLZXlzKHRoaXMuc2hhcGUpKTtcbiAgfVxufTtcblpvZE9iamVjdDIuY3JlYXRlID0gKHNoYXBlLCBwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2RPYmplY3QyKHtcbiAgICBzaGFwZTogKCkgPT4gc2hhcGUsXG4gICAgdW5rbm93bktleXM6IFwic3RyaXBcIixcbiAgICBjYXRjaGFsbDogWm9kTmV2ZXIyLmNyZWF0ZSgpLFxuICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQyLlpvZE9iamVjdCxcbiAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zMihwYXJhbXMpXG4gIH0pO1xufTtcblpvZE9iamVjdDIuc3RyaWN0Q3JlYXRlID0gKHNoYXBlLCBwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2RPYmplY3QyKHtcbiAgICBzaGFwZTogKCkgPT4gc2hhcGUsXG4gICAgdW5rbm93bktleXM6IFwic3RyaWN0XCIsXG4gICAgY2F0Y2hhbGw6IFpvZE5ldmVyMi5jcmVhdGUoKSxcbiAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMi5ab2RPYmplY3QsXG4gICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtczIocGFyYW1zKVxuICB9KTtcbn07XG5ab2RPYmplY3QyLmxhenljcmVhdGUgPSAoc2hhcGUsIHBhcmFtcykgPT4ge1xuICByZXR1cm4gbmV3IFpvZE9iamVjdDIoe1xuICAgIHNoYXBlLFxuICAgIHVua25vd25LZXlzOiBcInN0cmlwXCIsXG4gICAgY2F0Y2hhbGw6IFpvZE5ldmVyMi5jcmVhdGUoKSxcbiAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMi5ab2RPYmplY3QsXG4gICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtczIocGFyYW1zKVxuICB9KTtcbn07XG52YXIgWm9kVW5pb24yID0gY2xhc3MgZXh0ZW5kcyBab2RUeXBlMiB7XG4gIF9wYXJzZShpbnB1dCkge1xuICAgIGNvbnN0IHtjdHh9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5fZGVmLm9wdGlvbnM7XG4gICAgZnVuY3Rpb24gaGFuZGxlUmVzdWx0cyhyZXN1bHRzKSB7XG4gICAgICBmb3IgKGNvbnN0IHJlc3VsdCBvZiByZXN1bHRzKSB7XG4gICAgICAgIGlmIChyZXN1bHQucmVzdWx0LnN0YXR1cyA9PT0gXCJ2YWxpZFwiKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5yZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZvciAoY29uc3QgcmVzdWx0IG9mIHJlc3VsdHMpIHtcbiAgICAgICAgaWYgKHJlc3VsdC5yZXN1bHQuc3RhdHVzID09PSBcImRpcnR5XCIpIHtcbiAgICAgICAgICBjdHguY29tbW9uLmlzc3Vlcy5wdXNoKC4uLnJlc3VsdC5jdHguY29tbW9uLmlzc3Vlcyk7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5yZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IHVuaW9uRXJyb3JzID0gcmVzdWx0cy5tYXAoKHJlc3VsdCkgPT4gbmV3IFpvZEVycm9yMihyZXN1bHQuY3R4LmNvbW1vbi5pc3N1ZXMpKTtcbiAgICAgIGFkZElzc3VlVG9Db250ZXh0MihjdHgsIHtcbiAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlMi5pbnZhbGlkX3VuaW9uLFxuICAgICAgICB1bmlvbkVycm9yc1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gSU5WQUxJRDU7XG4gICAgfVxuICAgIGlmIChjdHguY29tbW9uLmFzeW5jKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5hbGwob3B0aW9ucy5tYXAoYXN5bmMgKG9wdGlvbikgPT4ge1xuICAgICAgICBjb25zdCBjaGlsZEN0eCA9IHtcbiAgICAgICAgICAuLi5jdHgsXG4gICAgICAgICAgY29tbW9uOiB7XG4gICAgICAgICAgICAuLi5jdHguY29tbW9uLFxuICAgICAgICAgICAgaXNzdWVzOiBbXVxuICAgICAgICAgIH0sXG4gICAgICAgICAgcGFyZW50OiBudWxsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcmVzdWx0OiBhd2FpdCBvcHRpb24uX3BhcnNlQXN5bmMoe1xuICAgICAgICAgICAgZGF0YTogY3R4LmRhdGEsXG4gICAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgICAgIHBhcmVudDogY2hpbGRDdHhcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBjdHg6IGNoaWxkQ3R4XG4gICAgICAgIH07XG4gICAgICB9KSkudGhlbihoYW5kbGVSZXN1bHRzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGRpcnR5ID0gdm9pZCAwO1xuICAgICAgY29uc3QgaXNzdWVzID0gW107XG4gICAgICBmb3IgKGNvbnN0IG9wdGlvbiBvZiBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkQ3R4ID0ge1xuICAgICAgICAgIC4uLmN0eCxcbiAgICAgICAgICBjb21tb246IHtcbiAgICAgICAgICAgIC4uLmN0eC5jb21tb24sXG4gICAgICAgICAgICBpc3N1ZXM6IFtdXG4gICAgICAgICAgfSxcbiAgICAgICAgICBwYXJlbnQ6IG51bGxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gb3B0aW9uLl9wYXJzZVN5bmMoe1xuICAgICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgIHBhcmVudDogY2hpbGRDdHhcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChyZXN1bHQuc3RhdHVzID09PSBcInZhbGlkXCIpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdC5zdGF0dXMgPT09IFwiZGlydHlcIiAmJiAhZGlydHkpIHtcbiAgICAgICAgICBkaXJ0eSA9IHtyZXN1bHQsIGN0eDogY2hpbGRDdHh9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaGlsZEN0eC5jb21tb24uaXNzdWVzLmxlbmd0aCkge1xuICAgICAgICAgIGlzc3Vlcy5wdXNoKGNoaWxkQ3R4LmNvbW1vbi5pc3N1ZXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZGlydHkpIHtcbiAgICAgICAgY3R4LmNvbW1vbi5pc3N1ZXMucHVzaCguLi5kaXJ0eS5jdHguY29tbW9uLmlzc3Vlcyk7XG4gICAgICAgIHJldHVybiBkaXJ0eS5yZXN1bHQ7XG4gICAgICB9XG4gICAgICBjb25zdCB1bmlvbkVycm9ycyA9IGlzc3Vlcy5tYXAoKGlzc3VlczIpID0+IG5ldyBab2RFcnJvcjIoaXNzdWVzMikpO1xuICAgICAgYWRkSXNzdWVUb0NvbnRleHQyKGN0eCwge1xuICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUyLmludmFsaWRfdW5pb24sXG4gICAgICAgIHVuaW9uRXJyb3JzXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBJTlZBTElENTtcbiAgICB9XG4gIH1cbiAgZ2V0IG9wdGlvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RlZi5vcHRpb25zO1xuICB9XG59O1xuWm9kVW5pb24yLmNyZWF0ZSA9ICh0eXBlcywgcGFyYW1zKSA9PiB7XG4gIHJldHVybiBuZXcgWm9kVW5pb24yKHtcbiAgICBvcHRpb25zOiB0eXBlcyxcbiAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMi5ab2RVbmlvbixcbiAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zMihwYXJhbXMpXG4gIH0pO1xufTtcbnZhciBab2REaXNjcmltaW5hdGVkVW5pb24yID0gY2xhc3MgZXh0ZW5kcyBab2RUeXBlMiB7XG4gIF9wYXJzZShpbnB1dCkge1xuICAgIGNvbnN0IHtjdHh9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICBpZiAoY3R4LnBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUyLm9iamVjdCkge1xuICAgICAgYWRkSXNzdWVUb0NvbnRleHQyKGN0eCwge1xuICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUyLmludmFsaWRfdHlwZSxcbiAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUyLm9iamVjdCxcbiAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBJTlZBTElENTtcbiAgICB9XG4gICAgY29uc3QgZGlzY3JpbWluYXRvciA9IHRoaXMuZGlzY3JpbWluYXRvcjtcbiAgICBjb25zdCBkaXNjcmltaW5hdG9yVmFsdWUgPSBjdHguZGF0YVtkaXNjcmltaW5hdG9yXTtcbiAgICBjb25zdCBvcHRpb24gPSB0aGlzLm9wdGlvbnMuZ2V0KGRpc2NyaW1pbmF0b3JWYWx1ZSk7XG4gICAgaWYgKCFvcHRpb24pIHtcbiAgICAgIGFkZElzc3VlVG9Db250ZXh0MihjdHgsIHtcbiAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlMi5pbnZhbGlkX3VuaW9uX2Rpc2NyaW1pbmF0b3IsXG4gICAgICAgIG9wdGlvbnM6IHRoaXMudmFsaWREaXNjcmltaW5hdG9yVmFsdWVzLFxuICAgICAgICBwYXRoOiBbZGlzY3JpbWluYXRvcl1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIElOVkFMSUQ1O1xuICAgIH1cbiAgICBpZiAoY3R4LmNvbW1vbi5hc3luYykge1xuICAgICAgcmV0dXJuIG9wdGlvbi5fcGFyc2VBc3luYyh7XG4gICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgcGFyZW50OiBjdHhcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gb3B0aW9uLl9wYXJzZVN5bmMoe1xuICAgICAgICBkYXRhOiBjdHguZGF0YSxcbiAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgIHBhcmVudDogY3R4XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgZ2V0IGRpc2NyaW1pbmF0b3IoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RlZi5kaXNjcmltaW5hdG9yO1xuICB9XG4gIGdldCB2YWxpZERpc2NyaW1pbmF0b3JWYWx1ZXMoKSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5vcHRpb25zLmtleXMoKSk7XG4gIH1cbiAgZ2V0IG9wdGlvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RlZi5vcHRpb25zO1xuICB9XG4gIHN0YXRpYyBjcmVhdGUoZGlzY3JpbWluYXRvciwgdHlwZXMsIHBhcmFtcykge1xuICAgIGNvbnN0IG9wdGlvbnMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICAgIHRyeSB7XG4gICAgICB0eXBlcy5mb3JFYWNoKCh0eXBlKSA9PiB7XG4gICAgICAgIGNvbnN0IGRpc2NyaW1pbmF0b3JWYWx1ZSA9IHR5cGUuc2hhcGVbZGlzY3JpbWluYXRvcl0udmFsdWU7XG4gICAgICAgIG9wdGlvbnMuc2V0KGRpc2NyaW1pbmF0b3JWYWx1ZSwgdHlwZSk7XG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgZGlzY3JpbWluYXRvciB2YWx1ZSBjb3VsZCBub3QgYmUgZXh0cmFjdGVkIGZyb20gYWxsIHRoZSBwcm92aWRlZCBzY2hlbWFzXCIpO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5zaXplICE9PSB0eXBlcy5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlNvbWUgb2YgdGhlIGRpc2NyaW1pbmF0b3IgdmFsdWVzIGFyZSBub3QgdW5pcXVlXCIpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFpvZERpc2NyaW1pbmF0ZWRVbmlvbjIoe1xuICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZDIuWm9kRGlzY3JpbWluYXRlZFVuaW9uLFxuICAgICAgZGlzY3JpbWluYXRvcixcbiAgICAgIG9wdGlvbnMsXG4gICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zMihwYXJhbXMpXG4gICAgfSk7XG4gIH1cbn07XG5mdW5jdGlvbiBtZXJnZVZhbHVlczIoYSwgYikge1xuICBjb25zdCBhVHlwZSA9IGdldFBhcnNlZFR5cGUyKGEpO1xuICBjb25zdCBiVHlwZSA9IGdldFBhcnNlZFR5cGUyKGIpO1xuICBpZiAoYSA9PT0gYikge1xuICAgIHJldHVybiB7dmFsaWQ6IHRydWUsIGRhdGE6IGF9O1xuICB9IGVsc2UgaWYgKGFUeXBlID09PSBab2RQYXJzZWRUeXBlMi5vYmplY3QgJiYgYlR5cGUgPT09IFpvZFBhcnNlZFR5cGUyLm9iamVjdCkge1xuICAgIGNvbnN0IGJLZXlzID0gdXRpbDIub2JqZWN0S2V5cyhiKTtcbiAgICBjb25zdCBzaGFyZWRLZXlzID0gdXRpbDIub2JqZWN0S2V5cyhhKS5maWx0ZXIoKGtleSkgPT4gYktleXMuaW5kZXhPZihrZXkpICE9PSAtMSk7XG4gICAgY29uc3QgbmV3T2JqID0gey4uLmEsIC4uLmJ9O1xuICAgIGZvciAoY29uc3Qga2V5IG9mIHNoYXJlZEtleXMpIHtcbiAgICAgIGNvbnN0IHNoYXJlZFZhbHVlID0gbWVyZ2VWYWx1ZXMyKGFba2V5XSwgYltrZXldKTtcbiAgICAgIGlmICghc2hhcmVkVmFsdWUudmFsaWQpIHtcbiAgICAgICAgcmV0dXJuIHt2YWxpZDogZmFsc2V9O1xuICAgICAgfVxuICAgICAgbmV3T2JqW2tleV0gPSBzaGFyZWRWYWx1ZS5kYXRhO1xuICAgIH1cbiAgICByZXR1cm4ge3ZhbGlkOiB0cnVlLCBkYXRhOiBuZXdPYmp9O1xuICB9IGVsc2UgaWYgKGFUeXBlID09PSBab2RQYXJzZWRUeXBlMi5hcnJheSAmJiBiVHlwZSA9PT0gWm9kUGFyc2VkVHlwZTIuYXJyYXkpIHtcbiAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XG4gICAgICByZXR1cm4ge3ZhbGlkOiBmYWxzZX07XG4gICAgfVxuICAgIGNvbnN0IG5ld0FycmF5ID0gW107XG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGEubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICBjb25zdCBpdGVtQSA9IGFbaW5kZXhdO1xuICAgICAgY29uc3QgaXRlbUIgPSBiW2luZGV4XTtcbiAgICAgIGNvbnN0IHNoYXJlZFZhbHVlID0gbWVyZ2VWYWx1ZXMyKGl0ZW1BLCBpdGVtQik7XG4gICAgICBpZiAoIXNoYXJlZFZhbHVlLnZhbGlkKSB7XG4gICAgICAgIHJldHVybiB7dmFsaWQ6IGZhbHNlfTtcbiAgICAgIH1cbiAgICAgIG5ld0FycmF5LnB1c2goc2hhcmVkVmFsdWUuZGF0YSk7XG4gICAgfVxuICAgIHJldHVybiB7dmFsaWQ6IHRydWUsIGRhdGE6IG5ld0FycmF5fTtcbiAgfSBlbHNlIGlmIChhVHlwZSA9PT0gWm9kUGFyc2VkVHlwZTIuZGF0ZSAmJiBiVHlwZSA9PT0gWm9kUGFyc2VkVHlwZTIuZGF0ZSAmJiArYSA9PT0gK2IpIHtcbiAgICByZXR1cm4ge3ZhbGlkOiB0cnVlLCBkYXRhOiBhfTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4ge3ZhbGlkOiBmYWxzZX07XG4gIH1cbn1cbnZhciBab2RJbnRlcnNlY3Rpb24yID0gY2xhc3MgZXh0ZW5kcyBab2RUeXBlMiB7XG4gIF9wYXJzZShpbnB1dCkge1xuICAgIGNvbnN0IHtzdGF0dXMsIGN0eH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgIGNvbnN0IGhhbmRsZVBhcnNlZCA9IChwYXJzZWRMZWZ0LCBwYXJzZWRSaWdodCkgPT4ge1xuICAgICAgaWYgKGlzQWJvcnRlZDIocGFyc2VkTGVmdCkgfHwgaXNBYm9ydGVkMihwYXJzZWRSaWdodCkpIHtcbiAgICAgICAgcmV0dXJuIElOVkFMSUQ1O1xuICAgICAgfVxuICAgICAgY29uc3QgbWVyZ2VkID0gbWVyZ2VWYWx1ZXMyKHBhcnNlZExlZnQudmFsdWUsIHBhcnNlZFJpZ2h0LnZhbHVlKTtcbiAgICAgIGlmICghbWVyZ2VkLnZhbGlkKSB7XG4gICAgICAgIGFkZElzc3VlVG9Db250ZXh0MihjdHgsIHtcbiAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUyLmludmFsaWRfaW50ZXJzZWN0aW9uX3R5cGVzXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gSU5WQUxJRDU7XG4gICAgICB9XG4gICAgICBpZiAoaXNEaXJ0eTIocGFyc2VkTGVmdCkgfHwgaXNEaXJ0eTIocGFyc2VkUmlnaHQpKSB7XG4gICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtzdGF0dXM6IHN0YXR1cy52YWx1ZSwgdmFsdWU6IG1lcmdlZC5kYXRhfTtcbiAgICB9O1xuICAgIGlmIChjdHguY29tbW9uLmFzeW5jKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5hbGwoW1xuICAgICAgICB0aGlzLl9kZWYubGVmdC5fcGFyc2VBc3luYyh7XG4gICAgICAgICAgZGF0YTogY3R4LmRhdGEsXG4gICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgcGFyZW50OiBjdHhcbiAgICAgICAgfSksXG4gICAgICAgIHRoaXMuX2RlZi5yaWdodC5fcGFyc2VBc3luYyh7XG4gICAgICAgICAgZGF0YTogY3R4LmRhdGEsXG4gICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgcGFyZW50OiBjdHhcbiAgICAgICAgfSlcbiAgICAgIF0pLnRoZW4oKFtsZWZ0LCByaWdodF0pID0+IGhhbmRsZVBhcnNlZChsZWZ0LCByaWdodCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gaGFuZGxlUGFyc2VkKHRoaXMuX2RlZi5sZWZ0Ll9wYXJzZVN5bmMoe1xuICAgICAgICBkYXRhOiBjdHguZGF0YSxcbiAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgIHBhcmVudDogY3R4XG4gICAgICB9KSwgdGhpcy5fZGVmLnJpZ2h0Ll9wYXJzZVN5bmMoe1xuICAgICAgICBkYXRhOiBjdHguZGF0YSxcbiAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgIHBhcmVudDogY3R4XG4gICAgICB9KSk7XG4gICAgfVxuICB9XG59O1xuWm9kSW50ZXJzZWN0aW9uMi5jcmVhdGUgPSAobGVmdCwgcmlnaHQsIHBhcmFtcykgPT4ge1xuICByZXR1cm4gbmV3IFpvZEludGVyc2VjdGlvbjIoe1xuICAgIGxlZnQsXG4gICAgcmlnaHQsXG4gICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZDIuWm9kSW50ZXJzZWN0aW9uLFxuICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMyKHBhcmFtcylcbiAgfSk7XG59O1xudmFyIFpvZFR1cGxlMiA9IGNsYXNzIGV4dGVuZHMgWm9kVHlwZTIge1xuICBfcGFyc2UoaW5wdXQpIHtcbiAgICBjb25zdCB7c3RhdHVzLCBjdHh9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICBpZiAoY3R4LnBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUyLmFycmF5KSB7XG4gICAgICBhZGRJc3N1ZVRvQ29udGV4dDIoY3R4LCB7XG4gICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZTIuaW52YWxpZF90eXBlLFxuICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZTIuYXJyYXksXG4gICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gSU5WQUxJRDU7XG4gICAgfVxuICAgIGlmIChjdHguZGF0YS5sZW5ndGggPCB0aGlzLl9kZWYuaXRlbXMubGVuZ3RoKSB7XG4gICAgICBhZGRJc3N1ZVRvQ29udGV4dDIoY3R4LCB7XG4gICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZTIudG9vX3NtYWxsLFxuICAgICAgICBtaW5pbXVtOiB0aGlzLl9kZWYuaXRlbXMubGVuZ3RoLFxuICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgIHR5cGU6IFwiYXJyYXlcIlxuICAgICAgfSk7XG4gICAgICByZXR1cm4gSU5WQUxJRDU7XG4gICAgfVxuICAgIGNvbnN0IHJlc3QgPSB0aGlzLl9kZWYucmVzdDtcbiAgICBpZiAoIXJlc3QgJiYgY3R4LmRhdGEubGVuZ3RoID4gdGhpcy5fZGVmLml0ZW1zLmxlbmd0aCkge1xuICAgICAgYWRkSXNzdWVUb0NvbnRleHQyKGN0eCwge1xuICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUyLnRvb19iaWcsXG4gICAgICAgIG1heGltdW06IHRoaXMuX2RlZi5pdGVtcy5sZW5ndGgsXG4gICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgdHlwZTogXCJhcnJheVwiXG4gICAgICB9KTtcbiAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgIH1cbiAgICBjb25zdCBpdGVtcyA9IGN0eC5kYXRhLm1hcCgoaXRlbSwgaXRlbUluZGV4KSA9PiB7XG4gICAgICBjb25zdCBzY2hlbWEgPSB0aGlzLl9kZWYuaXRlbXNbaXRlbUluZGV4XSB8fCB0aGlzLl9kZWYucmVzdDtcbiAgICAgIGlmICghc2NoZW1hKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIHJldHVybiBzY2hlbWEuX3BhcnNlKG5ldyBQYXJzZUlucHV0TGF6eVBhdGgyKGN0eCwgaXRlbSwgY3R4LnBhdGgsIGl0ZW1JbmRleCkpO1xuICAgIH0pLmZpbHRlcigoeCkgPT4gISF4KTtcbiAgICBpZiAoY3R4LmNvbW1vbi5hc3luYykge1xuICAgICAgcmV0dXJuIFByb21pc2UuYWxsKGl0ZW1zKS50aGVuKChyZXN1bHRzKSA9PiB7XG4gICAgICAgIHJldHVybiBQYXJzZVN0YXR1czIubWVyZ2VBcnJheShzdGF0dXMsIHJlc3VsdHMpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBQYXJzZVN0YXR1czIubWVyZ2VBcnJheShzdGF0dXMsIGl0ZW1zKTtcbiAgICB9XG4gIH1cbiAgZ2V0IGl0ZW1zKCkge1xuICAgIHJldHVybiB0aGlzLl9kZWYuaXRlbXM7XG4gIH1cbiAgcmVzdChyZXN0KSB7XG4gICAgcmV0dXJuIG5ldyBab2RUdXBsZTIoe1xuICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgcmVzdFxuICAgIH0pO1xuICB9XG59O1xuWm9kVHVwbGUyLmNyZWF0ZSA9IChzY2hlbWFzLCBwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2RUdXBsZTIoe1xuICAgIGl0ZW1zOiBzY2hlbWFzLFxuICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQyLlpvZFR1cGxlLFxuICAgIHJlc3Q6IG51bGwsXG4gICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtczIocGFyYW1zKVxuICB9KTtcbn07XG52YXIgWm9kUmVjb3JkMiA9IGNsYXNzIGV4dGVuZHMgWm9kVHlwZTIge1xuICBnZXQga2V5U2NoZW1hKCkge1xuICAgIHJldHVybiB0aGlzLl9kZWYua2V5VHlwZTtcbiAgfVxuICBnZXQgdmFsdWVTY2hlbWEoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RlZi52YWx1ZVR5cGU7XG4gIH1cbiAgX3BhcnNlKGlucHV0KSB7XG4gICAgY29uc3Qge3N0YXR1cywgY3R4fSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XG4gICAgaWYgKGN0eC5wYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlMi5vYmplY3QpIHtcbiAgICAgIGFkZElzc3VlVG9Db250ZXh0MihjdHgsIHtcbiAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlMi5pbnZhbGlkX3R5cGUsXG4gICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlMi5vYmplY3QsXG4gICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gSU5WQUxJRDU7XG4gICAgfVxuICAgIGNvbnN0IHBhaXJzID0gW107XG4gICAgY29uc3Qga2V5VHlwZSA9IHRoaXMuX2RlZi5rZXlUeXBlO1xuICAgIGNvbnN0IHZhbHVlVHlwZSA9IHRoaXMuX2RlZi52YWx1ZVR5cGU7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gY3R4LmRhdGEpIHtcbiAgICAgIHBhaXJzLnB1c2goe1xuICAgICAgICBrZXk6IGtleVR5cGUuX3BhcnNlKG5ldyBQYXJzZUlucHV0TGF6eVBhdGgyKGN0eCwga2V5LCBjdHgucGF0aCwga2V5KSksXG4gICAgICAgIHZhbHVlOiB2YWx1ZVR5cGUuX3BhcnNlKG5ldyBQYXJzZUlucHV0TGF6eVBhdGgyKGN0eCwgY3R4LmRhdGFba2V5XSwgY3R4LnBhdGgsIGtleSkpXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcbiAgICAgIHJldHVybiBQYXJzZVN0YXR1czIubWVyZ2VPYmplY3RBc3luYyhzdGF0dXMsIHBhaXJzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFBhcnNlU3RhdHVzMi5tZXJnZU9iamVjdFN5bmMoc3RhdHVzLCBwYWlycyk7XG4gICAgfVxuICB9XG4gIGdldCBlbGVtZW50KCkge1xuICAgIHJldHVybiB0aGlzLl9kZWYudmFsdWVUeXBlO1xuICB9XG4gIHN0YXRpYyBjcmVhdGUoZmlyc3QsIHNlY29uZCwgdGhpcmQpIHtcbiAgICBpZiAoc2Vjb25kIGluc3RhbmNlb2YgWm9kVHlwZTIpIHtcbiAgICAgIHJldHVybiBuZXcgWm9kUmVjb3JkMih7XG4gICAgICAgIGtleVR5cGU6IGZpcnN0LFxuICAgICAgICB2YWx1ZVR5cGU6IHNlY29uZCxcbiAgICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZDIuWm9kUmVjb3JkLFxuICAgICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zMih0aGlyZClcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFpvZFJlY29yZDIoe1xuICAgICAga2V5VHlwZTogWm9kU3RyaW5nMi5jcmVhdGUoKSxcbiAgICAgIHZhbHVlVHlwZTogZmlyc3QsXG4gICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMi5ab2RSZWNvcmQsXG4gICAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zMihzZWNvbmQpXG4gICAgfSk7XG4gIH1cbn07XG52YXIgWm9kTWFwMiA9IGNsYXNzIGV4dGVuZHMgWm9kVHlwZTIge1xuICBfcGFyc2UoaW5wdXQpIHtcbiAgICBjb25zdCB7c3RhdHVzLCBjdHh9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICBpZiAoY3R4LnBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUyLm1hcCkge1xuICAgICAgYWRkSXNzdWVUb0NvbnRleHQyKGN0eCwge1xuICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUyLmludmFsaWRfdHlwZSxcbiAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUyLm1hcCxcbiAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBJTlZBTElENTtcbiAgICB9XG4gICAgY29uc3Qga2V5VHlwZSA9IHRoaXMuX2RlZi5rZXlUeXBlO1xuICAgIGNvbnN0IHZhbHVlVHlwZSA9IHRoaXMuX2RlZi52YWx1ZVR5cGU7XG4gICAgY29uc3QgcGFpcnMgPSBbLi4uY3R4LmRhdGEuZW50cmllcygpXS5tYXAoKFtrZXksIHZhbHVlXSwgaW5kZXgpID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGtleToga2V5VHlwZS5fcGFyc2UobmV3IFBhcnNlSW5wdXRMYXp5UGF0aDIoY3R4LCBrZXksIGN0eC5wYXRoLCBbaW5kZXgsIFwia2V5XCJdKSksXG4gICAgICAgIHZhbHVlOiB2YWx1ZVR5cGUuX3BhcnNlKG5ldyBQYXJzZUlucHV0TGF6eVBhdGgyKGN0eCwgdmFsdWUsIGN0eC5wYXRoLCBbaW5kZXgsIFwidmFsdWVcIl0pKVxuICAgICAgfTtcbiAgICB9KTtcbiAgICBpZiAoY3R4LmNvbW1vbi5hc3luYykge1xuICAgICAgY29uc3QgZmluYWxNYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oYXN5bmMgKCkgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IHBhaXIgb2YgcGFpcnMpIHtcbiAgICAgICAgICBjb25zdCBrZXkgPSBhd2FpdCBwYWlyLmtleTtcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IGF3YWl0IHBhaXIudmFsdWU7XG4gICAgICAgICAgaWYgKGtleS5zdGF0dXMgPT09IFwiYWJvcnRlZFwiIHx8IHZhbHVlLnN0YXR1cyA9PT0gXCJhYm9ydGVkXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBJTlZBTElENTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGtleS5zdGF0dXMgPT09IFwiZGlydHlcIiB8fCB2YWx1ZS5zdGF0dXMgPT09IFwiZGlydHlcIikge1xuICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZpbmFsTWFwLnNldChrZXkudmFsdWUsIHZhbHVlLnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge3N0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogZmluYWxNYXB9O1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGZpbmFsTWFwID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgICAgIGZvciAoY29uc3QgcGFpciBvZiBwYWlycykge1xuICAgICAgICBjb25zdCBrZXkgPSBwYWlyLmtleTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBwYWlyLnZhbHVlO1xuICAgICAgICBpZiAoa2V5LnN0YXR1cyA9PT0gXCJhYm9ydGVkXCIgfHwgdmFsdWUuc3RhdHVzID09PSBcImFib3J0ZWRcIikge1xuICAgICAgICAgIHJldHVybiBJTlZBTElENTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoa2V5LnN0YXR1cyA9PT0gXCJkaXJ0eVwiIHx8IHZhbHVlLnN0YXR1cyA9PT0gXCJkaXJ0eVwiKSB7XG4gICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxNYXAuc2V0KGtleS52YWx1ZSwgdmFsdWUudmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtzdGF0dXM6IHN0YXR1cy52YWx1ZSwgdmFsdWU6IGZpbmFsTWFwfTtcbiAgICB9XG4gIH1cbn07XG5ab2RNYXAyLmNyZWF0ZSA9IChrZXlUeXBlLCB2YWx1ZVR5cGUsIHBhcmFtcykgPT4ge1xuICByZXR1cm4gbmV3IFpvZE1hcDIoe1xuICAgIHZhbHVlVHlwZSxcbiAgICBrZXlUeXBlLFxuICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQyLlpvZE1hcCxcbiAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zMihwYXJhbXMpXG4gIH0pO1xufTtcbnZhciBab2RTZXQyID0gY2xhc3MgZXh0ZW5kcyBab2RUeXBlMiB7XG4gIF9wYXJzZShpbnB1dCkge1xuICAgIGNvbnN0IHtzdGF0dXMsIGN0eH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgIGlmIChjdHgucGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZTIuc2V0KSB7XG4gICAgICBhZGRJc3N1ZVRvQ29udGV4dDIoY3R4LCB7XG4gICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZTIuaW52YWxpZF90eXBlLFxuICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZTIuc2V0LFxuICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIElOVkFMSUQ1O1xuICAgIH1cbiAgICBjb25zdCBkZWYgPSB0aGlzLl9kZWY7XG4gICAgaWYgKGRlZi5taW5TaXplICE9PSBudWxsKSB7XG4gICAgICBpZiAoY3R4LmRhdGEuc2l6ZSA8IGRlZi5taW5TaXplLnZhbHVlKSB7XG4gICAgICAgIGFkZElzc3VlVG9Db250ZXh0MihjdHgsIHtcbiAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUyLnRvb19zbWFsbCxcbiAgICAgICAgICBtaW5pbXVtOiBkZWYubWluU2l6ZS52YWx1ZSxcbiAgICAgICAgICB0eXBlOiBcInNldFwiLFxuICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICBtZXNzYWdlOiBkZWYubWluU2l6ZS5tZXNzYWdlXG4gICAgICAgIH0pO1xuICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGRlZi5tYXhTaXplICE9PSBudWxsKSB7XG4gICAgICBpZiAoY3R4LmRhdGEuc2l6ZSA+IGRlZi5tYXhTaXplLnZhbHVlKSB7XG4gICAgICAgIGFkZElzc3VlVG9Db250ZXh0MihjdHgsIHtcbiAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUyLnRvb19iaWcsXG4gICAgICAgICAgbWF4aW11bTogZGVmLm1heFNpemUudmFsdWUsXG4gICAgICAgICAgdHlwZTogXCJzZXRcIixcbiAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgbWVzc2FnZTogZGVmLm1heFNpemUubWVzc2FnZVxuICAgICAgICB9KTtcbiAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHZhbHVlVHlwZSA9IHRoaXMuX2RlZi52YWx1ZVR5cGU7XG4gICAgZnVuY3Rpb24gZmluYWxpemVTZXQoZWxlbWVudHMyKSB7XG4gICAgICBjb25zdCBwYXJzZWRTZXQgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpO1xuICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIGVsZW1lbnRzMikge1xuICAgICAgICBpZiAoZWxlbWVudC5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKVxuICAgICAgICAgIHJldHVybiBJTlZBTElENTtcbiAgICAgICAgaWYgKGVsZW1lbnQuc3RhdHVzID09PSBcImRpcnR5XCIpXG4gICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgIHBhcnNlZFNldC5hZGQoZWxlbWVudC52YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4ge3N0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogcGFyc2VkU2V0fTtcbiAgICB9XG4gICAgY29uc3QgZWxlbWVudHMgPSBbLi4uY3R4LmRhdGEudmFsdWVzKCldLm1hcCgoaXRlbSwgaSkgPT4gdmFsdWVUeXBlLl9wYXJzZShuZXcgUGFyc2VJbnB1dExhenlQYXRoMihjdHgsIGl0ZW0sIGN0eC5wYXRoLCBpKSkpO1xuICAgIGlmIChjdHguY29tbW9uLmFzeW5jKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5hbGwoZWxlbWVudHMpLnRoZW4oKGVsZW1lbnRzMikgPT4gZmluYWxpemVTZXQoZWxlbWVudHMyKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmaW5hbGl6ZVNldChlbGVtZW50cyk7XG4gICAgfVxuICB9XG4gIG1pbihtaW5TaXplLCBtZXNzYWdlKSB7XG4gICAgcmV0dXJuIG5ldyBab2RTZXQyKHtcbiAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgIG1pblNpemU6IHt2YWx1ZTogbWluU2l6ZSwgbWVzc2FnZTogZXJyb3JVdGlsMi50b1N0cmluZyhtZXNzYWdlKX1cbiAgICB9KTtcbiAgfVxuICBtYXgobWF4U2l6ZSwgbWVzc2FnZSkge1xuICAgIHJldHVybiBuZXcgWm9kU2V0Mih7XG4gICAgICAuLi50aGlzLl9kZWYsXG4gICAgICBtYXhTaXplOiB7dmFsdWU6IG1heFNpemUsIG1lc3NhZ2U6IGVycm9yVXRpbDIudG9TdHJpbmcobWVzc2FnZSl9XG4gICAgfSk7XG4gIH1cbiAgc2l6ZShzaXplLCBtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMubWluKHNpemUsIG1lc3NhZ2UpLm1heChzaXplLCBtZXNzYWdlKTtcbiAgfVxuICBub25lbXB0eShtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMubWluKDEsIG1lc3NhZ2UpO1xuICB9XG59O1xuWm9kU2V0Mi5jcmVhdGUgPSAodmFsdWVUeXBlLCBwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2RTZXQyKHtcbiAgICB2YWx1ZVR5cGUsXG4gICAgbWluU2l6ZTogbnVsbCxcbiAgICBtYXhTaXplOiBudWxsLFxuICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQyLlpvZFNldCxcbiAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zMihwYXJhbXMpXG4gIH0pO1xufTtcbnZhciBab2RGdW5jdGlvbjIgPSBjbGFzcyBleHRlbmRzIFpvZFR5cGUyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICB0aGlzLnZhbGlkYXRlID0gdGhpcy5pbXBsZW1lbnQ7XG4gIH1cbiAgX3BhcnNlKGlucHV0KSB7XG4gICAgY29uc3Qge2N0eH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgIGlmIChjdHgucGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZTIuZnVuY3Rpb24pIHtcbiAgICAgIGFkZElzc3VlVG9Db250ZXh0MihjdHgsIHtcbiAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlMi5pbnZhbGlkX3R5cGUsXG4gICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlMi5mdW5jdGlvbixcbiAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBJTlZBTElENTtcbiAgICB9XG4gICAgZnVuY3Rpb24gbWFrZUFyZ3NJc3N1ZShhcmdzLCBlcnJvcikge1xuICAgICAgcmV0dXJuIG1ha2VJc3N1ZTIoe1xuICAgICAgICBkYXRhOiBhcmdzLFxuICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgZXJyb3JNYXBzOiBbXG4gICAgICAgICAgY3R4LmNvbW1vbi5jb250ZXh0dWFsRXJyb3JNYXAsXG4gICAgICAgICAgY3R4LnNjaGVtYUVycm9yTWFwLFxuICAgICAgICAgIGdldEVycm9yTWFwMigpLFxuICAgICAgICAgIGRlZmF1bHRFcnJvck1hcDJcbiAgICAgICAgXS5maWx0ZXIoKHgpID0+ICEheCksXG4gICAgICAgIGlzc3VlRGF0YToge1xuICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZTIuaW52YWxpZF9hcmd1bWVudHMsXG4gICAgICAgICAgYXJndW1lbnRzRXJyb3I6IGVycm9yXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBtYWtlUmV0dXJuc0lzc3VlKHJldHVybnMsIGVycm9yKSB7XG4gICAgICByZXR1cm4gbWFrZUlzc3VlMih7XG4gICAgICAgIGRhdGE6IHJldHVybnMsXG4gICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICBlcnJvck1hcHM6IFtcbiAgICAgICAgICBjdHguY29tbW9uLmNvbnRleHR1YWxFcnJvck1hcCxcbiAgICAgICAgICBjdHguc2NoZW1hRXJyb3JNYXAsXG4gICAgICAgICAgZ2V0RXJyb3JNYXAyKCksXG4gICAgICAgICAgZGVmYXVsdEVycm9yTWFwMlxuICAgICAgICBdLmZpbHRlcigoeCkgPT4gISF4KSxcbiAgICAgICAgaXNzdWVEYXRhOiB7XG4gICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlMi5pbnZhbGlkX3JldHVybl90eXBlLFxuICAgICAgICAgIHJldHVyblR5cGVFcnJvcjogZXJyb3JcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IHBhcmFtcyA9IHtlcnJvck1hcDogY3R4LmNvbW1vbi5jb250ZXh0dWFsRXJyb3JNYXB9O1xuICAgIGNvbnN0IGZuID0gY3R4LmRhdGE7XG4gICAgaWYgKHRoaXMuX2RlZi5yZXR1cm5zIGluc3RhbmNlb2YgWm9kUHJvbWlzZTIpIHtcbiAgICAgIHJldHVybiBPSzIoYXN5bmMgKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgWm9kRXJyb3IyKFtdKTtcbiAgICAgICAgY29uc3QgcGFyc2VkQXJncyA9IGF3YWl0IHRoaXMuX2RlZi5hcmdzLnBhcnNlQXN5bmMoYXJncywgcGFyYW1zKS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICAgIGVycm9yLmFkZElzc3VlKG1ha2VBcmdzSXNzdWUoYXJncywgZSkpO1xuICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZm4oLi4ucGFyc2VkQXJncyk7XG4gICAgICAgIGNvbnN0IHBhcnNlZFJldHVybnMgPSBhd2FpdCB0aGlzLl9kZWYucmV0dXJucy5fZGVmLnR5cGUucGFyc2VBc3luYyhyZXN1bHQsIHBhcmFtcykuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgICBlcnJvci5hZGRJc3N1ZShtYWtlUmV0dXJuc0lzc3VlKHJlc3VsdCwgZSkpO1xuICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHBhcnNlZFJldHVybnM7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIE9LMigoLi4uYXJncykgPT4ge1xuICAgICAgICBjb25zdCBwYXJzZWRBcmdzID0gdGhpcy5fZGVmLmFyZ3Muc2FmZVBhcnNlKGFyZ3MsIHBhcmFtcyk7XG4gICAgICAgIGlmICghcGFyc2VkQXJncy5zdWNjZXNzKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFpvZEVycm9yMihbbWFrZUFyZ3NJc3N1ZShhcmdzLCBwYXJzZWRBcmdzLmVycm9yKV0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGZuKC4uLnBhcnNlZEFyZ3MuZGF0YSk7XG4gICAgICAgIGNvbnN0IHBhcnNlZFJldHVybnMgPSB0aGlzLl9kZWYucmV0dXJucy5zYWZlUGFyc2UocmVzdWx0LCBwYXJhbXMpO1xuICAgICAgICBpZiAoIXBhcnNlZFJldHVybnMuc3VjY2Vzcykge1xuICAgICAgICAgIHRocm93IG5ldyBab2RFcnJvcjIoW21ha2VSZXR1cm5zSXNzdWUocmVzdWx0LCBwYXJzZWRSZXR1cm5zLmVycm9yKV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZWRSZXR1cm5zLmRhdGE7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgcGFyYW1ldGVycygpIHtcbiAgICByZXR1cm4gdGhpcy5fZGVmLmFyZ3M7XG4gIH1cbiAgcmV0dXJuVHlwZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGVmLnJldHVybnM7XG4gIH1cbiAgYXJncyguLi5pdGVtcykge1xuICAgIHJldHVybiBuZXcgWm9kRnVuY3Rpb24yKHtcbiAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgIGFyZ3M6IFpvZFR1cGxlMi5jcmVhdGUoaXRlbXMpLnJlc3QoWm9kVW5rbm93bjIuY3JlYXRlKCkpXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJucyhyZXR1cm5UeXBlKSB7XG4gICAgcmV0dXJuIG5ldyBab2RGdW5jdGlvbjIoe1xuICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgcmV0dXJuczogcmV0dXJuVHlwZVxuICAgIH0pO1xuICB9XG4gIGltcGxlbWVudChmdW5jKSB7XG4gICAgY29uc3QgdmFsaWRhdGVkRnVuYyA9IHRoaXMucGFyc2UoZnVuYyk7XG4gICAgcmV0dXJuIHZhbGlkYXRlZEZ1bmM7XG4gIH1cbiAgc3RyaWN0SW1wbGVtZW50KGZ1bmMpIHtcbiAgICBjb25zdCB2YWxpZGF0ZWRGdW5jID0gdGhpcy5wYXJzZShmdW5jKTtcbiAgICByZXR1cm4gdmFsaWRhdGVkRnVuYztcbiAgfVxufTtcblpvZEZ1bmN0aW9uMi5jcmVhdGUgPSAoYXJncywgcmV0dXJucywgcGFyYW1zKSA9PiB7XG4gIHJldHVybiBuZXcgWm9kRnVuY3Rpb24yKHtcbiAgICBhcmdzOiBhcmdzID8gYXJncy5yZXN0KFpvZFVua25vd24yLmNyZWF0ZSgpKSA6IFpvZFR1cGxlMi5jcmVhdGUoW10pLnJlc3QoWm9kVW5rbm93bjIuY3JlYXRlKCkpLFxuICAgIHJldHVybnM6IHJldHVybnMgfHwgWm9kVW5rbm93bjIuY3JlYXRlKCksXG4gICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZDIuWm9kRnVuY3Rpb24sXG4gICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtczIocGFyYW1zKVxuICB9KTtcbn07XG52YXIgWm9kTGF6eTIgPSBjbGFzcyBleHRlbmRzIFpvZFR5cGUyIHtcbiAgZ2V0IHNjaGVtYSgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGVmLmdldHRlcigpO1xuICB9XG4gIF9wYXJzZShpbnB1dCkge1xuICAgIGNvbnN0IHtjdHh9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICBjb25zdCBsYXp5U2NoZW1hID0gdGhpcy5fZGVmLmdldHRlcigpO1xuICAgIHJldHVybiBsYXp5U2NoZW1hLl9wYXJzZSh7ZGF0YTogY3R4LmRhdGEsIHBhdGg6IGN0eC5wYXRoLCBwYXJlbnQ6IGN0eH0pO1xuICB9XG59O1xuWm9kTGF6eTIuY3JlYXRlID0gKGdldHRlciwgcGFyYW1zKSA9PiB7XG4gIHJldHVybiBuZXcgWm9kTGF6eTIoe1xuICAgIGdldHRlcixcbiAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMi5ab2RMYXp5LFxuICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMyKHBhcmFtcylcbiAgfSk7XG59O1xudmFyIFpvZExpdGVyYWwyID0gY2xhc3MgZXh0ZW5kcyBab2RUeXBlMiB7XG4gIF9wYXJzZShpbnB1dCkge1xuICAgIGlmIChpbnB1dC5kYXRhICE9PSB0aGlzLl9kZWYudmFsdWUpIHtcbiAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcbiAgICAgIGFkZElzc3VlVG9Db250ZXh0MihjdHgsIHtcbiAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlMi5pbnZhbGlkX2xpdGVyYWwsXG4gICAgICAgIGV4cGVjdGVkOiB0aGlzLl9kZWYudmFsdWVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIElOVkFMSUQ1O1xuICAgIH1cbiAgICByZXR1cm4ge3N0YXR1czogXCJ2YWxpZFwiLCB2YWx1ZTogaW5wdXQuZGF0YX07XG4gIH1cbiAgZ2V0IHZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLl9kZWYudmFsdWU7XG4gIH1cbn07XG5ab2RMaXRlcmFsMi5jcmVhdGUgPSAodmFsdWUsIHBhcmFtcykgPT4ge1xuICByZXR1cm4gbmV3IFpvZExpdGVyYWwyKHtcbiAgICB2YWx1ZSxcbiAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMi5ab2RMaXRlcmFsLFxuICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMyKHBhcmFtcylcbiAgfSk7XG59O1xuZnVuY3Rpb24gY3JlYXRlWm9kRW51bTIodmFsdWVzLCBwYXJhbXMpIHtcbiAgcmV0dXJuIG5ldyBab2RFbnVtMih7XG4gICAgdmFsdWVzLFxuICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQyLlpvZEVudW0sXG4gICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtczIocGFyYW1zKVxuICB9KTtcbn1cbnZhciBab2RFbnVtMiA9IGNsYXNzIGV4dGVuZHMgWm9kVHlwZTIge1xuICBfcGFyc2UoaW5wdXQpIHtcbiAgICBpZiAodHlwZW9mIGlucHV0LmRhdGEgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcbiAgICAgIGNvbnN0IGV4cGVjdGVkVmFsdWVzID0gdGhpcy5fZGVmLnZhbHVlcztcbiAgICAgIGFkZElzc3VlVG9Db250ZXh0MihjdHgsIHtcbiAgICAgICAgZXhwZWN0ZWQ6IHV0aWwyLmpvaW5WYWx1ZXMoZXhwZWN0ZWRWYWx1ZXMpLFxuICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZTIuaW52YWxpZF90eXBlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBJTlZBTElENTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2RlZi52YWx1ZXMuaW5kZXhPZihpbnB1dC5kYXRhKSA9PT0gLTEpIHtcbiAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcbiAgICAgIGNvbnN0IGV4cGVjdGVkVmFsdWVzID0gdGhpcy5fZGVmLnZhbHVlcztcbiAgICAgIGFkZElzc3VlVG9Db250ZXh0MihjdHgsIHtcbiAgICAgICAgcmVjZWl2ZWQ6IGN0eC5kYXRhLFxuICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUyLmludmFsaWRfZW51bV92YWx1ZSxcbiAgICAgICAgb3B0aW9uczogZXhwZWN0ZWRWYWx1ZXNcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIElOVkFMSUQ1O1xuICAgIH1cbiAgICByZXR1cm4gT0syKGlucHV0LmRhdGEpO1xuICB9XG4gIGdldCBvcHRpb25zKCkge1xuICAgIHJldHVybiB0aGlzLl9kZWYudmFsdWVzO1xuICB9XG4gIGdldCBlbnVtKCkge1xuICAgIGNvbnN0IGVudW1WYWx1ZXMgPSB7fTtcbiAgICBmb3IgKGNvbnN0IHZhbCBvZiB0aGlzLl9kZWYudmFsdWVzKSB7XG4gICAgICBlbnVtVmFsdWVzW3ZhbF0gPSB2YWw7XG4gICAgfVxuICAgIHJldHVybiBlbnVtVmFsdWVzO1xuICB9XG4gIGdldCBWYWx1ZXMoKSB7XG4gICAgY29uc3QgZW51bVZhbHVlcyA9IHt9O1xuICAgIGZvciAoY29uc3QgdmFsIG9mIHRoaXMuX2RlZi52YWx1ZXMpIHtcbiAgICAgIGVudW1WYWx1ZXNbdmFsXSA9IHZhbDtcbiAgICB9XG4gICAgcmV0dXJuIGVudW1WYWx1ZXM7XG4gIH1cbiAgZ2V0IEVudW0oKSB7XG4gICAgY29uc3QgZW51bVZhbHVlcyA9IHt9O1xuICAgIGZvciAoY29uc3QgdmFsIG9mIHRoaXMuX2RlZi52YWx1ZXMpIHtcbiAgICAgIGVudW1WYWx1ZXNbdmFsXSA9IHZhbDtcbiAgICB9XG4gICAgcmV0dXJuIGVudW1WYWx1ZXM7XG4gIH1cbn07XG5ab2RFbnVtMi5jcmVhdGUgPSBjcmVhdGVab2RFbnVtMjtcbnZhciBab2ROYXRpdmVFbnVtMiA9IGNsYXNzIGV4dGVuZHMgWm9kVHlwZTIge1xuICBfcGFyc2UoaW5wdXQpIHtcbiAgICBjb25zdCBuYXRpdmVFbnVtVmFsdWVzID0gdXRpbDIuZ2V0VmFsaWRFbnVtVmFsdWVzKHRoaXMuX2RlZi52YWx1ZXMpO1xuICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcbiAgICBpZiAoY3R4LnBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUyLnN0cmluZyAmJiBjdHgucGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZTIubnVtYmVyKSB7XG4gICAgICBjb25zdCBleHBlY3RlZFZhbHVlcyA9IHV0aWwyLm9iamVjdFZhbHVlcyhuYXRpdmVFbnVtVmFsdWVzKTtcbiAgICAgIGFkZElzc3VlVG9Db250ZXh0MihjdHgsIHtcbiAgICAgICAgZXhwZWN0ZWQ6IHV0aWwyLmpvaW5WYWx1ZXMoZXhwZWN0ZWRWYWx1ZXMpLFxuICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGUsXG4gICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZTIuaW52YWxpZF90eXBlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBJTlZBTElENTtcbiAgICB9XG4gICAgaWYgKG5hdGl2ZUVudW1WYWx1ZXMuaW5kZXhPZihpbnB1dC5kYXRhKSA9PT0gLTEpIHtcbiAgICAgIGNvbnN0IGV4cGVjdGVkVmFsdWVzID0gdXRpbDIub2JqZWN0VmFsdWVzKG5hdGl2ZUVudW1WYWx1ZXMpO1xuICAgICAgYWRkSXNzdWVUb0NvbnRleHQyKGN0eCwge1xuICAgICAgICByZWNlaXZlZDogY3R4LmRhdGEsXG4gICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZTIuaW52YWxpZF9lbnVtX3ZhbHVlLFxuICAgICAgICBvcHRpb25zOiBleHBlY3RlZFZhbHVlc1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gSU5WQUxJRDU7XG4gICAgfVxuICAgIHJldHVybiBPSzIoaW5wdXQuZGF0YSk7XG4gIH1cbiAgZ2V0IGVudW0oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RlZi52YWx1ZXM7XG4gIH1cbn07XG5ab2ROYXRpdmVFbnVtMi5jcmVhdGUgPSAodmFsdWVzLCBwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2ROYXRpdmVFbnVtMih7XG4gICAgdmFsdWVzLFxuICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQyLlpvZE5hdGl2ZUVudW0sXG4gICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtczIocGFyYW1zKVxuICB9KTtcbn07XG52YXIgWm9kUHJvbWlzZTIgPSBjbGFzcyBleHRlbmRzIFpvZFR5cGUyIHtcbiAgX3BhcnNlKGlucHV0KSB7XG4gICAgY29uc3Qge2N0eH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgIGlmIChjdHgucGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZTIucHJvbWlzZSAmJiBjdHguY29tbW9uLmFzeW5jID09PSBmYWxzZSkge1xuICAgICAgYWRkSXNzdWVUb0NvbnRleHQyKGN0eCwge1xuICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUyLmludmFsaWRfdHlwZSxcbiAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUyLnByb21pc2UsXG4gICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gSU5WQUxJRDU7XG4gICAgfVxuICAgIGNvbnN0IHByb21pc2lmaWVkID0gY3R4LnBhcnNlZFR5cGUgPT09IFpvZFBhcnNlZFR5cGUyLnByb21pc2UgPyBjdHguZGF0YSA6IFByb21pc2UucmVzb2x2ZShjdHguZGF0YSk7XG4gICAgcmV0dXJuIE9LMihwcm9taXNpZmllZC50aGVuKChkYXRhKSA9PiB7XG4gICAgICByZXR1cm4gdGhpcy5fZGVmLnR5cGUucGFyc2VBc3luYyhkYXRhLCB7XG4gICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICBlcnJvck1hcDogY3R4LmNvbW1vbi5jb250ZXh0dWFsRXJyb3JNYXBcbiAgICAgIH0pO1xuICAgIH0pKTtcbiAgfVxufTtcblpvZFByb21pc2UyLmNyZWF0ZSA9IChzY2hlbWEsIHBhcmFtcykgPT4ge1xuICByZXR1cm4gbmV3IFpvZFByb21pc2UyKHtcbiAgICB0eXBlOiBzY2hlbWEsXG4gICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZDIuWm9kUHJvbWlzZSxcbiAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zMihwYXJhbXMpXG4gIH0pO1xufTtcbnZhciBab2RFZmZlY3RzMiA9IGNsYXNzIGV4dGVuZHMgWm9kVHlwZTIge1xuICBpbm5lclR5cGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RlZi5zY2hlbWE7XG4gIH1cbiAgX3BhcnNlKGlucHV0KSB7XG4gICAgY29uc3Qge3N0YXR1cywgY3R4fSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XG4gICAgY29uc3QgZWZmZWN0ID0gdGhpcy5fZGVmLmVmZmVjdCB8fCBudWxsO1xuICAgIGlmIChlZmZlY3QudHlwZSA9PT0gXCJwcmVwcm9jZXNzXCIpIHtcbiAgICAgIGNvbnN0IHByb2Nlc3NlZCA9IGVmZmVjdC50cmFuc2Zvcm0oY3R4LmRhdGEpO1xuICAgICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShwcm9jZXNzZWQpLnRoZW4oKHByb2Nlc3NlZDIpID0+IHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5fZGVmLnNjaGVtYS5fcGFyc2VBc3luYyh7XG4gICAgICAgICAgICBkYXRhOiBwcm9jZXNzZWQyLFxuICAgICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgICBwYXJlbnQ6IGN0eFxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYuc2NoZW1hLl9wYXJzZVN5bmMoe1xuICAgICAgICAgIGRhdGE6IHByb2Nlc3NlZCxcbiAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgICBwYXJlbnQ6IGN0eFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgY2hlY2tDdHggPSB7XG4gICAgICBhZGRJc3N1ZTogKGFyZykgPT4ge1xuICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dDIoY3R4LCBhcmcpO1xuICAgICAgICBpZiAoYXJnLmZhdGFsKSB7XG4gICAgICAgICAgc3RhdHVzLmFib3J0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBnZXQgcGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIGN0eC5wYXRoO1xuICAgICAgfVxuICAgIH07XG4gICAgY2hlY2tDdHguYWRkSXNzdWUgPSBjaGVja0N0eC5hZGRJc3N1ZS5iaW5kKGNoZWNrQ3R4KTtcbiAgICBpZiAoZWZmZWN0LnR5cGUgPT09IFwicmVmaW5lbWVudFwiKSB7XG4gICAgICBjb25zdCBleGVjdXRlUmVmaW5lbWVudCA9IChhY2MpID0+IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gZWZmZWN0LnJlZmluZW1lbnQoYWNjLCBjaGVja0N0eCk7XG4gICAgICAgIGlmIChjdHguY29tbW9uLmFzeW5jKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQXN5bmMgcmVmaW5lbWVudCBlbmNvdW50ZXJlZCBkdXJpbmcgc3luY2hyb25vdXMgcGFyc2Ugb3BlcmF0aW9uLiBVc2UgLnBhcnNlQXN5bmMgaW5zdGVhZC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgIH07XG4gICAgICBpZiAoY3R4LmNvbW1vbi5hc3luYyA9PT0gZmFsc2UpIHtcbiAgICAgICAgY29uc3QgaW5uZXIgPSB0aGlzLl9kZWYuc2NoZW1hLl9wYXJzZVN5bmMoe1xuICAgICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgIHBhcmVudDogY3R4XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoaW5uZXIuc3RhdHVzID09PSBcImFib3J0ZWRcIilcbiAgICAgICAgICByZXR1cm4gSU5WQUxJRDU7XG4gICAgICAgIGlmIChpbm5lci5zdGF0dXMgPT09IFwiZGlydHlcIilcbiAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgZXhlY3V0ZVJlZmluZW1lbnQoaW5uZXIudmFsdWUpO1xuICAgICAgICByZXR1cm4ge3N0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogaW5uZXIudmFsdWV9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5zY2hlbWEuX3BhcnNlQXN5bmMoe2RhdGE6IGN0eC5kYXRhLCBwYXRoOiBjdHgucGF0aCwgcGFyZW50OiBjdHh9KS50aGVuKChpbm5lcikgPT4ge1xuICAgICAgICAgIGlmIChpbm5lci5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKVxuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ1O1xuICAgICAgICAgIGlmIChpbm5lci5zdGF0dXMgPT09IFwiZGlydHlcIilcbiAgICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICAgIHJldHVybiBleGVjdXRlUmVmaW5lbWVudChpbm5lci52YWx1ZSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4ge3N0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogaW5uZXIudmFsdWV9O1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVmZmVjdC50eXBlID09PSBcInRyYW5zZm9ybVwiKSB7XG4gICAgICBpZiAoY3R4LmNvbW1vbi5hc3luYyA9PT0gZmFsc2UpIHtcbiAgICAgICAgY29uc3QgYmFzZSA9IHRoaXMuX2RlZi5zY2hlbWEuX3BhcnNlU3luYyh7XG4gICAgICAgICAgZGF0YTogY3R4LmRhdGEsXG4gICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgcGFyZW50OiBjdHhcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghaXNWYWxpZDIoYmFzZSkpXG4gICAgICAgICAgcmV0dXJuIGJhc2U7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGVmZmVjdC50cmFuc2Zvcm0oYmFzZS52YWx1ZSwgY2hlY2tDdHgpO1xuICAgICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQXN5bmNocm9ub3VzIHRyYW5zZm9ybSBlbmNvdW50ZXJlZCBkdXJpbmcgc3luY2hyb25vdXMgcGFyc2Ugb3BlcmF0aW9uLiBVc2UgLnBhcnNlQXN5bmMgaW5zdGVhZC5gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge3N0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogcmVzdWx0fTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWYuc2NoZW1hLl9wYXJzZUFzeW5jKHtkYXRhOiBjdHguZGF0YSwgcGF0aDogY3R4LnBhdGgsIHBhcmVudDogY3R4fSkudGhlbigoYmFzZSkgPT4ge1xuICAgICAgICAgIGlmICghaXNWYWxpZDIoYmFzZSkpXG4gICAgICAgICAgICByZXR1cm4gYmFzZTtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGVmZmVjdC50cmFuc2Zvcm0oYmFzZS52YWx1ZSwgY2hlY2tDdHgpKS50aGVuKChyZXN1bHQpID0+ICh7c3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiByZXN1bHR9KSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICB1dGlsMi5hc3NlcnROZXZlcihlZmZlY3QpO1xuICB9XG59O1xuWm9kRWZmZWN0czIuY3JlYXRlID0gKHNjaGVtYSwgZWZmZWN0LCBwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2RFZmZlY3RzMih7XG4gICAgc2NoZW1hLFxuICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQyLlpvZEVmZmVjdHMsXG4gICAgZWZmZWN0LFxuICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMyKHBhcmFtcylcbiAgfSk7XG59O1xuWm9kRWZmZWN0czIuY3JlYXRlV2l0aFByZXByb2Nlc3MgPSAocHJlcHJvY2Vzcywgc2NoZW1hLCBwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2RFZmZlY3RzMih7XG4gICAgc2NoZW1hLFxuICAgIGVmZmVjdDoge3R5cGU6IFwicHJlcHJvY2Vzc1wiLCB0cmFuc2Zvcm06IHByZXByb2Nlc3N9LFxuICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQyLlpvZEVmZmVjdHMsXG4gICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtczIocGFyYW1zKVxuICB9KTtcbn07XG52YXIgWm9kT3B0aW9uYWwyID0gY2xhc3MgZXh0ZW5kcyBab2RUeXBlMiB7XG4gIF9wYXJzZShpbnB1dCkge1xuICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICBpZiAocGFyc2VkVHlwZSA9PT0gWm9kUGFyc2VkVHlwZTIudW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gT0syKHZvaWQgMCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9kZWYuaW5uZXJUeXBlLl9wYXJzZShpbnB1dCk7XG4gIH1cbiAgdW53cmFwKCkge1xuICAgIHJldHVybiB0aGlzLl9kZWYuaW5uZXJUeXBlO1xuICB9XG59O1xuWm9kT3B0aW9uYWwyLmNyZWF0ZSA9ICh0eXBlLCBwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2RPcHRpb25hbDIoe1xuICAgIGlubmVyVHlwZTogdHlwZSxcbiAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMi5ab2RPcHRpb25hbCxcbiAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zMihwYXJhbXMpXG4gIH0pO1xufTtcbnZhciBab2ROdWxsYWJsZTIgPSBjbGFzcyBleHRlbmRzIFpvZFR5cGUyIHtcbiAgX3BhcnNlKGlucHV0KSB7XG4gICAgY29uc3QgcGFyc2VkVHlwZSA9IHRoaXMuX2dldFR5cGUoaW5wdXQpO1xuICAgIGlmIChwYXJzZWRUeXBlID09PSBab2RQYXJzZWRUeXBlMi5udWxsKSB7XG4gICAgICByZXR1cm4gT0syKG51bGwpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fZGVmLmlubmVyVHlwZS5fcGFyc2UoaW5wdXQpO1xuICB9XG4gIHVud3JhcCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGVmLmlubmVyVHlwZTtcbiAgfVxufTtcblpvZE51bGxhYmxlMi5jcmVhdGUgPSAodHlwZSwgcGFyYW1zKSA9PiB7XG4gIHJldHVybiBuZXcgWm9kTnVsbGFibGUyKHtcbiAgICBpbm5lclR5cGU6IHR5cGUsXG4gICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZDIuWm9kTnVsbGFibGUsXG4gICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtczIocGFyYW1zKVxuICB9KTtcbn07XG52YXIgWm9kRGVmYXVsdDIgPSBjbGFzcyBleHRlbmRzIFpvZFR5cGUyIHtcbiAgX3BhcnNlKGlucHV0KSB7XG4gICAgY29uc3Qge2N0eH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgIGxldCBkYXRhID0gY3R4LmRhdGE7XG4gICAgaWYgKGN0eC5wYXJzZWRUeXBlID09PSBab2RQYXJzZWRUeXBlMi51bmRlZmluZWQpIHtcbiAgICAgIGRhdGEgPSB0aGlzLl9kZWYuZGVmYXVsdFZhbHVlKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9kZWYuaW5uZXJUeXBlLl9wYXJzZSh7XG4gICAgICBkYXRhLFxuICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICBwYXJlbnQ6IGN0eFxuICAgIH0pO1xuICB9XG4gIHJlbW92ZURlZmF1bHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RlZi5pbm5lclR5cGU7XG4gIH1cbn07XG5ab2REZWZhdWx0Mi5jcmVhdGUgPSAodHlwZSwgcGFyYW1zKSA9PiB7XG4gIHJldHVybiBuZXcgWm9kT3B0aW9uYWwyKHtcbiAgICBpbm5lclR5cGU6IHR5cGUsXG4gICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZDIuWm9kT3B0aW9uYWwsXG4gICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtczIocGFyYW1zKVxuICB9KTtcbn07XG52YXIgWm9kTmFOMiA9IGNsYXNzIGV4dGVuZHMgWm9kVHlwZTIge1xuICBfcGFyc2UoaW5wdXQpIHtcbiAgICBjb25zdCBwYXJzZWRUeXBlID0gdGhpcy5fZ2V0VHlwZShpbnB1dCk7XG4gICAgaWYgKHBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUyLm5hbikge1xuICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgYWRkSXNzdWVUb0NvbnRleHQyKGN0eCwge1xuICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUyLmludmFsaWRfdHlwZSxcbiAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUyLm5hbixcbiAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBJTlZBTElENTtcbiAgICB9XG4gICAgcmV0dXJuIHtzdGF0dXM6IFwidmFsaWRcIiwgdmFsdWU6IGlucHV0LmRhdGF9O1xuICB9XG59O1xuWm9kTmFOMi5jcmVhdGUgPSAocGFyYW1zKSA9PiB7XG4gIHJldHVybiBuZXcgWm9kTmFOMih7XG4gICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZDIuWm9kTmFOLFxuICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMyKHBhcmFtcylcbiAgfSk7XG59O1xudmFyIGN1c3RvbTIgPSAoY2hlY2ssIHBhcmFtcyA9IHt9LCBmYXRhbCkgPT4ge1xuICBpZiAoY2hlY2spXG4gICAgcmV0dXJuIFpvZEFueTIuY3JlYXRlKCkuc3VwZXJSZWZpbmUoKGRhdGEsIGN0eCkgPT4ge1xuICAgICAgaWYgKCFjaGVjayhkYXRhKSkge1xuICAgICAgICBjb25zdCBwID0gdHlwZW9mIHBhcmFtcyA9PT0gXCJmdW5jdGlvblwiID8gcGFyYW1zKGRhdGEpIDogcGFyYW1zO1xuICAgICAgICBjb25zdCBwMiA9IHR5cGVvZiBwID09PSBcInN0cmluZ1wiID8ge21lc3NhZ2U6IHB9IDogcDtcbiAgICAgICAgY3R4LmFkZElzc3VlKHtjb2RlOiBcImN1c3RvbVwiLCAuLi5wMiwgZmF0YWx9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgcmV0dXJuIFpvZEFueTIuY3JlYXRlKCk7XG59O1xudmFyIGxhdGUyID0ge1xuICBvYmplY3Q6IFpvZE9iamVjdDIubGF6eWNyZWF0ZVxufTtcbnZhciBab2RGaXJzdFBhcnR5VHlwZUtpbmQyO1xuKGZ1bmN0aW9uKFpvZEZpcnN0UGFydHlUeXBlS2luZDIyKSB7XG4gIFpvZEZpcnN0UGFydHlUeXBlS2luZDIyW1wiWm9kU3RyaW5nXCJdID0gXCJab2RTdHJpbmdcIjtcbiAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMjJbXCJab2ROdW1iZXJcIl0gPSBcIlpvZE51bWJlclwiO1xuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQyMltcIlpvZE5hTlwiXSA9IFwiWm9kTmFOXCI7XG4gIFpvZEZpcnN0UGFydHlUeXBlS2luZDIyW1wiWm9kQmlnSW50XCJdID0gXCJab2RCaWdJbnRcIjtcbiAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMjJbXCJab2RCb29sZWFuXCJdID0gXCJab2RCb29sZWFuXCI7XG4gIFpvZEZpcnN0UGFydHlUeXBlS2luZDIyW1wiWm9kRGF0ZVwiXSA9IFwiWm9kRGF0ZVwiO1xuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQyMltcIlpvZFVuZGVmaW5lZFwiXSA9IFwiWm9kVW5kZWZpbmVkXCI7XG4gIFpvZEZpcnN0UGFydHlUeXBlS2luZDIyW1wiWm9kTnVsbFwiXSA9IFwiWm9kTnVsbFwiO1xuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQyMltcIlpvZEFueVwiXSA9IFwiWm9kQW55XCI7XG4gIFpvZEZpcnN0UGFydHlUeXBlS2luZDIyW1wiWm9kVW5rbm93blwiXSA9IFwiWm9kVW5rbm93blwiO1xuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQyMltcIlpvZE5ldmVyXCJdID0gXCJab2ROZXZlclwiO1xuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQyMltcIlpvZFZvaWRcIl0gPSBcIlpvZFZvaWRcIjtcbiAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMjJbXCJab2RBcnJheVwiXSA9IFwiWm9kQXJyYXlcIjtcbiAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMjJbXCJab2RPYmplY3RcIl0gPSBcIlpvZE9iamVjdFwiO1xuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQyMltcIlpvZFVuaW9uXCJdID0gXCJab2RVbmlvblwiO1xuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQyMltcIlpvZERpc2NyaW1pbmF0ZWRVbmlvblwiXSA9IFwiWm9kRGlzY3JpbWluYXRlZFVuaW9uXCI7XG4gIFpvZEZpcnN0UGFydHlUeXBlS2luZDIyW1wiWm9kSW50ZXJzZWN0aW9uXCJdID0gXCJab2RJbnRlcnNlY3Rpb25cIjtcbiAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMjJbXCJab2RUdXBsZVwiXSA9IFwiWm9kVHVwbGVcIjtcbiAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMjJbXCJab2RSZWNvcmRcIl0gPSBcIlpvZFJlY29yZFwiO1xuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQyMltcIlpvZE1hcFwiXSA9IFwiWm9kTWFwXCI7XG4gIFpvZEZpcnN0UGFydHlUeXBlS2luZDIyW1wiWm9kU2V0XCJdID0gXCJab2RTZXRcIjtcbiAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMjJbXCJab2RGdW5jdGlvblwiXSA9IFwiWm9kRnVuY3Rpb25cIjtcbiAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMjJbXCJab2RMYXp5XCJdID0gXCJab2RMYXp5XCI7XG4gIFpvZEZpcnN0UGFydHlUeXBlS2luZDIyW1wiWm9kTGl0ZXJhbFwiXSA9IFwiWm9kTGl0ZXJhbFwiO1xuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQyMltcIlpvZEVudW1cIl0gPSBcIlpvZEVudW1cIjtcbiAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMjJbXCJab2RFZmZlY3RzXCJdID0gXCJab2RFZmZlY3RzXCI7XG4gIFpvZEZpcnN0UGFydHlUeXBlS2luZDIyW1wiWm9kTmF0aXZlRW51bVwiXSA9IFwiWm9kTmF0aXZlRW51bVwiO1xuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQyMltcIlpvZE9wdGlvbmFsXCJdID0gXCJab2RPcHRpb25hbFwiO1xuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQyMltcIlpvZE51bGxhYmxlXCJdID0gXCJab2ROdWxsYWJsZVwiO1xuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQyMltcIlpvZERlZmF1bHRcIl0gPSBcIlpvZERlZmF1bHRcIjtcbiAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMjJbXCJab2RQcm9taXNlXCJdID0gXCJab2RQcm9taXNlXCI7XG59KShab2RGaXJzdFBhcnR5VHlwZUtpbmQyIHx8IChab2RGaXJzdFBhcnR5VHlwZUtpbmQyID0ge30pKTtcbnZhciBpbnN0YW5jZU9mVHlwZTIgPSAoY2xzLCBwYXJhbXMgPSB7XG4gIG1lc3NhZ2U6IGBJbnB1dCBub3QgaW5zdGFuY2Ugb2YgJHtjbHMubmFtZX1gXG59KSA9PiBjdXN0b20yKChkYXRhKSA9PiBkYXRhIGluc3RhbmNlb2YgY2xzLCBwYXJhbXMsIHRydWUpO1xudmFyIHN0cmluZ1R5cGUyID0gWm9kU3RyaW5nMi5jcmVhdGU7XG52YXIgbnVtYmVyVHlwZTIgPSBab2ROdW1iZXIyLmNyZWF0ZTtcbnZhciBuYW5UeXBlMiA9IFpvZE5hTjIuY3JlYXRlO1xudmFyIGJpZ0ludFR5cGUyID0gWm9kQmlnSW50Mi5jcmVhdGU7XG52YXIgYm9vbGVhblR5cGUyID0gWm9kQm9vbGVhbjIuY3JlYXRlO1xudmFyIGRhdGVUeXBlMiA9IFpvZERhdGUyLmNyZWF0ZTtcbnZhciB1bmRlZmluZWRUeXBlMiA9IFpvZFVuZGVmaW5lZDIuY3JlYXRlO1xudmFyIG51bGxUeXBlMiA9IFpvZE51bGwyLmNyZWF0ZTtcbnZhciBhbnlUeXBlMiA9IFpvZEFueTIuY3JlYXRlO1xudmFyIHVua25vd25UeXBlMiA9IFpvZFVua25vd24yLmNyZWF0ZTtcbnZhciBuZXZlclR5cGUyID0gWm9kTmV2ZXIyLmNyZWF0ZTtcbnZhciB2b2lkVHlwZTIgPSBab2RWb2lkMi5jcmVhdGU7XG52YXIgYXJyYXlUeXBlMiA9IFpvZEFycmF5Mi5jcmVhdGU7XG52YXIgb2JqZWN0VHlwZTIgPSBab2RPYmplY3QyLmNyZWF0ZTtcbnZhciBzdHJpY3RPYmplY3RUeXBlMiA9IFpvZE9iamVjdDIuc3RyaWN0Q3JlYXRlO1xudmFyIHVuaW9uVHlwZTIgPSBab2RVbmlvbjIuY3JlYXRlO1xudmFyIGRpc2NyaW1pbmF0ZWRVbmlvblR5cGUyID0gWm9kRGlzY3JpbWluYXRlZFVuaW9uMi5jcmVhdGU7XG52YXIgaW50ZXJzZWN0aW9uVHlwZTIgPSBab2RJbnRlcnNlY3Rpb24yLmNyZWF0ZTtcbnZhciB0dXBsZVR5cGUyID0gWm9kVHVwbGUyLmNyZWF0ZTtcbnZhciByZWNvcmRUeXBlMiA9IFpvZFJlY29yZDIuY3JlYXRlO1xudmFyIG1hcFR5cGUyID0gWm9kTWFwMi5jcmVhdGU7XG52YXIgc2V0VHlwZTIgPSBab2RTZXQyLmNyZWF0ZTtcbnZhciBmdW5jdGlvblR5cGUyID0gWm9kRnVuY3Rpb24yLmNyZWF0ZTtcbnZhciBsYXp5VHlwZTIgPSBab2RMYXp5Mi5jcmVhdGU7XG52YXIgbGl0ZXJhbFR5cGUyID0gWm9kTGl0ZXJhbDIuY3JlYXRlO1xudmFyIGVudW1UeXBlMiA9IFpvZEVudW0yLmNyZWF0ZTtcbnZhciBuYXRpdmVFbnVtVHlwZTIgPSBab2ROYXRpdmVFbnVtMi5jcmVhdGU7XG52YXIgcHJvbWlzZVR5cGUyID0gWm9kUHJvbWlzZTIuY3JlYXRlO1xudmFyIGVmZmVjdHNUeXBlMiA9IFpvZEVmZmVjdHMyLmNyZWF0ZTtcbnZhciBvcHRpb25hbFR5cGUyID0gWm9kT3B0aW9uYWwyLmNyZWF0ZTtcbnZhciBudWxsYWJsZVR5cGUyID0gWm9kTnVsbGFibGUyLmNyZWF0ZTtcbnZhciBwcmVwcm9jZXNzVHlwZTIgPSBab2RFZmZlY3RzMi5jcmVhdGVXaXRoUHJlcHJvY2VzcztcbnZhciBvc3RyaW5nMiA9ICgpID0+IHN0cmluZ1R5cGUyKCkub3B0aW9uYWwoKTtcbnZhciBvbnVtYmVyMiA9ICgpID0+IG51bWJlclR5cGUyKCkub3B0aW9uYWwoKTtcbnZhciBvYm9vbGVhbjIgPSAoKSA9PiBib29sZWFuVHlwZTIoKS5vcHRpb25hbCgpO1xudmFyIG1vZDIgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmZyZWV6ZSh7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgZ2V0UGFyc2VkVHlwZTogZ2V0UGFyc2VkVHlwZTIsXG4gIFpvZFBhcnNlZFR5cGU6IFpvZFBhcnNlZFR5cGUyLFxuICBtYWtlSXNzdWU6IG1ha2VJc3N1ZTIsXG4gIEVNUFRZX1BBVEg6IEVNUFRZX1BBVEgyLFxuICBhZGRJc3N1ZVRvQ29udGV4dDogYWRkSXNzdWVUb0NvbnRleHQyLFxuICBQYXJzZVN0YXR1czogUGFyc2VTdGF0dXMyLFxuICBJTlZBTElEOiBJTlZBTElENSxcbiAgRElSVFk6IERJUlRZMixcbiAgT0s6IE9LMixcbiAgaXNBYm9ydGVkOiBpc0Fib3J0ZWQyLFxuICBpc0RpcnR5OiBpc0RpcnR5MixcbiAgaXNWYWxpZDogaXNWYWxpZDIsXG4gIGlzQXN5bmM6IGlzQXN5bmMyLFxuICBqc29uU3RyaW5naWZ5UmVwbGFjZXI6IGpzb25TdHJpbmdpZnlSZXBsYWNlcjIsXG4gIFpvZFR5cGU6IFpvZFR5cGUyLFxuICBab2RTdHJpbmc6IFpvZFN0cmluZzIsXG4gIFpvZE51bWJlcjogWm9kTnVtYmVyMixcbiAgWm9kQmlnSW50OiBab2RCaWdJbnQyLFxuICBab2RCb29sZWFuOiBab2RCb29sZWFuMixcbiAgWm9kRGF0ZTogWm9kRGF0ZTIsXG4gIFpvZFVuZGVmaW5lZDogWm9kVW5kZWZpbmVkMixcbiAgWm9kTnVsbDogWm9kTnVsbDIsXG4gIFpvZEFueTogWm9kQW55MixcbiAgWm9kVW5rbm93bjogWm9kVW5rbm93bjIsXG4gIFpvZE5ldmVyOiBab2ROZXZlcjIsXG4gIFpvZFZvaWQ6IFpvZFZvaWQyLFxuICBab2RBcnJheTogWm9kQXJyYXkyLFxuICBnZXQgb2JqZWN0VXRpbCgpIHtcbiAgICByZXR1cm4gb2JqZWN0VXRpbDI7XG4gIH0sXG4gIFpvZE9iamVjdDogWm9kT2JqZWN0MixcbiAgWm9kVW5pb246IFpvZFVuaW9uMixcbiAgWm9kRGlzY3JpbWluYXRlZFVuaW9uOiBab2REaXNjcmltaW5hdGVkVW5pb24yLFxuICBab2RJbnRlcnNlY3Rpb246IFpvZEludGVyc2VjdGlvbjIsXG4gIFpvZFR1cGxlOiBab2RUdXBsZTIsXG4gIFpvZFJlY29yZDogWm9kUmVjb3JkMixcbiAgWm9kTWFwOiBab2RNYXAyLFxuICBab2RTZXQ6IFpvZFNldDIsXG4gIFpvZEZ1bmN0aW9uOiBab2RGdW5jdGlvbjIsXG4gIFpvZExhenk6IFpvZExhenkyLFxuICBab2RMaXRlcmFsOiBab2RMaXRlcmFsMixcbiAgWm9kRW51bTogWm9kRW51bTIsXG4gIFpvZE5hdGl2ZUVudW06IFpvZE5hdGl2ZUVudW0yLFxuICBab2RQcm9taXNlOiBab2RQcm9taXNlMixcbiAgWm9kRWZmZWN0czogWm9kRWZmZWN0czIsXG4gIFpvZFRyYW5zZm9ybWVyOiBab2RFZmZlY3RzMixcbiAgWm9kT3B0aW9uYWw6IFpvZE9wdGlvbmFsMixcbiAgWm9kTnVsbGFibGU6IFpvZE51bGxhYmxlMixcbiAgWm9kRGVmYXVsdDogWm9kRGVmYXVsdDIsXG4gIFpvZE5hTjogWm9kTmFOMixcbiAgY3VzdG9tOiBjdXN0b20yLFxuICBTY2hlbWE6IFpvZFR5cGUyLFxuICBab2RTY2hlbWE6IFpvZFR5cGUyLFxuICBsYXRlOiBsYXRlMixcbiAgZ2V0IFpvZEZpcnN0UGFydHlUeXBlS2luZCgpIHtcbiAgICByZXR1cm4gWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMjtcbiAgfSxcbiAgYW55OiBhbnlUeXBlMixcbiAgYXJyYXk6IGFycmF5VHlwZTIsXG4gIGJpZ2ludDogYmlnSW50VHlwZTIsXG4gIGJvb2xlYW46IGJvb2xlYW5UeXBlMixcbiAgZGF0ZTogZGF0ZVR5cGUyLFxuICBkaXNjcmltaW5hdGVkVW5pb246IGRpc2NyaW1pbmF0ZWRVbmlvblR5cGUyLFxuICBlZmZlY3Q6IGVmZmVjdHNUeXBlMixcbiAgZW51bTogZW51bVR5cGUyLFxuICBmdW5jdGlvbjogZnVuY3Rpb25UeXBlMixcbiAgaW5zdGFuY2VvZjogaW5zdGFuY2VPZlR5cGUyLFxuICBpbnRlcnNlY3Rpb246IGludGVyc2VjdGlvblR5cGUyLFxuICBsYXp5OiBsYXp5VHlwZTIsXG4gIGxpdGVyYWw6IGxpdGVyYWxUeXBlMixcbiAgbWFwOiBtYXBUeXBlMixcbiAgbmFuOiBuYW5UeXBlMixcbiAgbmF0aXZlRW51bTogbmF0aXZlRW51bVR5cGUyLFxuICBuZXZlcjogbmV2ZXJUeXBlMixcbiAgbnVsbDogbnVsbFR5cGUyLFxuICBudWxsYWJsZTogbnVsbGFibGVUeXBlMixcbiAgbnVtYmVyOiBudW1iZXJUeXBlMixcbiAgb2JqZWN0OiBvYmplY3RUeXBlMixcbiAgb2Jvb2xlYW46IG9ib29sZWFuMixcbiAgb251bWJlcjogb251bWJlcjIsXG4gIG9wdGlvbmFsOiBvcHRpb25hbFR5cGUyLFxuICBvc3RyaW5nOiBvc3RyaW5nMixcbiAgcHJlcHJvY2VzczogcHJlcHJvY2Vzc1R5cGUyLFxuICBwcm9taXNlOiBwcm9taXNlVHlwZTIsXG4gIHJlY29yZDogcmVjb3JkVHlwZTIsXG4gIHNldDogc2V0VHlwZTIsXG4gIHN0cmljdE9iamVjdDogc3RyaWN0T2JqZWN0VHlwZTIsXG4gIHN0cmluZzogc3RyaW5nVHlwZTIsXG4gIHRyYW5zZm9ybWVyOiBlZmZlY3RzVHlwZTIsXG4gIHR1cGxlOiB0dXBsZVR5cGUyLFxuICB1bmRlZmluZWQ6IHVuZGVmaW5lZFR5cGUyLFxuICB1bmlvbjogdW5pb25UeXBlMixcbiAgdW5rbm93bjogdW5rbm93blR5cGUyLFxuICB2b2lkOiB2b2lkVHlwZTIsXG4gIFpvZElzc3VlQ29kZTogWm9kSXNzdWVDb2RlMixcbiAgcXVvdGVsZXNzSnNvbjogcXVvdGVsZXNzSnNvbjIsXG4gIFpvZEVycm9yOiBab2RFcnJvcjIsXG4gIGRlZmF1bHRFcnJvck1hcDogZGVmYXVsdEVycm9yTWFwMixcbiAgc2V0RXJyb3JNYXA6IHNldEVycm9yTWFwMixcbiAgZ2V0RXJyb3JNYXA6IGdldEVycm9yTWFwMlxufSk7XG52YXIge2Jhc2U1OGNoZWNrfSA9IHJlcXVpcmVfbGliKCk7XG52YXIgSURfU0VQQVJBVE9SID0gXCItXCI7XG52YXIgUkVHRVhfVUxJRCA9IC9eWzAxMjM0NTY3ODlBQkNERUZHSEpLTU5QUVJTVFZXWFlaXXsyNn0kLztcbnZhciBpZEJpbmFyeVN0cnVjdCA9IHVzZShzdHJ1Y3Qoe1xuICB0ZXN0OiBib29sZWFuLFxuICB0aW1lc3RhbXA6IGJpZ1VpbnQ2NCxcbiAgdWxpZDogc3RyaW5nKGxhdGluMSwgdWludDgpLFxuICBzaXBoYXNoOiBieXRlcyh1aW50OClcbn0pKTtcbnZhciBTaXBIYXNoS2V5U3RydWN0ID0gbW9kMi5pbnN0YW5jZW9mKFVpbnQ4QXJyYXkpLnJlZmluZSgodmFsKSA9PiB2YWwubGVuZ3RoID09PSA4LCB7XG4gIG1lc3NhZ2U6IGBTaXBIYXNoIGtleSBtdXN0IGJlICR7aW1wb3J0X2hhbGZzaXBoYXNoLktFWV9MRU5HVEh9IGJ5dGVzYFxufSk7XG52YXIgU2lwSGFzaEhhc2hTdHJ1Y3QgPSBtb2QyLmluc3RhbmNlb2YoVWludDhBcnJheSkucmVmaW5lKCh2YWx1ZSkgPT4ge1xuICByZXR1cm4gdmFsdWUubGVuZ3RoID09PSA0O1xufSwge1xuICBtZXNzYWdlOiBgU2lwSGFzaCBoYXNoIHNob3VsZCBiZSA0IGJ5dGVzYFxufSk7XG52YXIgUGF5bG9hZFN0cnVjdCA9IG1vZDIub2JqZWN0KHtcbiAgdGVzdDogbW9kMi5ib29sZWFuKCkuZGVmYXVsdChmYWxzZSksXG4gIHRpbWVzdGFtcDogbW9kMi5zdHJpbmcoKSxcbiAgdWxpZDogbW9kMi5zdHJpbmcoKS5yZWdleChSRUdFWF9VTElEKVxufSk7XG5mdW5jdGlvbiBwYXJzZUlkKGlkKSB7XG4gIGNvbnN0IHNwbGl0SWQgPSBpZC5zcGxpdChJRF9TRVBBUkFUT1IpO1xuICBpZiAoc3BsaXRJZC5sZW5ndGggIT09IDEgJiYgc3BsaXRJZC5sZW5ndGggIT09IDIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYHN0cmluZyBmb3JtYXQgZXJyb3JgKTtcbiAgfVxuICBjb25zdCBpZFN0cmluZyA9IHNwbGl0SWQubGVuZ3RoID09PSAyID8gc3BsaXRJZFsxXSA6IHNwbGl0SWRbMF07XG4gIGNvbnN0IGRlY29kZWRJZCA9IGJhc2U1OGNoZWNrKGltcG9ydF9zaGEyNTYuaGFzaCkuZGVjb2RlKGlkU3RyaW5nKTtcbiAgY29uc3QgZGVzZXJpYWxpemVkSWQgPSBpZEJpbmFyeVN0cnVjdC5mcm9tQnl0ZXMoZGVjb2RlZElkKTtcbiAgY29uc3Qge3NpcGhhc2gsIC4uLnBheWxvYWR9ID0gZGVzZXJpYWxpemVkSWQ7XG4gIGNvbnN0IHBheWxvYWRXaXRoU3RyaW5nVGltZXN0YW1wID0ge1xuICAgIC4uLnBheWxvYWQsXG4gICAgdGltZXN0YW1wOiBwYXlsb2FkLnRpbWVzdGFtcC50b1N0cmluZygpXG4gIH07XG4gIGlmICghUGF5bG9hZFN0cnVjdC5zYWZlUGFyc2UocGF5bG9hZFdpdGhTdHJpbmdUaW1lc3RhbXApLnN1Y2Nlc3MpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYGludmFsaWQgcGF5bG9hZGApO1xuICB9XG4gIHJldHVybiBbXG4gICAgcGF5bG9hZFdpdGhTdHJpbmdUaW1lc3RhbXAsXG4gICAgc2lwaGFzaFxuICBdO1xufVxudmFyIGRlY29kZVVuc2FmZWx5ID0gKGlkKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgW3BheWxvYWRdID0gcGFyc2VJZChpZCk7XG4gICAgcmV0dXJuIHBheWxvYWQ7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgbW9kMi5ab2RFcnJvcikge1xuICAgICAgY29uc3Qgam9pbmVkSXNzdWVzID0gZXJyb3IuaXNzdWVzLm1hcCgoaXNzdWUpID0+IHtcbiAgICAgICAgcmV0dXJuIGAke2lzc3VlLmNvZGV9IDogWyR7aXNzdWUucGF0aC5qb2luKFwiLCBcIil9XSA6ICR7aXNzdWUubWVzc2FnZX1gO1xuICAgICAgfSkuam9pbihcIjsgXCIpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIElEOiAgJHtqb2luZWRJc3N1ZXN9YCk7XG4gICAgfSBlbHNlIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgSUQ6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG59O1xudmFyIGlzVmFsaWRVbnNhZmVseSA9IChpZCkgPT4ge1xuICB0cnkge1xuICAgIGRlY29kZVVuc2FmZWx5KGlkKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG52YXIgaW1wb3J0X2Jhc2U2NCA9IF9fdG9FU00ocmVxdWlyZV9iYXNlNjQoKSwgMSk7XG52YXIgaW1wb3J0X2lzb18zMTY2X3RzID0gX190b0VTTShyZXF1aXJlX2Rpc3QoKSwgMSk7XG52YXIgUkVHRVhfSEFTSF9IRVhfMzIgPSAvXigoW2EtZjAtOV17Mn0pezMyfSkkL2k7XG52YXIgSGFzaEhleDMyID0gbW9kLnN0cmluZygpLnJlZ2V4KFJFR0VYX0hBU0hfSEVYXzMyKTtcbnZhciBSRUdFWF9IQVNIX0hFWF8yMF82NCA9IC9eKChbYS1mMC05XXsyfSl7MjAsNjR9KSQvaTtcbnZhciBIYXNoSGV4MjB0bzY0ID0gbW9kLnN0cmluZygpLnJlZ2V4KFJFR0VYX0hBU0hfSEVYXzIwXzY0KTtcbnZhciBSRUdFWF9VTElEMiA9IC9eWzAxMjM0NTY3ODlBQkNERUZHSEpLTU5QUVJTVFZXWFlaXXsyNn0kLztcbnZhciBVTElEID0gbW9kLnN0cmluZygpLnJlZ2V4KFJFR0VYX1VMSUQyKTtcbnZhciBVbmlvbkhhc2hUeXBlcyA9IG1vZC51bmlvbihbbW9kLmxpdGVyYWwoXCJzaGExXCIpLCBtb2QubGl0ZXJhbChcInNoYS0yNTZcIiksIG1vZC5saXRlcmFsKFwic2hhLTM4NFwiKSwgbW9kLmxpdGVyYWwoXCJzaGEtNTEyXCIpXSk7XG52YXIgVW5pb25Qcm9vZkhhc2hUeXBlcyA9IG1vZC51bmlvbihbXG4gIG1vZC5saXRlcmFsKFwic2hhMjI0XCIpLFxuICBtb2QubGl0ZXJhbChcInNoYTI1NlwiKSxcbiAgbW9kLmxpdGVyYWwoXCJzaGEzODRcIiksXG4gIG1vZC5saXRlcmFsKFwic2hhNTEyXCIpLFxuICBtb2QubGl0ZXJhbChcInNoYTUxMl8yNTZcIiksXG4gIG1vZC5saXRlcmFsKFwic2hhM18yMjRcIiksXG4gIG1vZC5saXRlcmFsKFwic2hhM18yNTZcIiksXG4gIG1vZC5saXRlcmFsKFwic2hhM18zODRcIiksXG4gIG1vZC5saXRlcmFsKFwic2hhM181MTJcIilcbl0pO1xudmFyIFVuaW9uSW50ZW50VHlwZXMgPSBtb2QudW5pb24oW21vZC5saXRlcmFsKFwiYml0Y29pblwiKSwgbW9kLmxpdGVyYWwoXCJldGhlcmV1bVwiKSwgbW9kLmxpdGVyYWwoXCJzdGVsbGFyXCIpLCBtb2QubGl0ZXJhbChcInR3aXR0ZXJcIildKTtcbnZhciBVbmlvbkVudmlyb25tZW50VHlwZXMgPSBtb2QudW5pb24oW21vZC5saXRlcmFsKFwiZGV2ZWxvcG1lbnRcIiksIG1vZC5saXRlcmFsKFwic3RhZ2luZ1wiKSwgbW9kLmxpdGVyYWwoXCJwcm9kdWN0aW9uXCIpXSk7XG52YXIgSGFzaFR5cGUgPSBtb2Qub2JqZWN0KHtcbiAgbWluQnl0ZXM6IG1vZC5udW1iZXIoKS5taW4oMjApLm1heCg2NCksXG4gIG1heEJ5dGVzOiBtb2QubnVtYmVyKCkubWluKDIwKS5tYXgoNjQpXG59KTtcbnZhciBIYXNoVHlwZXMgPSBtb2QucmVjb3JkKG1vZC5zdHJpbmcoKSwgSGFzaFR5cGUpO1xudmFyIFRydWVzdGFtcElkID0gbW9kLnN0cmluZygpLnJlZmluZSgodmFsKSA9PiB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGlzVmFsaWRVbnNhZmVseSh2YWwpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufSwge1xuICBtZXNzYWdlOiBgaXMgbm90IGEgdmFsaWQgVHJ1ZXN0YW1wIElkIHN0cmluZ2Bcbn0pO1xudmFyIEJhc2U2NCA9IG1vZC5zdHJpbmcoKS5yZWZpbmUoKHZhbCkgPT4ge1xuICB0cnkge1xuICAgICgwLCBpbXBvcnRfYmFzZTY0LmRlY29kZSkodmFsKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn0sIHtcbiAgbWVzc2FnZTogYGlzIG5vdCBhIHZhbGlkIEJhc2U2NCBlbmNvZGVkIHN0cmluZ2Bcbn0pO1xudmFyIElTTzg2MDEgPSBtb2Quc3RyaW5nKCkucmVmaW5lKCh2YWwpID0+IHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gRGF0ZVRpbWUuZnJvbUlTTyh2YWwpLmlzVmFsaWQ7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59LCB7XG4gIG1lc3NhZ2U6IGBpcyBub3QgYSB2YWxpZCBJU084NjAxIHRpbWVzdGFtcGBcbn0pO1xudmFyIElTTzg2MDFVVEMgPSBtb2Quc3RyaW5nKCkucmVmaW5lKCh2YWwpID0+IHtcbiAgdHJ5IHtcbiAgICBpZiAoIXZhbC5lbmRzV2l0aChcIlpcIikgJiYgIXZhbC5lbmRzV2l0aChcIiswMDowMFwiKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBkID0gRGF0ZVRpbWUuZnJvbUlTTyh2YWwsIHt6b25lOiBcInV0Y1wifSk7XG4gICAgcmV0dXJuIGQuaXNWYWxpZCAmJiBkLm9mZnNldE5hbWVTaG9ydCA9PT0gXCJVVENcIjtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn0sIHtcbiAgbWVzc2FnZTogYGlzIG5vdCBhIHZhbGlkIElTTzg2MDEgVVRDIHRpbWVzdGFtcGBcbn0pO1xudmFyIElTTzMxNjZBbHBoYTIgPSBtb2Quc3RyaW5nKCkubGVuZ3RoKDIpLnJlZmluZSgodmFsKSA9PiB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICgwLCBpbXBvcnRfaXNvXzMxNjZfdHMuaXNJc28zMTY2QWxwaGEyQ29kZSkodmFsKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn0sIHtcbiAgbWVzc2FnZTogYGlzIG5vdCBhbiBJU08zMTY2IEFscGhhIDIgY291bnRyeSBjb2RlYFxufSk7XG52YXIgQWRkcmVzcyA9IG1vZC5vYmplY3Qoe1xuICBzdHJlZXRObzogbW9kLm9wdGlvbmFsKG1vZC5zdHJpbmcoKS5taW4oMSkubWF4KDgpKSxcbiAgc3RyZWV0TmFtZTogbW9kLm9wdGlvbmFsKG1vZC5zdHJpbmcoKS5taW4oMSkubWF4KDY0KSksXG4gIHN0cmVldFR5cGU6IG1vZC5vcHRpb25hbChtb2Quc3RyaW5nKCkubWluKDEpLm1heCgxNikpLFxuICBmbG9vcjogbW9kLm9wdGlvbmFsKG1vZC5zdHJpbmcoKS5taW4oMSkubWF4KDgpKSxcbiAgdG93bjogbW9kLm9wdGlvbmFsKG1vZC5zdHJpbmcoKS5taW4oMSkubWF4KDY0KSksXG4gIHJlZ2lvbjogbW9kLm9wdGlvbmFsKG1vZC5zdHJpbmcoKS5taW4oMSkubWF4KDY0KSksXG4gIHBvc3Rjb2RlOiBtb2Qub3B0aW9uYWwobW9kLnN0cmluZygpLm1pbigxKS5tYXgoMTYpKSxcbiAgY291bnRyeUNvZGU6IG1vZC5vcHRpb25hbChJU08zMTY2QWxwaGEyKVxufSk7XG52YXIgTGF0aXR1ZGUgPSBtb2Quc3RyaW5nKCkucmVmaW5lKCh2YWwpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBkZWNpbWFsTGF0TG9uZ1ZhbHVlU3RyaW5nID0gL15bLStdP1swLTldKlxcLj9bMC05XSskLztcbiAgICBpZiAoIWRlY2ltYWxMYXRMb25nVmFsdWVTdHJpbmcudGVzdCh2YWwpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IHZhbEZsb2F0ID0gcGFyc2VGbG9hdCh2YWwpO1xuICAgIHJldHVybiB2YWxGbG9hdCA+PSAtOTAgJiYgdmFsRmxvYXQgPD0gOTAgPyB0cnVlIDogZmFsc2U7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59LCB7XG4gIG1lc3NhZ2U6IGBpcyBub3QgYSB2YWxpZCBMYXRpdHVkZWBcbn0pO1xudmFyIExvbmdpdHVkZSA9IG1vZC5zdHJpbmcoKS5yZWZpbmUoKHZhbCkgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IGRlY2ltYWxMYXRMb25nVmFsdWVTdHJpbmcgPSAvXlstK10/WzAtOV0qXFwuP1swLTldKyQvO1xuICAgIGlmICghZGVjaW1hbExhdExvbmdWYWx1ZVN0cmluZy50ZXN0KHZhbCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgdmFsRmxvYXQgPSBwYXJzZUZsb2F0KHZhbCk7XG4gICAgcmV0dXJuIHZhbEZsb2F0ID49IC0xODAgJiYgdmFsRmxvYXQgPD0gMTgwID8gdHJ1ZSA6IGZhbHNlO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufSwge1xuICBtZXNzYWdlOiBgaXMgbm90IGEgdmFsaWQgTG9uZ2l0dWRlYFxufSk7XG52YXIgTGF0TG9uZyA9IG1vZC5vYmplY3Qoe1xuICBsYXRpdHVkZTogTGF0aXR1ZGUsXG4gIGxvbmdpdHVkZTogTG9uZ2l0dWRlXG59KTtcbnZhciBMb2NhdGlvbiA9IG1vZC5vYmplY3Qoe1xuICBjb29yZGluYXRlOiBMYXRMb25nLFxuICBhbHRpdHVkZTogbW9kLm9wdGlvbmFsKG1vZC5udW1iZXIoKS5pbnQoKS5taW4oLTFlNSkubWF4KDFlNSkpLFxuICBlbGxpcHNvaWRhbEFsdGl0dWRlOiBtb2Qub3B0aW9uYWwobW9kLm51bWJlcigpLmludCgpLm1pbigtMWU1KS5tYXgoMWU1KSksXG4gIGZsb29yOiBtb2Qub3B0aW9uYWwobW9kLm51bWJlcigpLmludCgpLm1pbigwKS5tYXgoMjAwKSksXG4gIGhvcml6b250YWxBY2N1cmFjeTogbW9kLm9wdGlvbmFsKG1vZC5udW1iZXIoKS5pbnQoKS5taW4oLTFlNSkubWF4KDFlNSkpLFxuICB2ZXJ0aWNhbEFjY3VyYWN5OiBtb2Qub3B0aW9uYWwobW9kLm51bWJlcigpLmludCgpLm1pbigtMWU1KS5tYXgoMWU1KSksXG4gIHRpbWVzdGFtcDogbW9kLm9wdGlvbmFsKElTTzg2MDEpLFxuICBzcGVlZDogbW9kLm9wdGlvbmFsKG1vZC5udW1iZXIoKS5pbnQoKS5taW4oLTFlNSkubWF4KDFlNSkpLFxuICBzcGVlZEFjY3VyYWN5OiBtb2Qub3B0aW9uYWwobW9kLm51bWJlcigpLmludCgpLm1pbigtMWU0KS5tYXgoMWU0KSksXG4gIGNvdXJzZTogbW9kLm9wdGlvbmFsKG1vZC5udW1iZXIoKS5pbnQoKS5taW4oLTM2MCkubWF4KDM2MCkpLFxuICBjb3Vyc2VBY2N1cmFjeTogbW9kLm9wdGlvbmFsKG1vZC5udW1iZXIoKS5pbnQoKS5taW4oLTM2MCkubWF4KDM2MCkpLFxuICBtYWduZXRpY0hlYWRpbmc6IG1vZC5vcHRpb25hbChtb2QubnVtYmVyKCkuaW50KCkubWluKDApLm1heCgzNTkpKSxcbiAgaGVhZGluZ0FjY3VyYWN5OiBtb2Qub3B0aW9uYWwobW9kLm51bWJlcigpLmludCgpLm1pbigtMTgwKS5tYXgoMTgwKSksXG4gIHRydWVIZWFkaW5nOiBtb2Qub3B0aW9uYWwobW9kLm51bWJlcigpLmludCgpLm1pbigwKS5tYXgoMzU5KSlcbn0pO1xudmFyIFBlcnNvbiA9IG1vZC5vYmplY3Qoe1xuICBnaXZlbk5hbWU6IG1vZC5vcHRpb25hbChtb2Quc3RyaW5nKCkubWluKDEpLm1heCgzMikpLFxuICBzdXJuYW1lOiBtb2Qub3B0aW9uYWwobW9kLnN0cmluZygpLm1pbigxKS5tYXgoMzIpKSxcbiAgb3JnYW5pemF0aW9uTmFtZTogbW9kLm9wdGlvbmFsKG1vZC5zdHJpbmcoKS5taW4oMSkubWF4KDY0KSksXG4gIHJvbGVzOiBtb2Qub3B0aW9uYWwobW9kLmFycmF5KG1vZC5zdHJpbmcoKSkubWluKDEpLm1heCgzMikpLFxuICBlbWFpbDogbW9kLm9wdGlvbmFsKG1vZC5zdHJpbmcoKS5lbWFpbCgpKSxcbiAgdXJpOiBtb2Qub3B0aW9uYWwobW9kLnN0cmluZygpLnVybCgpKSxcbiAgYWRkcmVzczogbW9kLm9wdGlvbmFsKEFkZHJlc3MpXG59KTtcbnZhciBTaWduYXR1cmUgPSBtb2Qub2JqZWN0KHtcbiAgcHVibGljS2V5OiBCYXNlNjQsXG4gIHNpZ25hdHVyZTogQmFzZTY0LFxuICBzaWduYXR1cmVUeXBlOiBtb2QubGl0ZXJhbChcImVkMjU1MTlcIiksXG4gIHNpZ25lcjogbW9kLm9wdGlvbmFsKFBlcnNvbilcbn0pO1xudmFyIEl0ZW1SZXF1ZXN0UHJvcHMgPSBtb2Qub2JqZWN0KHtcbiAgYXNuOiBtb2Qub3B0aW9uYWwobW9kLm51bGxhYmxlKG1vZC51bmlvbihbbW9kLm51bWJlcigpLmludCgpLCBtb2Quc3RyaW5nKCldKSkpLFxuICBjb2xvOiBtb2Qub3B0aW9uYWwobW9kLm51bGxhYmxlKG1vZC5zdHJpbmcoKS5taW4oMSkpKSxcbiAgY291bnRyeTogbW9kLm9wdGlvbmFsKG1vZC5udWxsYWJsZShtb2Quc3RyaW5nKCkubWluKDEpKSksXG4gIGNpdHk6IG1vZC5vcHRpb25hbChtb2QubnVsbGFibGUobW9kLnN0cmluZygpLm1pbigxKSkpLFxuICBjb250aW5lbnQ6IG1vZC5vcHRpb25hbChtb2QubnVsbGFibGUobW9kLnN0cmluZygpLm1pbigxKSkpLFxuICBsYXRpdHVkZTogbW9kLm9wdGlvbmFsKG1vZC5udWxsYWJsZShtb2Quc3RyaW5nKCkubWluKDEpKSksXG4gIGxvbmdpdHVkZTogbW9kLm9wdGlvbmFsKG1vZC5udWxsYWJsZShtb2Quc3RyaW5nKCkubWluKDEpKSksXG4gIHBvc3RhbENvZGU6IG1vZC5vcHRpb25hbChtb2QubnVsbGFibGUobW9kLnN0cmluZygpLm1pbigxKSkpLFxuICBtZXRyb0NvZGU6IG1vZC5vcHRpb25hbChtb2QubnVsbGFibGUobW9kLnN0cmluZygpLm1pbigxKSkpLFxuICByZWdpb246IG1vZC5vcHRpb25hbChtb2QubnVsbGFibGUobW9kLnN0cmluZygpLm1pbigxKSkpLFxuICByZWdpb25Db2RlOiBtb2Qub3B0aW9uYWwobW9kLm51bGxhYmxlKG1vZC5zdHJpbmcoKS5taW4oMSkpKSxcbiAgdGltZXpvbmU6IG1vZC5vcHRpb25hbChtb2QubnVsbGFibGUobW9kLnN0cmluZygpLm1pbigxKSkpXG59KTtcbnZhciBsaXRlcmFsU2NoZW1hID0gbW9kLnVuaW9uKFttb2Quc3RyaW5nKCksIG1vZC5udW1iZXIoKSwgbW9kLmJvb2xlYW4oKSwgbW9kLm51bGwoKV0pO1xudmFyIGpzb25TY2hlbWEgPSBtb2QubGF6eSgoKSA9PiBtb2QudW5pb24oW2xpdGVyYWxTY2hlbWEsIG1vZC5hcnJheShqc29uU2NoZW1hKSwgbW9kLnJlY29yZChqc29uU2NoZW1hKV0pKTtcbnZhciBJdGVtRGF0YSA9IG1vZC5vYmplY3Qoe1xuICBoYXNoOiBIYXNoSGV4MjB0bzY0LFxuICBoYXNoVHlwZTogVW5pb25IYXNoVHlwZXMsXG4gIHBlb3BsZTogbW9kLm9wdGlvbmFsKG1vZC5hcnJheShQZXJzb24pLm1pbigxKSksXG4gIGRlc2NyaXB0aW9uOiBtb2Qub3B0aW9uYWwobW9kLnN0cmluZygpLm1pbigxKS5tYXgoMjU2KSksXG4gIGFkZHJlc3M6IG1vZC5vcHRpb25hbChBZGRyZXNzKSxcbiAgbG9jYXRpb246IG1vZC5vcHRpb25hbChMb2NhdGlvbiksXG4gIHRpbWVzdGFtcDogbW9kLm9wdGlvbmFsKElTTzg2MDEpLFxuICBleHRyYTogbW9kLm9wdGlvbmFsKGpzb25TY2hlbWEpXG59KTtcbnZhciBJdGVtU2lnbmFscyA9IG1vZC5vYmplY3Qoe1xuICBjZjogbW9kLm9wdGlvbmFsKEl0ZW1SZXF1ZXN0UHJvcHMpLFxuICBvYnNlcnZhYmxlRW50cm9weTogbW9kLm9wdGlvbmFsKEhhc2hIZXgzMiksXG4gIHN1Ym1pdHRlZEF0OiBJU084NjAxVVRDXG59KTtcbnZhciBJdGVtID0gbW9kLm9iamVjdCh7XG4gIGl0ZW1EYXRhOiBtb2QuYXJyYXkoSXRlbURhdGEpLm1pbigxKSxcbiAgaXRlbVNpZ25hbHM6IG1vZC5vcHRpb25hbChJdGVtU2lnbmFscyksXG4gIGl0ZW1EYXRhU2lnbmF0dXJlczogbW9kLm9wdGlvbmFsKG1vZC5hcnJheShTaWduYXR1cmUpLm1pbigxKSlcbn0pO1xudmFyIEl0ZW1SZXF1ZXN0ID0gSXRlbS5waWNrKHtcbiAgaXRlbURhdGE6IHRydWUsXG4gIGl0ZW1EYXRhU2lnbmF0dXJlczogdHJ1ZVxufSk7XG52YXIgSXRlbVJlc3BvbnNlID0gbW9kLm9iamVjdCh7aWQ6IFRydWVzdGFtcElkfSk7XG52YXIgSXRlbUVudmVsb3BlID0gbW9kLm9iamVjdCh7XG4gIG93bmVyOiBtb2Quc3RyaW5nKCkubWluKDEpLm1heCgyNTUpLFxuICB1bGlkOiBVTElELFxuICBpdGVtOiBJdGVtXG59KTtcbnZhciBTTlNUb3BpY01lc3NhZ2UgPSBtb2Qub2JqZWN0KHtcbiAgb3duZXI6IG1vZC5vcHRpb25hbChtb2Quc3RyaW5nKCkubWluKDEpKSxcbiAgaW5wdXRIYXNoOiBIYXNoSGV4MzJcbn0pO1xudmFyIFByb29mT2JqZWN0TGF5ZXIgPSBtb2QudHVwbGUoW1xuICBtb2QubnVtYmVyKCkuaW50KCkubWluKDApLm1heCgxKSxcbiAgSGFzaEhleDIwdG82NFxuXSk7XG52YXIgUHJvb2ZPYmplY3QgPSBtb2Qub2JqZWN0KHtcbiAgdjogbW9kLm51bWJlcigpLmludCgpLm1pbigxKS5tYXgoMSksXG4gIGg6IFVuaW9uUHJvb2ZIYXNoVHlwZXMsXG4gIHA6IG1vZC5hcnJheShQcm9vZk9iamVjdExheWVyKVxufSk7XG52YXIgQ29tbWl0UHJvb2YgPSBtb2Qub2JqZWN0KHtcbiAgaW5wdXRIYXNoOiBIYXNoSGV4MzIsXG4gIGluY2x1c2lvblByb29mOiBQcm9vZk9iamVjdCxcbiAgbWVya2xlUm9vdDogSGFzaEhleDMyXG59KTtcbnZhciBDb21taXRUcmFuc2FjdGlvbkJhc2UgPSBtb2Qub2JqZWN0KHtcbiAgaW5wdXRIYXNoOiBIYXNoSGV4MzJcbn0pO1xudmFyIENvbW1pdFRyYW5zYWN0aW9uQml0Y29pbiA9IENvbW1pdFRyYW5zYWN0aW9uQmFzZS5leHRlbmQoe1xuICBpbnRlbnQ6IG1vZC5saXRlcmFsKFwiYml0Y29pblwiKSxcbiAgaGFzaDogbW9kLnN0cmluZygpLnJlZ2V4KC8oMHgpP1swLTlhLWZdKy9pKVxufSkuc3RyaWN0KCk7XG52YXIgQ29tbWl0VHJhbnNhY3Rpb25FdGhlcmV1bSA9IENvbW1pdFRyYW5zYWN0aW9uQmFzZS5leHRlbmQoe1xuICBpbnRlbnQ6IG1vZC5saXRlcmFsKFwiZXRoZXJldW1cIiksXG4gIGhhc2g6IG1vZC5zdHJpbmcoKS5yZWdleCgvKDB4KT9bMC05YS1mXSsvaSlcbn0pLnN0cmljdCgpO1xudmFyIENvbW1pdFRyYW5zYWN0aW9uU3RlbGxhciA9IENvbW1pdFRyYW5zYWN0aW9uQmFzZS5leHRlbmQoe1xuICBpbnRlbnQ6IG1vZC5saXRlcmFsKFwic3RlbGxhclwiKSxcbiAgaGFzaDogSGFzaEhleDMyLFxuICBsZWRnZXI6IG1vZC5udW1iZXIoKS5pbnQoKS5taW4oMTExMTEpXG59KS5zdHJpY3QoKTtcbnZhciBDb21taXRUcmFuc2FjdGlvblR3aXR0ZXIgPSBDb21taXRUcmFuc2FjdGlvbkJhc2UuZXh0ZW5kKHtcbiAgaW50ZW50OiBtb2QubGl0ZXJhbChcInR3aXR0ZXJcIiksXG4gIGlkOiBtb2Quc3RyaW5nKCkucmVnZXgoL1swLTldKy9pKVxufSkuc3RyaWN0KCk7XG52YXIgQ29tbWl0VHJhbnNhY3Rpb24gPSBtb2QuZGlzY3JpbWluYXRlZFVuaW9uKFwiaW50ZW50XCIsIFtcbiAgQ29tbWl0VHJhbnNhY3Rpb25CaXRjb2luLFxuICBDb21taXRUcmFuc2FjdGlvbkV0aGVyZXVtLFxuICBDb21taXRUcmFuc2FjdGlvblN0ZWxsYXIsXG4gIENvbW1pdFRyYW5zYWN0aW9uVHdpdHRlclxuXSk7XG52YXIgQ29tbWl0bWVudERhdGEgPSBtb2Qub2JqZWN0KHtcbiAgaWQ6IFRydWVzdGFtcElkLFxuICBpdGVtRGF0YTogbW9kLmFycmF5KEl0ZW1EYXRhKS5taW4oMSksXG4gIGl0ZW1EYXRhU2lnbmF0dXJlczogbW9kLm9wdGlvbmFsKG1vZC5hcnJheShTaWduYXR1cmUpLm1pbigxKSksXG4gIGl0ZW1TaWduYWxzOiBtb2Qub3B0aW9uYWwoSXRlbVNpZ25hbHMpLFxuICBwcm9vZnM6IG1vZC5hcnJheShDb21taXRQcm9vZiksXG4gIHRyYW5zYWN0aW9uczogbW9kLnJlY29yZChtb2Quc3RyaW5nKCksIG1vZC5hcnJheShDb21taXRUcmFuc2FjdGlvbikubWluKDEpKVxufSk7XG52YXIgQ29tbWl0bWVudCA9IG1vZC5vYmplY3Qoe1xuICBjb21taXRtZW50RGF0YTogQ29tbWl0bWVudERhdGEsXG4gIGNvbW1pdG1lbnREYXRhU2lnbmF0dXJlczogbW9kLmFycmF5KFNpZ25hdHVyZSkubWluKDEpXG59KTtcbnZhciBVTElEUmVzcG9uc2UgPSBtb2Qub2JqZWN0KHtcbiAgdDogbW9kLm51bWJlcigpLFxuICB0czogSVNPODYwMVVUQyxcbiAgdWxpZDogVUxJRFxufSk7XG52YXIgVUxJRFJlc3BvbnNlQ29sbGVjdGlvbiA9IG1vZC5hcnJheShVTElEUmVzcG9uc2UpO1xudmFyIFZlcmlmaWNhdGlvblByb29mID0gbW9kLm9iamVjdCh7XG4gIGlucHV0SGFzaDogSGFzaEhleDMyLFxuICBtZXJrbGVSb290OiBIYXNoSGV4MzJcbn0pLnN0cmljdCgpO1xudmFyIFZlcmlmaWNhdGlvblRyYW5zYWN0aW9uID0gbW9kLm9iamVjdCh7XG4gIGludGVudDogVW5pb25JbnRlbnRUeXBlcyxcbiAgdmVyaWZpZWQ6IG1vZC5ib29sZWFuKCksXG4gIHRyYW5zYWN0aW9uOiBDb21taXRUcmFuc2FjdGlvbixcbiAgdGltZXN0YW1wOiBtb2Qub3B0aW9uYWwoSVNPODYwMVVUQyksXG4gIHVybHM6IG1vZC5vcHRpb25hbChtb2Qub2JqZWN0KHtcbiAgICBtYWNoaW5lOiBtb2Qub3B0aW9uYWwobW9kLmFycmF5KG1vZC5zdHJpbmcoKS51cmwoKSkpLFxuICAgIGh1bWFuOiBtb2Qub3B0aW9uYWwobW9kLmFycmF5KG1vZC5zdHJpbmcoKS51cmwoKSkpXG4gIH0pKSxcbiAgZXJyb3I6IG1vZC5vcHRpb25hbChtb2Quc3RyaW5nKCkpXG59KS5zdHJpY3QoKTtcbnZhciBDb21taXRtZW50VmVyaWZpY2F0aW9uID0gbW9kLm9iamVjdCh7XG4gIHZlcmlmaWVkOiBtb2QuYm9vbGVhbigpLFxuICBpZDogbW9kLm9wdGlvbmFsKFRydWVzdGFtcElkKSxcbiAgaWREYXRhOiBtb2Qub3B0aW9uYWwobW9kLm9iamVjdCh7XG4gICAgdGVzdDogbW9kLmJvb2xlYW4oKSxcbiAgICB0aW1lc3RhbXA6IG1vZC5zdHJpbmcoKSxcbiAgICB1bGlkOiBVTElEXG4gIH0pKSxcbiAgaXRlbURhdGE6IG1vZC5vcHRpb25hbChtb2Qub2JqZWN0KHtcbiAgICBoYXNoOiBIYXNoSGV4MzIsXG4gICAgaGFzaFR5cGU6IFVuaW9uSGFzaFR5cGVzLFxuICAgIHNpZ25hdHVyZXNDb3VudDogbW9kLm9wdGlvbmFsKG1vZC5udW1iZXIoKS5pbnQoKSlcbiAgfSkpLFxuICBpdGVtOiBtb2Qub3B0aW9uYWwobW9kLm9iamVjdCh7XG4gICAgaGFzaDogSGFzaEhleDMyLFxuICAgIGhhc2hUeXBlOiBtb2QubGl0ZXJhbChcInNoYS0yNTZcIilcbiAgfSkpLFxuICBjb21taXRtZW50RGF0YTogbW9kLm9wdGlvbmFsKG1vZC5vYmplY3Qoe1xuICAgIGhhc2g6IEhhc2hIZXgzMixcbiAgICBoYXNoVHlwZTogbW9kLmxpdGVyYWwoXCJzaGEtMjU2XCIpLFxuICAgIHNpZ25hdHVyZXNDb3VudDogbW9kLm9wdGlvbmFsKG1vZC5udW1iZXIoKS5pbnQoKSlcbiAgfSkpLFxuICBwcm9vZnM6IG1vZC5vcHRpb25hbChtb2QuYXJyYXkoVmVyaWZpY2F0aW9uUHJvb2YpLm1pbigxKSksXG4gIHRyYW5zYWN0aW9uczogbW9kLm9wdGlvbmFsKG1vZC5hcnJheShWZXJpZmljYXRpb25UcmFuc2FjdGlvbikubWluKDEpKSxcbiAgY29tbWl0c1RvOiBtb2Qub3B0aW9uYWwobW9kLm9iamVjdCh7XG4gICAgaGFzaGVzOiBtb2QuYXJyYXkobW9kLm9iamVjdCh7XG4gICAgICBoYXNoOiBIYXNoSGV4MjB0bzY0LFxuICAgICAgaGFzaFR5cGU6IG1vZC5zdHJpbmcoKVxuICAgIH0pKS5taW4oMSksXG4gICAgb2JzZXJ2YWJsZUVudHJvcHk6IG1vZC5vcHRpb25hbChIYXNoSGV4MzIpLFxuICAgIHRpbWVzdGFtcHM6IG1vZC5vYmplY3Qoe1xuICAgICAgc3VibWl0dGVkQWZ0ZXI6IG1vZC5vcHRpb25hbChJU084NjAxVVRDKSxcbiAgICAgIHN1Ym1pdHRlZEF0OiBJU084NjAxVVRDLFxuICAgICAgc3VibWl0dGVkQmVmb3JlOiBtb2Qub3B0aW9uYWwobW9kLmFycmF5KG1vZC5zdHJpbmcoKSkpLFxuICAgICAgc3VibWl0V2luZG93TWlsbGlzZWNvbmRzOiBtb2Qub3B0aW9uYWwobW9kLm51bWJlcigpLmludCgpLm1pbigwKS5tYXgoMzYwMCAqIDI0ICogMzY1ICogMWUzKSlcbiAgICB9KVxuICB9KSksXG4gIGVycm9yOiBtb2Qub3B0aW9uYWwobW9kLnN0cmluZygpKVxufSkuc3RyaWN0KCk7XG52YXIgU2lnbmVkS2V5ID0gbW9kLm9iamVjdCh7XG4gIGVudmlyb25tZW50OiBVbmlvbkVudmlyb25tZW50VHlwZXMsXG4gIGV4cGlyZWQ6IG1vZC5ib29sZWFuKCksXG4gIGhhbmRsZTogbW9kLnN0cmluZygpLm1pbigxKSxcbiAgcHVibGljS2V5OiBCYXNlNjQsXG4gIHR5cGU6IG1vZC5saXRlcmFsKFwiZWQyNTUxOVwiKSxcbiAgc2VsZlNpZ25hdHVyZTogQmFzZTY0XG59KTtcbnZhciBTaWduZWRLZXlzID0gbW9kLmFycmF5KFNpZ25lZEtleSkubWluKDEpO1xudmFyIFVuc2lnbmVkS2V5ID0gU2lnbmVkS2V5Lm9taXQoe3NlbGZTaWduYXR1cmU6IHRydWV9KTtcbnZhciBDYW5vbmljYWxIYXNoID0gbW9kLm9iamVjdCh7XG4gIGhhc2g6IG1vZC5pbnN0YW5jZW9mKFVpbnQ4QXJyYXkpLFxuICBoYXNoSGV4OiBIYXNoSGV4MzIsXG4gIGhhc2hUeXBlOiBVbmlvbkhhc2hUeXBlcyxcbiAgY2Fub25pY2FsRGF0YTogbW9kLm9wdGlvbmFsKG1vZC5zdHJpbmcoKSlcbn0pO1xudmFyIEVudHJvcHlSZXNwb25zZUZpbGUgPSBtb2Qub2JqZWN0KHtcbiAgbmFtZTogbW9kLnN0cmluZygpLFxuICBoYXNoOiBIYXNoSGV4MzIsXG4gIGhhc2hUeXBlOiBtb2QubGl0ZXJhbChcInNoYTI1NlwiKVxufSk7XG52YXIgRW50cm9weVJlc3BvbnNlID0gbW9kLm9iamVjdCh7XG4gIGhhc2g6IEhhc2hIZXgzMixcbiAgaGFzaFR5cGU6IG1vZC5saXRlcmFsKFwic2hhMjU2XCIpLFxuICBoYXNoSXRlcmF0aW9uczogbW9kLm51bWJlcigpLmludCgpLm1pbigxKSxcbiAgY3JlYXRlZEF0OiBJU084NjAxVVRDLFxuICBzaWduYXR1cmU6IEJhc2U2NCxcbiAgcHJldkhhc2g6IG1vZC5vcHRpb25hbChIYXNoSGV4MzIpLFxuICBmaWxlczogbW9kLm9wdGlvbmFsKG1vZC5hcnJheShFbnRyb3B5UmVzcG9uc2VGaWxlKS5taW4oMSkpXG59KTtcbnZhciBfX2NyZWF0ZTMgPSBPYmplY3QuY3JlYXRlO1xudmFyIF9fZGVmUHJvcDMgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYzMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIF9fZ2V0T3duUHJvcE5hbWVzMyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIF9fZ2V0UHJvdG9PZjMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgX19oYXNPd25Qcm9wMyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19jb21tb25KUzMgPSAoY2IsIG1vZDIyKSA9PiBmdW5jdGlvbiBfX3JlcXVpcmUyKCkge1xuICByZXR1cm4gbW9kMjIgfHwgKDAsIGNiW19fZ2V0T3duUHJvcE5hbWVzMyhjYilbMF1dKSgobW9kMjIgPSB7ZXhwb3J0czoge319KS5leHBvcnRzLCBtb2QyMiksIG1vZDIyLmV4cG9ydHM7XG59O1xudmFyIF9fY29weVByb3BzMyA9ICh0bywgZnJvbSwgZXhjZXB0LCBkZXNjKSA9PiB7XG4gIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMzKGZyb20pKVxuICAgICAgaWYgKCFfX2hhc093blByb3AzLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcDModG8sIGtleSwge2dldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjMyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGV9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9FU00zID0gKG1vZDIyLCBpc05vZGVNb2RlLCB0YXJnZXQpID0+ICh0YXJnZXQgPSBtb2QyMiAhPSBudWxsID8gX19jcmVhdGUzKF9fZ2V0UHJvdG9PZjMobW9kMjIpKSA6IHt9LCBfX2NvcHlQcm9wczMoaXNOb2RlTW9kZSB8fCAhbW9kMjIgfHwgIW1vZDIyLl9fZXNNb2R1bGUgPyBfX2RlZlByb3AzKHRhcmdldCwgXCJkZWZhdWx0XCIsIHt2YWx1ZTogbW9kMjIsIGVudW1lcmFibGU6IHRydWV9KSA6IHRhcmdldCwgbW9kMjIpKTtcbnZhciByZXF1aXJlX2hleCA9IF9fY29tbW9uSlMzKHtcbiAgXCJub2RlX21vZHVsZXMvQHN0YWJsZWxpYi9oZXgvbGliL2hleC5qc1wiKGV4cG9ydHMpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHt2YWx1ZTogdHJ1ZX0pO1xuICAgIGZ1bmN0aW9uIGVuY29kZU5pYmJsZShiKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gYiArIDQ4O1xuICAgICAgcmVzdWx0ICs9IDkgLSBiID4+PiA4ICYgLTQ4ICsgNjUgLSAxMDtcbiAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKHJlc3VsdCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGVuY29kZU5pYmJsZUxvd2VyKGIpIHtcbiAgICAgIHZhciByZXN1bHQgPSBiICsgNDg7XG4gICAgICByZXN1bHQgKz0gOSAtIGIgPj4+IDggJiAtNDggKyA5NyAtIDEwO1xuICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUocmVzdWx0KTtcbiAgICB9XG4gICAgdmFyIElOVkFMSURfSEVYX05JQkJMRSA9IDI1NjtcbiAgICBmdW5jdGlvbiBkZWNvZGVOaWJibGUoYykge1xuICAgICAgdmFyIHJlc3VsdCA9IElOVkFMSURfSEVYX05JQkJMRTtcbiAgICAgIHJlc3VsdCArPSAoNDcgLSBjICYgYyAtIDU4KSA+PiA4ICYgLUlOVkFMSURfSEVYX05JQkJMRSArIGMgLSA0ODtcbiAgICAgIHJlc3VsdCArPSAoNjQgLSBjICYgYyAtIDcxKSA+PiA4ICYgLUlOVkFMSURfSEVYX05JQkJMRSArIGMgLSA2NSArIDEwO1xuICAgICAgcmVzdWx0ICs9ICg5NiAtIGMgJiBjIC0gMTAzKSA+PiA4ICYgLUlOVkFMSURfSEVYX05JQkJMRSArIGMgLSA5NyArIDEwO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgZnVuY3Rpb24gZW5jb2RlMihkYXRhLCBsb3dlckNhc2UpIHtcbiAgICAgIGlmIChsb3dlckNhc2UgPT09IHZvaWQgMCkge1xuICAgICAgICBsb3dlckNhc2UgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBlbmMgPSBsb3dlckNhc2UgPyBlbmNvZGVOaWJibGVMb3dlciA6IGVuY29kZU5pYmJsZTtcbiAgICAgIHZhciBzMiA9IFwiXCI7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgczIgKz0gZW5jKGRhdGFbaV0gPj4+IDQpO1xuICAgICAgICBzMiArPSBlbmMoZGF0YVtpXSAmIDE1KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzMjtcbiAgICB9XG4gICAgZXhwb3J0cy5lbmNvZGUgPSBlbmNvZGUyO1xuICAgIGZ1bmN0aW9uIGRlY29kZTIoaGV4KSB7XG4gICAgICBpZiAoaGV4Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoMCk7XG4gICAgICB9XG4gICAgICBpZiAoaGV4Lmxlbmd0aCAlIDIgIT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaGV4OiBpbnB1dCBzdHJpbmcgbXVzdCBiZSBkaXZpc2libGUgYnkgdHdvXCIpO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KGhleC5sZW5ndGggLyAyKTtcbiAgICAgIHZhciBoYXZlQmFkID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaGV4Lmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICAgIHZhciB2MCA9IGRlY29kZU5pYmJsZShoZXguY2hhckNvZGVBdChpKSk7XG4gICAgICAgIHZhciB2MSA9IGRlY29kZU5pYmJsZShoZXguY2hhckNvZGVBdChpICsgMSkpO1xuICAgICAgICByZXN1bHRbaSAvIDJdID0gdjAgPDwgNCB8IHYxO1xuICAgICAgICBoYXZlQmFkIHw9IHYwICYgSU5WQUxJRF9IRVhfTklCQkxFO1xuICAgICAgICBoYXZlQmFkIHw9IHYxICYgSU5WQUxJRF9IRVhfTklCQkxFO1xuICAgICAgfVxuICAgICAgaWYgKGhhdmVCYWQgIT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaGV4OiBpbmNvcnJlY3QgY2hhcmFjdGVycyBmb3IgZGVjb2RpbmdcIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBleHBvcnRzLmRlY29kZSA9IGRlY29kZTI7XG4gIH1cbn0pO1xudmFyIHJlcXVpcmVfY29uc3RhbnRfdGltZTIgPSBfX2NvbW1vbkpTMyh7XG4gIFwibm9kZV9tb2R1bGVzL0BzdGFibGVsaWIvY29uc3RhbnQtdGltZS9saWIvY29uc3RhbnQtdGltZS5qc1wiKGV4cG9ydHMpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHt2YWx1ZTogdHJ1ZX0pO1xuICAgIGZ1bmN0aW9uIHNlbGVjdChzdWJqZWN0LCByZXN1bHRJZk9uZSwgcmVzdWx0SWZaZXJvKSB7XG4gICAgICByZXR1cm4gfihzdWJqZWN0IC0gMSkgJiByZXN1bHRJZk9uZSB8IHN1YmplY3QgLSAxICYgcmVzdWx0SWZaZXJvO1xuICAgIH1cbiAgICBleHBvcnRzLnNlbGVjdCA9IHNlbGVjdDtcbiAgICBmdW5jdGlvbiBsZXNzT3JFcXVhbChhLCBiKSB7XG4gICAgICByZXR1cm4gKGEgfCAwKSAtIChiIHwgMCkgLSAxID4+PiAzMSAmIDE7XG4gICAgfVxuICAgIGV4cG9ydHMubGVzc09yRXF1YWwgPSBsZXNzT3JFcXVhbDtcbiAgICBmdW5jdGlvbiBjb21wYXJlMihhLCBiKSB7XG4gICAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0IHw9IGFbaV0gXiBiW2ldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIDEgJiByZXN1bHQgLSAxID4+PiA4O1xuICAgIH1cbiAgICBleHBvcnRzLmNvbXBhcmUgPSBjb21wYXJlMjtcbiAgICBmdW5jdGlvbiBlcXVhbDMoYSwgYikge1xuICAgICAgaWYgKGEubGVuZ3RoID09PSAwIHx8IGIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb21wYXJlMihhLCBiKSAhPT0gMDtcbiAgICB9XG4gICAgZXhwb3J0cy5lcXVhbCA9IGVxdWFsMztcbiAgfVxufSk7XG52YXIgcmVxdWlyZV9ieXRlcyA9IF9fY29tbW9uSlMzKHtcbiAgXCJub2RlX21vZHVsZXMvQHN0YWJsZWxpYi9ieXRlcy9saWIvYnl0ZXMuanNcIihleHBvcnRzKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7dmFsdWU6IHRydWV9KTtcbiAgICBmdW5jdGlvbiBjb25jYXQyKCkge1xuICAgICAgdmFyIHRvdGFsTGVuZ3RoID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRvdGFsTGVuZ3RoICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IFVpbnQ4QXJyYXkodG90YWxMZW5ndGgpO1xuICAgICAgdmFyIG9mZnNldDIgPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgcmVzdWx0LnNldChhcmcsIG9mZnNldDIpO1xuICAgICAgICBvZmZzZXQyICs9IGFyZy5sZW5ndGg7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBleHBvcnRzLmNvbmNhdCA9IGNvbmNhdDI7XG4gIH1cbn0pO1xudmFyIHJlcXVpcmVfaW50MiA9IF9fY29tbW9uSlMzKHtcbiAgXCJub2RlX21vZHVsZXMvQHN0YWJsZWxpYi9pbnQvbGliL2ludC5qc1wiKGV4cG9ydHMpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHt2YWx1ZTogdHJ1ZX0pO1xuICAgIGZ1bmN0aW9uIGltdWxTaGltKGEsIGIpIHtcbiAgICAgIHZhciBhaCA9IGEgPj4+IDE2ICYgNjU1MzUsIGFsID0gYSAmIDY1NTM1O1xuICAgICAgdmFyIGJoID0gYiA+Pj4gMTYgJiA2NTUzNSwgYmwgPSBiICYgNjU1MzU7XG4gICAgICByZXR1cm4gYWwgKiBibCArIChhaCAqIGJsICsgYWwgKiBiaCA8PCAxNiA+Pj4gMCkgfCAwO1xuICAgIH1cbiAgICBleHBvcnRzLm11bCA9IE1hdGguaW11bCB8fCBpbXVsU2hpbTtcbiAgICBmdW5jdGlvbiBhZGQoYSwgYikge1xuICAgICAgcmV0dXJuIGEgKyBiIHwgMDtcbiAgICB9XG4gICAgZXhwb3J0cy5hZGQgPSBhZGQ7XG4gICAgZnVuY3Rpb24gc3ViKGEsIGIpIHtcbiAgICAgIHJldHVybiBhIC0gYiB8IDA7XG4gICAgfVxuICAgIGV4cG9ydHMuc3ViID0gc3ViO1xuICAgIGZ1bmN0aW9uIHJvdGwoeCwgbjIpIHtcbiAgICAgIHJldHVybiB4IDw8IG4yIHwgeCA+Pj4gMzIgLSBuMjtcbiAgICB9XG4gICAgZXhwb3J0cy5yb3RsID0gcm90bDtcbiAgICBmdW5jdGlvbiByb3RyKHgsIG4yKSB7XG4gICAgICByZXR1cm4geCA8PCAzMiAtIG4yIHwgeCA+Pj4gbjI7XG4gICAgfVxuICAgIGV4cG9ydHMucm90ciA9IHJvdHI7XG4gICAgZnVuY3Rpb24gaXNJbnRlZ2VyU2hpbShuMikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBuMiA9PT0gXCJudW1iZXJcIiAmJiBpc0Zpbml0ZShuMikgJiYgTWF0aC5mbG9vcihuMikgPT09IG4yO1xuICAgIH1cbiAgICBleHBvcnRzLmlzSW50ZWdlciA9IE51bWJlci5pc0ludGVnZXIgfHwgaXNJbnRlZ2VyU2hpbTtcbiAgICBleHBvcnRzLk1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuICAgIGV4cG9ydHMuaXNTYWZlSW50ZWdlciA9IGZ1bmN0aW9uKG4yKSB7XG4gICAgICByZXR1cm4gZXhwb3J0cy5pc0ludGVnZXIobjIpICYmIChuMiA+PSAtZXhwb3J0cy5NQVhfU0FGRV9JTlRFR0VSICYmIG4yIDw9IGV4cG9ydHMuTUFYX1NBRkVfSU5URUdFUik7XG4gICAgfTtcbiAgfVxufSk7XG52YXIgcmVxdWlyZV9iaW5hcnkyID0gX19jb21tb25KUzMoe1xuICBcIm5vZGVfbW9kdWxlcy9Ac3RhYmxlbGliL2JpbmFyeS9saWIvYmluYXJ5LmpzXCIoZXhwb3J0cykge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge3ZhbHVlOiB0cnVlfSk7XG4gICAgdmFyIGludF8xID0gcmVxdWlyZV9pbnQyKCk7XG4gICAgZnVuY3Rpb24gcmVhZEludDE2QkUoYXJyYXksIG9mZnNldDIpIHtcbiAgICAgIGlmIChvZmZzZXQyID09PSB2b2lkIDApIHtcbiAgICAgICAgb2Zmc2V0MiA9IDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gKGFycmF5W29mZnNldDIgKyAwXSA8PCA4IHwgYXJyYXlbb2Zmc2V0MiArIDFdKSA8PCAxNiA+PiAxNjtcbiAgICB9XG4gICAgZXhwb3J0cy5yZWFkSW50MTZCRSA9IHJlYWRJbnQxNkJFO1xuICAgIGZ1bmN0aW9uIHJlYWRVaW50MTZCRShhcnJheSwgb2Zmc2V0Mikge1xuICAgICAgaWYgKG9mZnNldDIgPT09IHZvaWQgMCkge1xuICAgICAgICBvZmZzZXQyID0gMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAoYXJyYXlbb2Zmc2V0MiArIDBdIDw8IDggfCBhcnJheVtvZmZzZXQyICsgMV0pID4+PiAwO1xuICAgIH1cbiAgICBleHBvcnRzLnJlYWRVaW50MTZCRSA9IHJlYWRVaW50MTZCRTtcbiAgICBmdW5jdGlvbiByZWFkSW50MTZMRShhcnJheSwgb2Zmc2V0Mikge1xuICAgICAgaWYgKG9mZnNldDIgPT09IHZvaWQgMCkge1xuICAgICAgICBvZmZzZXQyID0gMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAoYXJyYXlbb2Zmc2V0MiArIDFdIDw8IDggfCBhcnJheVtvZmZzZXQyXSkgPDwgMTYgPj4gMTY7XG4gICAgfVxuICAgIGV4cG9ydHMucmVhZEludDE2TEUgPSByZWFkSW50MTZMRTtcbiAgICBmdW5jdGlvbiByZWFkVWludDE2TEUoYXJyYXksIG9mZnNldDIpIHtcbiAgICAgIGlmIChvZmZzZXQyID09PSB2b2lkIDApIHtcbiAgICAgICAgb2Zmc2V0MiA9IDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gKGFycmF5W29mZnNldDIgKyAxXSA8PCA4IHwgYXJyYXlbb2Zmc2V0Ml0pID4+PiAwO1xuICAgIH1cbiAgICBleHBvcnRzLnJlYWRVaW50MTZMRSA9IHJlYWRVaW50MTZMRTtcbiAgICBmdW5jdGlvbiB3cml0ZVVpbnQxNkJFKHZhbHVlLCBvdXQsIG9mZnNldDIpIHtcbiAgICAgIGlmIChvdXQgPT09IHZvaWQgMCkge1xuICAgICAgICBvdXQgPSBuZXcgVWludDhBcnJheSgyKTtcbiAgICAgIH1cbiAgICAgIGlmIChvZmZzZXQyID09PSB2b2lkIDApIHtcbiAgICAgICAgb2Zmc2V0MiA9IDA7XG4gICAgICB9XG4gICAgICBvdXRbb2Zmc2V0MiArIDBdID0gdmFsdWUgPj4+IDg7XG4gICAgICBvdXRbb2Zmc2V0MiArIDFdID0gdmFsdWUgPj4+IDA7XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICBleHBvcnRzLndyaXRlVWludDE2QkUgPSB3cml0ZVVpbnQxNkJFO1xuICAgIGV4cG9ydHMud3JpdGVJbnQxNkJFID0gd3JpdGVVaW50MTZCRTtcbiAgICBmdW5jdGlvbiB3cml0ZVVpbnQxNkxFKHZhbHVlLCBvdXQsIG9mZnNldDIpIHtcbiAgICAgIGlmIChvdXQgPT09IHZvaWQgMCkge1xuICAgICAgICBvdXQgPSBuZXcgVWludDhBcnJheSgyKTtcbiAgICAgIH1cbiAgICAgIGlmIChvZmZzZXQyID09PSB2b2lkIDApIHtcbiAgICAgICAgb2Zmc2V0MiA9IDA7XG4gICAgICB9XG4gICAgICBvdXRbb2Zmc2V0MiArIDBdID0gdmFsdWUgPj4+IDA7XG4gICAgICBvdXRbb2Zmc2V0MiArIDFdID0gdmFsdWUgPj4+IDg7XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICBleHBvcnRzLndyaXRlVWludDE2TEUgPSB3cml0ZVVpbnQxNkxFO1xuICAgIGV4cG9ydHMud3JpdGVJbnQxNkxFID0gd3JpdGVVaW50MTZMRTtcbiAgICBmdW5jdGlvbiByZWFkSW50MzJCRShhcnJheSwgb2Zmc2V0Mikge1xuICAgICAgaWYgKG9mZnNldDIgPT09IHZvaWQgMCkge1xuICAgICAgICBvZmZzZXQyID0gMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheVtvZmZzZXQyXSA8PCAyNCB8IGFycmF5W29mZnNldDIgKyAxXSA8PCAxNiB8IGFycmF5W29mZnNldDIgKyAyXSA8PCA4IHwgYXJyYXlbb2Zmc2V0MiArIDNdO1xuICAgIH1cbiAgICBleHBvcnRzLnJlYWRJbnQzMkJFID0gcmVhZEludDMyQkU7XG4gICAgZnVuY3Rpb24gcmVhZFVpbnQzMkJFKGFycmF5LCBvZmZzZXQyKSB7XG4gICAgICBpZiAob2Zmc2V0MiA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG9mZnNldDIgPSAwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChhcnJheVtvZmZzZXQyXSA8PCAyNCB8IGFycmF5W29mZnNldDIgKyAxXSA8PCAxNiB8IGFycmF5W29mZnNldDIgKyAyXSA8PCA4IHwgYXJyYXlbb2Zmc2V0MiArIDNdKSA+Pj4gMDtcbiAgICB9XG4gICAgZXhwb3J0cy5yZWFkVWludDMyQkUgPSByZWFkVWludDMyQkU7XG4gICAgZnVuY3Rpb24gcmVhZEludDMyTEUoYXJyYXksIG9mZnNldDIpIHtcbiAgICAgIGlmIChvZmZzZXQyID09PSB2b2lkIDApIHtcbiAgICAgICAgb2Zmc2V0MiA9IDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXlbb2Zmc2V0MiArIDNdIDw8IDI0IHwgYXJyYXlbb2Zmc2V0MiArIDJdIDw8IDE2IHwgYXJyYXlbb2Zmc2V0MiArIDFdIDw8IDggfCBhcnJheVtvZmZzZXQyXTtcbiAgICB9XG4gICAgZXhwb3J0cy5yZWFkSW50MzJMRSA9IHJlYWRJbnQzMkxFO1xuICAgIGZ1bmN0aW9uIHJlYWRVaW50MzJMRShhcnJheSwgb2Zmc2V0Mikge1xuICAgICAgaWYgKG9mZnNldDIgPT09IHZvaWQgMCkge1xuICAgICAgICBvZmZzZXQyID0gMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAoYXJyYXlbb2Zmc2V0MiArIDNdIDw8IDI0IHwgYXJyYXlbb2Zmc2V0MiArIDJdIDw8IDE2IHwgYXJyYXlbb2Zmc2V0MiArIDFdIDw8IDggfCBhcnJheVtvZmZzZXQyXSkgPj4+IDA7XG4gICAgfVxuICAgIGV4cG9ydHMucmVhZFVpbnQzMkxFID0gcmVhZFVpbnQzMkxFO1xuICAgIGZ1bmN0aW9uIHdyaXRlVWludDMyQkUodmFsdWUsIG91dCwgb2Zmc2V0Mikge1xuICAgICAgaWYgKG91dCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG91dCA9IG5ldyBVaW50OEFycmF5KDQpO1xuICAgICAgfVxuICAgICAgaWYgKG9mZnNldDIgPT09IHZvaWQgMCkge1xuICAgICAgICBvZmZzZXQyID0gMDtcbiAgICAgIH1cbiAgICAgIG91dFtvZmZzZXQyICsgMF0gPSB2YWx1ZSA+Pj4gMjQ7XG4gICAgICBvdXRbb2Zmc2V0MiArIDFdID0gdmFsdWUgPj4+IDE2O1xuICAgICAgb3V0W29mZnNldDIgKyAyXSA9IHZhbHVlID4+PiA4O1xuICAgICAgb3V0W29mZnNldDIgKyAzXSA9IHZhbHVlID4+PiAwO1xuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG4gICAgZXhwb3J0cy53cml0ZVVpbnQzMkJFID0gd3JpdGVVaW50MzJCRTtcbiAgICBleHBvcnRzLndyaXRlSW50MzJCRSA9IHdyaXRlVWludDMyQkU7XG4gICAgZnVuY3Rpb24gd3JpdGVVaW50MzJMRSh2YWx1ZSwgb3V0LCBvZmZzZXQyKSB7XG4gICAgICBpZiAob3V0ID09PSB2b2lkIDApIHtcbiAgICAgICAgb3V0ID0gbmV3IFVpbnQ4QXJyYXkoNCk7XG4gICAgICB9XG4gICAgICBpZiAob2Zmc2V0MiA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG9mZnNldDIgPSAwO1xuICAgICAgfVxuICAgICAgb3V0W29mZnNldDIgKyAwXSA9IHZhbHVlID4+PiAwO1xuICAgICAgb3V0W29mZnNldDIgKyAxXSA9IHZhbHVlID4+PiA4O1xuICAgICAgb3V0W29mZnNldDIgKyAyXSA9IHZhbHVlID4+PiAxNjtcbiAgICAgIG91dFtvZmZzZXQyICsgM10gPSB2YWx1ZSA+Pj4gMjQ7XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICBleHBvcnRzLndyaXRlVWludDMyTEUgPSB3cml0ZVVpbnQzMkxFO1xuICAgIGV4cG9ydHMud3JpdGVJbnQzMkxFID0gd3JpdGVVaW50MzJMRTtcbiAgICBmdW5jdGlvbiByZWFkSW50NjRCRShhcnJheSwgb2Zmc2V0Mikge1xuICAgICAgaWYgKG9mZnNldDIgPT09IHZvaWQgMCkge1xuICAgICAgICBvZmZzZXQyID0gMDtcbiAgICAgIH1cbiAgICAgIHZhciBoaSA9IHJlYWRJbnQzMkJFKGFycmF5LCBvZmZzZXQyKTtcbiAgICAgIHZhciBsbyA9IHJlYWRJbnQzMkJFKGFycmF5LCBvZmZzZXQyICsgNCk7XG4gICAgICByZXR1cm4gaGkgKiA0Mjk0OTY3Mjk2ICsgbG8gLSAobG8gPj4gMzEpICogNDI5NDk2NzI5NjtcbiAgICB9XG4gICAgZXhwb3J0cy5yZWFkSW50NjRCRSA9IHJlYWRJbnQ2NEJFO1xuICAgIGZ1bmN0aW9uIHJlYWRVaW50NjRCRShhcnJheSwgb2Zmc2V0Mikge1xuICAgICAgaWYgKG9mZnNldDIgPT09IHZvaWQgMCkge1xuICAgICAgICBvZmZzZXQyID0gMDtcbiAgICAgIH1cbiAgICAgIHZhciBoaSA9IHJlYWRVaW50MzJCRShhcnJheSwgb2Zmc2V0Mik7XG4gICAgICB2YXIgbG8gPSByZWFkVWludDMyQkUoYXJyYXksIG9mZnNldDIgKyA0KTtcbiAgICAgIHJldHVybiBoaSAqIDQyOTQ5NjcyOTYgKyBsbztcbiAgICB9XG4gICAgZXhwb3J0cy5yZWFkVWludDY0QkUgPSByZWFkVWludDY0QkU7XG4gICAgZnVuY3Rpb24gcmVhZEludDY0TEUoYXJyYXksIG9mZnNldDIpIHtcbiAgICAgIGlmIChvZmZzZXQyID09PSB2b2lkIDApIHtcbiAgICAgICAgb2Zmc2V0MiA9IDA7XG4gICAgICB9XG4gICAgICB2YXIgbG8gPSByZWFkSW50MzJMRShhcnJheSwgb2Zmc2V0Mik7XG4gICAgICB2YXIgaGkgPSByZWFkSW50MzJMRShhcnJheSwgb2Zmc2V0MiArIDQpO1xuICAgICAgcmV0dXJuIGhpICogNDI5NDk2NzI5NiArIGxvIC0gKGxvID4+IDMxKSAqIDQyOTQ5NjcyOTY7XG4gICAgfVxuICAgIGV4cG9ydHMucmVhZEludDY0TEUgPSByZWFkSW50NjRMRTtcbiAgICBmdW5jdGlvbiByZWFkVWludDY0TEUoYXJyYXksIG9mZnNldDIpIHtcbiAgICAgIGlmIChvZmZzZXQyID09PSB2b2lkIDApIHtcbiAgICAgICAgb2Zmc2V0MiA9IDA7XG4gICAgICB9XG4gICAgICB2YXIgbG8gPSByZWFkVWludDMyTEUoYXJyYXksIG9mZnNldDIpO1xuICAgICAgdmFyIGhpID0gcmVhZFVpbnQzMkxFKGFycmF5LCBvZmZzZXQyICsgNCk7XG4gICAgICByZXR1cm4gaGkgKiA0Mjk0OTY3Mjk2ICsgbG87XG4gICAgfVxuICAgIGV4cG9ydHMucmVhZFVpbnQ2NExFID0gcmVhZFVpbnQ2NExFO1xuICAgIGZ1bmN0aW9uIHdyaXRlVWludDY0QkUodmFsdWUsIG91dCwgb2Zmc2V0Mikge1xuICAgICAgaWYgKG91dCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG91dCA9IG5ldyBVaW50OEFycmF5KDgpO1xuICAgICAgfVxuICAgICAgaWYgKG9mZnNldDIgPT09IHZvaWQgMCkge1xuICAgICAgICBvZmZzZXQyID0gMDtcbiAgICAgIH1cbiAgICAgIHdyaXRlVWludDMyQkUodmFsdWUgLyA0Mjk0OTY3Mjk2ID4+PiAwLCBvdXQsIG9mZnNldDIpO1xuICAgICAgd3JpdGVVaW50MzJCRSh2YWx1ZSA+Pj4gMCwgb3V0LCBvZmZzZXQyICsgNCk7XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICBleHBvcnRzLndyaXRlVWludDY0QkUgPSB3cml0ZVVpbnQ2NEJFO1xuICAgIGV4cG9ydHMud3JpdGVJbnQ2NEJFID0gd3JpdGVVaW50NjRCRTtcbiAgICBmdW5jdGlvbiB3cml0ZVVpbnQ2NExFKHZhbHVlLCBvdXQsIG9mZnNldDIpIHtcbiAgICAgIGlmIChvdXQgPT09IHZvaWQgMCkge1xuICAgICAgICBvdXQgPSBuZXcgVWludDhBcnJheSg4KTtcbiAgICAgIH1cbiAgICAgIGlmIChvZmZzZXQyID09PSB2b2lkIDApIHtcbiAgICAgICAgb2Zmc2V0MiA9IDA7XG4gICAgICB9XG4gICAgICB3cml0ZVVpbnQzMkxFKHZhbHVlID4+PiAwLCBvdXQsIG9mZnNldDIpO1xuICAgICAgd3JpdGVVaW50MzJMRSh2YWx1ZSAvIDQyOTQ5NjcyOTYgPj4+IDAsIG91dCwgb2Zmc2V0MiArIDQpO1xuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG4gICAgZXhwb3J0cy53cml0ZVVpbnQ2NExFID0gd3JpdGVVaW50NjRMRTtcbiAgICBleHBvcnRzLndyaXRlSW50NjRMRSA9IHdyaXRlVWludDY0TEU7XG4gICAgZnVuY3Rpb24gcmVhZFVpbnRCRShiaXRMZW5ndGgsIGFycmF5LCBvZmZzZXQyKSB7XG4gICAgICBpZiAob2Zmc2V0MiA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG9mZnNldDIgPSAwO1xuICAgICAgfVxuICAgICAgaWYgKGJpdExlbmd0aCAlIDggIT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmVhZFVpbnRCRSBzdXBwb3J0cyBvbmx5IGJpdExlbmd0aHMgZGl2aXNpYmxlIGJ5IDhcIik7XG4gICAgICB9XG4gICAgICBpZiAoYml0TGVuZ3RoIC8gOCA+IGFycmF5Lmxlbmd0aCAtIG9mZnNldDIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmVhZFVpbnRCRTogYXJyYXkgaXMgdG9vIHNob3J0IGZvciB0aGUgZ2l2ZW4gYml0TGVuZ3RoXCIpO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IDA7XG4gICAgICB2YXIgbXVsID0gMTtcbiAgICAgIGZvciAodmFyIGkgPSBiaXRMZW5ndGggLyA4ICsgb2Zmc2V0MiAtIDE7IGkgPj0gb2Zmc2V0MjsgaS0tKSB7XG4gICAgICAgIHJlc3VsdCArPSBhcnJheVtpXSAqIG11bDtcbiAgICAgICAgbXVsICo9IDI1NjtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGV4cG9ydHMucmVhZFVpbnRCRSA9IHJlYWRVaW50QkU7XG4gICAgZnVuY3Rpb24gcmVhZFVpbnRMRShiaXRMZW5ndGgsIGFycmF5LCBvZmZzZXQyKSB7XG4gICAgICBpZiAob2Zmc2V0MiA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG9mZnNldDIgPSAwO1xuICAgICAgfVxuICAgICAgaWYgKGJpdExlbmd0aCAlIDggIT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmVhZFVpbnRMRSBzdXBwb3J0cyBvbmx5IGJpdExlbmd0aHMgZGl2aXNpYmxlIGJ5IDhcIik7XG4gICAgICB9XG4gICAgICBpZiAoYml0TGVuZ3RoIC8gOCA+IGFycmF5Lmxlbmd0aCAtIG9mZnNldDIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmVhZFVpbnRMRTogYXJyYXkgaXMgdG9vIHNob3J0IGZvciB0aGUgZ2l2ZW4gYml0TGVuZ3RoXCIpO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IDA7XG4gICAgICB2YXIgbXVsID0gMTtcbiAgICAgIGZvciAodmFyIGkgPSBvZmZzZXQyOyBpIDwgb2Zmc2V0MiArIGJpdExlbmd0aCAvIDg7IGkrKykge1xuICAgICAgICByZXN1bHQgKz0gYXJyYXlbaV0gKiBtdWw7XG4gICAgICAgIG11bCAqPSAyNTY7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBleHBvcnRzLnJlYWRVaW50TEUgPSByZWFkVWludExFO1xuICAgIGZ1bmN0aW9uIHdyaXRlVWludEJFKGJpdExlbmd0aCwgdmFsdWUsIG91dCwgb2Zmc2V0Mikge1xuICAgICAgaWYgKG91dCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG91dCA9IG5ldyBVaW50OEFycmF5KGJpdExlbmd0aCAvIDgpO1xuICAgICAgfVxuICAgICAgaWYgKG9mZnNldDIgPT09IHZvaWQgMCkge1xuICAgICAgICBvZmZzZXQyID0gMDtcbiAgICAgIH1cbiAgICAgIGlmIChiaXRMZW5ndGggJSA4ICE9PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIndyaXRlVWludEJFIHN1cHBvcnRzIG9ubHkgYml0TGVuZ3RocyBkaXZpc2libGUgYnkgOFwiKTtcbiAgICAgIH1cbiAgICAgIGlmICghaW50XzEuaXNTYWZlSW50ZWdlcih2YWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwid3JpdGVVaW50QkUgdmFsdWUgbXVzdCBiZSBhbiBpbnRlZ2VyXCIpO1xuICAgICAgfVxuICAgICAgdmFyIGRpdiA9IDE7XG4gICAgICBmb3IgKHZhciBpID0gYml0TGVuZ3RoIC8gOCArIG9mZnNldDIgLSAxOyBpID49IG9mZnNldDI7IGktLSkge1xuICAgICAgICBvdXRbaV0gPSB2YWx1ZSAvIGRpdiAmIDI1NTtcbiAgICAgICAgZGl2ICo9IDI1NjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIGV4cG9ydHMud3JpdGVVaW50QkUgPSB3cml0ZVVpbnRCRTtcbiAgICBmdW5jdGlvbiB3cml0ZVVpbnRMRShiaXRMZW5ndGgsIHZhbHVlLCBvdXQsIG9mZnNldDIpIHtcbiAgICAgIGlmIChvdXQgPT09IHZvaWQgMCkge1xuICAgICAgICBvdXQgPSBuZXcgVWludDhBcnJheShiaXRMZW5ndGggLyA4KTtcbiAgICAgIH1cbiAgICAgIGlmIChvZmZzZXQyID09PSB2b2lkIDApIHtcbiAgICAgICAgb2Zmc2V0MiA9IDA7XG4gICAgICB9XG4gICAgICBpZiAoYml0TGVuZ3RoICUgOCAhPT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ3cml0ZVVpbnRMRSBzdXBwb3J0cyBvbmx5IGJpdExlbmd0aHMgZGl2aXNpYmxlIGJ5IDhcIik7XG4gICAgICB9XG4gICAgICBpZiAoIWludF8xLmlzU2FmZUludGVnZXIodmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIndyaXRlVWludExFIHZhbHVlIG11c3QgYmUgYW4gaW50ZWdlclwiKTtcbiAgICAgIH1cbiAgICAgIHZhciBkaXYgPSAxO1xuICAgICAgZm9yICh2YXIgaSA9IG9mZnNldDI7IGkgPCBvZmZzZXQyICsgYml0TGVuZ3RoIC8gODsgaSsrKSB7XG4gICAgICAgIG91dFtpXSA9IHZhbHVlIC8gZGl2ICYgMjU1O1xuICAgICAgICBkaXYgKj0gMjU2O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG4gICAgZXhwb3J0cy53cml0ZVVpbnRMRSA9IHdyaXRlVWludExFO1xuICAgIGZ1bmN0aW9uIHJlYWRGbG9hdDMyQkUoYXJyYXksIG9mZnNldDIpIHtcbiAgICAgIGlmIChvZmZzZXQyID09PSB2b2lkIDApIHtcbiAgICAgICAgb2Zmc2V0MiA9IDA7XG4gICAgICB9XG4gICAgICB2YXIgdmlldyA9IG5ldyBEYXRhVmlldyhhcnJheS5idWZmZXIsIGFycmF5LmJ5dGVPZmZzZXQsIGFycmF5LmJ5dGVMZW5ndGgpO1xuICAgICAgcmV0dXJuIHZpZXcuZ2V0RmxvYXQzMihvZmZzZXQyKTtcbiAgICB9XG4gICAgZXhwb3J0cy5yZWFkRmxvYXQzMkJFID0gcmVhZEZsb2F0MzJCRTtcbiAgICBmdW5jdGlvbiByZWFkRmxvYXQzMkxFKGFycmF5LCBvZmZzZXQyKSB7XG4gICAgICBpZiAob2Zmc2V0MiA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG9mZnNldDIgPSAwO1xuICAgICAgfVxuICAgICAgdmFyIHZpZXcgPSBuZXcgRGF0YVZpZXcoYXJyYXkuYnVmZmVyLCBhcnJheS5ieXRlT2Zmc2V0LCBhcnJheS5ieXRlTGVuZ3RoKTtcbiAgICAgIHJldHVybiB2aWV3LmdldEZsb2F0MzIob2Zmc2V0MiwgdHJ1ZSk7XG4gICAgfVxuICAgIGV4cG9ydHMucmVhZEZsb2F0MzJMRSA9IHJlYWRGbG9hdDMyTEU7XG4gICAgZnVuY3Rpb24gcmVhZEZsb2F0NjRCRShhcnJheSwgb2Zmc2V0Mikge1xuICAgICAgaWYgKG9mZnNldDIgPT09IHZvaWQgMCkge1xuICAgICAgICBvZmZzZXQyID0gMDtcbiAgICAgIH1cbiAgICAgIHZhciB2aWV3ID0gbmV3IERhdGFWaWV3KGFycmF5LmJ1ZmZlciwgYXJyYXkuYnl0ZU9mZnNldCwgYXJyYXkuYnl0ZUxlbmd0aCk7XG4gICAgICByZXR1cm4gdmlldy5nZXRGbG9hdDY0KG9mZnNldDIpO1xuICAgIH1cbiAgICBleHBvcnRzLnJlYWRGbG9hdDY0QkUgPSByZWFkRmxvYXQ2NEJFO1xuICAgIGZ1bmN0aW9uIHJlYWRGbG9hdDY0TEUoYXJyYXksIG9mZnNldDIpIHtcbiAgICAgIGlmIChvZmZzZXQyID09PSB2b2lkIDApIHtcbiAgICAgICAgb2Zmc2V0MiA9IDA7XG4gICAgICB9XG4gICAgICB2YXIgdmlldyA9IG5ldyBEYXRhVmlldyhhcnJheS5idWZmZXIsIGFycmF5LmJ5dGVPZmZzZXQsIGFycmF5LmJ5dGVMZW5ndGgpO1xuICAgICAgcmV0dXJuIHZpZXcuZ2V0RmxvYXQ2NChvZmZzZXQyLCB0cnVlKTtcbiAgICB9XG4gICAgZXhwb3J0cy5yZWFkRmxvYXQ2NExFID0gcmVhZEZsb2F0NjRMRTtcbiAgICBmdW5jdGlvbiB3cml0ZUZsb2F0MzJCRSh2YWx1ZSwgb3V0LCBvZmZzZXQyKSB7XG4gICAgICBpZiAob3V0ID09PSB2b2lkIDApIHtcbiAgICAgICAgb3V0ID0gbmV3IFVpbnQ4QXJyYXkoNCk7XG4gICAgICB9XG4gICAgICBpZiAob2Zmc2V0MiA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG9mZnNldDIgPSAwO1xuICAgICAgfVxuICAgICAgdmFyIHZpZXcgPSBuZXcgRGF0YVZpZXcob3V0LmJ1ZmZlciwgb3V0LmJ5dGVPZmZzZXQsIG91dC5ieXRlTGVuZ3RoKTtcbiAgICAgIHZpZXcuc2V0RmxvYXQzMihvZmZzZXQyLCB2YWx1ZSk7XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICBleHBvcnRzLndyaXRlRmxvYXQzMkJFID0gd3JpdGVGbG9hdDMyQkU7XG4gICAgZnVuY3Rpb24gd3JpdGVGbG9hdDMyTEUodmFsdWUsIG91dCwgb2Zmc2V0Mikge1xuICAgICAgaWYgKG91dCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG91dCA9IG5ldyBVaW50OEFycmF5KDQpO1xuICAgICAgfVxuICAgICAgaWYgKG9mZnNldDIgPT09IHZvaWQgMCkge1xuICAgICAgICBvZmZzZXQyID0gMDtcbiAgICAgIH1cbiAgICAgIHZhciB2aWV3ID0gbmV3IERhdGFWaWV3KG91dC5idWZmZXIsIG91dC5ieXRlT2Zmc2V0LCBvdXQuYnl0ZUxlbmd0aCk7XG4gICAgICB2aWV3LnNldEZsb2F0MzIob2Zmc2V0MiwgdmFsdWUsIHRydWUpO1xuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG4gICAgZXhwb3J0cy53cml0ZUZsb2F0MzJMRSA9IHdyaXRlRmxvYXQzMkxFO1xuICAgIGZ1bmN0aW9uIHdyaXRlRmxvYXQ2NEJFKHZhbHVlLCBvdXQsIG9mZnNldDIpIHtcbiAgICAgIGlmIChvdXQgPT09IHZvaWQgMCkge1xuICAgICAgICBvdXQgPSBuZXcgVWludDhBcnJheSg4KTtcbiAgICAgIH1cbiAgICAgIGlmIChvZmZzZXQyID09PSB2b2lkIDApIHtcbiAgICAgICAgb2Zmc2V0MiA9IDA7XG4gICAgICB9XG4gICAgICB2YXIgdmlldyA9IG5ldyBEYXRhVmlldyhvdXQuYnVmZmVyLCBvdXQuYnl0ZU9mZnNldCwgb3V0LmJ5dGVMZW5ndGgpO1xuICAgICAgdmlldy5zZXRGbG9hdDY0KG9mZnNldDIsIHZhbHVlKTtcbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIGV4cG9ydHMud3JpdGVGbG9hdDY0QkUgPSB3cml0ZUZsb2F0NjRCRTtcbiAgICBmdW5jdGlvbiB3cml0ZUZsb2F0NjRMRSh2YWx1ZSwgb3V0LCBvZmZzZXQyKSB7XG4gICAgICBpZiAob3V0ID09PSB2b2lkIDApIHtcbiAgICAgICAgb3V0ID0gbmV3IFVpbnQ4QXJyYXkoOCk7XG4gICAgICB9XG4gICAgICBpZiAob2Zmc2V0MiA9PT0gdm9pZCAwKSB7XG4gICAgICAgIG9mZnNldDIgPSAwO1xuICAgICAgfVxuICAgICAgdmFyIHZpZXcgPSBuZXcgRGF0YVZpZXcob3V0LmJ1ZmZlciwgb3V0LmJ5dGVPZmZzZXQsIG91dC5ieXRlTGVuZ3RoKTtcbiAgICAgIHZpZXcuc2V0RmxvYXQ2NChvZmZzZXQyLCB2YWx1ZSwgdHJ1ZSk7XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICBleHBvcnRzLndyaXRlRmxvYXQ2NExFID0gd3JpdGVGbG9hdDY0TEU7XG4gIH1cbn0pO1xudmFyIHJlcXVpcmVfd2lwZTIgPSBfX2NvbW1vbkpTMyh7XG4gIFwibm9kZV9tb2R1bGVzL0BzdGFibGVsaWIvd2lwZS9saWIvd2lwZS5qc1wiKGV4cG9ydHMpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHt2YWx1ZTogdHJ1ZX0pO1xuICAgIGZ1bmN0aW9uIHdpcGUoYXJyYXkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYXJyYXlbaV0gPSAwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cbiAgICBleHBvcnRzLndpcGUgPSB3aXBlO1xuICB9XG59KTtcbnZhciByZXF1aXJlX3NoYTI1NjIgPSBfX2NvbW1vbkpTMyh7XG4gIFwibm9kZV9tb2R1bGVzL0BzdGFibGVsaWIvc2hhMjU2L2xpYi9zaGEyNTYuanNcIihleHBvcnRzKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7dmFsdWU6IHRydWV9KTtcbiAgICB2YXIgYmluYXJ5XzEgPSByZXF1aXJlX2JpbmFyeTIoKTtcbiAgICB2YXIgd2lwZV8xID0gcmVxdWlyZV93aXBlMigpO1xuICAgIGV4cG9ydHMuRElHRVNUX0xFTkdUSCA9IDMyO1xuICAgIGV4cG9ydHMuQkxPQ0tfU0laRSA9IDY0O1xuICAgIHZhciBTSEEyNTYgPSBmdW5jdGlvbigpIHtcbiAgICAgIGZ1bmN0aW9uIFNIQTI1NjIoKSB7XG4gICAgICAgIHRoaXMuZGlnZXN0TGVuZ3RoID0gZXhwb3J0cy5ESUdFU1RfTEVOR1RIO1xuICAgICAgICB0aGlzLmJsb2NrU2l6ZSA9IGV4cG9ydHMuQkxPQ0tfU0laRTtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBuZXcgSW50MzJBcnJheSg4KTtcbiAgICAgICAgdGhpcy5fdGVtcCA9IG5ldyBJbnQzMkFycmF5KDY0KTtcbiAgICAgICAgdGhpcy5fYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoMTI4KTtcbiAgICAgICAgdGhpcy5fYnVmZmVyTGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5fYnl0ZXNIYXNoZWQgPSAwO1xuICAgICAgICB0aGlzLl9maW5pc2hlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICB9XG4gICAgICBTSEEyNTYyLnByb3RvdHlwZS5faW5pdFN0YXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuX3N0YXRlWzBdID0gMTc3OTAzMzcwMztcbiAgICAgICAgdGhpcy5fc3RhdGVbMV0gPSAzMTQ0MTM0Mjc3O1xuICAgICAgICB0aGlzLl9zdGF0ZVsyXSA9IDEwMTM5MDQyNDI7XG4gICAgICAgIHRoaXMuX3N0YXRlWzNdID0gMjc3MzQ4MDc2MjtcbiAgICAgICAgdGhpcy5fc3RhdGVbNF0gPSAxMzU5ODkzMTE5O1xuICAgICAgICB0aGlzLl9zdGF0ZVs1XSA9IDI2MDA4MjI5MjQ7XG4gICAgICAgIHRoaXMuX3N0YXRlWzZdID0gNTI4NzM0NjM1O1xuICAgICAgICB0aGlzLl9zdGF0ZVs3XSA9IDE1NDE0NTkyMjU7XG4gICAgICB9O1xuICAgICAgU0hBMjU2Mi5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5faW5pdFN0YXRlKCk7XG4gICAgICAgIHRoaXMuX2J1ZmZlckxlbmd0aCA9IDA7XG4gICAgICAgIHRoaXMuX2J5dGVzSGFzaGVkID0gMDtcbiAgICAgICAgdGhpcy5fZmluaXNoZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9O1xuICAgICAgU0hBMjU2Mi5wcm90b3R5cGUuY2xlYW4gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgd2lwZV8xLndpcGUodGhpcy5fYnVmZmVyKTtcbiAgICAgICAgd2lwZV8xLndpcGUodGhpcy5fdGVtcCk7XG4gICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgIH07XG4gICAgICBTSEEyNTYyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbihkYXRhLCBkYXRhTGVuZ3RoKSB7XG4gICAgICAgIGlmIChkYXRhTGVuZ3RoID09PSB2b2lkIDApIHtcbiAgICAgICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2ZpbmlzaGVkKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU0hBMjU2OiBjYW4ndCB1cGRhdGUgYmVjYXVzZSBoYXNoIHdhcyBmaW5pc2hlZC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRhdGFQb3MgPSAwO1xuICAgICAgICB0aGlzLl9ieXRlc0hhc2hlZCArPSBkYXRhTGVuZ3RoO1xuICAgICAgICBpZiAodGhpcy5fYnVmZmVyTGVuZ3RoID4gMCkge1xuICAgICAgICAgIHdoaWxlICh0aGlzLl9idWZmZXJMZW5ndGggPCB0aGlzLmJsb2NrU2l6ZSAmJiBkYXRhTGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5fYnVmZmVyW3RoaXMuX2J1ZmZlckxlbmd0aCsrXSA9IGRhdGFbZGF0YVBvcysrXTtcbiAgICAgICAgICAgIGRhdGFMZW5ndGgtLTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRoaXMuX2J1ZmZlckxlbmd0aCA9PT0gdGhpcy5ibG9ja1NpemUpIHtcbiAgICAgICAgICAgIGhhc2hCbG9ja3ModGhpcy5fdGVtcCwgdGhpcy5fc3RhdGUsIHRoaXMuX2J1ZmZlciwgMCwgdGhpcy5ibG9ja1NpemUpO1xuICAgICAgICAgICAgdGhpcy5fYnVmZmVyTGVuZ3RoID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGFMZW5ndGggPj0gdGhpcy5ibG9ja1NpemUpIHtcbiAgICAgICAgICBkYXRhUG9zID0gaGFzaEJsb2Nrcyh0aGlzLl90ZW1wLCB0aGlzLl9zdGF0ZSwgZGF0YSwgZGF0YVBvcywgZGF0YUxlbmd0aCk7XG4gICAgICAgICAgZGF0YUxlbmd0aCAlPSB0aGlzLmJsb2NrU2l6ZTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoZGF0YUxlbmd0aCA+IDApIHtcbiAgICAgICAgICB0aGlzLl9idWZmZXJbdGhpcy5fYnVmZmVyTGVuZ3RoKytdID0gZGF0YVtkYXRhUG9zKytdO1xuICAgICAgICAgIGRhdGFMZW5ndGgtLTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH07XG4gICAgICBTSEEyNTYyLnByb3RvdHlwZS5maW5pc2ggPSBmdW5jdGlvbihvdXQpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9maW5pc2hlZCkge1xuICAgICAgICAgIHZhciBieXRlc0hhc2hlZCA9IHRoaXMuX2J5dGVzSGFzaGVkO1xuICAgICAgICAgIHZhciBsZWZ0ID0gdGhpcy5fYnVmZmVyTGVuZ3RoO1xuICAgICAgICAgIHZhciBiaXRMZW5IaSA9IGJ5dGVzSGFzaGVkIC8gNTM2ODcwOTEyIHwgMDtcbiAgICAgICAgICB2YXIgYml0TGVuTG8gPSBieXRlc0hhc2hlZCA8PCAzO1xuICAgICAgICAgIHZhciBwYWRMZW5ndGggPSBieXRlc0hhc2hlZCAlIDY0IDwgNTYgPyA2NCA6IDEyODtcbiAgICAgICAgICB0aGlzLl9idWZmZXJbbGVmdF0gPSAxMjg7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IGxlZnQgKyAxOyBpIDwgcGFkTGVuZ3RoIC0gODsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLl9idWZmZXJbaV0gPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBiaW5hcnlfMS53cml0ZVVpbnQzMkJFKGJpdExlbkhpLCB0aGlzLl9idWZmZXIsIHBhZExlbmd0aCAtIDgpO1xuICAgICAgICAgIGJpbmFyeV8xLndyaXRlVWludDMyQkUoYml0TGVuTG8sIHRoaXMuX2J1ZmZlciwgcGFkTGVuZ3RoIC0gNCk7XG4gICAgICAgICAgaGFzaEJsb2Nrcyh0aGlzLl90ZW1wLCB0aGlzLl9zdGF0ZSwgdGhpcy5fYnVmZmVyLCAwLCBwYWRMZW5ndGgpO1xuICAgICAgICAgIHRoaXMuX2ZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuZGlnZXN0TGVuZ3RoIC8gNDsgaSsrKSB7XG4gICAgICAgICAgYmluYXJ5XzEud3JpdGVVaW50MzJCRSh0aGlzLl9zdGF0ZVtpXSwgb3V0LCBpICogNCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9O1xuICAgICAgU0hBMjU2Mi5wcm90b3R5cGUuZGlnZXN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBvdXQgPSBuZXcgVWludDhBcnJheSh0aGlzLmRpZ2VzdExlbmd0aCk7XG4gICAgICAgIHRoaXMuZmluaXNoKG91dCk7XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgICB9O1xuICAgICAgU0hBMjU2Mi5wcm90b3R5cGUuc2F2ZVN0YXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLl9maW5pc2hlZCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNIQTI1NjogY2Fubm90IHNhdmUgZmluaXNoZWQgc3RhdGVcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzdGF0ZTogbmV3IEludDMyQXJyYXkodGhpcy5fc3RhdGUpLFxuICAgICAgICAgIGJ1ZmZlcjogdGhpcy5fYnVmZmVyTGVuZ3RoID4gMCA/IG5ldyBVaW50OEFycmF5KHRoaXMuX2J1ZmZlcikgOiB2b2lkIDAsXG4gICAgICAgICAgYnVmZmVyTGVuZ3RoOiB0aGlzLl9idWZmZXJMZW5ndGgsXG4gICAgICAgICAgYnl0ZXNIYXNoZWQ6IHRoaXMuX2J5dGVzSGFzaGVkXG4gICAgICAgIH07XG4gICAgICB9O1xuICAgICAgU0hBMjU2Mi5wcm90b3R5cGUucmVzdG9yZVN0YXRlID0gZnVuY3Rpb24oc2F2ZWRTdGF0ZSkge1xuICAgICAgICB0aGlzLl9zdGF0ZS5zZXQoc2F2ZWRTdGF0ZS5zdGF0ZSk7XG4gICAgICAgIHRoaXMuX2J1ZmZlckxlbmd0aCA9IHNhdmVkU3RhdGUuYnVmZmVyTGVuZ3RoO1xuICAgICAgICBpZiAoc2F2ZWRTdGF0ZS5idWZmZXIpIHtcbiAgICAgICAgICB0aGlzLl9idWZmZXIuc2V0KHNhdmVkU3RhdGUuYnVmZmVyKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9ieXRlc0hhc2hlZCA9IHNhdmVkU3RhdGUuYnl0ZXNIYXNoZWQ7XG4gICAgICAgIHRoaXMuX2ZpbmlzaGVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfTtcbiAgICAgIFNIQTI1NjIucHJvdG90eXBlLmNsZWFuU2F2ZWRTdGF0ZSA9IGZ1bmN0aW9uKHNhdmVkU3RhdGUpIHtcbiAgICAgICAgd2lwZV8xLndpcGUoc2F2ZWRTdGF0ZS5zdGF0ZSk7XG4gICAgICAgIGlmIChzYXZlZFN0YXRlLmJ1ZmZlcikge1xuICAgICAgICAgIHdpcGVfMS53aXBlKHNhdmVkU3RhdGUuYnVmZmVyKTtcbiAgICAgICAgfVxuICAgICAgICBzYXZlZFN0YXRlLmJ1ZmZlckxlbmd0aCA9IDA7XG4gICAgICAgIHNhdmVkU3RhdGUuYnl0ZXNIYXNoZWQgPSAwO1xuICAgICAgfTtcbiAgICAgIHJldHVybiBTSEEyNTYyO1xuICAgIH0oKTtcbiAgICBleHBvcnRzLlNIQTI1NiA9IFNIQTI1NjtcbiAgICB2YXIgSyA9IG5ldyBJbnQzMkFycmF5KFtcbiAgICAgIDExMTYzNTI0MDgsXG4gICAgICAxODk5NDQ3NDQxLFxuICAgICAgMzA0OTMyMzQ3MSxcbiAgICAgIDM5MjEwMDk1NzMsXG4gICAgICA5NjE5ODcxNjMsXG4gICAgICAxNTA4OTcwOTkzLFxuICAgICAgMjQ1MzYzNTc0OCxcbiAgICAgIDI4NzA3NjMyMjEsXG4gICAgICAzNjI0MzgxMDgwLFxuICAgICAgMzEwNTk4NDAxLFxuICAgICAgNjA3MjI1Mjc4LFxuICAgICAgMTQyNjg4MTk4NyxcbiAgICAgIDE5MjUwNzgzODgsXG4gICAgICAyMTYyMDc4MjA2LFxuICAgICAgMjYxNDg4ODEwMyxcbiAgICAgIDMyNDgyMjI1ODAsXG4gICAgICAzODM1MzkwNDAxLFxuICAgICAgNDAyMjIyNDc3NCxcbiAgICAgIDI2NDM0NzA3OCxcbiAgICAgIDYwNDgwNzYyOCxcbiAgICAgIDc3MDI1NTk4MyxcbiAgICAgIDEyNDkxNTAxMjIsXG4gICAgICAxNTU1MDgxNjkyLFxuICAgICAgMTk5NjA2NDk4NixcbiAgICAgIDI1NTQyMjA4ODIsXG4gICAgICAyODIxODM0MzQ5LFxuICAgICAgMjk1Mjk5NjgwOCxcbiAgICAgIDMyMTAzMTM2NzEsXG4gICAgICAzMzM2NTcxODkxLFxuICAgICAgMzU4NDUyODcxMSxcbiAgICAgIDExMzkyNjk5MyxcbiAgICAgIDMzODI0MTg5NSxcbiAgICAgIDY2NjMwNzIwNSxcbiAgICAgIDc3MzUyOTkxMixcbiAgICAgIDEyOTQ3NTczNzIsXG4gICAgICAxMzk2MTgyMjkxLFxuICAgICAgMTY5NTE4MzcwMCxcbiAgICAgIDE5ODY2NjEwNTEsXG4gICAgICAyMTc3MDI2MzUwLFxuICAgICAgMjQ1Njk1NjAzNyxcbiAgICAgIDI3MzA0ODU5MjEsXG4gICAgICAyODIwMzAyNDExLFxuICAgICAgMzI1OTczMDgwMCxcbiAgICAgIDMzNDU3NjQ3NzEsXG4gICAgICAzNTE2MDY1ODE3LFxuICAgICAgMzYwMDM1MjgwNCxcbiAgICAgIDQwOTQ1NzE5MDksXG4gICAgICAyNzU0MjMzNDQsXG4gICAgICA0MzAyMjc3MzQsXG4gICAgICA1MDY5NDg2MTYsXG4gICAgICA2NTkwNjA1NTYsXG4gICAgICA4ODM5OTc4NzcsXG4gICAgICA5NTgxMzk1NzEsXG4gICAgICAxMzIyODIyMjE4LFxuICAgICAgMTUzNzAwMjA2MyxcbiAgICAgIDE3NDc4NzM3NzksXG4gICAgICAxOTU1NTYyMjIyLFxuICAgICAgMjAyNDEwNDgxNSxcbiAgICAgIDIyMjc3MzA0NTIsXG4gICAgICAyMzYxODUyNDI0LFxuICAgICAgMjQyODQzNjQ3NCxcbiAgICAgIDI3NTY3MzQxODcsXG4gICAgICAzMjA0MDMxNDc5LFxuICAgICAgMzMyOTMyNTI5OFxuICAgIF0pO1xuICAgIGZ1bmN0aW9uIGhhc2hCbG9ja3ModywgdiwgcCwgcG9zLCBsZW4pIHtcbiAgICAgIHdoaWxlIChsZW4gPj0gNjQpIHtcbiAgICAgICAgdmFyIGEgPSB2WzBdO1xuICAgICAgICB2YXIgYiA9IHZbMV07XG4gICAgICAgIHZhciBjID0gdlsyXTtcbiAgICAgICAgdmFyIGQgPSB2WzNdO1xuICAgICAgICB2YXIgZSA9IHZbNF07XG4gICAgICAgIHZhciBmID0gdls1XTtcbiAgICAgICAgdmFyIGcgPSB2WzZdO1xuICAgICAgICB2YXIgaCA9IHZbN107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7IGkrKykge1xuICAgICAgICAgIHZhciBqID0gcG9zICsgaSAqIDQ7XG4gICAgICAgICAgd1tpXSA9IGJpbmFyeV8xLnJlYWRVaW50MzJCRShwLCBqKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpID0gMTY7IGkgPCA2NDsgaSsrKSB7XG4gICAgICAgICAgdmFyIHUgPSB3W2kgLSAyXTtcbiAgICAgICAgICB2YXIgdDEgPSAodSA+Pj4gMTcgfCB1IDw8IDMyIC0gMTcpIF4gKHUgPj4+IDE5IHwgdSA8PCAzMiAtIDE5KSBeIHUgPj4+IDEwO1xuICAgICAgICAgIHUgPSB3W2kgLSAxNV07XG4gICAgICAgICAgdmFyIHQyID0gKHUgPj4+IDcgfCB1IDw8IDMyIC0gNykgXiAodSA+Pj4gMTggfCB1IDw8IDMyIC0gMTgpIF4gdSA+Pj4gMztcbiAgICAgICAgICB3W2ldID0gKHQxICsgd1tpIC0gN10gfCAwKSArICh0MiArIHdbaSAtIDE2XSB8IDApO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNjQ7IGkrKykge1xuICAgICAgICAgIHZhciB0MSA9ICgoKGUgPj4+IDYgfCBlIDw8IDMyIC0gNikgXiAoZSA+Pj4gMTEgfCBlIDw8IDMyIC0gMTEpIF4gKGUgPj4+IDI1IHwgZSA8PCAzMiAtIDI1KSkgKyAoZSAmIGYgXiB+ZSAmIGcpIHwgMCkgKyAoaCArIChLW2ldICsgd1tpXSB8IDApIHwgMCkgfCAwO1xuICAgICAgICAgIHZhciB0MiA9ICgoYSA+Pj4gMiB8IGEgPDwgMzIgLSAyKSBeIChhID4+PiAxMyB8IGEgPDwgMzIgLSAxMykgXiAoYSA+Pj4gMjIgfCBhIDw8IDMyIC0gMjIpKSArIChhICYgYiBeIGEgJiBjIF4gYiAmIGMpIHwgMDtcbiAgICAgICAgICBoID0gZztcbiAgICAgICAgICBnID0gZjtcbiAgICAgICAgICBmID0gZTtcbiAgICAgICAgICBlID0gZCArIHQxIHwgMDtcbiAgICAgICAgICBkID0gYztcbiAgICAgICAgICBjID0gYjtcbiAgICAgICAgICBiID0gYTtcbiAgICAgICAgICBhID0gdDEgKyB0MiB8IDA7XG4gICAgICAgIH1cbiAgICAgICAgdlswXSArPSBhO1xuICAgICAgICB2WzFdICs9IGI7XG4gICAgICAgIHZbMl0gKz0gYztcbiAgICAgICAgdlszXSArPSBkO1xuICAgICAgICB2WzRdICs9IGU7XG4gICAgICAgIHZbNV0gKz0gZjtcbiAgICAgICAgdls2XSArPSBnO1xuICAgICAgICB2WzddICs9IGg7XG4gICAgICAgIHBvcyArPSA2NDtcbiAgICAgICAgbGVuIC09IDY0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHBvcztcbiAgICB9XG4gICAgZnVuY3Rpb24gaGFzaChkYXRhKSB7XG4gICAgICB2YXIgaCA9IG5ldyBTSEEyNTYoKTtcbiAgICAgIGgudXBkYXRlKGRhdGEpO1xuICAgICAgdmFyIGRpZ2VzdCA9IGguZGlnZXN0KCk7XG4gICAgICBoLmNsZWFuKCk7XG4gICAgICByZXR1cm4gZGlnZXN0O1xuICAgIH1cbiAgICBleHBvcnRzLmhhc2ggPSBoYXNoO1xuICB9XG59KTtcbnZhciByZXF1aXJlX3NoYTIyNCA9IF9fY29tbW9uSlMzKHtcbiAgXCJub2RlX21vZHVsZXMvQHN0YWJsZWxpYi9zaGEyMjQvbGliL3NoYTIyNC5qc1wiKGV4cG9ydHMpIHtcbiAgICB2YXIgX19leHRlbmRzID0gZXhwb3J0cyAmJiBleHBvcnRzLl9fZXh0ZW5kcyB8fCBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IHtfX3Byb3RvX186IFtdfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uKGQyLCBiMikge1xuICAgICAgICAgIGQyLl9fcHJvdG9fXyA9IGIyO1xuICAgICAgICB9IHx8IGZ1bmN0aW9uKGQyLCBiMikge1xuICAgICAgICAgIGZvciAodmFyIHAgaW4gYjIpXG4gICAgICAgICAgICBpZiAoYjIuaGFzT3duUHJvcGVydHkocCkpXG4gICAgICAgICAgICAgIGQyW3BdID0gYjJbcF07XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgfTtcbiAgICAgIHJldHVybiBmdW5jdGlvbihkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkge1xuICAgICAgICAgIHRoaXMuY29uc3RydWN0b3IgPSBkO1xuICAgICAgICB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICAgIH07XG4gICAgfSgpO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge3ZhbHVlOiB0cnVlfSk7XG4gICAgdmFyIHNoYTI1Nl8xID0gcmVxdWlyZV9zaGEyNTYyKCk7XG4gICAgZXhwb3J0cy5ESUdFU1RfTEVOR1RIID0gMjg7XG4gICAgZXhwb3J0cy5CTE9DS19TSVpFID0gNjQ7XG4gICAgdmFyIFNIQTIyNCA9IGZ1bmN0aW9uKF9zdXBlcikge1xuICAgICAgX19leHRlbmRzKFNIQTIyNDIsIF9zdXBlcik7XG4gICAgICBmdW5jdGlvbiBTSEEyMjQyKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZGlnZXN0TGVuZ3RoID0gZXhwb3J0cy5ESUdFU1RfTEVOR1RIO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICB9XG4gICAgICBTSEEyMjQyLnByb3RvdHlwZS5faW5pdFN0YXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuX3N0YXRlWzBdID0gMzIzODM3MTAzMjtcbiAgICAgICAgdGhpcy5fc3RhdGVbMV0gPSA5MTQxNTA2NjM7XG4gICAgICAgIHRoaXMuX3N0YXRlWzJdID0gODEyNzAyOTk5O1xuICAgICAgICB0aGlzLl9zdGF0ZVszXSA9IDQxNDQ5MTI2OTc7XG4gICAgICAgIHRoaXMuX3N0YXRlWzRdID0gNDI5MDc3NTg1NztcbiAgICAgICAgdGhpcy5fc3RhdGVbNV0gPSAxNzUwNjAzMDI1O1xuICAgICAgICB0aGlzLl9zdGF0ZVs2XSA9IDE2OTQwNzY4Mzk7XG4gICAgICAgIHRoaXMuX3N0YXRlWzddID0gMzIwNDA3NTQyODtcbiAgICAgIH07XG4gICAgICByZXR1cm4gU0hBMjI0MjtcbiAgICB9KHNoYTI1Nl8xLlNIQTI1Nik7XG4gICAgZXhwb3J0cy5TSEEyMjQgPSBTSEEyMjQ7XG4gICAgZnVuY3Rpb24gaGFzaChkYXRhKSB7XG4gICAgICB2YXIgaCA9IG5ldyBTSEEyMjQoKTtcbiAgICAgIGgudXBkYXRlKGRhdGEpO1xuICAgICAgdmFyIGRpZ2VzdCA9IGguZGlnZXN0KCk7XG4gICAgICBoLmNsZWFuKCk7XG4gICAgICByZXR1cm4gZGlnZXN0O1xuICAgIH1cbiAgICBleHBvcnRzLmhhc2ggPSBoYXNoO1xuICB9XG59KTtcbnZhciByZXF1aXJlX3NoYTUxMiA9IF9fY29tbW9uSlMzKHtcbiAgXCJub2RlX21vZHVsZXMvQHN0YWJsZWxpYi9zaGE1MTIvbGliL3NoYTUxMi5qc1wiKGV4cG9ydHMpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHt2YWx1ZTogdHJ1ZX0pO1xuICAgIHZhciBiaW5hcnlfMSA9IHJlcXVpcmVfYmluYXJ5MigpO1xuICAgIHZhciB3aXBlXzEgPSByZXF1aXJlX3dpcGUyKCk7XG4gICAgZXhwb3J0cy5ESUdFU1RfTEVOR1RIID0gNjQ7XG4gICAgZXhwb3J0cy5CTE9DS19TSVpFID0gMTI4O1xuICAgIHZhciBTSEE1MTIgPSBmdW5jdGlvbigpIHtcbiAgICAgIGZ1bmN0aW9uIFNIQTUxMjIoKSB7XG4gICAgICAgIHRoaXMuZGlnZXN0TGVuZ3RoID0gZXhwb3J0cy5ESUdFU1RfTEVOR1RIO1xuICAgICAgICB0aGlzLmJsb2NrU2l6ZSA9IGV4cG9ydHMuQkxPQ0tfU0laRTtcbiAgICAgICAgdGhpcy5fc3RhdGVIaSA9IG5ldyBJbnQzMkFycmF5KDgpO1xuICAgICAgICB0aGlzLl9zdGF0ZUxvID0gbmV3IEludDMyQXJyYXkoOCk7XG4gICAgICAgIHRoaXMuX3RlbXBIaSA9IG5ldyBJbnQzMkFycmF5KDE2KTtcbiAgICAgICAgdGhpcy5fdGVtcExvID0gbmV3IEludDMyQXJyYXkoMTYpO1xuICAgICAgICB0aGlzLl9idWZmZXIgPSBuZXcgVWludDhBcnJheSgyNTYpO1xuICAgICAgICB0aGlzLl9idWZmZXJMZW5ndGggPSAwO1xuICAgICAgICB0aGlzLl9ieXRlc0hhc2hlZCA9IDA7XG4gICAgICAgIHRoaXMuX2ZpbmlzaGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgIH1cbiAgICAgIFNIQTUxMjIucHJvdG90eXBlLl9pbml0U3RhdGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5fc3RhdGVIaVswXSA9IDE3NzkwMzM3MDM7XG4gICAgICAgIHRoaXMuX3N0YXRlSGlbMV0gPSAzMTQ0MTM0Mjc3O1xuICAgICAgICB0aGlzLl9zdGF0ZUhpWzJdID0gMTAxMzkwNDI0MjtcbiAgICAgICAgdGhpcy5fc3RhdGVIaVszXSA9IDI3NzM0ODA3NjI7XG4gICAgICAgIHRoaXMuX3N0YXRlSGlbNF0gPSAxMzU5ODkzMTE5O1xuICAgICAgICB0aGlzLl9zdGF0ZUhpWzVdID0gMjYwMDgyMjkyNDtcbiAgICAgICAgdGhpcy5fc3RhdGVIaVs2XSA9IDUyODczNDYzNTtcbiAgICAgICAgdGhpcy5fc3RhdGVIaVs3XSA9IDE1NDE0NTkyMjU7XG4gICAgICAgIHRoaXMuX3N0YXRlTG9bMF0gPSA0MDg5MjM1NzIwO1xuICAgICAgICB0aGlzLl9zdGF0ZUxvWzFdID0gMjIyNzg3MzU5NTtcbiAgICAgICAgdGhpcy5fc3RhdGVMb1syXSA9IDQyNzExNzU3MjM7XG4gICAgICAgIHRoaXMuX3N0YXRlTG9bM10gPSAxNTk1NzUwMTI5O1xuICAgICAgICB0aGlzLl9zdGF0ZUxvWzRdID0gMjkxNzU2NTEzNztcbiAgICAgICAgdGhpcy5fc3RhdGVMb1s1XSA9IDcyNTUxMTE5OTtcbiAgICAgICAgdGhpcy5fc3RhdGVMb1s2XSA9IDQyMTUzODk1NDc7XG4gICAgICAgIHRoaXMuX3N0YXRlTG9bN10gPSAzMjcwMzMyMDk7XG4gICAgICB9O1xuICAgICAgU0hBNTEyMi5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5faW5pdFN0YXRlKCk7XG4gICAgICAgIHRoaXMuX2J1ZmZlckxlbmd0aCA9IDA7XG4gICAgICAgIHRoaXMuX2J5dGVzSGFzaGVkID0gMDtcbiAgICAgICAgdGhpcy5fZmluaXNoZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9O1xuICAgICAgU0hBNTEyMi5wcm90b3R5cGUuY2xlYW4gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgd2lwZV8xLndpcGUodGhpcy5fYnVmZmVyKTtcbiAgICAgICAgd2lwZV8xLndpcGUodGhpcy5fdGVtcEhpKTtcbiAgICAgICAgd2lwZV8xLndpcGUodGhpcy5fdGVtcExvKTtcbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgfTtcbiAgICAgIFNIQTUxMjIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKGRhdGEsIGRhdGFMZW5ndGgpIHtcbiAgICAgICAgaWYgKGRhdGFMZW5ndGggPT09IHZvaWQgMCkge1xuICAgICAgICAgIGRhdGFMZW5ndGggPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fZmluaXNoZWQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTSEE1MTI6IGNhbid0IHVwZGF0ZSBiZWNhdXNlIGhhc2ggd2FzIGZpbmlzaGVkLlwiKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGF0YVBvcyA9IDA7XG4gICAgICAgIHRoaXMuX2J5dGVzSGFzaGVkICs9IGRhdGFMZW5ndGg7XG4gICAgICAgIGlmICh0aGlzLl9idWZmZXJMZW5ndGggPiAwKSB7XG4gICAgICAgICAgd2hpbGUgKHRoaXMuX2J1ZmZlckxlbmd0aCA8IGV4cG9ydHMuQkxPQ0tfU0laRSAmJiBkYXRhTGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5fYnVmZmVyW3RoaXMuX2J1ZmZlckxlbmd0aCsrXSA9IGRhdGFbZGF0YVBvcysrXTtcbiAgICAgICAgICAgIGRhdGFMZW5ndGgtLTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRoaXMuX2J1ZmZlckxlbmd0aCA9PT0gdGhpcy5ibG9ja1NpemUpIHtcbiAgICAgICAgICAgIGhhc2hCbG9ja3ModGhpcy5fdGVtcEhpLCB0aGlzLl90ZW1wTG8sIHRoaXMuX3N0YXRlSGksIHRoaXMuX3N0YXRlTG8sIHRoaXMuX2J1ZmZlciwgMCwgdGhpcy5ibG9ja1NpemUpO1xuICAgICAgICAgICAgdGhpcy5fYnVmZmVyTGVuZ3RoID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGFMZW5ndGggPj0gdGhpcy5ibG9ja1NpemUpIHtcbiAgICAgICAgICBkYXRhUG9zID0gaGFzaEJsb2Nrcyh0aGlzLl90ZW1wSGksIHRoaXMuX3RlbXBMbywgdGhpcy5fc3RhdGVIaSwgdGhpcy5fc3RhdGVMbywgZGF0YSwgZGF0YVBvcywgZGF0YUxlbmd0aCk7XG4gICAgICAgICAgZGF0YUxlbmd0aCAlPSB0aGlzLmJsb2NrU2l6ZTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoZGF0YUxlbmd0aCA+IDApIHtcbiAgICAgICAgICB0aGlzLl9idWZmZXJbdGhpcy5fYnVmZmVyTGVuZ3RoKytdID0gZGF0YVtkYXRhUG9zKytdO1xuICAgICAgICAgIGRhdGFMZW5ndGgtLTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH07XG4gICAgICBTSEE1MTIyLnByb3RvdHlwZS5maW5pc2ggPSBmdW5jdGlvbihvdXQpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9maW5pc2hlZCkge1xuICAgICAgICAgIHZhciBieXRlc0hhc2hlZCA9IHRoaXMuX2J5dGVzSGFzaGVkO1xuICAgICAgICAgIHZhciBsZWZ0ID0gdGhpcy5fYnVmZmVyTGVuZ3RoO1xuICAgICAgICAgIHZhciBiaXRMZW5IaSA9IGJ5dGVzSGFzaGVkIC8gNTM2ODcwOTEyIHwgMDtcbiAgICAgICAgICB2YXIgYml0TGVuTG8gPSBieXRlc0hhc2hlZCA8PCAzO1xuICAgICAgICAgIHZhciBwYWRMZW5ndGggPSBieXRlc0hhc2hlZCAlIDEyOCA8IDExMiA/IDEyOCA6IDI1NjtcbiAgICAgICAgICB0aGlzLl9idWZmZXJbbGVmdF0gPSAxMjg7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IGxlZnQgKyAxOyBpIDwgcGFkTGVuZ3RoIC0gODsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLl9idWZmZXJbaV0gPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBiaW5hcnlfMS53cml0ZVVpbnQzMkJFKGJpdExlbkhpLCB0aGlzLl9idWZmZXIsIHBhZExlbmd0aCAtIDgpO1xuICAgICAgICAgIGJpbmFyeV8xLndyaXRlVWludDMyQkUoYml0TGVuTG8sIHRoaXMuX2J1ZmZlciwgcGFkTGVuZ3RoIC0gNCk7XG4gICAgICAgICAgaGFzaEJsb2Nrcyh0aGlzLl90ZW1wSGksIHRoaXMuX3RlbXBMbywgdGhpcy5fc3RhdGVIaSwgdGhpcy5fc3RhdGVMbywgdGhpcy5fYnVmZmVyLCAwLCBwYWRMZW5ndGgpO1xuICAgICAgICAgIHRoaXMuX2ZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuZGlnZXN0TGVuZ3RoIC8gODsgaSsrKSB7XG4gICAgICAgICAgYmluYXJ5XzEud3JpdGVVaW50MzJCRSh0aGlzLl9zdGF0ZUhpW2ldLCBvdXQsIGkgKiA4KTtcbiAgICAgICAgICBiaW5hcnlfMS53cml0ZVVpbnQzMkJFKHRoaXMuX3N0YXRlTG9baV0sIG91dCwgaSAqIDggKyA0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH07XG4gICAgICBTSEE1MTIyLnByb3RvdHlwZS5kaWdlc3QgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG91dCA9IG5ldyBVaW50OEFycmF5KHRoaXMuZGlnZXN0TGVuZ3RoKTtcbiAgICAgICAgdGhpcy5maW5pc2gob3V0KTtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICAgIH07XG4gICAgICBTSEE1MTIyLnByb3RvdHlwZS5zYXZlU3RhdGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuX2ZpbmlzaGVkKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU0hBMjU2OiBjYW5ub3Qgc2F2ZSBmaW5pc2hlZCBzdGF0ZVwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHN0YXRlSGk6IG5ldyBJbnQzMkFycmF5KHRoaXMuX3N0YXRlSGkpLFxuICAgICAgICAgIHN0YXRlTG86IG5ldyBJbnQzMkFycmF5KHRoaXMuX3N0YXRlTG8pLFxuICAgICAgICAgIGJ1ZmZlcjogdGhpcy5fYnVmZmVyTGVuZ3RoID4gMCA/IG5ldyBVaW50OEFycmF5KHRoaXMuX2J1ZmZlcikgOiB2b2lkIDAsXG4gICAgICAgICAgYnVmZmVyTGVuZ3RoOiB0aGlzLl9idWZmZXJMZW5ndGgsXG4gICAgICAgICAgYnl0ZXNIYXNoZWQ6IHRoaXMuX2J5dGVzSGFzaGVkXG4gICAgICAgIH07XG4gICAgICB9O1xuICAgICAgU0hBNTEyMi5wcm90b3R5cGUucmVzdG9yZVN0YXRlID0gZnVuY3Rpb24oc2F2ZWRTdGF0ZSkge1xuICAgICAgICB0aGlzLl9zdGF0ZUhpLnNldChzYXZlZFN0YXRlLnN0YXRlSGkpO1xuICAgICAgICB0aGlzLl9zdGF0ZUxvLnNldChzYXZlZFN0YXRlLnN0YXRlTG8pO1xuICAgICAgICB0aGlzLl9idWZmZXJMZW5ndGggPSBzYXZlZFN0YXRlLmJ1ZmZlckxlbmd0aDtcbiAgICAgICAgaWYgKHNhdmVkU3RhdGUuYnVmZmVyKSB7XG4gICAgICAgICAgdGhpcy5fYnVmZmVyLnNldChzYXZlZFN0YXRlLmJ1ZmZlcik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fYnl0ZXNIYXNoZWQgPSBzYXZlZFN0YXRlLmJ5dGVzSGFzaGVkO1xuICAgICAgICB0aGlzLl9maW5pc2hlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH07XG4gICAgICBTSEE1MTIyLnByb3RvdHlwZS5jbGVhblNhdmVkU3RhdGUgPSBmdW5jdGlvbihzYXZlZFN0YXRlKSB7XG4gICAgICAgIHdpcGVfMS53aXBlKHNhdmVkU3RhdGUuc3RhdGVIaSk7XG4gICAgICAgIHdpcGVfMS53aXBlKHNhdmVkU3RhdGUuc3RhdGVMbyk7XG4gICAgICAgIGlmIChzYXZlZFN0YXRlLmJ1ZmZlcikge1xuICAgICAgICAgIHdpcGVfMS53aXBlKHNhdmVkU3RhdGUuYnVmZmVyKTtcbiAgICAgICAgfVxuICAgICAgICBzYXZlZFN0YXRlLmJ1ZmZlckxlbmd0aCA9IDA7XG4gICAgICAgIHNhdmVkU3RhdGUuYnl0ZXNIYXNoZWQgPSAwO1xuICAgICAgfTtcbiAgICAgIHJldHVybiBTSEE1MTIyO1xuICAgIH0oKTtcbiAgICBleHBvcnRzLlNIQTUxMiA9IFNIQTUxMjtcbiAgICB2YXIgSyA9IG5ldyBJbnQzMkFycmF5KFtcbiAgICAgIDExMTYzNTI0MDgsXG4gICAgICAzNjA5NzY3NDU4LFxuICAgICAgMTg5OTQ0NzQ0MSxcbiAgICAgIDYwMjg5MTcyNSxcbiAgICAgIDMwNDkzMjM0NzEsXG4gICAgICAzOTY0NDg0Mzk5LFxuICAgICAgMzkyMTAwOTU3MyxcbiAgICAgIDIxNzMyOTU1NDgsXG4gICAgICA5NjE5ODcxNjMsXG4gICAgICA0MDgxNjI4NDcyLFxuICAgICAgMTUwODk3MDk5MyxcbiAgICAgIDMwNTM4MzQyNjUsXG4gICAgICAyNDUzNjM1NzQ4LFxuICAgICAgMjkzNzY3MTU3OSxcbiAgICAgIDI4NzA3NjMyMjEsXG4gICAgICAzNjY0NjA5NTYwLFxuICAgICAgMzYyNDM4MTA4MCxcbiAgICAgIDI3MzQ4ODMzOTQsXG4gICAgICAzMTA1OTg0MDEsXG4gICAgICAxMTY0OTk2NTQyLFxuICAgICAgNjA3MjI1Mjc4LFxuICAgICAgMTMyMzYxMDc2NCxcbiAgICAgIDE0MjY4ODE5ODcsXG4gICAgICAzNTkwMzA0OTk0LFxuICAgICAgMTkyNTA3ODM4OCxcbiAgICAgIDQwNjgxODIzODMsXG4gICAgICAyMTYyMDc4MjA2LFxuICAgICAgOTkxMzM2MTEzLFxuICAgICAgMjYxNDg4ODEwMyxcbiAgICAgIDYzMzgwMzMxNyxcbiAgICAgIDMyNDgyMjI1ODAsXG4gICAgICAzNDc5Nzc0ODY4LFxuICAgICAgMzgzNTM5MDQwMSxcbiAgICAgIDI2NjY2MTM0NTgsXG4gICAgICA0MDIyMjI0Nzc0LFxuICAgICAgOTQ0NzExMTM5LFxuICAgICAgMjY0MzQ3MDc4LFxuICAgICAgMjM0MTI2Mjc3MyxcbiAgICAgIDYwNDgwNzYyOCxcbiAgICAgIDIwMDc4MDA5MzMsXG4gICAgICA3NzAyNTU5ODMsXG4gICAgICAxNDk1OTkwOTAxLFxuICAgICAgMTI0OTE1MDEyMixcbiAgICAgIDE4NTY0MzEyMzUsXG4gICAgICAxNTU1MDgxNjkyLFxuICAgICAgMzE3NTIxODEzMixcbiAgICAgIDE5OTYwNjQ5ODYsXG4gICAgICAyMTk4OTUwODM3LFxuICAgICAgMjU1NDIyMDg4MixcbiAgICAgIDM5OTk3MTkzMzksXG4gICAgICAyODIxODM0MzQ5LFxuICAgICAgNzY2Nzg0MDE2LFxuICAgICAgMjk1Mjk5NjgwOCxcbiAgICAgIDI1NjY1OTQ4NzksXG4gICAgICAzMjEwMzEzNjcxLFxuICAgICAgMzIwMzMzNzk1NixcbiAgICAgIDMzMzY1NzE4OTEsXG4gICAgICAxMDM0NDU3MDI2LFxuICAgICAgMzU4NDUyODcxMSxcbiAgICAgIDI0NjY5NDg5MDEsXG4gICAgICAxMTM5MjY5OTMsXG4gICAgICAzNzU4MzI2MzgzLFxuICAgICAgMzM4MjQxODk1LFxuICAgICAgMTY4NzE3OTM2LFxuICAgICAgNjY2MzA3MjA1LFxuICAgICAgMTE4ODE3OTk2NCxcbiAgICAgIDc3MzUyOTkxMixcbiAgICAgIDE1NDYwNDU3MzQsXG4gICAgICAxMjk0NzU3MzcyLFxuICAgICAgMTUyMjgwNTQ4NSxcbiAgICAgIDEzOTYxODIyOTEsXG4gICAgICAyNjQzODMzODIzLFxuICAgICAgMTY5NTE4MzcwMCxcbiAgICAgIDIzNDM1MjczOTAsXG4gICAgICAxOTg2NjYxMDUxLFxuICAgICAgMTAxNDQ3NzQ4MCxcbiAgICAgIDIxNzcwMjYzNTAsXG4gICAgICAxMjA2NzU5MTQyLFxuICAgICAgMjQ1Njk1NjAzNyxcbiAgICAgIDM0NDA3NzYyNyxcbiAgICAgIDI3MzA0ODU5MjEsXG4gICAgICAxMjkwODYzNDYwLFxuICAgICAgMjgyMDMwMjQxMSxcbiAgICAgIDMxNTg0NTQyNzMsXG4gICAgICAzMjU5NzMwODAwLFxuICAgICAgMzUwNTk1MjY1NyxcbiAgICAgIDMzNDU3NjQ3NzEsXG4gICAgICAxMDYyMTcwMDgsXG4gICAgICAzNTE2MDY1ODE3LFxuICAgICAgMzYwNjAwODM0NCxcbiAgICAgIDM2MDAzNTI4MDQsXG4gICAgICAxNDMyNzI1Nzc2LFxuICAgICAgNDA5NDU3MTkwOSxcbiAgICAgIDE0NjcwMzE1OTQsXG4gICAgICAyNzU0MjMzNDQsXG4gICAgICA4NTExNjk3MjAsXG4gICAgICA0MzAyMjc3MzQsXG4gICAgICAzMTAwODIzNzUyLFxuICAgICAgNTA2OTQ4NjE2LFxuICAgICAgMTM2MzI1ODE5NSxcbiAgICAgIDY1OTA2MDU1NixcbiAgICAgIDM3NTA2ODU1OTMsXG4gICAgICA4ODM5OTc4NzcsXG4gICAgICAzNzg1MDUwMjgwLFxuICAgICAgOTU4MTM5NTcxLFxuICAgICAgMzMxODMwNzQyNyxcbiAgICAgIDEzMjI4MjIyMTgsXG4gICAgICAzODEyNzIzNDAzLFxuICAgICAgMTUzNzAwMjA2MyxcbiAgICAgIDIwMDMwMzQ5OTUsXG4gICAgICAxNzQ3ODczNzc5LFxuICAgICAgMzYwMjAzNjg5OSxcbiAgICAgIDE5NTU1NjIyMjIsXG4gICAgICAxNTc1OTkwMDEyLFxuICAgICAgMjAyNDEwNDgxNSxcbiAgICAgIDExMjU1OTI5MjgsXG4gICAgICAyMjI3NzMwNDUyLFxuICAgICAgMjcxNjkwNDMwNixcbiAgICAgIDIzNjE4NTI0MjQsXG4gICAgICA0NDI3NzYwNDQsXG4gICAgICAyNDI4NDM2NDc0LFxuICAgICAgNTkzNjk4MzQ0LFxuICAgICAgMjc1NjczNDE4NyxcbiAgICAgIDM3MzMxMTAyNDksXG4gICAgICAzMjA0MDMxNDc5LFxuICAgICAgMjk5OTM1MTU3MyxcbiAgICAgIDMzMjkzMjUyOTgsXG4gICAgICAzODE1OTIwNDI3LFxuICAgICAgMzM5MTU2OTYxNCxcbiAgICAgIDM5MjgzODM5MDAsXG4gICAgICAzNTE1MjY3MjcxLFxuICAgICAgNTY2MjgwNzExLFxuICAgICAgMzk0MDE4NzYwNixcbiAgICAgIDM0NTQwNjk1MzQsXG4gICAgICA0MTE4NjMwMjcxLFxuICAgICAgNDAwMDIzOTk5MixcbiAgICAgIDExNjQxODQ3NCxcbiAgICAgIDE5MTQxMzg1NTQsXG4gICAgICAxNzQyOTI0MjEsXG4gICAgICAyNzMxMDU1MjcwLFxuICAgICAgMjg5MzgwMzU2LFxuICAgICAgMzIwMzk5MzAwNixcbiAgICAgIDQ2MDM5MzI2OSxcbiAgICAgIDMyMDYyMDMxNSxcbiAgICAgIDY4NTQ3MTczMyxcbiAgICAgIDU4NzQ5NjgzNixcbiAgICAgIDg1MjE0Mjk3MSxcbiAgICAgIDEwODY3OTI4NTEsXG4gICAgICAxMDE3MDM2Mjk4LFxuICAgICAgMzY1NTQzMTAwLFxuICAgICAgMTEyNjAwMDU4MCxcbiAgICAgIDI2MTgyOTc2NzYsXG4gICAgICAxMjg4MDMzNDcwLFxuICAgICAgMzQwOTg1NTE1OCxcbiAgICAgIDE1MDE1MDU5NDgsXG4gICAgICA0MjM0NTA5ODY2LFxuICAgICAgMTYwNzE2NzkxNSxcbiAgICAgIDk4NzE2NzQ2OCxcbiAgICAgIDE4MTY0MDIzMTYsXG4gICAgICAxMjQ2MTg5NTkxXG4gICAgXSk7XG4gICAgZnVuY3Rpb24gaGFzaEJsb2Nrcyh3aCwgd2wsIGhoLCBobCwgbSwgcG9zLCBsZW4pIHtcbiAgICAgIHZhciBhaDAgPSBoaFswXSwgYWgxID0gaGhbMV0sIGFoMiA9IGhoWzJdLCBhaDMgPSBoaFszXSwgYWg0ID0gaGhbNF0sIGFoNSA9IGhoWzVdLCBhaDYgPSBoaFs2XSwgYWg3ID0gaGhbN10sIGFsMCA9IGhsWzBdLCBhbDEgPSBobFsxXSwgYWwyID0gaGxbMl0sIGFsMyA9IGhsWzNdLCBhbDQgPSBobFs0XSwgYWw1ID0gaGxbNV0sIGFsNiA9IGhsWzZdLCBhbDcgPSBobFs3XTtcbiAgICAgIHZhciBoLCBsMjtcbiAgICAgIHZhciB0aCwgdGw7XG4gICAgICB2YXIgYSwgYiwgYywgZDtcbiAgICAgIHdoaWxlIChsZW4gPj0gMTI4KSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7IGkrKykge1xuICAgICAgICAgIHZhciBqID0gOCAqIGkgKyBwb3M7XG4gICAgICAgICAgd2hbaV0gPSBiaW5hcnlfMS5yZWFkVWludDMyQkUobSwgaik7XG4gICAgICAgICAgd2xbaV0gPSBiaW5hcnlfMS5yZWFkVWludDMyQkUobSwgaiArIDQpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgODA7IGkrKykge1xuICAgICAgICAgIHZhciBiaDAgPSBhaDA7XG4gICAgICAgICAgdmFyIGJoMSA9IGFoMTtcbiAgICAgICAgICB2YXIgYmgyID0gYWgyO1xuICAgICAgICAgIHZhciBiaDMgPSBhaDM7XG4gICAgICAgICAgdmFyIGJoNCA9IGFoNDtcbiAgICAgICAgICB2YXIgYmg1ID0gYWg1O1xuICAgICAgICAgIHZhciBiaDYgPSBhaDY7XG4gICAgICAgICAgdmFyIGJoNyA9IGFoNztcbiAgICAgICAgICB2YXIgYmwwID0gYWwwO1xuICAgICAgICAgIHZhciBibDEgPSBhbDE7XG4gICAgICAgICAgdmFyIGJsMiA9IGFsMjtcbiAgICAgICAgICB2YXIgYmwzID0gYWwzO1xuICAgICAgICAgIHZhciBibDQgPSBhbDQ7XG4gICAgICAgICAgdmFyIGJsNSA9IGFsNTtcbiAgICAgICAgICB2YXIgYmw2ID0gYWw2O1xuICAgICAgICAgIHZhciBibDcgPSBhbDc7XG4gICAgICAgICAgaCA9IGFoNztcbiAgICAgICAgICBsMiA9IGFsNztcbiAgICAgICAgICBhID0gbDIgJiA2NTUzNTtcbiAgICAgICAgICBiID0gbDIgPj4+IDE2O1xuICAgICAgICAgIGMgPSBoICYgNjU1MzU7XG4gICAgICAgICAgZCA9IGggPj4+IDE2O1xuICAgICAgICAgIGggPSAoYWg0ID4+PiAxNCB8IGFsNCA8PCAzMiAtIDE0KSBeIChhaDQgPj4+IDE4IHwgYWw0IDw8IDMyIC0gMTgpIF4gKGFsNCA+Pj4gNDEgLSAzMiB8IGFoNCA8PCAzMiAtICg0MSAtIDMyKSk7XG4gICAgICAgICAgbDIgPSAoYWw0ID4+PiAxNCB8IGFoNCA8PCAzMiAtIDE0KSBeIChhbDQgPj4+IDE4IHwgYWg0IDw8IDMyIC0gMTgpIF4gKGFoNCA+Pj4gNDEgLSAzMiB8IGFsNCA8PCAzMiAtICg0MSAtIDMyKSk7XG4gICAgICAgICAgYSArPSBsMiAmIDY1NTM1O1xuICAgICAgICAgIGIgKz0gbDIgPj4+IDE2O1xuICAgICAgICAgIGMgKz0gaCAmIDY1NTM1O1xuICAgICAgICAgIGQgKz0gaCA+Pj4gMTY7XG4gICAgICAgICAgaCA9IGFoNCAmIGFoNSBeIH5haDQgJiBhaDY7XG4gICAgICAgICAgbDIgPSBhbDQgJiBhbDUgXiB+YWw0ICYgYWw2O1xuICAgICAgICAgIGEgKz0gbDIgJiA2NTUzNTtcbiAgICAgICAgICBiICs9IGwyID4+PiAxNjtcbiAgICAgICAgICBjICs9IGggJiA2NTUzNTtcbiAgICAgICAgICBkICs9IGggPj4+IDE2O1xuICAgICAgICAgIGggPSBLW2kgKiAyXTtcbiAgICAgICAgICBsMiA9IEtbaSAqIDIgKyAxXTtcbiAgICAgICAgICBhICs9IGwyICYgNjU1MzU7XG4gICAgICAgICAgYiArPSBsMiA+Pj4gMTY7XG4gICAgICAgICAgYyArPSBoICYgNjU1MzU7XG4gICAgICAgICAgZCArPSBoID4+PiAxNjtcbiAgICAgICAgICBoID0gd2hbaSAlIDE2XTtcbiAgICAgICAgICBsMiA9IHdsW2kgJSAxNl07XG4gICAgICAgICAgYSArPSBsMiAmIDY1NTM1O1xuICAgICAgICAgIGIgKz0gbDIgPj4+IDE2O1xuICAgICAgICAgIGMgKz0gaCAmIDY1NTM1O1xuICAgICAgICAgIGQgKz0gaCA+Pj4gMTY7XG4gICAgICAgICAgYiArPSBhID4+PiAxNjtcbiAgICAgICAgICBjICs9IGIgPj4+IDE2O1xuICAgICAgICAgIGQgKz0gYyA+Pj4gMTY7XG4gICAgICAgICAgdGggPSBjICYgNjU1MzUgfCBkIDw8IDE2O1xuICAgICAgICAgIHRsID0gYSAmIDY1NTM1IHwgYiA8PCAxNjtcbiAgICAgICAgICBoID0gdGg7XG4gICAgICAgICAgbDIgPSB0bDtcbiAgICAgICAgICBhID0gbDIgJiA2NTUzNTtcbiAgICAgICAgICBiID0gbDIgPj4+IDE2O1xuICAgICAgICAgIGMgPSBoICYgNjU1MzU7XG4gICAgICAgICAgZCA9IGggPj4+IDE2O1xuICAgICAgICAgIGggPSAoYWgwID4+PiAyOCB8IGFsMCA8PCAzMiAtIDI4KSBeIChhbDAgPj4+IDM0IC0gMzIgfCBhaDAgPDwgMzIgLSAoMzQgLSAzMikpIF4gKGFsMCA+Pj4gMzkgLSAzMiB8IGFoMCA8PCAzMiAtICgzOSAtIDMyKSk7XG4gICAgICAgICAgbDIgPSAoYWwwID4+PiAyOCB8IGFoMCA8PCAzMiAtIDI4KSBeIChhaDAgPj4+IDM0IC0gMzIgfCBhbDAgPDwgMzIgLSAoMzQgLSAzMikpIF4gKGFoMCA+Pj4gMzkgLSAzMiB8IGFsMCA8PCAzMiAtICgzOSAtIDMyKSk7XG4gICAgICAgICAgYSArPSBsMiAmIDY1NTM1O1xuICAgICAgICAgIGIgKz0gbDIgPj4+IDE2O1xuICAgICAgICAgIGMgKz0gaCAmIDY1NTM1O1xuICAgICAgICAgIGQgKz0gaCA+Pj4gMTY7XG4gICAgICAgICAgaCA9IGFoMCAmIGFoMSBeIGFoMCAmIGFoMiBeIGFoMSAmIGFoMjtcbiAgICAgICAgICBsMiA9IGFsMCAmIGFsMSBeIGFsMCAmIGFsMiBeIGFsMSAmIGFsMjtcbiAgICAgICAgICBhICs9IGwyICYgNjU1MzU7XG4gICAgICAgICAgYiArPSBsMiA+Pj4gMTY7XG4gICAgICAgICAgYyArPSBoICYgNjU1MzU7XG4gICAgICAgICAgZCArPSBoID4+PiAxNjtcbiAgICAgICAgICBiICs9IGEgPj4+IDE2O1xuICAgICAgICAgIGMgKz0gYiA+Pj4gMTY7XG4gICAgICAgICAgZCArPSBjID4+PiAxNjtcbiAgICAgICAgICBiaDcgPSBjICYgNjU1MzUgfCBkIDw8IDE2O1xuICAgICAgICAgIGJsNyA9IGEgJiA2NTUzNSB8IGIgPDwgMTY7XG4gICAgICAgICAgaCA9IGJoMztcbiAgICAgICAgICBsMiA9IGJsMztcbiAgICAgICAgICBhID0gbDIgJiA2NTUzNTtcbiAgICAgICAgICBiID0gbDIgPj4+IDE2O1xuICAgICAgICAgIGMgPSBoICYgNjU1MzU7XG4gICAgICAgICAgZCA9IGggPj4+IDE2O1xuICAgICAgICAgIGggPSB0aDtcbiAgICAgICAgICBsMiA9IHRsO1xuICAgICAgICAgIGEgKz0gbDIgJiA2NTUzNTtcbiAgICAgICAgICBiICs9IGwyID4+PiAxNjtcbiAgICAgICAgICBjICs9IGggJiA2NTUzNTtcbiAgICAgICAgICBkICs9IGggPj4+IDE2O1xuICAgICAgICAgIGIgKz0gYSA+Pj4gMTY7XG4gICAgICAgICAgYyArPSBiID4+PiAxNjtcbiAgICAgICAgICBkICs9IGMgPj4+IDE2O1xuICAgICAgICAgIGJoMyA9IGMgJiA2NTUzNSB8IGQgPDwgMTY7XG4gICAgICAgICAgYmwzID0gYSAmIDY1NTM1IHwgYiA8PCAxNjtcbiAgICAgICAgICBhaDEgPSBiaDA7XG4gICAgICAgICAgYWgyID0gYmgxO1xuICAgICAgICAgIGFoMyA9IGJoMjtcbiAgICAgICAgICBhaDQgPSBiaDM7XG4gICAgICAgICAgYWg1ID0gYmg0O1xuICAgICAgICAgIGFoNiA9IGJoNTtcbiAgICAgICAgICBhaDcgPSBiaDY7XG4gICAgICAgICAgYWgwID0gYmg3O1xuICAgICAgICAgIGFsMSA9IGJsMDtcbiAgICAgICAgICBhbDIgPSBibDE7XG4gICAgICAgICAgYWwzID0gYmwyO1xuICAgICAgICAgIGFsNCA9IGJsMztcbiAgICAgICAgICBhbDUgPSBibDQ7XG4gICAgICAgICAgYWw2ID0gYmw1O1xuICAgICAgICAgIGFsNyA9IGJsNjtcbiAgICAgICAgICBhbDAgPSBibDc7XG4gICAgICAgICAgaWYgKGkgJSAxNiA9PT0gMTUpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgMTY7IGorKykge1xuICAgICAgICAgICAgICBoID0gd2hbal07XG4gICAgICAgICAgICAgIGwyID0gd2xbal07XG4gICAgICAgICAgICAgIGEgPSBsMiAmIDY1NTM1O1xuICAgICAgICAgICAgICBiID0gbDIgPj4+IDE2O1xuICAgICAgICAgICAgICBjID0gaCAmIDY1NTM1O1xuICAgICAgICAgICAgICBkID0gaCA+Pj4gMTY7XG4gICAgICAgICAgICAgIGggPSB3aFsoaiArIDkpICUgMTZdO1xuICAgICAgICAgICAgICBsMiA9IHdsWyhqICsgOSkgJSAxNl07XG4gICAgICAgICAgICAgIGEgKz0gbDIgJiA2NTUzNTtcbiAgICAgICAgICAgICAgYiArPSBsMiA+Pj4gMTY7XG4gICAgICAgICAgICAgIGMgKz0gaCAmIDY1NTM1O1xuICAgICAgICAgICAgICBkICs9IGggPj4+IDE2O1xuICAgICAgICAgICAgICB0aCA9IHdoWyhqICsgMSkgJSAxNl07XG4gICAgICAgICAgICAgIHRsID0gd2xbKGogKyAxKSAlIDE2XTtcbiAgICAgICAgICAgICAgaCA9ICh0aCA+Pj4gMSB8IHRsIDw8IDMyIC0gMSkgXiAodGggPj4+IDggfCB0bCA8PCAzMiAtIDgpIF4gdGggPj4+IDc7XG4gICAgICAgICAgICAgIGwyID0gKHRsID4+PiAxIHwgdGggPDwgMzIgLSAxKSBeICh0bCA+Pj4gOCB8IHRoIDw8IDMyIC0gOCkgXiAodGwgPj4+IDcgfCB0aCA8PCAzMiAtIDcpO1xuICAgICAgICAgICAgICBhICs9IGwyICYgNjU1MzU7XG4gICAgICAgICAgICAgIGIgKz0gbDIgPj4+IDE2O1xuICAgICAgICAgICAgICBjICs9IGggJiA2NTUzNTtcbiAgICAgICAgICAgICAgZCArPSBoID4+PiAxNjtcbiAgICAgICAgICAgICAgdGggPSB3aFsoaiArIDE0KSAlIDE2XTtcbiAgICAgICAgICAgICAgdGwgPSB3bFsoaiArIDE0KSAlIDE2XTtcbiAgICAgICAgICAgICAgaCA9ICh0aCA+Pj4gMTkgfCB0bCA8PCAzMiAtIDE5KSBeICh0bCA+Pj4gNjEgLSAzMiB8IHRoIDw8IDMyIC0gKDYxIC0gMzIpKSBeIHRoID4+PiA2O1xuICAgICAgICAgICAgICBsMiA9ICh0bCA+Pj4gMTkgfCB0aCA8PCAzMiAtIDE5KSBeICh0aCA+Pj4gNjEgLSAzMiB8IHRsIDw8IDMyIC0gKDYxIC0gMzIpKSBeICh0bCA+Pj4gNiB8IHRoIDw8IDMyIC0gNik7XG4gICAgICAgICAgICAgIGEgKz0gbDIgJiA2NTUzNTtcbiAgICAgICAgICAgICAgYiArPSBsMiA+Pj4gMTY7XG4gICAgICAgICAgICAgIGMgKz0gaCAmIDY1NTM1O1xuICAgICAgICAgICAgICBkICs9IGggPj4+IDE2O1xuICAgICAgICAgICAgICBiICs9IGEgPj4+IDE2O1xuICAgICAgICAgICAgICBjICs9IGIgPj4+IDE2O1xuICAgICAgICAgICAgICBkICs9IGMgPj4+IDE2O1xuICAgICAgICAgICAgICB3aFtqXSA9IGMgJiA2NTUzNSB8IGQgPDwgMTY7XG4gICAgICAgICAgICAgIHdsW2pdID0gYSAmIDY1NTM1IHwgYiA8PCAxNjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaCA9IGFoMDtcbiAgICAgICAgbDIgPSBhbDA7XG4gICAgICAgIGEgPSBsMiAmIDY1NTM1O1xuICAgICAgICBiID0gbDIgPj4+IDE2O1xuICAgICAgICBjID0gaCAmIDY1NTM1O1xuICAgICAgICBkID0gaCA+Pj4gMTY7XG4gICAgICAgIGggPSBoaFswXTtcbiAgICAgICAgbDIgPSBobFswXTtcbiAgICAgICAgYSArPSBsMiAmIDY1NTM1O1xuICAgICAgICBiICs9IGwyID4+PiAxNjtcbiAgICAgICAgYyArPSBoICYgNjU1MzU7XG4gICAgICAgIGQgKz0gaCA+Pj4gMTY7XG4gICAgICAgIGIgKz0gYSA+Pj4gMTY7XG4gICAgICAgIGMgKz0gYiA+Pj4gMTY7XG4gICAgICAgIGQgKz0gYyA+Pj4gMTY7XG4gICAgICAgIGhoWzBdID0gYWgwID0gYyAmIDY1NTM1IHwgZCA8PCAxNjtcbiAgICAgICAgaGxbMF0gPSBhbDAgPSBhICYgNjU1MzUgfCBiIDw8IDE2O1xuICAgICAgICBoID0gYWgxO1xuICAgICAgICBsMiA9IGFsMTtcbiAgICAgICAgYSA9IGwyICYgNjU1MzU7XG4gICAgICAgIGIgPSBsMiA+Pj4gMTY7XG4gICAgICAgIGMgPSBoICYgNjU1MzU7XG4gICAgICAgIGQgPSBoID4+PiAxNjtcbiAgICAgICAgaCA9IGhoWzFdO1xuICAgICAgICBsMiA9IGhsWzFdO1xuICAgICAgICBhICs9IGwyICYgNjU1MzU7XG4gICAgICAgIGIgKz0gbDIgPj4+IDE2O1xuICAgICAgICBjICs9IGggJiA2NTUzNTtcbiAgICAgICAgZCArPSBoID4+PiAxNjtcbiAgICAgICAgYiArPSBhID4+PiAxNjtcbiAgICAgICAgYyArPSBiID4+PiAxNjtcbiAgICAgICAgZCArPSBjID4+PiAxNjtcbiAgICAgICAgaGhbMV0gPSBhaDEgPSBjICYgNjU1MzUgfCBkIDw8IDE2O1xuICAgICAgICBobFsxXSA9IGFsMSA9IGEgJiA2NTUzNSB8IGIgPDwgMTY7XG4gICAgICAgIGggPSBhaDI7XG4gICAgICAgIGwyID0gYWwyO1xuICAgICAgICBhID0gbDIgJiA2NTUzNTtcbiAgICAgICAgYiA9IGwyID4+PiAxNjtcbiAgICAgICAgYyA9IGggJiA2NTUzNTtcbiAgICAgICAgZCA9IGggPj4+IDE2O1xuICAgICAgICBoID0gaGhbMl07XG4gICAgICAgIGwyID0gaGxbMl07XG4gICAgICAgIGEgKz0gbDIgJiA2NTUzNTtcbiAgICAgICAgYiArPSBsMiA+Pj4gMTY7XG4gICAgICAgIGMgKz0gaCAmIDY1NTM1O1xuICAgICAgICBkICs9IGggPj4+IDE2O1xuICAgICAgICBiICs9IGEgPj4+IDE2O1xuICAgICAgICBjICs9IGIgPj4+IDE2O1xuICAgICAgICBkICs9IGMgPj4+IDE2O1xuICAgICAgICBoaFsyXSA9IGFoMiA9IGMgJiA2NTUzNSB8IGQgPDwgMTY7XG4gICAgICAgIGhsWzJdID0gYWwyID0gYSAmIDY1NTM1IHwgYiA8PCAxNjtcbiAgICAgICAgaCA9IGFoMztcbiAgICAgICAgbDIgPSBhbDM7XG4gICAgICAgIGEgPSBsMiAmIDY1NTM1O1xuICAgICAgICBiID0gbDIgPj4+IDE2O1xuICAgICAgICBjID0gaCAmIDY1NTM1O1xuICAgICAgICBkID0gaCA+Pj4gMTY7XG4gICAgICAgIGggPSBoaFszXTtcbiAgICAgICAgbDIgPSBobFszXTtcbiAgICAgICAgYSArPSBsMiAmIDY1NTM1O1xuICAgICAgICBiICs9IGwyID4+PiAxNjtcbiAgICAgICAgYyArPSBoICYgNjU1MzU7XG4gICAgICAgIGQgKz0gaCA+Pj4gMTY7XG4gICAgICAgIGIgKz0gYSA+Pj4gMTY7XG4gICAgICAgIGMgKz0gYiA+Pj4gMTY7XG4gICAgICAgIGQgKz0gYyA+Pj4gMTY7XG4gICAgICAgIGhoWzNdID0gYWgzID0gYyAmIDY1NTM1IHwgZCA8PCAxNjtcbiAgICAgICAgaGxbM10gPSBhbDMgPSBhICYgNjU1MzUgfCBiIDw8IDE2O1xuICAgICAgICBoID0gYWg0O1xuICAgICAgICBsMiA9IGFsNDtcbiAgICAgICAgYSA9IGwyICYgNjU1MzU7XG4gICAgICAgIGIgPSBsMiA+Pj4gMTY7XG4gICAgICAgIGMgPSBoICYgNjU1MzU7XG4gICAgICAgIGQgPSBoID4+PiAxNjtcbiAgICAgICAgaCA9IGhoWzRdO1xuICAgICAgICBsMiA9IGhsWzRdO1xuICAgICAgICBhICs9IGwyICYgNjU1MzU7XG4gICAgICAgIGIgKz0gbDIgPj4+IDE2O1xuICAgICAgICBjICs9IGggJiA2NTUzNTtcbiAgICAgICAgZCArPSBoID4+PiAxNjtcbiAgICAgICAgYiArPSBhID4+PiAxNjtcbiAgICAgICAgYyArPSBiID4+PiAxNjtcbiAgICAgICAgZCArPSBjID4+PiAxNjtcbiAgICAgICAgaGhbNF0gPSBhaDQgPSBjICYgNjU1MzUgfCBkIDw8IDE2O1xuICAgICAgICBobFs0XSA9IGFsNCA9IGEgJiA2NTUzNSB8IGIgPDwgMTY7XG4gICAgICAgIGggPSBhaDU7XG4gICAgICAgIGwyID0gYWw1O1xuICAgICAgICBhID0gbDIgJiA2NTUzNTtcbiAgICAgICAgYiA9IGwyID4+PiAxNjtcbiAgICAgICAgYyA9IGggJiA2NTUzNTtcbiAgICAgICAgZCA9IGggPj4+IDE2O1xuICAgICAgICBoID0gaGhbNV07XG4gICAgICAgIGwyID0gaGxbNV07XG4gICAgICAgIGEgKz0gbDIgJiA2NTUzNTtcbiAgICAgICAgYiArPSBsMiA+Pj4gMTY7XG4gICAgICAgIGMgKz0gaCAmIDY1NTM1O1xuICAgICAgICBkICs9IGggPj4+IDE2O1xuICAgICAgICBiICs9IGEgPj4+IDE2O1xuICAgICAgICBjICs9IGIgPj4+IDE2O1xuICAgICAgICBkICs9IGMgPj4+IDE2O1xuICAgICAgICBoaFs1XSA9IGFoNSA9IGMgJiA2NTUzNSB8IGQgPDwgMTY7XG4gICAgICAgIGhsWzVdID0gYWw1ID0gYSAmIDY1NTM1IHwgYiA8PCAxNjtcbiAgICAgICAgaCA9IGFoNjtcbiAgICAgICAgbDIgPSBhbDY7XG4gICAgICAgIGEgPSBsMiAmIDY1NTM1O1xuICAgICAgICBiID0gbDIgPj4+IDE2O1xuICAgICAgICBjID0gaCAmIDY1NTM1O1xuICAgICAgICBkID0gaCA+Pj4gMTY7XG4gICAgICAgIGggPSBoaFs2XTtcbiAgICAgICAgbDIgPSBobFs2XTtcbiAgICAgICAgYSArPSBsMiAmIDY1NTM1O1xuICAgICAgICBiICs9IGwyID4+PiAxNjtcbiAgICAgICAgYyArPSBoICYgNjU1MzU7XG4gICAgICAgIGQgKz0gaCA+Pj4gMTY7XG4gICAgICAgIGIgKz0gYSA+Pj4gMTY7XG4gICAgICAgIGMgKz0gYiA+Pj4gMTY7XG4gICAgICAgIGQgKz0gYyA+Pj4gMTY7XG4gICAgICAgIGhoWzZdID0gYWg2ID0gYyAmIDY1NTM1IHwgZCA8PCAxNjtcbiAgICAgICAgaGxbNl0gPSBhbDYgPSBhICYgNjU1MzUgfCBiIDw8IDE2O1xuICAgICAgICBoID0gYWg3O1xuICAgICAgICBsMiA9IGFsNztcbiAgICAgICAgYSA9IGwyICYgNjU1MzU7XG4gICAgICAgIGIgPSBsMiA+Pj4gMTY7XG4gICAgICAgIGMgPSBoICYgNjU1MzU7XG4gICAgICAgIGQgPSBoID4+PiAxNjtcbiAgICAgICAgaCA9IGhoWzddO1xuICAgICAgICBsMiA9IGhsWzddO1xuICAgICAgICBhICs9IGwyICYgNjU1MzU7XG4gICAgICAgIGIgKz0gbDIgPj4+IDE2O1xuICAgICAgICBjICs9IGggJiA2NTUzNTtcbiAgICAgICAgZCArPSBoID4+PiAxNjtcbiAgICAgICAgYiArPSBhID4+PiAxNjtcbiAgICAgICAgYyArPSBiID4+PiAxNjtcbiAgICAgICAgZCArPSBjID4+PiAxNjtcbiAgICAgICAgaGhbN10gPSBhaDcgPSBjICYgNjU1MzUgfCBkIDw8IDE2O1xuICAgICAgICBobFs3XSA9IGFsNyA9IGEgJiA2NTUzNSB8IGIgPDwgMTY7XG4gICAgICAgIHBvcyArPSAxMjg7XG4gICAgICAgIGxlbiAtPSAxMjg7XG4gICAgICB9XG4gICAgICByZXR1cm4gcG9zO1xuICAgIH1cbiAgICBmdW5jdGlvbiBoYXNoKGRhdGEpIHtcbiAgICAgIHZhciBoID0gbmV3IFNIQTUxMigpO1xuICAgICAgaC51cGRhdGUoZGF0YSk7XG4gICAgICB2YXIgZGlnZXN0ID0gaC5kaWdlc3QoKTtcbiAgICAgIGguY2xlYW4oKTtcbiAgICAgIHJldHVybiBkaWdlc3Q7XG4gICAgfVxuICAgIGV4cG9ydHMuaGFzaCA9IGhhc2g7XG4gIH1cbn0pO1xudmFyIHJlcXVpcmVfc2hhMzg0ID0gX19jb21tb25KUzMoe1xuICBcIm5vZGVfbW9kdWxlcy9Ac3RhYmxlbGliL3NoYTM4NC9saWIvc2hhMzg0LmpzXCIoZXhwb3J0cykge1xuICAgIHZhciBfX2V4dGVuZHMgPSBleHBvcnRzICYmIGV4cG9ydHMuX19leHRlbmRzIHx8IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwge19fcHJvdG9fXzogW119IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24oZDIsIGIyKSB7XG4gICAgICAgICAgZDIuX19wcm90b19fID0gYjI7XG4gICAgICAgIH0gfHwgZnVuY3Rpb24oZDIsIGIyKSB7XG4gICAgICAgICAgZm9yICh2YXIgcCBpbiBiMilcbiAgICAgICAgICAgIGlmIChiMi5oYXNPd25Qcm9wZXJ0eShwKSlcbiAgICAgICAgICAgICAgZDJbcF0gPSBiMltwXTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7XG4gICAgICAgICAgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7XG4gICAgICAgIH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgICAgfTtcbiAgICB9KCk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7dmFsdWU6IHRydWV9KTtcbiAgICB2YXIgc2hhNTEyXzEgPSByZXF1aXJlX3NoYTUxMigpO1xuICAgIGV4cG9ydHMuRElHRVNUX0xFTkdUSCA9IDQ4O1xuICAgIGV4cG9ydHMuQkxPQ0tfU0laRSA9IDEyODtcbiAgICB2YXIgU0hBMzg0ID0gZnVuY3Rpb24oX3N1cGVyKSB7XG4gICAgICBfX2V4dGVuZHMoU0hBMzg0MiwgX3N1cGVyKTtcbiAgICAgIGZ1bmN0aW9uIFNIQTM4NDIoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5kaWdlc3RMZW5ndGggPSBleHBvcnRzLkRJR0VTVF9MRU5HVEg7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgIH1cbiAgICAgIFNIQTM4NDIucHJvdG90eXBlLl9pbml0U3RhdGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5fc3RhdGVIaVswXSA9IDM0MTgwNzAzNjU7XG4gICAgICAgIHRoaXMuX3N0YXRlSGlbMV0gPSAxNjU0MjcwMjUwO1xuICAgICAgICB0aGlzLl9zdGF0ZUhpWzJdID0gMjQzODUyOTM3MDtcbiAgICAgICAgdGhpcy5fc3RhdGVIaVszXSA9IDM1NTQ2MjM2MDtcbiAgICAgICAgdGhpcy5fc3RhdGVIaVs0XSA9IDE3MzE0MDU0MTU7XG4gICAgICAgIHRoaXMuX3N0YXRlSGlbNV0gPSAyMzk0MTgwMjMxO1xuICAgICAgICB0aGlzLl9zdGF0ZUhpWzZdID0gMzY3NTAwODUyNTtcbiAgICAgICAgdGhpcy5fc3RhdGVIaVs3XSA9IDEyMDMwNjI4MTM7XG4gICAgICAgIHRoaXMuX3N0YXRlTG9bMF0gPSAzMjM4MzcxMDMyO1xuICAgICAgICB0aGlzLl9zdGF0ZUxvWzFdID0gOTE0MTUwNjYzO1xuICAgICAgICB0aGlzLl9zdGF0ZUxvWzJdID0gODEyNzAyOTk5O1xuICAgICAgICB0aGlzLl9zdGF0ZUxvWzNdID0gNDE0NDkxMjY5NztcbiAgICAgICAgdGhpcy5fc3RhdGVMb1s0XSA9IDQyOTA3NzU4NTc7XG4gICAgICAgIHRoaXMuX3N0YXRlTG9bNV0gPSAxNzUwNjAzMDI1O1xuICAgICAgICB0aGlzLl9zdGF0ZUxvWzZdID0gMTY5NDA3NjgzOTtcbiAgICAgICAgdGhpcy5fc3RhdGVMb1s3XSA9IDMyMDQwNzU0Mjg7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIFNIQTM4NDI7XG4gICAgfShzaGE1MTJfMS5TSEE1MTIpO1xuICAgIGV4cG9ydHMuU0hBMzg0ID0gU0hBMzg0O1xuICAgIGZ1bmN0aW9uIGhhc2goZGF0YSkge1xuICAgICAgdmFyIGggPSBuZXcgU0hBMzg0KCk7XG4gICAgICBoLnVwZGF0ZShkYXRhKTtcbiAgICAgIHZhciBkaWdlc3QgPSBoLmRpZ2VzdCgpO1xuICAgICAgaC5jbGVhbigpO1xuICAgICAgcmV0dXJuIGRpZ2VzdDtcbiAgICB9XG4gICAgZXhwb3J0cy5oYXNoID0gaGFzaDtcbiAgfVxufSk7XG52YXIgcmVxdWlyZV9zaGE1MTJfMjU2ID0gX19jb21tb25KUzMoe1xuICBcIm5vZGVfbW9kdWxlcy9Ac3RhYmxlbGliL3NoYTUxMl8yNTYvbGliL3NoYTUxMl8yNTYuanNcIihleHBvcnRzKSB7XG4gICAgdmFyIF9fZXh0ZW5kcyA9IGV4cG9ydHMgJiYgZXhwb3J0cy5fX2V4dGVuZHMgfHwgZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCB7X19wcm90b19fOiBbXX0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbihkMiwgYjIpIHtcbiAgICAgICAgICBkMi5fX3Byb3RvX18gPSBiMjtcbiAgICAgICAgfSB8fCBmdW5jdGlvbihkMiwgYjIpIHtcbiAgICAgICAgICBmb3IgKHZhciBwIGluIGIyKVxuICAgICAgICAgICAgaWYgKGIyLmhhc093blByb3BlcnR5KHApKVxuICAgICAgICAgICAgICBkMltwXSA9IGIyW3BdO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgIH07XG4gICAgICByZXR1cm4gZnVuY3Rpb24oZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHtcbiAgICAgICAgICB0aGlzLmNvbnN0cnVjdG9yID0gZDtcbiAgICAgICAgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgICB9O1xuICAgIH0oKTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHt2YWx1ZTogdHJ1ZX0pO1xuICAgIHZhciBzaGE1MTJfMSA9IHJlcXVpcmVfc2hhNTEyKCk7XG4gICAgZXhwb3J0cy5ESUdFU1RfTEVOR1RIID0gMzI7XG4gICAgZXhwb3J0cy5CTE9DS19TSVpFID0gMTI4O1xuICAgIHZhciBTSEE1MTJfMjU2ID0gZnVuY3Rpb24oX3N1cGVyKSB7XG4gICAgICBfX2V4dGVuZHMoU0hBNTEyXzI1NjIsIF9zdXBlcik7XG4gICAgICBmdW5jdGlvbiBTSEE1MTJfMjU2MigpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmRpZ2VzdExlbmd0aCA9IGV4cG9ydHMuRElHRVNUX0xFTkdUSDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgICAgfVxuICAgICAgU0hBNTEyXzI1NjIucHJvdG90eXBlLl9pbml0U3RhdGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5fc3RhdGVIaVswXSA9IDU3MzY0NTIwNDtcbiAgICAgICAgdGhpcy5fc3RhdGVIaVsxXSA9IDI2NzMxNzIzODc7XG4gICAgICAgIHRoaXMuX3N0YXRlSGlbMl0gPSA1OTY4ODM1NjM7XG4gICAgICAgIHRoaXMuX3N0YXRlSGlbM10gPSAyNTIwMjgyOTA1O1xuICAgICAgICB0aGlzLl9zdGF0ZUhpWzRdID0gMjUxOTIxOTkzODtcbiAgICAgICAgdGhpcy5fc3RhdGVIaVs1XSA9IDMxOTM4MzkxNDE7XG4gICAgICAgIHRoaXMuX3N0YXRlSGlbNl0gPSA3MjE1MjUyNDQ7XG4gICAgICAgIHRoaXMuX3N0YXRlSGlbN10gPSAyNDY4ODU4NTI7XG4gICAgICAgIHRoaXMuX3N0YXRlTG9bMF0gPSA0MjMwNzM5NzU2O1xuICAgICAgICB0aGlzLl9zdGF0ZUxvWzFdID0gMzM2MDQ0OTczMDtcbiAgICAgICAgdGhpcy5fc3RhdGVMb1syXSA9IDE4Njc3NTU4NTc7XG4gICAgICAgIHRoaXMuX3N0YXRlTG9bM10gPSAxNDk3NDI2NjIxO1xuICAgICAgICB0aGlzLl9zdGF0ZUxvWzRdID0gMjgyNzk0MzkwNztcbiAgICAgICAgdGhpcy5fc3RhdGVMb1s1XSA9IDE0MDEzMDU0OTA7XG4gICAgICAgIHRoaXMuX3N0YXRlTG9bNl0gPSA3NDY5NjEwNjY7XG4gICAgICAgIHRoaXMuX3N0YXRlTG9bN10gPSAyMTc3MTgyODgyO1xuICAgICAgfTtcbiAgICAgIHJldHVybiBTSEE1MTJfMjU2MjtcbiAgICB9KHNoYTUxMl8xLlNIQTUxMik7XG4gICAgZXhwb3J0cy5TSEE1MTJfMjU2ID0gU0hBNTEyXzI1NjtcbiAgICBmdW5jdGlvbiBoYXNoKGRhdGEpIHtcbiAgICAgIHZhciBoID0gbmV3IFNIQTUxMl8yNTYoKTtcbiAgICAgIGgudXBkYXRlKGRhdGEpO1xuICAgICAgdmFyIGRpZ2VzdCA9IGguZGlnZXN0KCk7XG4gICAgICBoLmNsZWFuKCk7XG4gICAgICByZXR1cm4gZGlnZXN0O1xuICAgIH1cbiAgICBleHBvcnRzLmhhc2ggPSBoYXNoO1xuICB9XG59KTtcbnZhciByZXF1aXJlX3NoYTMgPSBfX2NvbW1vbkpTMyh7XG4gIFwibm9kZV9tb2R1bGVzL0BzdGFibGVsaWIvc2hhMy9saWIvc2hhMy5qc1wiKGV4cG9ydHMpIHtcbiAgICB2YXIgX19leHRlbmRzID0gZXhwb3J0cyAmJiBleHBvcnRzLl9fZXh0ZW5kcyB8fCBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IHtfX3Byb3RvX186IFtdfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uKGQyLCBiMikge1xuICAgICAgICAgIGQyLl9fcHJvdG9fXyA9IGIyO1xuICAgICAgICB9IHx8IGZ1bmN0aW9uKGQyLCBiMikge1xuICAgICAgICAgIGZvciAodmFyIHAgaW4gYjIpXG4gICAgICAgICAgICBpZiAoYjIuaGFzT3duUHJvcGVydHkocCkpXG4gICAgICAgICAgICAgIGQyW3BdID0gYjJbcF07XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgfTtcbiAgICAgIHJldHVybiBmdW5jdGlvbihkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkge1xuICAgICAgICAgIHRoaXMuY29uc3RydWN0b3IgPSBkO1xuICAgICAgICB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICAgIH07XG4gICAgfSgpO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge3ZhbHVlOiB0cnVlfSk7XG4gICAgdmFyIGJpbmFyeV8xID0gcmVxdWlyZV9iaW5hcnkyKCk7XG4gICAgdmFyIHdpcGVfMSA9IHJlcXVpcmVfd2lwZTIoKTtcbiAgICB2YXIgS2VjY2FrID0gZnVuY3Rpb24oKSB7XG4gICAgICBmdW5jdGlvbiBLZWNjYWsyKGNhcGFjaXR5KSB7XG4gICAgICAgIGlmIChjYXBhY2l0eSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgY2FwYWNpdHkgPSAzMjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNhcGFjaXR5ID0gY2FwYWNpdHk7XG4gICAgICAgIHRoaXMuX3NoID0gbmV3IEludDMyQXJyYXkoMjUpO1xuICAgICAgICB0aGlzLl9zbCA9IG5ldyBJbnQzMkFycmF5KDI1KTtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBuZXcgVWludDhBcnJheSgyMDApO1xuICAgICAgICB0aGlzLl9wb3MgPSAwO1xuICAgICAgICB0aGlzLl9maW5pc2hlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNsZWFuID0gdGhpcy5yZXNldDtcbiAgICAgICAgaWYgKGNhcGFjaXR5IDw9IDAgfHwgY2FwYWNpdHkgPiAxMjgpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTSEEzOiBpbmNvcnJlY3QgY2FwYWNpdHlcIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ibG9ja1NpemUgPSAyMDAgLSBjYXBhY2l0eTtcbiAgICAgIH1cbiAgICAgIEtlY2NhazIucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHdpcGVfMS53aXBlKHRoaXMuX3NoKTtcbiAgICAgICAgd2lwZV8xLndpcGUodGhpcy5fc2wpO1xuICAgICAgICB3aXBlXzEud2lwZSh0aGlzLl9zdGF0ZSk7XG4gICAgICAgIHRoaXMuX3BvcyA9IDA7XG4gICAgICAgIHRoaXMuX2ZpbmlzaGVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfTtcbiAgICAgIEtlY2NhazIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgaWYgKHRoaXMuX2ZpbmlzaGVkKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU0hBMzogY2FuJ3QgdXBkYXRlIGJlY2F1c2UgaGFzaCB3YXMgZmluaXNoZWRcIik7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdGhpcy5fc3RhdGVbdGhpcy5fcG9zKytdIF49IGRhdGFbaV07XG4gICAgICAgICAgaWYgKHRoaXMuX3BvcyA+PSB0aGlzLmJsb2NrU2l6ZSkge1xuICAgICAgICAgICAga2VjY2FrZih0aGlzLl9zaCwgdGhpcy5fc2wsIHRoaXMuX3N0YXRlKTtcbiAgICAgICAgICAgIHRoaXMuX3BvcyA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfTtcbiAgICAgIEtlY2NhazIucHJvdG90eXBlLl9wYWRBbmRQZXJtdXRlID0gZnVuY3Rpb24ocGFkZGluZ0J5dGUpIHtcbiAgICAgICAgdGhpcy5fc3RhdGVbdGhpcy5fcG9zXSBePSBwYWRkaW5nQnl0ZTtcbiAgICAgICAgdGhpcy5fc3RhdGVbdGhpcy5ibG9ja1NpemUgLSAxXSBePSAxMjg7XG4gICAgICAgIGtlY2Nha2YodGhpcy5fc2gsIHRoaXMuX3NsLCB0aGlzLl9zdGF0ZSk7XG4gICAgICAgIHRoaXMuX2ZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fcG9zID0gMDtcbiAgICAgIH07XG4gICAgICBLZWNjYWsyLnByb3RvdHlwZS5fc3F1ZWV6ZSA9IGZ1bmN0aW9uKGRzdCkge1xuICAgICAgICBpZiAoIXRoaXMuX2ZpbmlzaGVkKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU0hBMzogc3F1ZWV6aW5nIGJlZm9yZSBwYWRBbmRQZXJtdXRlXCIpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZHN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKHRoaXMuX3BvcyA9PT0gdGhpcy5ibG9ja1NpemUpIHtcbiAgICAgICAgICAgIGtlY2Nha2YodGhpcy5fc2gsIHRoaXMuX3NsLCB0aGlzLl9zdGF0ZSk7XG4gICAgICAgICAgICB0aGlzLl9wb3MgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkc3RbaV0gPSB0aGlzLl9zdGF0ZVt0aGlzLl9wb3MrK107XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICByZXR1cm4gS2VjY2FrMjtcbiAgICB9KCk7XG4gICAgZXhwb3J0cy5LZWNjYWsgPSBLZWNjYWs7XG4gICAgdmFyIFNIQTMgPSBmdW5jdGlvbihfc3VwZXIpIHtcbiAgICAgIF9fZXh0ZW5kcyhTSEEzMiwgX3N1cGVyKTtcbiAgICAgIGZ1bmN0aW9uIFNIQTMyKGRpZ2VzdExlbmd0aCkge1xuICAgICAgICBpZiAoZGlnZXN0TGVuZ3RoID09PSB2b2lkIDApIHtcbiAgICAgICAgICBkaWdlc3RMZW5ndGggPSAzMjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBkaWdlc3RMZW5ndGggKiAyKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5kaWdlc3RMZW5ndGggPSBkaWdlc3RMZW5ndGg7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgIH1cbiAgICAgIFNIQTMyLnByb3RvdHlwZS5maW5pc2ggPSBmdW5jdGlvbihkc3QpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9maW5pc2hlZCkge1xuICAgICAgICAgIHRoaXMuX3BhZEFuZFBlcm11dGUoNik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fcG9zID0gMDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zcXVlZXplKGRzdCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfTtcbiAgICAgIFNIQTMyLnByb3RvdHlwZS5kaWdlc3QgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG91dCA9IG5ldyBVaW50OEFycmF5KHRoaXMuZGlnZXN0TGVuZ3RoKTtcbiAgICAgICAgdGhpcy5maW5pc2gob3V0KTtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICAgIH07XG4gICAgICBTSEEzMi5wcm90b3R5cGUuc2F2ZVN0YXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLl9maW5pc2hlZCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNIQTM6IGNhbm5vdCBzYXZlIGZpbmlzaGVkIHN0YXRlXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheSh0aGlzLl9zdGF0ZS5zdWJhcnJheSgwLCB0aGlzLl9wb3MpKTtcbiAgICAgIH07XG4gICAgICBTSEEzMi5wcm90b3R5cGUucmVzdG9yZVN0YXRlID0gZnVuY3Rpb24oc2F2ZWRTdGF0ZSkge1xuICAgICAgICB0aGlzLl9zdGF0ZS5zZXQoc2F2ZWRTdGF0ZSk7XG4gICAgICAgIHRoaXMuX3BvcyA9IHNhdmVkU3RhdGUubGVuZ3RoO1xuICAgICAgICB0aGlzLl9maW5pc2hlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH07XG4gICAgICBTSEEzMi5wcm90b3R5cGUuY2xlYW5TYXZlZFN0YXRlID0gZnVuY3Rpb24oc2F2ZWRTdGF0ZSkge1xuICAgICAgICB3aXBlXzEud2lwZShzYXZlZFN0YXRlKTtcbiAgICAgIH07XG4gICAgICByZXR1cm4gU0hBMzI7XG4gICAgfShLZWNjYWspO1xuICAgIGV4cG9ydHMuU0hBMyA9IFNIQTM7XG4gICAgdmFyIFNIQTMyMjQgPSBmdW5jdGlvbihfc3VwZXIpIHtcbiAgICAgIF9fZXh0ZW5kcyhTSEEzMjI0MiwgX3N1cGVyKTtcbiAgICAgIGZ1bmN0aW9uIFNIQTMyMjQyKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgMjI0IC8gOCkgfHwgdGhpcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBTSEEzMjI0MjtcbiAgICB9KFNIQTMpO1xuICAgIGV4cG9ydHMuU0hBMzIyNCA9IFNIQTMyMjQ7XG4gICAgdmFyIFNIQTMyNTYgPSBmdW5jdGlvbihfc3VwZXIpIHtcbiAgICAgIF9fZXh0ZW5kcyhTSEEzMjU2MiwgX3N1cGVyKTtcbiAgICAgIGZ1bmN0aW9uIFNIQTMyNTYyKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgMjU2IC8gOCkgfHwgdGhpcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBTSEEzMjU2MjtcbiAgICB9KFNIQTMpO1xuICAgIGV4cG9ydHMuU0hBMzI1NiA9IFNIQTMyNTY7XG4gICAgdmFyIFNIQTMzODQgPSBmdW5jdGlvbihfc3VwZXIpIHtcbiAgICAgIF9fZXh0ZW5kcyhTSEEzMzg0MiwgX3N1cGVyKTtcbiAgICAgIGZ1bmN0aW9uIFNIQTMzODQyKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgMzg0IC8gOCkgfHwgdGhpcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBTSEEzMzg0MjtcbiAgICB9KFNIQTMpO1xuICAgIGV4cG9ydHMuU0hBMzM4NCA9IFNIQTMzODQ7XG4gICAgdmFyIFNIQTM1MTIgPSBmdW5jdGlvbihfc3VwZXIpIHtcbiAgICAgIF9fZXh0ZW5kcyhTSEEzNTEyMiwgX3N1cGVyKTtcbiAgICAgIGZ1bmN0aW9uIFNIQTM1MTIyKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgNTEyIC8gOCkgfHwgdGhpcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBTSEEzNTEyMjtcbiAgICB9KFNIQTMpO1xuICAgIGV4cG9ydHMuU0hBMzUxMiA9IFNIQTM1MTI7XG4gICAgZnVuY3Rpb24gaGFzaChkaWdlc3RMZW5ndGgsIGRhdGEpIHtcbiAgICAgIHZhciBoID0gbmV3IFNIQTMoZGlnZXN0TGVuZ3RoKTtcbiAgICAgIGgudXBkYXRlKGRhdGEpO1xuICAgICAgdmFyIGRpZ2VzdCA9IGguZGlnZXN0KCk7XG4gICAgICBoLmNsZWFuKCk7XG4gICAgICByZXR1cm4gZGlnZXN0O1xuICAgIH1cbiAgICBleHBvcnRzLmhhc2ggPSBoYXNoO1xuICAgIGV4cG9ydHMuaGFzaDIyNCA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHJldHVybiBoYXNoKDIyNCAvIDgsIGRhdGEpO1xuICAgIH07XG4gICAgZXhwb3J0cy5oYXNoMjU2ID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgcmV0dXJuIGhhc2goMjU2IC8gOCwgZGF0YSk7XG4gICAgfTtcbiAgICBleHBvcnRzLmhhc2gzODQgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgICByZXR1cm4gaGFzaCgzODQgLyA4LCBkYXRhKTtcbiAgICB9O1xuICAgIGV4cG9ydHMuaGFzaDUxMiA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHJldHVybiBoYXNoKDUxMiAvIDgsIGRhdGEpO1xuICAgIH07XG4gICAgdmFyIFNIQUtFID0gZnVuY3Rpb24oX3N1cGVyKSB7XG4gICAgICBfX2V4dGVuZHMoU0hBS0UyLCBfc3VwZXIpO1xuICAgICAgZnVuY3Rpb24gU0hBS0UyKGJpdFNpemUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgYml0U2l6ZSAvIDggKiAyKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5iaXRTaXplID0gYml0U2l6ZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgICAgfVxuICAgICAgU0hBS0UyLnByb3RvdHlwZS5zdHJlYW0gPSBmdW5jdGlvbihkc3QpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9maW5pc2hlZCkge1xuICAgICAgICAgIHRoaXMuX3BhZEFuZFBlcm11dGUoMzEpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3NxdWVlemUoZHN0KTtcbiAgICAgIH07XG4gICAgICByZXR1cm4gU0hBS0UyO1xuICAgIH0oS2VjY2FrKTtcbiAgICBleHBvcnRzLlNIQUtFID0gU0hBS0U7XG4gICAgdmFyIFNIQUtFMTI4ID0gZnVuY3Rpb24oX3N1cGVyKSB7XG4gICAgICBfX2V4dGVuZHMoU0hBS0UxMjgyLCBfc3VwZXIpO1xuICAgICAgZnVuY3Rpb24gU0hBS0UxMjgyKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgMTI4KSB8fCB0aGlzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFNIQUtFMTI4MjtcbiAgICB9KFNIQUtFKTtcbiAgICBleHBvcnRzLlNIQUtFMTI4ID0gU0hBS0UxMjg7XG4gICAgdmFyIFNIQUtFMjU2ID0gZnVuY3Rpb24oX3N1cGVyKSB7XG4gICAgICBfX2V4dGVuZHMoU0hBS0UyNTYyLCBfc3VwZXIpO1xuICAgICAgZnVuY3Rpb24gU0hBS0UyNTYyKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgMjU2KSB8fCB0aGlzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFNIQUtFMjU2MjtcbiAgICB9KFNIQUtFKTtcbiAgICBleHBvcnRzLlNIQUtFMjU2ID0gU0hBS0UyNTY7XG4gICAgdmFyIFJORENfSEkgPSBuZXcgSW50MzJBcnJheShbXG4gICAgICAwLFxuICAgICAgMCxcbiAgICAgIDIxNDc0ODM2NDgsXG4gICAgICAyMTQ3NDgzNjQ4LFxuICAgICAgMCxcbiAgICAgIDAsXG4gICAgICAyMTQ3NDgzNjQ4LFxuICAgICAgMjE0NzQ4MzY0OCxcbiAgICAgIDAsXG4gICAgICAwLFxuICAgICAgMCxcbiAgICAgIDAsXG4gICAgICAwLFxuICAgICAgMjE0NzQ4MzY0OCxcbiAgICAgIDIxNDc0ODM2NDgsXG4gICAgICAyMTQ3NDgzNjQ4LFxuICAgICAgMjE0NzQ4MzY0OCxcbiAgICAgIDIxNDc0ODM2NDgsXG4gICAgICAwLFxuICAgICAgMjE0NzQ4MzY0OCxcbiAgICAgIDIxNDc0ODM2NDgsXG4gICAgICAyMTQ3NDgzNjQ4LFxuICAgICAgMCxcbiAgICAgIDIxNDc0ODM2NDhcbiAgICBdKTtcbiAgICB2YXIgUk5EQ19MTyA9IG5ldyBJbnQzMkFycmF5KFtcbiAgICAgIDEsXG4gICAgICAzMjg5OCxcbiAgICAgIDMyOTA2LFxuICAgICAgMjE0NzUxNjQxNixcbiAgICAgIDMyOTA3LFxuICAgICAgMjE0NzQ4MzY0OSxcbiAgICAgIDIxNDc1MTY1NDUsXG4gICAgICAzMjc3NyxcbiAgICAgIDEzOCxcbiAgICAgIDEzNixcbiAgICAgIDIxNDc1MTY0MjUsXG4gICAgICAyMTQ3NDgzNjU4LFxuICAgICAgMjE0NzUxNjU1NSxcbiAgICAgIDEzOSxcbiAgICAgIDMyOTA1LFxuICAgICAgMzI3NzEsXG4gICAgICAzMjc3MCxcbiAgICAgIDEyOCxcbiAgICAgIDMyNzc4LFxuICAgICAgMjE0NzQ4MzY1OCxcbiAgICAgIDIxNDc1MTY1NDUsXG4gICAgICAzMjg5NixcbiAgICAgIDIxNDc0ODM2NDksXG4gICAgICAyMTQ3NTE2NDI0XG4gICAgXSk7XG4gICAgZnVuY3Rpb24ga2VjY2FrZihzaCwgc2wsIGJ1Zikge1xuICAgICAgdmFyIGJjaDAsIGJjaDEsIGJjaDIsIGJjaDMsIGJjaDQ7XG4gICAgICB2YXIgYmNsMCwgYmNsMSwgYmNsMiwgYmNsMywgYmNsNDtcbiAgICAgIHZhciB0aCwgdGw7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI1OyBpKyspIHtcbiAgICAgICAgc2xbaV0gPSBiaW5hcnlfMS5yZWFkVWludDMyTEUoYnVmLCBpICogOCk7XG4gICAgICAgIHNoW2ldID0gYmluYXJ5XzEucmVhZFVpbnQzMkxFKGJ1ZiwgaSAqIDggKyA0KTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIHIgPSAwOyByIDwgMjQ7IHIrKykge1xuICAgICAgICBiY2gwID0gc2hbMF0gXiBzaFs1XSBeIHNoWzEwXSBeIHNoWzE1XSBeIHNoWzIwXTtcbiAgICAgICAgYmNoMSA9IHNoWzFdIF4gc2hbNl0gXiBzaFsxMV0gXiBzaFsxNl0gXiBzaFsyMV07XG4gICAgICAgIGJjaDIgPSBzaFsyXSBeIHNoWzddIF4gc2hbMTJdIF4gc2hbMTddIF4gc2hbMjJdO1xuICAgICAgICBiY2gzID0gc2hbM10gXiBzaFs4XSBeIHNoWzEzXSBeIHNoWzE4XSBeIHNoWzIzXTtcbiAgICAgICAgYmNoNCA9IHNoWzRdIF4gc2hbOV0gXiBzaFsxNF0gXiBzaFsxOV0gXiBzaFsyNF07XG4gICAgICAgIGJjbDAgPSBzbFswXSBeIHNsWzVdIF4gc2xbMTBdIF4gc2xbMTVdIF4gc2xbMjBdO1xuICAgICAgICBiY2wxID0gc2xbMV0gXiBzbFs2XSBeIHNsWzExXSBeIHNsWzE2XSBeIHNsWzIxXTtcbiAgICAgICAgYmNsMiA9IHNsWzJdIF4gc2xbN10gXiBzbFsxMl0gXiBzbFsxN10gXiBzbFsyMl07XG4gICAgICAgIGJjbDMgPSBzbFszXSBeIHNsWzhdIF4gc2xbMTNdIF4gc2xbMThdIF4gc2xbMjNdO1xuICAgICAgICBiY2w0ID0gc2xbNF0gXiBzbFs5XSBeIHNsWzE0XSBeIHNsWzE5XSBeIHNsWzI0XTtcbiAgICAgICAgdGggPSBiY2g0IF4gKGJjaDEgPDwgMSB8IGJjbDEgPj4+IDMyIC0gMSk7XG4gICAgICAgIHRsID0gYmNsNCBeIChiY2wxIDw8IDEgfCBiY2gxID4+PiAzMiAtIDEpO1xuICAgICAgICBzaFswXSBePSB0aDtcbiAgICAgICAgc2hbNV0gXj0gdGg7XG4gICAgICAgIHNoWzEwXSBePSB0aDtcbiAgICAgICAgc2hbMTVdIF49IHRoO1xuICAgICAgICBzaFsyMF0gXj0gdGg7XG4gICAgICAgIHNsWzBdIF49IHRsO1xuICAgICAgICBzbFs1XSBePSB0bDtcbiAgICAgICAgc2xbMTBdIF49IHRsO1xuICAgICAgICBzbFsxNV0gXj0gdGw7XG4gICAgICAgIHNsWzIwXSBePSB0bDtcbiAgICAgICAgdGggPSBiY2gwIF4gKGJjaDIgPDwgMSB8IGJjbDIgPj4+IDMyIC0gMSk7XG4gICAgICAgIHRsID0gYmNsMCBeIChiY2wyIDw8IDEgfCBiY2gyID4+PiAzMiAtIDEpO1xuICAgICAgICBzaFsxXSBePSB0aDtcbiAgICAgICAgc2hbNl0gXj0gdGg7XG4gICAgICAgIHNoWzExXSBePSB0aDtcbiAgICAgICAgc2hbMTZdIF49IHRoO1xuICAgICAgICBzaFsyMV0gXj0gdGg7XG4gICAgICAgIHNsWzFdIF49IHRsO1xuICAgICAgICBzbFs2XSBePSB0bDtcbiAgICAgICAgc2xbMTFdIF49IHRsO1xuICAgICAgICBzbFsxNl0gXj0gdGw7XG4gICAgICAgIHNsWzIxXSBePSB0bDtcbiAgICAgICAgdGggPSBiY2gxIF4gKGJjaDMgPDwgMSB8IGJjbDMgPj4+IDMyIC0gMSk7XG4gICAgICAgIHRsID0gYmNsMSBeIChiY2wzIDw8IDEgfCBiY2gzID4+PiAzMiAtIDEpO1xuICAgICAgICBzaFsyXSBePSB0aDtcbiAgICAgICAgc2hbN10gXj0gdGg7XG4gICAgICAgIHNoWzEyXSBePSB0aDtcbiAgICAgICAgc2hbMTddIF49IHRoO1xuICAgICAgICBzaFsyMl0gXj0gdGg7XG4gICAgICAgIHNsWzJdIF49IHRsO1xuICAgICAgICBzbFs3XSBePSB0bDtcbiAgICAgICAgc2xbMTJdIF49IHRsO1xuICAgICAgICBzbFsxN10gXj0gdGw7XG4gICAgICAgIHNsWzIyXSBePSB0bDtcbiAgICAgICAgdGggPSBiY2gyIF4gKGJjaDQgPDwgMSB8IGJjbDQgPj4+IDMyIC0gMSk7XG4gICAgICAgIHRsID0gYmNsMiBeIChiY2w0IDw8IDEgfCBiY2g0ID4+PiAzMiAtIDEpO1xuICAgICAgICBzaFszXSBePSB0aDtcbiAgICAgICAgc2xbM10gXj0gdGw7XG4gICAgICAgIHNoWzhdIF49IHRoO1xuICAgICAgICBzbFs4XSBePSB0bDtcbiAgICAgICAgc2hbMTNdIF49IHRoO1xuICAgICAgICBzbFsxM10gXj0gdGw7XG4gICAgICAgIHNoWzE4XSBePSB0aDtcbiAgICAgICAgc2xbMThdIF49IHRsO1xuICAgICAgICBzaFsyM10gXj0gdGg7XG4gICAgICAgIHNsWzIzXSBePSB0bDtcbiAgICAgICAgdGggPSBiY2gzIF4gKGJjaDAgPDwgMSB8IGJjbDAgPj4+IDMyIC0gMSk7XG4gICAgICAgIHRsID0gYmNsMyBeIChiY2wwIDw8IDEgfCBiY2gwID4+PiAzMiAtIDEpO1xuICAgICAgICBzaFs0XSBePSB0aDtcbiAgICAgICAgc2hbOV0gXj0gdGg7XG4gICAgICAgIHNoWzE0XSBePSB0aDtcbiAgICAgICAgc2hbMTldIF49IHRoO1xuICAgICAgICBzaFsyNF0gXj0gdGg7XG4gICAgICAgIHNsWzRdIF49IHRsO1xuICAgICAgICBzbFs5XSBePSB0bDtcbiAgICAgICAgc2xbMTRdIF49IHRsO1xuICAgICAgICBzbFsxOV0gXj0gdGw7XG4gICAgICAgIHNsWzI0XSBePSB0bDtcbiAgICAgICAgdGggPSBzaFsxXTtcbiAgICAgICAgdGwgPSBzbFsxXTtcbiAgICAgICAgYmNoMCA9IHNoWzEwXTtcbiAgICAgICAgYmNsMCA9IHNsWzEwXTtcbiAgICAgICAgc2hbMTBdID0gdGggPDwgMSB8IHRsID4+PiAzMiAtIDE7XG4gICAgICAgIHNsWzEwXSA9IHRsIDw8IDEgfCB0aCA+Pj4gMzIgLSAxO1xuICAgICAgICB0aCA9IGJjaDA7XG4gICAgICAgIHRsID0gYmNsMDtcbiAgICAgICAgYmNoMCA9IHNoWzddO1xuICAgICAgICBiY2wwID0gc2xbN107XG4gICAgICAgIHNoWzddID0gdGggPDwgMyB8IHRsID4+PiAzMiAtIDM7XG4gICAgICAgIHNsWzddID0gdGwgPDwgMyB8IHRoID4+PiAzMiAtIDM7XG4gICAgICAgIHRoID0gYmNoMDtcbiAgICAgICAgdGwgPSBiY2wwO1xuICAgICAgICBiY2gwID0gc2hbMTFdO1xuICAgICAgICBiY2wwID0gc2xbMTFdO1xuICAgICAgICBzaFsxMV0gPSB0aCA8PCA2IHwgdGwgPj4+IDMyIC0gNjtcbiAgICAgICAgc2xbMTFdID0gdGwgPDwgNiB8IHRoID4+PiAzMiAtIDY7XG4gICAgICAgIHRoID0gYmNoMDtcbiAgICAgICAgdGwgPSBiY2wwO1xuICAgICAgICBiY2gwID0gc2hbMTddO1xuICAgICAgICBiY2wwID0gc2xbMTddO1xuICAgICAgICBzaFsxN10gPSB0aCA8PCAxMCB8IHRsID4+PiAzMiAtIDEwO1xuICAgICAgICBzbFsxN10gPSB0bCA8PCAxMCB8IHRoID4+PiAzMiAtIDEwO1xuICAgICAgICB0aCA9IGJjaDA7XG4gICAgICAgIHRsID0gYmNsMDtcbiAgICAgICAgYmNoMCA9IHNoWzE4XTtcbiAgICAgICAgYmNsMCA9IHNsWzE4XTtcbiAgICAgICAgc2hbMThdID0gdGggPDwgMTUgfCB0bCA+Pj4gMzIgLSAxNTtcbiAgICAgICAgc2xbMThdID0gdGwgPDwgMTUgfCB0aCA+Pj4gMzIgLSAxNTtcbiAgICAgICAgdGggPSBiY2gwO1xuICAgICAgICB0bCA9IGJjbDA7XG4gICAgICAgIGJjaDAgPSBzaFszXTtcbiAgICAgICAgYmNsMCA9IHNsWzNdO1xuICAgICAgICBzaFszXSA9IHRoIDw8IDIxIHwgdGwgPj4+IDMyIC0gMjE7XG4gICAgICAgIHNsWzNdID0gdGwgPDwgMjEgfCB0aCA+Pj4gMzIgLSAyMTtcbiAgICAgICAgdGggPSBiY2gwO1xuICAgICAgICB0bCA9IGJjbDA7XG4gICAgICAgIGJjaDAgPSBzaFs1XTtcbiAgICAgICAgYmNsMCA9IHNsWzVdO1xuICAgICAgICBzaFs1XSA9IHRoIDw8IDI4IHwgdGwgPj4+IDMyIC0gMjg7XG4gICAgICAgIHNsWzVdID0gdGwgPDwgMjggfCB0aCA+Pj4gMzIgLSAyODtcbiAgICAgICAgdGggPSBiY2gwO1xuICAgICAgICB0bCA9IGJjbDA7XG4gICAgICAgIGJjaDAgPSBzaFsxNl07XG4gICAgICAgIGJjbDAgPSBzbFsxNl07XG4gICAgICAgIHNoWzE2XSA9IHRsIDw8IDQgfCB0aCA+Pj4gMzIgLSA0O1xuICAgICAgICBzbFsxNl0gPSB0aCA8PCA0IHwgdGwgPj4+IDMyIC0gNDtcbiAgICAgICAgdGggPSBiY2gwO1xuICAgICAgICB0bCA9IGJjbDA7XG4gICAgICAgIGJjaDAgPSBzaFs4XTtcbiAgICAgICAgYmNsMCA9IHNsWzhdO1xuICAgICAgICBzaFs4XSA9IHRsIDw8IDEzIHwgdGggPj4+IDMyIC0gMTM7XG4gICAgICAgIHNsWzhdID0gdGggPDwgMTMgfCB0bCA+Pj4gMzIgLSAxMztcbiAgICAgICAgdGggPSBiY2gwO1xuICAgICAgICB0bCA9IGJjbDA7XG4gICAgICAgIGJjaDAgPSBzaFsyMV07XG4gICAgICAgIGJjbDAgPSBzbFsyMV07XG4gICAgICAgIHNoWzIxXSA9IHRsIDw8IDIzIHwgdGggPj4+IDMyIC0gMjM7XG4gICAgICAgIHNsWzIxXSA9IHRoIDw8IDIzIHwgdGwgPj4+IDMyIC0gMjM7XG4gICAgICAgIHRoID0gYmNoMDtcbiAgICAgICAgdGwgPSBiY2wwO1xuICAgICAgICBiY2gwID0gc2hbMjRdO1xuICAgICAgICBiY2wwID0gc2xbMjRdO1xuICAgICAgICBzaFsyNF0gPSB0aCA8PCAyIHwgdGwgPj4+IDMyIC0gMjtcbiAgICAgICAgc2xbMjRdID0gdGwgPDwgMiB8IHRoID4+PiAzMiAtIDI7XG4gICAgICAgIHRoID0gYmNoMDtcbiAgICAgICAgdGwgPSBiY2wwO1xuICAgICAgICBiY2gwID0gc2hbNF07XG4gICAgICAgIGJjbDAgPSBzbFs0XTtcbiAgICAgICAgc2hbNF0gPSB0aCA8PCAxNCB8IHRsID4+PiAzMiAtIDE0O1xuICAgICAgICBzbFs0XSA9IHRsIDw8IDE0IHwgdGggPj4+IDMyIC0gMTQ7XG4gICAgICAgIHRoID0gYmNoMDtcbiAgICAgICAgdGwgPSBiY2wwO1xuICAgICAgICBiY2gwID0gc2hbMTVdO1xuICAgICAgICBiY2wwID0gc2xbMTVdO1xuICAgICAgICBzaFsxNV0gPSB0aCA8PCAyNyB8IHRsID4+PiAzMiAtIDI3O1xuICAgICAgICBzbFsxNV0gPSB0bCA8PCAyNyB8IHRoID4+PiAzMiAtIDI3O1xuICAgICAgICB0aCA9IGJjaDA7XG4gICAgICAgIHRsID0gYmNsMDtcbiAgICAgICAgYmNoMCA9IHNoWzIzXTtcbiAgICAgICAgYmNsMCA9IHNsWzIzXTtcbiAgICAgICAgc2hbMjNdID0gdGwgPDwgOSB8IHRoID4+PiAzMiAtIDk7XG4gICAgICAgIHNsWzIzXSA9IHRoIDw8IDkgfCB0bCA+Pj4gMzIgLSA5O1xuICAgICAgICB0aCA9IGJjaDA7XG4gICAgICAgIHRsID0gYmNsMDtcbiAgICAgICAgYmNoMCA9IHNoWzE5XTtcbiAgICAgICAgYmNsMCA9IHNsWzE5XTtcbiAgICAgICAgc2hbMTldID0gdGwgPDwgMjQgfCB0aCA+Pj4gMzIgLSAyNDtcbiAgICAgICAgc2xbMTldID0gdGggPDwgMjQgfCB0bCA+Pj4gMzIgLSAyNDtcbiAgICAgICAgdGggPSBiY2gwO1xuICAgICAgICB0bCA9IGJjbDA7XG4gICAgICAgIGJjaDAgPSBzaFsxM107XG4gICAgICAgIGJjbDAgPSBzbFsxM107XG4gICAgICAgIHNoWzEzXSA9IHRoIDw8IDggfCB0bCA+Pj4gMzIgLSA4O1xuICAgICAgICBzbFsxM10gPSB0bCA8PCA4IHwgdGggPj4+IDMyIC0gODtcbiAgICAgICAgdGggPSBiY2gwO1xuICAgICAgICB0bCA9IGJjbDA7XG4gICAgICAgIGJjaDAgPSBzaFsxMl07XG4gICAgICAgIGJjbDAgPSBzbFsxMl07XG4gICAgICAgIHNoWzEyXSA9IHRoIDw8IDI1IHwgdGwgPj4+IDMyIC0gMjU7XG4gICAgICAgIHNsWzEyXSA9IHRsIDw8IDI1IHwgdGggPj4+IDMyIC0gMjU7XG4gICAgICAgIHRoID0gYmNoMDtcbiAgICAgICAgdGwgPSBiY2wwO1xuICAgICAgICBiY2gwID0gc2hbMl07XG4gICAgICAgIGJjbDAgPSBzbFsyXTtcbiAgICAgICAgc2hbMl0gPSB0bCA8PCAxMSB8IHRoID4+PiAzMiAtIDExO1xuICAgICAgICBzbFsyXSA9IHRoIDw8IDExIHwgdGwgPj4+IDMyIC0gMTE7XG4gICAgICAgIHRoID0gYmNoMDtcbiAgICAgICAgdGwgPSBiY2wwO1xuICAgICAgICBiY2gwID0gc2hbMjBdO1xuICAgICAgICBiY2wwID0gc2xbMjBdO1xuICAgICAgICBzaFsyMF0gPSB0bCA8PCAzMCB8IHRoID4+PiAzMiAtIDMwO1xuICAgICAgICBzbFsyMF0gPSB0aCA8PCAzMCB8IHRsID4+PiAzMiAtIDMwO1xuICAgICAgICB0aCA9IGJjaDA7XG4gICAgICAgIHRsID0gYmNsMDtcbiAgICAgICAgYmNoMCA9IHNoWzE0XTtcbiAgICAgICAgYmNsMCA9IHNsWzE0XTtcbiAgICAgICAgc2hbMTRdID0gdGggPDwgMTggfCB0bCA+Pj4gMzIgLSAxODtcbiAgICAgICAgc2xbMTRdID0gdGwgPDwgMTggfCB0aCA+Pj4gMzIgLSAxODtcbiAgICAgICAgdGggPSBiY2gwO1xuICAgICAgICB0bCA9IGJjbDA7XG4gICAgICAgIGJjaDAgPSBzaFsyMl07XG4gICAgICAgIGJjbDAgPSBzbFsyMl07XG4gICAgICAgIHNoWzIyXSA9IHRsIDw8IDcgfCB0aCA+Pj4gMzIgLSA3O1xuICAgICAgICBzbFsyMl0gPSB0aCA8PCA3IHwgdGwgPj4+IDMyIC0gNztcbiAgICAgICAgdGggPSBiY2gwO1xuICAgICAgICB0bCA9IGJjbDA7XG4gICAgICAgIGJjaDAgPSBzaFs5XTtcbiAgICAgICAgYmNsMCA9IHNsWzldO1xuICAgICAgICBzaFs5XSA9IHRsIDw8IDI5IHwgdGggPj4+IDMyIC0gMjk7XG4gICAgICAgIHNsWzldID0gdGggPDwgMjkgfCB0bCA+Pj4gMzIgLSAyOTtcbiAgICAgICAgdGggPSBiY2gwO1xuICAgICAgICB0bCA9IGJjbDA7XG4gICAgICAgIGJjaDAgPSBzaFs2XTtcbiAgICAgICAgYmNsMCA9IHNsWzZdO1xuICAgICAgICBzaFs2XSA9IHRoIDw8IDIwIHwgdGwgPj4+IDMyIC0gMjA7XG4gICAgICAgIHNsWzZdID0gdGwgPDwgMjAgfCB0aCA+Pj4gMzIgLSAyMDtcbiAgICAgICAgdGggPSBiY2gwO1xuICAgICAgICB0bCA9IGJjbDA7XG4gICAgICAgIGJjaDAgPSBzaFsxXTtcbiAgICAgICAgYmNsMCA9IHNsWzFdO1xuICAgICAgICBzaFsxXSA9IHRsIDw8IDEyIHwgdGggPj4+IDMyIC0gMTI7XG4gICAgICAgIHNsWzFdID0gdGggPDwgMTIgfCB0bCA+Pj4gMzIgLSAxMjtcbiAgICAgICAgdGggPSBiY2gwO1xuICAgICAgICB0bCA9IGJjbDA7XG4gICAgICAgIGJjaDAgPSBzaFswXTtcbiAgICAgICAgYmNoMSA9IHNoWzFdO1xuICAgICAgICBiY2gyID0gc2hbMl07XG4gICAgICAgIGJjaDMgPSBzaFszXTtcbiAgICAgICAgYmNoNCA9IHNoWzRdO1xuICAgICAgICBzaFswXSBePSB+YmNoMSAmIGJjaDI7XG4gICAgICAgIHNoWzFdIF49IH5iY2gyICYgYmNoMztcbiAgICAgICAgc2hbMl0gXj0gfmJjaDMgJiBiY2g0O1xuICAgICAgICBzaFszXSBePSB+YmNoNCAmIGJjaDA7XG4gICAgICAgIHNoWzRdIF49IH5iY2gwICYgYmNoMTtcbiAgICAgICAgYmNsMCA9IHNsWzBdO1xuICAgICAgICBiY2wxID0gc2xbMV07XG4gICAgICAgIGJjbDIgPSBzbFsyXTtcbiAgICAgICAgYmNsMyA9IHNsWzNdO1xuICAgICAgICBiY2w0ID0gc2xbNF07XG4gICAgICAgIHNsWzBdIF49IH5iY2wxICYgYmNsMjtcbiAgICAgICAgc2xbMV0gXj0gfmJjbDIgJiBiY2wzO1xuICAgICAgICBzbFsyXSBePSB+YmNsMyAmIGJjbDQ7XG4gICAgICAgIHNsWzNdIF49IH5iY2w0ICYgYmNsMDtcbiAgICAgICAgc2xbNF0gXj0gfmJjbDAgJiBiY2wxO1xuICAgICAgICBiY2gwID0gc2hbNV07XG4gICAgICAgIGJjaDEgPSBzaFs2XTtcbiAgICAgICAgYmNoMiA9IHNoWzddO1xuICAgICAgICBiY2gzID0gc2hbOF07XG4gICAgICAgIGJjaDQgPSBzaFs5XTtcbiAgICAgICAgc2hbNV0gXj0gfmJjaDEgJiBiY2gyO1xuICAgICAgICBzaFs2XSBePSB+YmNoMiAmIGJjaDM7XG4gICAgICAgIHNoWzddIF49IH5iY2gzICYgYmNoNDtcbiAgICAgICAgc2hbOF0gXj0gfmJjaDQgJiBiY2gwO1xuICAgICAgICBzaFs5XSBePSB+YmNoMCAmIGJjaDE7XG4gICAgICAgIGJjbDAgPSBzbFs1XTtcbiAgICAgICAgYmNsMSA9IHNsWzZdO1xuICAgICAgICBiY2wyID0gc2xbN107XG4gICAgICAgIGJjbDMgPSBzbFs4XTtcbiAgICAgICAgYmNsNCA9IHNsWzldO1xuICAgICAgICBzbFs1XSBePSB+YmNsMSAmIGJjbDI7XG4gICAgICAgIHNsWzZdIF49IH5iY2wyICYgYmNsMztcbiAgICAgICAgc2xbN10gXj0gfmJjbDMgJiBiY2w0O1xuICAgICAgICBzbFs4XSBePSB+YmNsNCAmIGJjbDA7XG4gICAgICAgIHNsWzldIF49IH5iY2wwICYgYmNsMTtcbiAgICAgICAgYmNoMCA9IHNoWzEwXTtcbiAgICAgICAgYmNoMSA9IHNoWzExXTtcbiAgICAgICAgYmNoMiA9IHNoWzEyXTtcbiAgICAgICAgYmNoMyA9IHNoWzEzXTtcbiAgICAgICAgYmNoNCA9IHNoWzE0XTtcbiAgICAgICAgc2hbMTBdIF49IH5iY2gxICYgYmNoMjtcbiAgICAgICAgc2hbMTFdIF49IH5iY2gyICYgYmNoMztcbiAgICAgICAgc2hbMTJdIF49IH5iY2gzICYgYmNoNDtcbiAgICAgICAgc2hbMTNdIF49IH5iY2g0ICYgYmNoMDtcbiAgICAgICAgc2hbMTRdIF49IH5iY2gwICYgYmNoMTtcbiAgICAgICAgYmNsMCA9IHNsWzEwXTtcbiAgICAgICAgYmNsMSA9IHNsWzExXTtcbiAgICAgICAgYmNsMiA9IHNsWzEyXTtcbiAgICAgICAgYmNsMyA9IHNsWzEzXTtcbiAgICAgICAgYmNsNCA9IHNsWzE0XTtcbiAgICAgICAgc2xbMTBdIF49IH5iY2wxICYgYmNsMjtcbiAgICAgICAgc2xbMTFdIF49IH5iY2wyICYgYmNsMztcbiAgICAgICAgc2xbMTJdIF49IH5iY2wzICYgYmNsNDtcbiAgICAgICAgc2xbMTNdIF49IH5iY2w0ICYgYmNsMDtcbiAgICAgICAgc2xbMTRdIF49IH5iY2wwICYgYmNsMTtcbiAgICAgICAgYmNoMCA9IHNoWzE1XTtcbiAgICAgICAgYmNoMSA9IHNoWzE2XTtcbiAgICAgICAgYmNoMiA9IHNoWzE3XTtcbiAgICAgICAgYmNoMyA9IHNoWzE4XTtcbiAgICAgICAgYmNoNCA9IHNoWzE5XTtcbiAgICAgICAgc2hbMTVdIF49IH5iY2gxICYgYmNoMjtcbiAgICAgICAgc2hbMTZdIF49IH5iY2gyICYgYmNoMztcbiAgICAgICAgc2hbMTddIF49IH5iY2gzICYgYmNoNDtcbiAgICAgICAgc2hbMThdIF49IH5iY2g0ICYgYmNoMDtcbiAgICAgICAgc2hbMTldIF49IH5iY2gwICYgYmNoMTtcbiAgICAgICAgYmNsMCA9IHNsWzE1XTtcbiAgICAgICAgYmNsMSA9IHNsWzE2XTtcbiAgICAgICAgYmNsMiA9IHNsWzE3XTtcbiAgICAgICAgYmNsMyA9IHNsWzE4XTtcbiAgICAgICAgYmNsNCA9IHNsWzE5XTtcbiAgICAgICAgc2xbMTVdIF49IH5iY2wxICYgYmNsMjtcbiAgICAgICAgc2xbMTZdIF49IH5iY2wyICYgYmNsMztcbiAgICAgICAgc2xbMTddIF49IH5iY2wzICYgYmNsNDtcbiAgICAgICAgc2xbMThdIF49IH5iY2w0ICYgYmNsMDtcbiAgICAgICAgc2xbMTldIF49IH5iY2wwICYgYmNsMTtcbiAgICAgICAgYmNoMCA9IHNoWzIwXTtcbiAgICAgICAgYmNoMSA9IHNoWzIxXTtcbiAgICAgICAgYmNoMiA9IHNoWzIyXTtcbiAgICAgICAgYmNoMyA9IHNoWzIzXTtcbiAgICAgICAgYmNoNCA9IHNoWzI0XTtcbiAgICAgICAgc2hbMjBdIF49IH5iY2gxICYgYmNoMjtcbiAgICAgICAgc2hbMjFdIF49IH5iY2gyICYgYmNoMztcbiAgICAgICAgc2hbMjJdIF49IH5iY2gzICYgYmNoNDtcbiAgICAgICAgc2hbMjNdIF49IH5iY2g0ICYgYmNoMDtcbiAgICAgICAgc2hbMjRdIF49IH5iY2gwICYgYmNoMTtcbiAgICAgICAgYmNsMCA9IHNsWzIwXTtcbiAgICAgICAgYmNsMSA9IHNsWzIxXTtcbiAgICAgICAgYmNsMiA9IHNsWzIyXTtcbiAgICAgICAgYmNsMyA9IHNsWzIzXTtcbiAgICAgICAgYmNsNCA9IHNsWzI0XTtcbiAgICAgICAgc2xbMjBdIF49IH5iY2wxICYgYmNsMjtcbiAgICAgICAgc2xbMjFdIF49IH5iY2wyICYgYmNsMztcbiAgICAgICAgc2xbMjJdIF49IH5iY2wzICYgYmNsNDtcbiAgICAgICAgc2xbMjNdIF49IH5iY2w0ICYgYmNsMDtcbiAgICAgICAgc2xbMjRdIF49IH5iY2wwICYgYmNsMTtcbiAgICAgICAgc2hbMF0gXj0gUk5EQ19ISVtyXTtcbiAgICAgICAgc2xbMF0gXj0gUk5EQ19MT1tyXTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjU7IGkrKykge1xuICAgICAgICBiaW5hcnlfMS53cml0ZVVpbnQzMkxFKHNsW2ldLCBidWYsIGkgKiA4KTtcbiAgICAgICAgYmluYXJ5XzEud3JpdGVVaW50MzJMRShzaFtpXSwgYnVmLCBpICogOCArIDQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufSk7XG52YXIgdXRpbDM7XG4oZnVuY3Rpb24odXRpbDIyKSB7XG4gIGZ1bmN0aW9uIGFzc2VydE5ldmVyKF94KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCk7XG4gIH1cbiAgdXRpbDIyLmFzc2VydE5ldmVyID0gYXNzZXJ0TmV2ZXI7XG4gIHV0aWwyMi5hcnJheVRvRW51bSA9IChpdGVtcykgPT4ge1xuICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgIGZvciAoY29uc3QgaXRlbSBvZiBpdGVtcykge1xuICAgICAgb2JqW2l0ZW1dID0gaXRlbTtcbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbiAgfTtcbiAgdXRpbDIyLmdldFZhbGlkRW51bVZhbHVlcyA9IChvYmopID0+IHtcbiAgICBjb25zdCB2YWxpZEtleXMgPSB1dGlsMjIub2JqZWN0S2V5cyhvYmopLmZpbHRlcigoaykgPT4gdHlwZW9mIG9ialtvYmpba11dICE9PSBcIm51bWJlclwiKTtcbiAgICBjb25zdCBmaWx0ZXJlZCA9IHt9O1xuICAgIGZvciAoY29uc3QgayBvZiB2YWxpZEtleXMpIHtcbiAgICAgIGZpbHRlcmVkW2tdID0gb2JqW2tdO1xuICAgIH1cbiAgICByZXR1cm4gdXRpbDIyLm9iamVjdFZhbHVlcyhmaWx0ZXJlZCk7XG4gIH07XG4gIHV0aWwyMi5vYmplY3RWYWx1ZXMgPSAob2JqKSA9PiB7XG4gICAgcmV0dXJuIHV0aWwyMi5vYmplY3RLZXlzKG9iaikubWFwKGZ1bmN0aW9uKGUpIHtcbiAgICAgIHJldHVybiBvYmpbZV07XG4gICAgfSk7XG4gIH07XG4gIHV0aWwyMi5vYmplY3RLZXlzID0gdHlwZW9mIE9iamVjdC5rZXlzID09PSBcImZ1bmN0aW9uXCIgPyAob2JqKSA9PiBPYmplY3Qua2V5cyhvYmopIDogKG9iamVjdCkgPT4ge1xuICAgIGNvbnN0IGtleXMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSB7XG4gICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ga2V5cztcbiAgfTtcbiAgdXRpbDIyLmZpbmQgPSAoYXJyLCBjaGVja2VyKSA9PiB7XG4gICAgZm9yIChjb25zdCBpdGVtIG9mIGFycikge1xuICAgICAgaWYgKGNoZWNrZXIoaXRlbSkpXG4gICAgICAgIHJldHVybiBpdGVtO1xuICAgIH1cbiAgICByZXR1cm4gdm9pZCAwO1xuICB9O1xuICB1dGlsMjIuaXNJbnRlZ2VyID0gdHlwZW9mIE51bWJlci5pc0ludGVnZXIgPT09IFwiZnVuY3Rpb25cIiA/ICh2YWwpID0+IE51bWJlci5pc0ludGVnZXIodmFsKSA6ICh2YWwpID0+IHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgJiYgaXNGaW5pdGUodmFsKSAmJiBNYXRoLmZsb29yKHZhbCkgPT09IHZhbDtcbiAgZnVuY3Rpb24gam9pblZhbHVlcyhhcnJheSwgc2VwYXJhdG9yID0gXCIgfCBcIikge1xuICAgIHJldHVybiBhcnJheS5tYXAoKHZhbCkgPT4gdHlwZW9mIHZhbCA9PT0gXCJzdHJpbmdcIiA/IGAnJHt2YWx9J2AgOiB2YWwpLmpvaW4oc2VwYXJhdG9yKTtcbiAgfVxuICB1dGlsMjIuam9pblZhbHVlcyA9IGpvaW5WYWx1ZXM7XG59KSh1dGlsMyB8fCAodXRpbDMgPSB7fSkpO1xudmFyIFpvZFBhcnNlZFR5cGUzID0gdXRpbDMuYXJyYXlUb0VudW0oW1xuICBcInN0cmluZ1wiLFxuICBcIm5hblwiLFxuICBcIm51bWJlclwiLFxuICBcImludGVnZXJcIixcbiAgXCJmbG9hdFwiLFxuICBcImJvb2xlYW5cIixcbiAgXCJkYXRlXCIsXG4gIFwiYmlnaW50XCIsXG4gIFwic3ltYm9sXCIsXG4gIFwiZnVuY3Rpb25cIixcbiAgXCJ1bmRlZmluZWRcIixcbiAgXCJudWxsXCIsXG4gIFwiYXJyYXlcIixcbiAgXCJvYmplY3RcIixcbiAgXCJ1bmtub3duXCIsXG4gIFwicHJvbWlzZVwiLFxuICBcInZvaWRcIixcbiAgXCJuZXZlclwiLFxuICBcIm1hcFwiLFxuICBcInNldFwiXG5dKTtcbnZhciBnZXRQYXJzZWRUeXBlMyA9IChkYXRhKSA9PiB7XG4gIGNvbnN0IHQgPSB0eXBlb2YgZGF0YTtcbiAgc3dpdGNoICh0KSB7XG4gICAgY2FzZSBcInVuZGVmaW5lZFwiOlxuICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUzLnVuZGVmaW5lZDtcbiAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZTMuc3RyaW5nO1xuICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICAgIHJldHVybiBpc05hTihkYXRhKSA/IFpvZFBhcnNlZFR5cGUzLm5hbiA6IFpvZFBhcnNlZFR5cGUzLm51bWJlcjtcbiAgICBjYXNlIFwiYm9vbGVhblwiOlxuICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUzLmJvb2xlYW47XG4gICAgY2FzZSBcImZ1bmN0aW9uXCI6XG4gICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZTMuZnVuY3Rpb247XG4gICAgY2FzZSBcImJpZ2ludFwiOlxuICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUzLmJpZ2ludDtcbiAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZTMuYXJyYXk7XG4gICAgICB9XG4gICAgICBpZiAoZGF0YSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZTMubnVsbDtcbiAgICAgIH1cbiAgICAgIGlmIChkYXRhLnRoZW4gJiYgdHlwZW9mIGRhdGEudGhlbiA9PT0gXCJmdW5jdGlvblwiICYmIGRhdGEuY2F0Y2ggJiYgdHlwZW9mIGRhdGEuY2F0Y2ggPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZTMucHJvbWlzZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgTWFwICE9PSBcInVuZGVmaW5lZFwiICYmIGRhdGEgaW5zdGFuY2VvZiBNYXApIHtcbiAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUzLm1hcDtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgU2V0ICE9PSBcInVuZGVmaW5lZFwiICYmIGRhdGEgaW5zdGFuY2VvZiBTZXQpIHtcbiAgICAgICAgcmV0dXJuIFpvZFBhcnNlZFR5cGUzLnNldDtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgRGF0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkYXRhIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICByZXR1cm4gWm9kUGFyc2VkVHlwZTMuZGF0ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlMy5vYmplY3Q7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBab2RQYXJzZWRUeXBlMy51bmtub3duO1xuICB9XG59O1xudmFyIFpvZElzc3VlQ29kZTMgPSB1dGlsMy5hcnJheVRvRW51bShbXG4gIFwiaW52YWxpZF90eXBlXCIsXG4gIFwiaW52YWxpZF9saXRlcmFsXCIsXG4gIFwiY3VzdG9tXCIsXG4gIFwiaW52YWxpZF91bmlvblwiLFxuICBcImludmFsaWRfdW5pb25fZGlzY3JpbWluYXRvclwiLFxuICBcImludmFsaWRfZW51bV92YWx1ZVwiLFxuICBcInVucmVjb2duaXplZF9rZXlzXCIsXG4gIFwiaW52YWxpZF9hcmd1bWVudHNcIixcbiAgXCJpbnZhbGlkX3JldHVybl90eXBlXCIsXG4gIFwiaW52YWxpZF9kYXRlXCIsXG4gIFwiaW52YWxpZF9zdHJpbmdcIixcbiAgXCJ0b29fc21hbGxcIixcbiAgXCJ0b29fYmlnXCIsXG4gIFwiaW52YWxpZF9pbnRlcnNlY3Rpb25fdHlwZXNcIixcbiAgXCJub3RfbXVsdGlwbGVfb2ZcIlxuXSk7XG52YXIgcXVvdGVsZXNzSnNvbjMgPSAob2JqKSA9PiB7XG4gIGNvbnN0IGpzb24gPSBKU09OLnN0cmluZ2lmeShvYmosIG51bGwsIDIpO1xuICByZXR1cm4ganNvbi5yZXBsYWNlKC9cIihbXlwiXSspXCI6L2csIFwiJDE6XCIpO1xufTtcbnZhciBab2RFcnJvcjMgPSBjbGFzcyBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IoaXNzdWVzKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmlzc3VlcyA9IFtdO1xuICAgIHRoaXMuYWRkSXNzdWUgPSAoc3ViKSA9PiB7XG4gICAgICB0aGlzLmlzc3VlcyA9IFsuLi50aGlzLmlzc3Vlcywgc3ViXTtcbiAgICB9O1xuICAgIHRoaXMuYWRkSXNzdWVzID0gKHN1YnMgPSBbXSkgPT4ge1xuICAgICAgdGhpcy5pc3N1ZXMgPSBbLi4udGhpcy5pc3N1ZXMsIC4uLnN1YnNdO1xuICAgIH07XG4gICAgY29uc3QgYWN0dWFsUHJvdG8gPSBuZXcudGFyZ2V0LnByb3RvdHlwZTtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgYWN0dWFsUHJvdG8pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9fcHJvdG9fXyA9IGFjdHVhbFByb3RvO1xuICAgIH1cbiAgICB0aGlzLm5hbWUgPSBcIlpvZEVycm9yXCI7XG4gICAgdGhpcy5pc3N1ZXMgPSBpc3N1ZXM7XG4gIH1cbiAgZ2V0IGVycm9ycygpIHtcbiAgICByZXR1cm4gdGhpcy5pc3N1ZXM7XG4gIH1cbiAgZm9ybWF0KF9tYXBwZXIpIHtcbiAgICBjb25zdCBtYXBwZXIgPSBfbWFwcGVyIHx8IGZ1bmN0aW9uKGlzc3VlKSB7XG4gICAgICByZXR1cm4gaXNzdWUubWVzc2FnZTtcbiAgICB9O1xuICAgIGNvbnN0IGZpZWxkRXJyb3JzID0ge19lcnJvcnM6IFtdfTtcbiAgICBjb25zdCBwcm9jZXNzRXJyb3IgPSAoZXJyb3IpID0+IHtcbiAgICAgIGZvciAoY29uc3QgaXNzdWUgb2YgZXJyb3IuaXNzdWVzKSB7XG4gICAgICAgIGlmIChpc3N1ZS5jb2RlID09PSBcImludmFsaWRfdW5pb25cIikge1xuICAgICAgICAgIGlzc3VlLnVuaW9uRXJyb3JzLm1hcChwcm9jZXNzRXJyb3IpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzc3VlLmNvZGUgPT09IFwiaW52YWxpZF9yZXR1cm5fdHlwZVwiKSB7XG4gICAgICAgICAgcHJvY2Vzc0Vycm9yKGlzc3VlLnJldHVyblR5cGVFcnJvcik7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNzdWUuY29kZSA9PT0gXCJpbnZhbGlkX2FyZ3VtZW50c1wiKSB7XG4gICAgICAgICAgcHJvY2Vzc0Vycm9yKGlzc3VlLmFyZ3VtZW50c0Vycm9yKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc3N1ZS5wYXRoLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGZpZWxkRXJyb3JzLl9lcnJvcnMucHVzaChtYXBwZXIoaXNzdWUpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsZXQgY3VyciA9IGZpZWxkRXJyb3JzO1xuICAgICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgICB3aGlsZSAoaSA8IGlzc3VlLnBhdGgubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBlbCA9IGlzc3VlLnBhdGhbaV07XG4gICAgICAgICAgICBjb25zdCB0ZXJtaW5hbCA9IGkgPT09IGlzc3VlLnBhdGgubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIGlmICghdGVybWluYWwpIHtcbiAgICAgICAgICAgICAgY3VycltlbF0gPSBjdXJyW2VsXSB8fCB7X2Vycm9yczogW119O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY3VycltlbF0gPSBjdXJyW2VsXSB8fCB7X2Vycm9yczogW119O1xuICAgICAgICAgICAgICBjdXJyW2VsXS5fZXJyb3JzLnB1c2gobWFwcGVyKGlzc3VlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJyID0gY3VycltlbF07XG4gICAgICAgICAgICBpKys7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBwcm9jZXNzRXJyb3IodGhpcyk7XG4gICAgcmV0dXJuIGZpZWxkRXJyb3JzO1xuICB9XG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1lc3NhZ2U7XG4gIH1cbiAgZ2V0IG1lc3NhZ2UoKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMuaXNzdWVzLCBudWxsLCAyKTtcbiAgfVxuICBnZXQgaXNFbXB0eSgpIHtcbiAgICByZXR1cm4gdGhpcy5pc3N1ZXMubGVuZ3RoID09PSAwO1xuICB9XG4gIGZsYXR0ZW4obWFwcGVyID0gKGlzc3VlKSA9PiBpc3N1ZS5tZXNzYWdlKSB7XG4gICAgY29uc3QgZmllbGRFcnJvcnMgPSB7fTtcbiAgICBjb25zdCBmb3JtRXJyb3JzID0gW107XG4gICAgZm9yIChjb25zdCBzdWIgb2YgdGhpcy5pc3N1ZXMpIHtcbiAgICAgIGlmIChzdWIucGF0aC5sZW5ndGggPiAwKSB7XG4gICAgICAgIGZpZWxkRXJyb3JzW3N1Yi5wYXRoWzBdXSA9IGZpZWxkRXJyb3JzW3N1Yi5wYXRoWzBdXSB8fCBbXTtcbiAgICAgICAgZmllbGRFcnJvcnNbc3ViLnBhdGhbMF1dLnB1c2gobWFwcGVyKHN1YikpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9ybUVycm9ycy5wdXNoKG1hcHBlcihzdWIpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtmb3JtRXJyb3JzLCBmaWVsZEVycm9yc307XG4gIH1cbiAgZ2V0IGZvcm1FcnJvcnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZmxhdHRlbigpO1xuICB9XG59O1xuWm9kRXJyb3IzLmNyZWF0ZSA9IChpc3N1ZXMpID0+IHtcbiAgY29uc3QgZXJyb3IgPSBuZXcgWm9kRXJyb3IzKGlzc3Vlcyk7XG4gIHJldHVybiBlcnJvcjtcbn07XG52YXIgZGVmYXVsdEVycm9yTWFwMyA9IChpc3N1ZSwgX2N0eCkgPT4ge1xuICBsZXQgbWVzc2FnZTtcbiAgc3dpdGNoIChpc3N1ZS5jb2RlKSB7XG4gICAgY2FzZSBab2RJc3N1ZUNvZGUzLmludmFsaWRfdHlwZTpcbiAgICAgIGlmIChpc3N1ZS5yZWNlaXZlZCA9PT0gWm9kUGFyc2VkVHlwZTMudW5kZWZpbmVkKSB7XG4gICAgICAgIG1lc3NhZ2UgPSBcIlJlcXVpcmVkXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtZXNzYWdlID0gYEV4cGVjdGVkICR7aXNzdWUuZXhwZWN0ZWR9LCByZWNlaXZlZCAke2lzc3VlLnJlY2VpdmVkfWA7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIFpvZElzc3VlQ29kZTMuaW52YWxpZF9saXRlcmFsOlxuICAgICAgbWVzc2FnZSA9IGBJbnZhbGlkIGxpdGVyYWwgdmFsdWUsIGV4cGVjdGVkICR7SlNPTi5zdHJpbmdpZnkoaXNzdWUuZXhwZWN0ZWQpfWA7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFpvZElzc3VlQ29kZTMudW5yZWNvZ25pemVkX2tleXM6XG4gICAgICBtZXNzYWdlID0gYFVucmVjb2duaXplZCBrZXkocykgaW4gb2JqZWN0OiAke3V0aWwzLmpvaW5WYWx1ZXMoaXNzdWUua2V5cywgXCIsIFwiKX1gO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBab2RJc3N1ZUNvZGUzLmludmFsaWRfdW5pb246XG4gICAgICBtZXNzYWdlID0gYEludmFsaWQgaW5wdXRgO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBab2RJc3N1ZUNvZGUzLmludmFsaWRfdW5pb25fZGlzY3JpbWluYXRvcjpcbiAgICAgIG1lc3NhZ2UgPSBgSW52YWxpZCBkaXNjcmltaW5hdG9yIHZhbHVlLiBFeHBlY3RlZCAke3V0aWwzLmpvaW5WYWx1ZXMoaXNzdWUub3B0aW9ucyl9YDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgWm9kSXNzdWVDb2RlMy5pbnZhbGlkX2VudW1fdmFsdWU6XG4gICAgICBtZXNzYWdlID0gYEludmFsaWQgZW51bSB2YWx1ZS4gRXhwZWN0ZWQgJHt1dGlsMy5qb2luVmFsdWVzKGlzc3VlLm9wdGlvbnMpfSwgcmVjZWl2ZWQgJyR7aXNzdWUucmVjZWl2ZWR9J2A7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFpvZElzc3VlQ29kZTMuaW52YWxpZF9hcmd1bWVudHM6XG4gICAgICBtZXNzYWdlID0gYEludmFsaWQgZnVuY3Rpb24gYXJndW1lbnRzYDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgWm9kSXNzdWVDb2RlMy5pbnZhbGlkX3JldHVybl90eXBlOlxuICAgICAgbWVzc2FnZSA9IGBJbnZhbGlkIGZ1bmN0aW9uIHJldHVybiB0eXBlYDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgWm9kSXNzdWVDb2RlMy5pbnZhbGlkX2RhdGU6XG4gICAgICBtZXNzYWdlID0gYEludmFsaWQgZGF0ZWA7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFpvZElzc3VlQ29kZTMuaW52YWxpZF9zdHJpbmc6XG4gICAgICBpZiAoaXNzdWUudmFsaWRhdGlvbiAhPT0gXCJyZWdleFwiKVxuICAgICAgICBtZXNzYWdlID0gYEludmFsaWQgJHtpc3N1ZS52YWxpZGF0aW9ufWA7XG4gICAgICBlbHNlXG4gICAgICAgIG1lc3NhZ2UgPSBcIkludmFsaWRcIjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgWm9kSXNzdWVDb2RlMy50b29fc21hbGw6XG4gICAgICBpZiAoaXNzdWUudHlwZSA9PT0gXCJhcnJheVwiKVxuICAgICAgICBtZXNzYWdlID0gYEFycmF5IG11c3QgY29udGFpbiAke2lzc3VlLmluY2x1c2l2ZSA/IGBhdCBsZWFzdGAgOiBgbW9yZSB0aGFuYH0gJHtpc3N1ZS5taW5pbXVtfSBlbGVtZW50KHMpYDtcbiAgICAgIGVsc2UgaWYgKGlzc3VlLnR5cGUgPT09IFwic3RyaW5nXCIpXG4gICAgICAgIG1lc3NhZ2UgPSBgU3RyaW5nIG11c3QgY29udGFpbiAke2lzc3VlLmluY2x1c2l2ZSA/IGBhdCBsZWFzdGAgOiBgb3ZlcmB9ICR7aXNzdWUubWluaW11bX0gY2hhcmFjdGVyKHMpYDtcbiAgICAgIGVsc2UgaWYgKGlzc3VlLnR5cGUgPT09IFwibnVtYmVyXCIpXG4gICAgICAgIG1lc3NhZ2UgPSBgTnVtYmVyIG11c3QgYmUgZ3JlYXRlciB0aGFuICR7aXNzdWUuaW5jbHVzaXZlID8gYG9yIGVxdWFsIHRvIGAgOiBgYH0ke2lzc3VlLm1pbmltdW19YDtcbiAgICAgIGVsc2VcbiAgICAgICAgbWVzc2FnZSA9IFwiSW52YWxpZCBpbnB1dFwiO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBab2RJc3N1ZUNvZGUzLnRvb19iaWc6XG4gICAgICBpZiAoaXNzdWUudHlwZSA9PT0gXCJhcnJheVwiKVxuICAgICAgICBtZXNzYWdlID0gYEFycmF5IG11c3QgY29udGFpbiAke2lzc3VlLmluY2x1c2l2ZSA/IGBhdCBtb3N0YCA6IGBsZXNzIHRoYW5gfSAke2lzc3VlLm1heGltdW19IGVsZW1lbnQocylgO1xuICAgICAgZWxzZSBpZiAoaXNzdWUudHlwZSA9PT0gXCJzdHJpbmdcIilcbiAgICAgICAgbWVzc2FnZSA9IGBTdHJpbmcgbXVzdCBjb250YWluICR7aXNzdWUuaW5jbHVzaXZlID8gYGF0IG1vc3RgIDogYHVuZGVyYH0gJHtpc3N1ZS5tYXhpbXVtfSBjaGFyYWN0ZXIocylgO1xuICAgICAgZWxzZSBpZiAoaXNzdWUudHlwZSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgbWVzc2FnZSA9IGBOdW1iZXIgbXVzdCBiZSBsZXNzIHRoYW4gJHtpc3N1ZS5pbmNsdXNpdmUgPyBgb3IgZXF1YWwgdG8gYCA6IGBgfSR7aXNzdWUubWF4aW11bX1gO1xuICAgICAgZWxzZVxuICAgICAgICBtZXNzYWdlID0gXCJJbnZhbGlkIGlucHV0XCI7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFpvZElzc3VlQ29kZTMuY3VzdG9tOlxuICAgICAgbWVzc2FnZSA9IGBJbnZhbGlkIGlucHV0YDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgWm9kSXNzdWVDb2RlMy5pbnZhbGlkX2ludGVyc2VjdGlvbl90eXBlczpcbiAgICAgIG1lc3NhZ2UgPSBgSW50ZXJzZWN0aW9uIHJlc3VsdHMgY291bGQgbm90IGJlIG1lcmdlZGA7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFpvZElzc3VlQ29kZTMubm90X211bHRpcGxlX29mOlxuICAgICAgbWVzc2FnZSA9IGBOdW1iZXIgbXVzdCBiZSBhIG11bHRpcGxlIG9mICR7aXNzdWUubXVsdGlwbGVPZn1gO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIG1lc3NhZ2UgPSBfY3R4LmRlZmF1bHRFcnJvcjtcbiAgICAgIHV0aWwzLmFzc2VydE5ldmVyKGlzc3VlKTtcbiAgfVxuICByZXR1cm4ge21lc3NhZ2V9O1xufTtcbnZhciBvdmVycmlkZUVycm9yTWFwMyA9IGRlZmF1bHRFcnJvck1hcDM7XG52YXIgc2V0RXJyb3JNYXAzID0gKG1hcCkgPT4ge1xuICBvdmVycmlkZUVycm9yTWFwMyA9IG1hcDtcbn07XG52YXIgbWFrZUlzc3VlMyA9IChwYXJhbXMpID0+IHtcbiAgY29uc3Qge2RhdGEsIHBhdGgsIGVycm9yTWFwcywgaXNzdWVEYXRhfSA9IHBhcmFtcztcbiAgY29uc3QgZnVsbFBhdGggPSBbLi4ucGF0aCwgLi4uaXNzdWVEYXRhLnBhdGggfHwgW11dO1xuICBjb25zdCBmdWxsSXNzdWUgPSB7XG4gICAgLi4uaXNzdWVEYXRhLFxuICAgIHBhdGg6IGZ1bGxQYXRoXG4gIH07XG4gIGxldCBlcnJvck1lc3NhZ2UgPSBcIlwiO1xuICBjb25zdCBtYXBzID0gZXJyb3JNYXBzLmZpbHRlcigobSkgPT4gISFtKS5zbGljZSgpLnJldmVyc2UoKTtcbiAgZm9yIChjb25zdCBtYXAgb2YgbWFwcykge1xuICAgIGVycm9yTWVzc2FnZSA9IG1hcChmdWxsSXNzdWUsIHtkYXRhLCBkZWZhdWx0RXJyb3I6IGVycm9yTWVzc2FnZX0pLm1lc3NhZ2U7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICAuLi5pc3N1ZURhdGEsXG4gICAgcGF0aDogZnVsbFBhdGgsXG4gICAgbWVzc2FnZTogaXNzdWVEYXRhLm1lc3NhZ2UgfHwgZXJyb3JNZXNzYWdlXG4gIH07XG59O1xudmFyIEVNUFRZX1BBVEgzID0gW107XG5mdW5jdGlvbiBhZGRJc3N1ZVRvQ29udGV4dDMoY3R4LCBpc3N1ZURhdGEpIHtcbiAgY29uc3QgaXNzdWUgPSBtYWtlSXNzdWUzKHtcbiAgICBpc3N1ZURhdGEsXG4gICAgZGF0YTogY3R4LmRhdGEsXG4gICAgcGF0aDogY3R4LnBhdGgsXG4gICAgZXJyb3JNYXBzOiBbXG4gICAgICBjdHguY29tbW9uLmNvbnRleHR1YWxFcnJvck1hcCxcbiAgICAgIGN0eC5zY2hlbWFFcnJvck1hcCxcbiAgICAgIG92ZXJyaWRlRXJyb3JNYXAzLFxuICAgICAgZGVmYXVsdEVycm9yTWFwM1xuICAgIF0uZmlsdGVyKCh4KSA9PiAhIXgpXG4gIH0pO1xuICBjdHguY29tbW9uLmlzc3Vlcy5wdXNoKGlzc3VlKTtcbn1cbnZhciBQYXJzZVN0YXR1czMgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMudmFsdWUgPSBcInZhbGlkXCI7XG4gIH1cbiAgZGlydHkoKSB7XG4gICAgaWYgKHRoaXMudmFsdWUgPT09IFwidmFsaWRcIilcbiAgICAgIHRoaXMudmFsdWUgPSBcImRpcnR5XCI7XG4gIH1cbiAgYWJvcnQoKSB7XG4gICAgaWYgKHRoaXMudmFsdWUgIT09IFwiYWJvcnRlZFwiKVxuICAgICAgdGhpcy52YWx1ZSA9IFwiYWJvcnRlZFwiO1xuICB9XG4gIHN0YXRpYyBtZXJnZUFycmF5KHN0YXR1cywgcmVzdWx0cykge1xuICAgIGNvbnN0IGFycmF5VmFsdWUgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHMyIG9mIHJlc3VsdHMpIHtcbiAgICAgIGlmIChzMi5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKVxuICAgICAgICByZXR1cm4gSU5WQUxJRDY7XG4gICAgICBpZiAoczIuc3RhdHVzID09PSBcImRpcnR5XCIpXG4gICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgYXJyYXlWYWx1ZS5wdXNoKHMyLnZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHtzdGF0dXM6IHN0YXR1cy52YWx1ZSwgdmFsdWU6IGFycmF5VmFsdWV9O1xuICB9XG4gIHN0YXRpYyBhc3luYyBtZXJnZU9iamVjdEFzeW5jKHN0YXR1cywgcGFpcnMpIHtcbiAgICBjb25zdCBzeW5jUGFpcnMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHBhaXIgb2YgcGFpcnMpIHtcbiAgICAgIHN5bmNQYWlycy5wdXNoKHtcbiAgICAgICAga2V5OiBhd2FpdCBwYWlyLmtleSxcbiAgICAgICAgdmFsdWU6IGF3YWl0IHBhaXIudmFsdWVcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gUGFyc2VTdGF0dXMzLm1lcmdlT2JqZWN0U3luYyhzdGF0dXMsIHN5bmNQYWlycyk7XG4gIH1cbiAgc3RhdGljIG1lcmdlT2JqZWN0U3luYyhzdGF0dXMsIHBhaXJzKSB7XG4gICAgY29uc3QgZmluYWxPYmplY3QgPSB7fTtcbiAgICBmb3IgKGNvbnN0IHBhaXIgb2YgcGFpcnMpIHtcbiAgICAgIGNvbnN0IHtrZXksIHZhbHVlfSA9IHBhaXI7XG4gICAgICBpZiAoa2V5LnN0YXR1cyA9PT0gXCJhYm9ydGVkXCIpXG4gICAgICAgIHJldHVybiBJTlZBTElENjtcbiAgICAgIGlmICh2YWx1ZS5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKVxuICAgICAgICByZXR1cm4gSU5WQUxJRDY7XG4gICAgICBpZiAoa2V5LnN0YXR1cyA9PT0gXCJkaXJ0eVwiKVxuICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgIGlmICh2YWx1ZS5zdGF0dXMgPT09IFwiZGlydHlcIilcbiAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlLnZhbHVlICE9PSBcInVuZGVmaW5lZFwiIHx8IHBhaXIuYWx3YXlzU2V0KSB7XG4gICAgICAgIGZpbmFsT2JqZWN0W2tleS52YWx1ZV0gPSB2YWx1ZS52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtzdGF0dXM6IHN0YXR1cy52YWx1ZSwgdmFsdWU6IGZpbmFsT2JqZWN0fTtcbiAgfVxufTtcbnZhciBJTlZBTElENiA9IE9iamVjdC5mcmVlemUoe1xuICBzdGF0dXM6IFwiYWJvcnRlZFwiXG59KTtcbnZhciBESVJUWTMgPSAodmFsdWUpID0+ICh7c3RhdHVzOiBcImRpcnR5XCIsIHZhbHVlfSk7XG52YXIgT0szID0gKHZhbHVlKSA9PiAoe3N0YXR1czogXCJ2YWxpZFwiLCB2YWx1ZX0pO1xudmFyIGlzQWJvcnRlZDMgPSAoeCkgPT4geC5zdGF0dXMgPT09IFwiYWJvcnRlZFwiO1xudmFyIGlzRGlydHkzID0gKHgpID0+IHguc3RhdHVzID09PSBcImRpcnR5XCI7XG52YXIgaXNWYWxpZDMgPSAoeCkgPT4geC5zdGF0dXMgPT09IFwidmFsaWRcIjtcbnZhciBpc0FzeW5jMyA9ICh4KSA9PiB0eXBlb2YgUHJvbWlzZSAhPT0gdm9pZCAwICYmIHggaW5zdGFuY2VvZiBQcm9taXNlO1xudmFyIGVycm9yVXRpbDM7XG4oZnVuY3Rpb24oZXJyb3JVdGlsMjIpIHtcbiAgZXJyb3JVdGlsMjIuZXJyVG9PYmogPSAobWVzc2FnZSkgPT4gdHlwZW9mIG1lc3NhZ2UgPT09IFwic3RyaW5nXCIgPyB7bWVzc2FnZX0gOiBtZXNzYWdlIHx8IHt9O1xuICBlcnJvclV0aWwyMi50b1N0cmluZyA9IChtZXNzYWdlKSA9PiB0eXBlb2YgbWVzc2FnZSA9PT0gXCJzdHJpbmdcIiA/IG1lc3NhZ2UgOiBtZXNzYWdlID09PSBudWxsIHx8IG1lc3NhZ2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG1lc3NhZ2UubWVzc2FnZTtcbn0pKGVycm9yVXRpbDMgfHwgKGVycm9yVXRpbDMgPSB7fSkpO1xudmFyIFBhcnNlSW5wdXRMYXp5UGF0aDMgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKHBhcmVudCwgdmFsdWUsIHBhdGgsIGtleSkge1xuICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgIHRoaXMuZGF0YSA9IHZhbHVlO1xuICAgIHRoaXMuX3BhdGggPSBwYXRoO1xuICAgIHRoaXMuX2tleSA9IGtleTtcbiAgfVxuICBnZXQgcGF0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcGF0aC5jb25jYXQodGhpcy5fa2V5KTtcbiAgfVxufTtcbnZhciBoYW5kbGVSZXN1bHQzID0gKGN0eCwgcmVzdWx0KSA9PiB7XG4gIGlmIChpc1ZhbGlkMyhyZXN1bHQpKSB7XG4gICAgcmV0dXJuIHtzdWNjZXNzOiB0cnVlLCBkYXRhOiByZXN1bHQudmFsdWV9O1xuICB9IGVsc2Uge1xuICAgIGlmICghY3R4LmNvbW1vbi5pc3N1ZXMubGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJWYWxpZGF0aW9uIGZhaWxlZCBidXQgbm8gaXNzdWVzIGRldGVjdGVkLlwiKTtcbiAgICB9XG4gICAgY29uc3QgZXJyb3IgPSBuZXcgWm9kRXJyb3IzKGN0eC5jb21tb24uaXNzdWVzKTtcbiAgICByZXR1cm4ge3N1Y2Nlc3M6IGZhbHNlLCBlcnJvcn07XG4gIH1cbn07XG5mdW5jdGlvbiBwcm9jZXNzQ3JlYXRlUGFyYW1zMyhwYXJhbXMpIHtcbiAgaWYgKCFwYXJhbXMpXG4gICAgcmV0dXJuIHt9O1xuICBjb25zdCB7ZXJyb3JNYXAsIGludmFsaWRfdHlwZV9lcnJvciwgcmVxdWlyZWRfZXJyb3IsIGRlc2NyaXB0aW9ufSA9IHBhcmFtcztcbiAgaWYgKGVycm9yTWFwICYmIChpbnZhbGlkX3R5cGVfZXJyb3IgfHwgcmVxdWlyZWRfZXJyb3IpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDYW4ndCB1c2UgXCJpbnZhbGlkXCIgb3IgXCJyZXF1aXJlZFwiIGluIGNvbmp1bmN0aW9uIHdpdGggY3VzdG9tIGVycm9yIG1hcC5gKTtcbiAgfVxuICBpZiAoZXJyb3JNYXApXG4gICAgcmV0dXJuIHtlcnJvck1hcCwgZGVzY3JpcHRpb259O1xuICBjb25zdCBjdXN0b21NYXAgPSAoaXNzLCBjdHgpID0+IHtcbiAgICBpZiAoaXNzLmNvZGUgIT09IFwiaW52YWxpZF90eXBlXCIpXG4gICAgICByZXR1cm4ge21lc3NhZ2U6IGN0eC5kZWZhdWx0RXJyb3J9O1xuICAgIGlmICh0eXBlb2YgY3R4LmRhdGEgPT09IFwidW5kZWZpbmVkXCIgJiYgcmVxdWlyZWRfZXJyb3IpXG4gICAgICByZXR1cm4ge21lc3NhZ2U6IHJlcXVpcmVkX2Vycm9yfTtcbiAgICBpZiAocGFyYW1zLmludmFsaWRfdHlwZV9lcnJvcilcbiAgICAgIHJldHVybiB7bWVzc2FnZTogcGFyYW1zLmludmFsaWRfdHlwZV9lcnJvcn07XG4gICAgcmV0dXJuIHttZXNzYWdlOiBjdHguZGVmYXVsdEVycm9yfTtcbiAgfTtcbiAgcmV0dXJuIHtlcnJvck1hcDogY3VzdG9tTWFwLCBkZXNjcmlwdGlvbn07XG59XG52YXIgWm9kVHlwZTMgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGRlZikge1xuICAgIHRoaXMuc3BhID0gdGhpcy5zYWZlUGFyc2VBc3luYztcbiAgICB0aGlzLnN1cGVyUmVmaW5lID0gdGhpcy5fcmVmaW5lbWVudDtcbiAgICB0aGlzLl9kZWYgPSBkZWY7XG4gICAgdGhpcy5wYXJzZSA9IHRoaXMucGFyc2UuYmluZCh0aGlzKTtcbiAgICB0aGlzLnNhZmVQYXJzZSA9IHRoaXMuc2FmZVBhcnNlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5wYXJzZUFzeW5jID0gdGhpcy5wYXJzZUFzeW5jLmJpbmQodGhpcyk7XG4gICAgdGhpcy5zYWZlUGFyc2VBc3luYyA9IHRoaXMuc2FmZVBhcnNlQXN5bmMuYmluZCh0aGlzKTtcbiAgICB0aGlzLnNwYSA9IHRoaXMuc3BhLmJpbmQodGhpcyk7XG4gICAgdGhpcy5yZWZpbmUgPSB0aGlzLnJlZmluZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMucmVmaW5lbWVudCA9IHRoaXMucmVmaW5lbWVudC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc3VwZXJSZWZpbmUgPSB0aGlzLnN1cGVyUmVmaW5lLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vcHRpb25hbCA9IHRoaXMub3B0aW9uYWwuYmluZCh0aGlzKTtcbiAgICB0aGlzLm51bGxhYmxlID0gdGhpcy5udWxsYWJsZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMubnVsbGlzaCA9IHRoaXMubnVsbGlzaC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuYXJyYXkgPSB0aGlzLmFycmF5LmJpbmQodGhpcyk7XG4gICAgdGhpcy5wcm9taXNlID0gdGhpcy5wcm9taXNlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vciA9IHRoaXMub3IuYmluZCh0aGlzKTtcbiAgICB0aGlzLmFuZCA9IHRoaXMuYW5kLmJpbmQodGhpcyk7XG4gICAgdGhpcy50cmFuc2Zvcm0gPSB0aGlzLnRyYW5zZm9ybS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuZGVmYXVsdCA9IHRoaXMuZGVmYXVsdC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuZGVzY3JpYmUgPSB0aGlzLmRlc2NyaWJlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5pc051bGxhYmxlID0gdGhpcy5pc051bGxhYmxlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5pc09wdGlvbmFsID0gdGhpcy5pc09wdGlvbmFsLmJpbmQodGhpcyk7XG4gIH1cbiAgZ2V0IGRlc2NyaXB0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9kZWYuZGVzY3JpcHRpb247XG4gIH1cbiAgX2dldFR5cGUoaW5wdXQpIHtcbiAgICByZXR1cm4gZ2V0UGFyc2VkVHlwZTMoaW5wdXQuZGF0YSk7XG4gIH1cbiAgX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpIHtcbiAgICByZXR1cm4gY3R4IHx8IHtcbiAgICAgIGNvbW1vbjogaW5wdXQucGFyZW50LmNvbW1vbixcbiAgICAgIGRhdGE6IGlucHV0LmRhdGEsXG4gICAgICBwYXJzZWRUeXBlOiBnZXRQYXJzZWRUeXBlMyhpbnB1dC5kYXRhKSxcbiAgICAgIHNjaGVtYUVycm9yTWFwOiB0aGlzLl9kZWYuZXJyb3JNYXAsXG4gICAgICBwYXRoOiBpbnB1dC5wYXRoLFxuICAgICAgcGFyZW50OiBpbnB1dC5wYXJlbnRcbiAgICB9O1xuICB9XG4gIF9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3RhdHVzOiBuZXcgUGFyc2VTdGF0dXMzKCksXG4gICAgICBjdHg6IHtcbiAgICAgICAgY29tbW9uOiBpbnB1dC5wYXJlbnQuY29tbW9uLFxuICAgICAgICBkYXRhOiBpbnB1dC5kYXRhLFxuICAgICAgICBwYXJzZWRUeXBlOiBnZXRQYXJzZWRUeXBlMyhpbnB1dC5kYXRhKSxcbiAgICAgICAgc2NoZW1hRXJyb3JNYXA6IHRoaXMuX2RlZi5lcnJvck1hcCxcbiAgICAgICAgcGF0aDogaW5wdXQucGF0aCxcbiAgICAgICAgcGFyZW50OiBpbnB1dC5wYXJlbnRcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIF9wYXJzZVN5bmMoaW5wdXQpIHtcbiAgICBjb25zdCByZXN1bHQgPSB0aGlzLl9wYXJzZShpbnB1dCk7XG4gICAgaWYgKGlzQXN5bmMzKHJlc3VsdCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlN5bmNocm9ub3VzIHBhcnNlIGVuY291bnRlcmVkIHByb21pc2UuXCIpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIF9wYXJzZUFzeW5jKGlucHV0KSB7XG4gICAgY29uc3QgcmVzdWx0ID0gdGhpcy5fcGFyc2UoaW5wdXQpO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzdWx0KTtcbiAgfVxuICBwYXJzZShkYXRhLCBwYXJhbXMpIHtcbiAgICBjb25zdCByZXN1bHQgPSB0aGlzLnNhZmVQYXJzZShkYXRhLCBwYXJhbXMpO1xuICAgIGlmIChyZXN1bHQuc3VjY2VzcylcbiAgICAgIHJldHVybiByZXN1bHQuZGF0YTtcbiAgICB0aHJvdyByZXN1bHQuZXJyb3I7XG4gIH1cbiAgc2FmZVBhcnNlKGRhdGEsIHBhcmFtcykge1xuICAgIHZhciBfYTtcbiAgICBjb25zdCBjdHggPSB7XG4gICAgICBjb21tb246IHtcbiAgICAgICAgaXNzdWVzOiBbXSxcbiAgICAgICAgYXN5bmM6IChfYSA9IHBhcmFtcyA9PT0gbnVsbCB8fCBwYXJhbXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhcmFtcy5hc3luYykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZmFsc2UsXG4gICAgICAgIGNvbnRleHR1YWxFcnJvck1hcDogcGFyYW1zID09PSBudWxsIHx8IHBhcmFtcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyYW1zLmVycm9yTWFwXG4gICAgICB9LFxuICAgICAgcGF0aDogKHBhcmFtcyA9PT0gbnVsbCB8fCBwYXJhbXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhcmFtcy5wYXRoKSB8fCBbXSxcbiAgICAgIHNjaGVtYUVycm9yTWFwOiB0aGlzLl9kZWYuZXJyb3JNYXAsXG4gICAgICBwYXJlbnQ6IG51bGwsXG4gICAgICBkYXRhLFxuICAgICAgcGFyc2VkVHlwZTogZ2V0UGFyc2VkVHlwZTMoZGF0YSlcbiAgICB9O1xuICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuX3BhcnNlU3luYyh7ZGF0YSwgcGF0aDogY3R4LnBhdGgsIHBhcmVudDogY3R4fSk7XG4gICAgcmV0dXJuIGhhbmRsZVJlc3VsdDMoY3R4LCByZXN1bHQpO1xuICB9XG4gIGFzeW5jIHBhcnNlQXN5bmMoZGF0YSwgcGFyYW1zKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5zYWZlUGFyc2VBc3luYyhkYXRhLCBwYXJhbXMpO1xuICAgIGlmIChyZXN1bHQuc3VjY2VzcylcbiAgICAgIHJldHVybiByZXN1bHQuZGF0YTtcbiAgICB0aHJvdyByZXN1bHQuZXJyb3I7XG4gIH1cbiAgYXN5bmMgc2FmZVBhcnNlQXN5bmMoZGF0YSwgcGFyYW1zKSB7XG4gICAgY29uc3QgY3R4ID0ge1xuICAgICAgY29tbW9uOiB7XG4gICAgICAgIGlzc3VlczogW10sXG4gICAgICAgIGNvbnRleHR1YWxFcnJvck1hcDogcGFyYW1zID09PSBudWxsIHx8IHBhcmFtcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyYW1zLmVycm9yTWFwLFxuICAgICAgICBhc3luYzogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHBhdGg6IChwYXJhbXMgPT09IG51bGwgfHwgcGFyYW1zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJhbXMucGF0aCkgfHwgW10sXG4gICAgICBzY2hlbWFFcnJvck1hcDogdGhpcy5fZGVmLmVycm9yTWFwLFxuICAgICAgcGFyZW50OiBudWxsLFxuICAgICAgZGF0YSxcbiAgICAgIHBhcnNlZFR5cGU6IGdldFBhcnNlZFR5cGUzKGRhdGEpXG4gICAgfTtcbiAgICBjb25zdCBtYXliZUFzeW5jUmVzdWx0ID0gdGhpcy5fcGFyc2Uoe2RhdGEsIHBhdGg6IFtdLCBwYXJlbnQ6IGN0eH0pO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IChpc0FzeW5jMyhtYXliZUFzeW5jUmVzdWx0KSA/IG1heWJlQXN5bmNSZXN1bHQgOiBQcm9taXNlLnJlc29sdmUobWF5YmVBc3luY1Jlc3VsdCkpO1xuICAgIHJldHVybiBoYW5kbGVSZXN1bHQzKGN0eCwgcmVzdWx0KTtcbiAgfVxuICByZWZpbmUoY2hlY2ssIG1lc3NhZ2UpIHtcbiAgICBjb25zdCBnZXRJc3N1ZVByb3BlcnRpZXMgPSAodmFsKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIG1lc3NhZ2UgPT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIG1lc3NhZ2UgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIHttZXNzYWdlfTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG1lc3NhZ2UgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gbWVzc2FnZSh2YWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5fcmVmaW5lbWVudCgodmFsLCBjdHgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGNoZWNrKHZhbCk7XG4gICAgICBjb25zdCBzZXRFcnJvciA9ICgpID0+IGN0eC5hZGRJc3N1ZSh7XG4gICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZTMuY3VzdG9tLFxuICAgICAgICAuLi5nZXRJc3N1ZVByb3BlcnRpZXModmFsKVxuICAgICAgfSk7XG4gICAgICBpZiAodHlwZW9mIFByb21pc2UgIT09IFwidW5kZWZpbmVkXCIgJiYgcmVzdWx0IGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICByZXR1cm4gcmVzdWx0LnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICAgIHNldEVycm9yKCk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICBzZXRFcnJvcigpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICByZWZpbmVtZW50KGNoZWNrLCByZWZpbmVtZW50RGF0YSkge1xuICAgIHJldHVybiB0aGlzLl9yZWZpbmVtZW50KCh2YWwsIGN0eCkgPT4ge1xuICAgICAgaWYgKCFjaGVjayh2YWwpKSB7XG4gICAgICAgIGN0eC5hZGRJc3N1ZSh0eXBlb2YgcmVmaW5lbWVudERhdGEgPT09IFwiZnVuY3Rpb25cIiA/IHJlZmluZW1lbnREYXRhKHZhbCwgY3R4KSA6IHJlZmluZW1lbnREYXRhKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgX3JlZmluZW1lbnQocmVmaW5lbWVudCkge1xuICAgIHJldHVybiBuZXcgWm9kRWZmZWN0czMoe1xuICAgICAgc2NoZW1hOiB0aGlzLFxuICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZDMuWm9kRWZmZWN0cyxcbiAgICAgIGVmZmVjdDoge3R5cGU6IFwicmVmaW5lbWVudFwiLCByZWZpbmVtZW50fVxuICAgIH0pO1xuICB9XG4gIG9wdGlvbmFsKCkge1xuICAgIHJldHVybiBab2RPcHRpb25hbDMuY3JlYXRlKHRoaXMpO1xuICB9XG4gIG51bGxhYmxlKCkge1xuICAgIHJldHVybiBab2ROdWxsYWJsZTMuY3JlYXRlKHRoaXMpO1xuICB9XG4gIG51bGxpc2goKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9uYWwoKS5udWxsYWJsZSgpO1xuICB9XG4gIGFycmF5KCkge1xuICAgIHJldHVybiBab2RBcnJheTMuY3JlYXRlKHRoaXMpO1xuICB9XG4gIHByb21pc2UoKSB7XG4gICAgcmV0dXJuIFpvZFByb21pc2UzLmNyZWF0ZSh0aGlzKTtcbiAgfVxuICBvcihvcHRpb24pIHtcbiAgICByZXR1cm4gWm9kVW5pb24zLmNyZWF0ZShbdGhpcywgb3B0aW9uXSk7XG4gIH1cbiAgYW5kKGluY29taW5nKSB7XG4gICAgcmV0dXJuIFpvZEludGVyc2VjdGlvbjMuY3JlYXRlKHRoaXMsIGluY29taW5nKTtcbiAgfVxuICB0cmFuc2Zvcm0odHJhbnNmb3JtKSB7XG4gICAgcmV0dXJuIG5ldyBab2RFZmZlY3RzMyh7XG4gICAgICBzY2hlbWE6IHRoaXMsXG4gICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMy5ab2RFZmZlY3RzLFxuICAgICAgZWZmZWN0OiB7dHlwZTogXCJ0cmFuc2Zvcm1cIiwgdHJhbnNmb3JtfVxuICAgIH0pO1xuICB9XG4gIGRlZmF1bHQoZGVmKSB7XG4gICAgY29uc3QgZGVmYXVsdFZhbHVlRnVuYyA9IHR5cGVvZiBkZWYgPT09IFwiZnVuY3Rpb25cIiA/IGRlZiA6ICgpID0+IGRlZjtcbiAgICByZXR1cm4gbmV3IFpvZERlZmF1bHQzKHtcbiAgICAgIGlubmVyVHlwZTogdGhpcyxcbiAgICAgIGRlZmF1bHRWYWx1ZTogZGVmYXVsdFZhbHVlRnVuYyxcbiAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQzLlpvZERlZmF1bHRcbiAgICB9KTtcbiAgfVxuICBkZXNjcmliZShkZXNjcmlwdGlvbikge1xuICAgIGNvbnN0IFRoaXMgPSB0aGlzLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBuZXcgVGhpcyh7XG4gICAgICAuLi50aGlzLl9kZWYsXG4gICAgICBkZXNjcmlwdGlvblxuICAgIH0pO1xuICB9XG4gIGlzT3B0aW9uYWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2FmZVBhcnNlKHZvaWQgMCkuc3VjY2VzcztcbiAgfVxuICBpc051bGxhYmxlKCkge1xuICAgIHJldHVybiB0aGlzLnNhZmVQYXJzZShudWxsKS5zdWNjZXNzO1xuICB9XG59O1xudmFyIGN1aWRSZWdleDMgPSAvXmNbXlxccy1dezgsfSQvaTtcbnZhciB1dWlkUmVnZXgzID0gL14oW2EtZjAtOV17OH0tW2EtZjAtOV17NH0tWzEtNV1bYS1mMC05XXszfS1bYS1mMC05XXs0fS1bYS1mMC05XXsxMn18MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwKSQvaTtcbnZhciBlbWFpbFJlZ2V4MyA9IC9eKChbXjw+KClbXFxdXFwuLDs6XFxzQFxcXCJdKyhcXC5bXjw+KClbXFxdXFwuLDs6XFxzQFxcXCJdKykqKXwoXFxcIi4rXFxcIikpQCgoW148PigpW1xcXVxcLiw7Olxcc0BcXFwiXStcXC4pK1tePD4oKVtcXF1cXC4sOzpcXHNAXFxcIl17Mix9KSQvaTtcbnZhciBab2RTdHJpbmczID0gY2xhc3MgZXh0ZW5kcyBab2RUeXBlMyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgdGhpcy5fcmVnZXggPSAocmVnZXgsIHZhbGlkYXRpb24sIG1lc3NhZ2UpID0+IHRoaXMucmVmaW5lbWVudCgoZGF0YSkgPT4gcmVnZXgudGVzdChkYXRhKSwge1xuICAgICAgdmFsaWRhdGlvbixcbiAgICAgIGNvZGU6IFpvZElzc3VlQ29kZTMuaW52YWxpZF9zdHJpbmcsXG4gICAgICAuLi5lcnJvclV0aWwzLmVyclRvT2JqKG1lc3NhZ2UpXG4gICAgfSk7XG4gICAgdGhpcy5ub25lbXB0eSA9IChtZXNzYWdlKSA9PiB0aGlzLm1pbigxLCBlcnJvclV0aWwzLmVyclRvT2JqKG1lc3NhZ2UpKTtcbiAgICB0aGlzLnRyaW0gPSAoKSA9PiBuZXcgWm9kU3RyaW5nMyh7XG4gICAgICAuLi50aGlzLl9kZWYsXG4gICAgICBjaGVja3M6IFsuLi50aGlzLl9kZWYuY2hlY2tzLCB7a2luZDogXCJ0cmltXCJ9XVxuICAgIH0pO1xuICB9XG4gIF9wYXJzZShpbnB1dCkge1xuICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICBpZiAocGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZTMuc3RyaW5nKSB7XG4gICAgICBjb25zdCBjdHgyID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgYWRkSXNzdWVUb0NvbnRleHQzKGN0eDIsIHtcbiAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlMy5pbnZhbGlkX3R5cGUsXG4gICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlMy5zdHJpbmcsXG4gICAgICAgIHJlY2VpdmVkOiBjdHgyLnBhcnNlZFR5cGVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIElOVkFMSUQ2O1xuICAgIH1cbiAgICBjb25zdCBzdGF0dXMgPSBuZXcgUGFyc2VTdGF0dXMzKCk7XG4gICAgbGV0IGN0eCA9IHZvaWQgMDtcbiAgICBmb3IgKGNvbnN0IGNoZWNrIG9mIHRoaXMuX2RlZi5jaGVja3MpIHtcbiAgICAgIGlmIChjaGVjay5raW5kID09PSBcIm1pblwiKSB7XG4gICAgICAgIGlmIChpbnB1dC5kYXRhLmxlbmd0aCA8IGNoZWNrLnZhbHVlKSB7XG4gICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQzKGN0eCwge1xuICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlMy50b29fc21hbGwsXG4gICAgICAgICAgICBtaW5pbXVtOiBjaGVjay52YWx1ZSxcbiAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJtYXhcIikge1xuICAgICAgICBpZiAoaW5wdXQuZGF0YS5sZW5ndGggPiBjaGVjay52YWx1ZSkge1xuICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0MyhjdHgsIHtcbiAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZTMudG9vX2JpZyxcbiAgICAgICAgICAgIG1heGltdW06IGNoZWNrLnZhbHVlLFxuICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjaGVjay5raW5kID09PSBcImVtYWlsXCIpIHtcbiAgICAgICAgaWYgKCFlbWFpbFJlZ2V4My50ZXN0KGlucHV0LmRhdGEpKSB7XG4gICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQzKGN0eCwge1xuICAgICAgICAgICAgdmFsaWRhdGlvbjogXCJlbWFpbFwiLFxuICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlMy5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjaGVjay5raW5kID09PSBcInV1aWRcIikge1xuICAgICAgICBpZiAoIXV1aWRSZWdleDMudGVzdChpbnB1dC5kYXRhKSkge1xuICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0MyhjdHgsIHtcbiAgICAgICAgICAgIHZhbGlkYXRpb246IFwidXVpZFwiLFxuICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlMy5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjaGVjay5raW5kID09PSBcImN1aWRcIikge1xuICAgICAgICBpZiAoIWN1aWRSZWdleDMudGVzdChpbnB1dC5kYXRhKSkge1xuICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0MyhjdHgsIHtcbiAgICAgICAgICAgIHZhbGlkYXRpb246IFwiY3VpZFwiLFxuICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlMy5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjaGVjay5raW5kID09PSBcInVybFwiKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgbmV3IFVSTChpbnB1dC5kYXRhKTtcbiAgICAgICAgfSBjYXRjaCAoX2EpIHtcbiAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dDMoY3R4LCB7XG4gICAgICAgICAgICB2YWxpZGF0aW9uOiBcInVybFwiLFxuICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlMy5pbnZhbGlkX3N0cmluZyxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjaGVjay5raW5kID09PSBcInJlZ2V4XCIpIHtcbiAgICAgICAgY2hlY2sucmVnZXgubGFzdEluZGV4ID0gMDtcbiAgICAgICAgY29uc3QgdGVzdFJlc3VsdCA9IGNoZWNrLnJlZ2V4LnRlc3QoaW5wdXQuZGF0YSk7XG4gICAgICAgIGlmICghdGVzdFJlc3VsdCkge1xuICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0MyhjdHgsIHtcbiAgICAgICAgICAgIHZhbGlkYXRpb246IFwicmVnZXhcIixcbiAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZTMuaW52YWxpZF9zdHJpbmcsXG4gICAgICAgICAgICBtZXNzYWdlOiBjaGVjay5tZXNzYWdlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY2hlY2sua2luZCA9PT0gXCJ0cmltXCIpIHtcbiAgICAgICAgaW5wdXQuZGF0YSA9IGlucHV0LmRhdGEudHJpbSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXRpbDMuYXNzZXJ0TmV2ZXIoY2hlY2spO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge3N0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogaW5wdXQuZGF0YX07XG4gIH1cbiAgX2FkZENoZWNrKGNoZWNrKSB7XG4gICAgcmV0dXJuIG5ldyBab2RTdHJpbmczKHtcbiAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgIGNoZWNrczogWy4uLnRoaXMuX2RlZi5jaGVja3MsIGNoZWNrXVxuICAgIH0pO1xuICB9XG4gIGVtYWlsKG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe2tpbmQ6IFwiZW1haWxcIiwgLi4uZXJyb3JVdGlsMy5lcnJUb09iaihtZXNzYWdlKX0pO1xuICB9XG4gIHVybChtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtraW5kOiBcInVybFwiLCAuLi5lcnJvclV0aWwzLmVyclRvT2JqKG1lc3NhZ2UpfSk7XG4gIH1cbiAgdXVpZChtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtraW5kOiBcInV1aWRcIiwgLi4uZXJyb3JVdGlsMy5lcnJUb09iaihtZXNzYWdlKX0pO1xuICB9XG4gIGN1aWQobWVzc2FnZSkge1xuICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7a2luZDogXCJjdWlkXCIsIC4uLmVycm9yVXRpbDMuZXJyVG9PYmoobWVzc2FnZSl9KTtcbiAgfVxuICByZWdleChyZWdleCwgbWVzc2FnZSkge1xuICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICBraW5kOiBcInJlZ2V4XCIsXG4gICAgICByZWdleCxcbiAgICAgIC4uLmVycm9yVXRpbDMuZXJyVG9PYmoobWVzc2FnZSlcbiAgICB9KTtcbiAgfVxuICBtaW4obWluTGVuZ3RoLCBtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgIGtpbmQ6IFwibWluXCIsXG4gICAgICB2YWx1ZTogbWluTGVuZ3RoLFxuICAgICAgLi4uZXJyb3JVdGlsMy5lcnJUb09iaihtZXNzYWdlKVxuICAgIH0pO1xuICB9XG4gIG1heChtYXhMZW5ndGgsIG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAga2luZDogXCJtYXhcIixcbiAgICAgIHZhbHVlOiBtYXhMZW5ndGgsXG4gICAgICAuLi5lcnJvclV0aWwzLmVyclRvT2JqKG1lc3NhZ2UpXG4gICAgfSk7XG4gIH1cbiAgbGVuZ3RoKGxlbiwgbWVzc2FnZSkge1xuICAgIHJldHVybiB0aGlzLm1pbihsZW4sIG1lc3NhZ2UpLm1heChsZW4sIG1lc3NhZ2UpO1xuICB9XG4gIGdldCBpc0VtYWlsKCkge1xuICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwiZW1haWxcIik7XG4gIH1cbiAgZ2V0IGlzVVJMKCkge1xuICAgIHJldHVybiAhIXRoaXMuX2RlZi5jaGVja3MuZmluZCgoY2gpID0+IGNoLmtpbmQgPT09IFwidXJsXCIpO1xuICB9XG4gIGdldCBpc1VVSUQoKSB7XG4gICAgcmV0dXJuICEhdGhpcy5fZGVmLmNoZWNrcy5maW5kKChjaCkgPT4gY2gua2luZCA9PT0gXCJ1dWlkXCIpO1xuICB9XG4gIGdldCBpc0NVSUQoKSB7XG4gICAgcmV0dXJuICEhdGhpcy5fZGVmLmNoZWNrcy5maW5kKChjaCkgPT4gY2gua2luZCA9PT0gXCJjdWlkXCIpO1xuICB9XG4gIGdldCBtaW5MZW5ndGgoKSB7XG4gICAgbGV0IG1pbiA9IC1JbmZpbml0eTtcbiAgICB0aGlzLl9kZWYuY2hlY2tzLm1hcCgoY2gpID0+IHtcbiAgICAgIGlmIChjaC5raW5kID09PSBcIm1pblwiKSB7XG4gICAgICAgIGlmIChtaW4gPT09IG51bGwgfHwgY2gudmFsdWUgPiBtaW4pIHtcbiAgICAgICAgICBtaW4gPSBjaC52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBtaW47XG4gIH1cbiAgZ2V0IG1heExlbmd0aCgpIHtcbiAgICBsZXQgbWF4ID0gbnVsbDtcbiAgICB0aGlzLl9kZWYuY2hlY2tzLm1hcCgoY2gpID0+IHtcbiAgICAgIGlmIChjaC5raW5kID09PSBcIm1heFwiKSB7XG4gICAgICAgIGlmIChtYXggPT09IG51bGwgfHwgY2gudmFsdWUgPCBtYXgpIHtcbiAgICAgICAgICBtYXggPSBjaC52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBtYXg7XG4gIH1cbn07XG5ab2RTdHJpbmczLmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2RTdHJpbmczKHtcbiAgICBjaGVja3M6IFtdLFxuICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQzLlpvZFN0cmluZyxcbiAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zMyhwYXJhbXMpXG4gIH0pO1xufTtcbmZ1bmN0aW9uIGZsb2F0U2FmZVJlbWFpbmRlcjModmFsLCBzdGVwKSB7XG4gIGNvbnN0IHZhbERlY0NvdW50ID0gKHZhbC50b1N0cmluZygpLnNwbGl0KFwiLlwiKVsxXSB8fCBcIlwiKS5sZW5ndGg7XG4gIGNvbnN0IHN0ZXBEZWNDb3VudCA9IChzdGVwLnRvU3RyaW5nKCkuc3BsaXQoXCIuXCIpWzFdIHx8IFwiXCIpLmxlbmd0aDtcbiAgY29uc3QgZGVjQ291bnQgPSB2YWxEZWNDb3VudCA+IHN0ZXBEZWNDb3VudCA/IHZhbERlY0NvdW50IDogc3RlcERlY0NvdW50O1xuICBjb25zdCB2YWxJbnQgPSBwYXJzZUludCh2YWwudG9GaXhlZChkZWNDb3VudCkucmVwbGFjZShcIi5cIiwgXCJcIikpO1xuICBjb25zdCBzdGVwSW50ID0gcGFyc2VJbnQoc3RlcC50b0ZpeGVkKGRlY0NvdW50KS5yZXBsYWNlKFwiLlwiLCBcIlwiKSk7XG4gIHJldHVybiB2YWxJbnQgJSBzdGVwSW50IC8gTWF0aC5wb3coMTAsIGRlY0NvdW50KTtcbn1cbnZhciBab2ROdW1iZXIzID0gY2xhc3MgZXh0ZW5kcyBab2RUeXBlMyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgdGhpcy5taW4gPSB0aGlzLmd0ZTtcbiAgICB0aGlzLm1heCA9IHRoaXMubHRlO1xuICAgIHRoaXMuc3RlcCA9IHRoaXMubXVsdGlwbGVPZjtcbiAgfVxuICBfcGFyc2UoaW5wdXQpIHtcbiAgICBjb25zdCBwYXJzZWRUeXBlID0gdGhpcy5fZ2V0VHlwZShpbnB1dCk7XG4gICAgaWYgKHBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUzLm51bWJlcikge1xuICAgICAgY29uc3QgY3R4MiA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcbiAgICAgIGFkZElzc3VlVG9Db250ZXh0MyhjdHgyLCB7XG4gICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZTMuaW52YWxpZF90eXBlLFxuICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZTMubnVtYmVyLFxuICAgICAgICByZWNlaXZlZDogY3R4Mi5wYXJzZWRUeXBlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBJTlZBTElENjtcbiAgICB9XG4gICAgbGV0IGN0eCA9IHZvaWQgMDtcbiAgICBjb25zdCBzdGF0dXMgPSBuZXcgUGFyc2VTdGF0dXMzKCk7XG4gICAgZm9yIChjb25zdCBjaGVjayBvZiB0aGlzLl9kZWYuY2hlY2tzKSB7XG4gICAgICBpZiAoY2hlY2sua2luZCA9PT0gXCJpbnRcIikge1xuICAgICAgICBpZiAoIXV0aWwzLmlzSW50ZWdlcihpbnB1dC5kYXRhKSkge1xuICAgICAgICAgIGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0LCBjdHgpO1xuICAgICAgICAgIGFkZElzc3VlVG9Db250ZXh0MyhjdHgsIHtcbiAgICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZTMuaW52YWxpZF90eXBlLFxuICAgICAgICAgICAgZXhwZWN0ZWQ6IFwiaW50ZWdlclwiLFxuICAgICAgICAgICAgcmVjZWl2ZWQ6IFwiZmxvYXRcIixcbiAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjaGVjay5raW5kID09PSBcIm1pblwiKSB7XG4gICAgICAgIGNvbnN0IHRvb1NtYWxsID0gY2hlY2suaW5jbHVzaXZlID8gaW5wdXQuZGF0YSA8IGNoZWNrLnZhbHVlIDogaW5wdXQuZGF0YSA8PSBjaGVjay52YWx1ZTtcbiAgICAgICAgaWYgKHRvb1NtYWxsKSB7XG4gICAgICAgICAgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQsIGN0eCk7XG4gICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQzKGN0eCwge1xuICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlMy50b29fc21hbGwsXG4gICAgICAgICAgICBtaW5pbXVtOiBjaGVjay52YWx1ZSxcbiAgICAgICAgICAgIHR5cGU6IFwibnVtYmVyXCIsXG4gICAgICAgICAgICBpbmNsdXNpdmU6IGNoZWNrLmluY2x1c2l2ZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjaGVjay5raW5kID09PSBcIm1heFwiKSB7XG4gICAgICAgIGNvbnN0IHRvb0JpZyA9IGNoZWNrLmluY2x1c2l2ZSA/IGlucHV0LmRhdGEgPiBjaGVjay52YWx1ZSA6IGlucHV0LmRhdGEgPj0gY2hlY2sudmFsdWU7XG4gICAgICAgIGlmICh0b29CaWcpIHtcbiAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dDMoY3R4LCB7XG4gICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUzLnRvb19iaWcsXG4gICAgICAgICAgICBtYXhpbXVtOiBjaGVjay52YWx1ZSxcbiAgICAgICAgICAgIHR5cGU6IFwibnVtYmVyXCIsXG4gICAgICAgICAgICBpbmNsdXNpdmU6IGNoZWNrLmluY2x1c2l2ZSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGNoZWNrLm1lc3NhZ2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjaGVjay5raW5kID09PSBcIm11bHRpcGxlT2ZcIikge1xuICAgICAgICBpZiAoZmxvYXRTYWZlUmVtYWluZGVyMyhpbnB1dC5kYXRhLCBjaGVjay52YWx1ZSkgIT09IDApIHtcbiAgICAgICAgICBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCwgY3R4KTtcbiAgICAgICAgICBhZGRJc3N1ZVRvQ29udGV4dDMoY3R4LCB7XG4gICAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUzLm5vdF9tdWx0aXBsZV9vZixcbiAgICAgICAgICAgIG11bHRpcGxlT2Y6IGNoZWNrLnZhbHVlLFxuICAgICAgICAgICAgbWVzc2FnZTogY2hlY2subWVzc2FnZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1dGlsMy5hc3NlcnROZXZlcihjaGVjayk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7c3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiBpbnB1dC5kYXRhfTtcbiAgfVxuICBndGUodmFsdWUsIG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5zZXRMaW1pdChcIm1pblwiLCB2YWx1ZSwgdHJ1ZSwgZXJyb3JVdGlsMy50b1N0cmluZyhtZXNzYWdlKSk7XG4gIH1cbiAgZ3QodmFsdWUsIG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5zZXRMaW1pdChcIm1pblwiLCB2YWx1ZSwgZmFsc2UsIGVycm9yVXRpbDMudG9TdHJpbmcobWVzc2FnZSkpO1xuICB9XG4gIGx0ZSh2YWx1ZSwgbWVzc2FnZSkge1xuICAgIHJldHVybiB0aGlzLnNldExpbWl0KFwibWF4XCIsIHZhbHVlLCB0cnVlLCBlcnJvclV0aWwzLnRvU3RyaW5nKG1lc3NhZ2UpKTtcbiAgfVxuICBsdCh2YWx1ZSwgbWVzc2FnZSkge1xuICAgIHJldHVybiB0aGlzLnNldExpbWl0KFwibWF4XCIsIHZhbHVlLCBmYWxzZSwgZXJyb3JVdGlsMy50b1N0cmluZyhtZXNzYWdlKSk7XG4gIH1cbiAgc2V0TGltaXQoa2luZCwgdmFsdWUsIGluY2x1c2l2ZSwgbWVzc2FnZSkge1xuICAgIHJldHVybiBuZXcgWm9kTnVtYmVyMyh7XG4gICAgICAuLi50aGlzLl9kZWYsXG4gICAgICBjaGVja3M6IFtcbiAgICAgICAgLi4udGhpcy5fZGVmLmNoZWNrcyxcbiAgICAgICAge1xuICAgICAgICAgIGtpbmQsXG4gICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgaW5jbHVzaXZlLFxuICAgICAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbDMudG9TdHJpbmcobWVzc2FnZSlcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0pO1xuICB9XG4gIF9hZGRDaGVjayhjaGVjaykge1xuICAgIHJldHVybiBuZXcgWm9kTnVtYmVyMyh7XG4gICAgICAuLi50aGlzLl9kZWYsXG4gICAgICBjaGVja3M6IFsuLi50aGlzLl9kZWYuY2hlY2tzLCBjaGVja11cbiAgICB9KTtcbiAgfVxuICBpbnQobWVzc2FnZSkge1xuICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICBraW5kOiBcImludFwiLFxuICAgICAgbWVzc2FnZTogZXJyb3JVdGlsMy50b1N0cmluZyhtZXNzYWdlKVxuICAgIH0pO1xuICB9XG4gIHBvc2l0aXZlKG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5fYWRkQ2hlY2soe1xuICAgICAga2luZDogXCJtaW5cIixcbiAgICAgIHZhbHVlOiAwLFxuICAgICAgaW5jbHVzaXZlOiBmYWxzZSxcbiAgICAgIG1lc3NhZ2U6IGVycm9yVXRpbDMudG9TdHJpbmcobWVzc2FnZSlcbiAgICB9KTtcbiAgfVxuICBuZWdhdGl2ZShtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FkZENoZWNrKHtcbiAgICAgIGtpbmQ6IFwibWF4XCIsXG4gICAgICB2YWx1ZTogMCxcbiAgICAgIGluY2x1c2l2ZTogZmFsc2UsXG4gICAgICBtZXNzYWdlOiBlcnJvclV0aWwzLnRvU3RyaW5nKG1lc3NhZ2UpXG4gICAgfSk7XG4gIH1cbiAgbm9ucG9zaXRpdmUobWVzc2FnZSkge1xuICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICBraW5kOiBcIm1heFwiLFxuICAgICAgdmFsdWU6IDAsXG4gICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICBtZXNzYWdlOiBlcnJvclV0aWwzLnRvU3RyaW5nKG1lc3NhZ2UpXG4gICAgfSk7XG4gIH1cbiAgbm9ubmVnYXRpdmUobWVzc2FnZSkge1xuICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICBraW5kOiBcIm1pblwiLFxuICAgICAgdmFsdWU6IDAsXG4gICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICBtZXNzYWdlOiBlcnJvclV0aWwzLnRvU3RyaW5nKG1lc3NhZ2UpXG4gICAgfSk7XG4gIH1cbiAgbXVsdGlwbGVPZih2YWx1ZSwgbWVzc2FnZSkge1xuICAgIHJldHVybiB0aGlzLl9hZGRDaGVjayh7XG4gICAgICBraW5kOiBcIm11bHRpcGxlT2ZcIixcbiAgICAgIHZhbHVlLFxuICAgICAgbWVzc2FnZTogZXJyb3JVdGlsMy50b1N0cmluZyhtZXNzYWdlKVxuICAgIH0pO1xuICB9XG4gIGdldCBtaW5WYWx1ZSgpIHtcbiAgICBsZXQgbWluID0gbnVsbDtcbiAgICBmb3IgKGNvbnN0IGNoIG9mIHRoaXMuX2RlZi5jaGVja3MpIHtcbiAgICAgIGlmIChjaC5raW5kID09PSBcIm1pblwiKSB7XG4gICAgICAgIGlmIChtaW4gPT09IG51bGwgfHwgY2gudmFsdWUgPiBtaW4pXG4gICAgICAgICAgbWluID0gY2gudmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtaW47XG4gIH1cbiAgZ2V0IG1heFZhbHVlKCkge1xuICAgIGxldCBtYXggPSBudWxsO1xuICAgIGZvciAoY29uc3QgY2ggb2YgdGhpcy5fZGVmLmNoZWNrcykge1xuICAgICAgaWYgKGNoLmtpbmQgPT09IFwibWF4XCIpIHtcbiAgICAgICAgaWYgKG1heCA9PT0gbnVsbCB8fCBjaC52YWx1ZSA8IG1heClcbiAgICAgICAgICBtYXggPSBjaC52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1heDtcbiAgfVxuICBnZXQgaXNJbnQoKSB7XG4gICAgcmV0dXJuICEhdGhpcy5fZGVmLmNoZWNrcy5maW5kKChjaCkgPT4gY2gua2luZCA9PT0gXCJpbnRcIik7XG4gIH1cbn07XG5ab2ROdW1iZXIzLmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2ROdW1iZXIzKHtcbiAgICBjaGVja3M6IFtdLFxuICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQzLlpvZE51bWJlcixcbiAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zMyhwYXJhbXMpXG4gIH0pO1xufTtcbnZhciBab2RCaWdJbnQzID0gY2xhc3MgZXh0ZW5kcyBab2RUeXBlMyB7XG4gIF9wYXJzZShpbnB1dCkge1xuICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICBpZiAocGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZTMuYmlnaW50KSB7XG4gICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICBhZGRJc3N1ZVRvQ29udGV4dDMoY3R4LCB7XG4gICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZTMuaW52YWxpZF90eXBlLFxuICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZTMuYmlnaW50LFxuICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIElOVkFMSUQ2O1xuICAgIH1cbiAgICByZXR1cm4gT0szKGlucHV0LmRhdGEpO1xuICB9XG59O1xuWm9kQmlnSW50My5jcmVhdGUgPSAocGFyYW1zKSA9PiB7XG4gIHJldHVybiBuZXcgWm9kQmlnSW50Myh7XG4gICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZDMuWm9kQmlnSW50LFxuICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMzKHBhcmFtcylcbiAgfSk7XG59O1xudmFyIFpvZEJvb2xlYW4zID0gY2xhc3MgZXh0ZW5kcyBab2RUeXBlMyB7XG4gIF9wYXJzZShpbnB1dCkge1xuICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICBpZiAocGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZTMuYm9vbGVhbikge1xuICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgYWRkSXNzdWVUb0NvbnRleHQzKGN0eCwge1xuICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUzLmludmFsaWRfdHlwZSxcbiAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUzLmJvb2xlYW4sXG4gICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gSU5WQUxJRDY7XG4gICAgfVxuICAgIHJldHVybiBPSzMoaW5wdXQuZGF0YSk7XG4gIH1cbn07XG5ab2RCb29sZWFuMy5jcmVhdGUgPSAocGFyYW1zKSA9PiB7XG4gIHJldHVybiBuZXcgWm9kQm9vbGVhbjMoe1xuICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQzLlpvZEJvb2xlYW4sXG4gICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtczMocGFyYW1zKVxuICB9KTtcbn07XG52YXIgWm9kRGF0ZTMgPSBjbGFzcyBleHRlbmRzIFpvZFR5cGUzIHtcbiAgX3BhcnNlKGlucHV0KSB7XG4gICAgY29uc3QgcGFyc2VkVHlwZSA9IHRoaXMuX2dldFR5cGUoaW5wdXQpO1xuICAgIGlmIChwYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlMy5kYXRlKSB7XG4gICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICBhZGRJc3N1ZVRvQ29udGV4dDMoY3R4LCB7XG4gICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZTMuaW52YWxpZF90eXBlLFxuICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZTMuZGF0ZSxcbiAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBJTlZBTElENjtcbiAgICB9XG4gICAgaWYgKGlzTmFOKGlucHV0LmRhdGEuZ2V0VGltZSgpKSkge1xuICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgYWRkSXNzdWVUb0NvbnRleHQzKGN0eCwge1xuICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUzLmludmFsaWRfZGF0ZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gSU5WQUxJRDY7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBzdGF0dXM6IFwidmFsaWRcIixcbiAgICAgIHZhbHVlOiBuZXcgRGF0ZShpbnB1dC5kYXRhLmdldFRpbWUoKSlcbiAgICB9O1xuICB9XG59O1xuWm9kRGF0ZTMuY3JlYXRlID0gKHBhcmFtcykgPT4ge1xuICByZXR1cm4gbmV3IFpvZERhdGUzKHtcbiAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMy5ab2REYXRlLFxuICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMzKHBhcmFtcylcbiAgfSk7XG59O1xudmFyIFpvZFVuZGVmaW5lZDMgPSBjbGFzcyBleHRlbmRzIFpvZFR5cGUzIHtcbiAgX3BhcnNlKGlucHV0KSB7XG4gICAgY29uc3QgcGFyc2VkVHlwZSA9IHRoaXMuX2dldFR5cGUoaW5wdXQpO1xuICAgIGlmIChwYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlMy51bmRlZmluZWQpIHtcbiAgICAgIGNvbnN0IGN0eCA9IHRoaXMuX2dldE9yUmV0dXJuQ3R4KGlucHV0KTtcbiAgICAgIGFkZElzc3VlVG9Db250ZXh0MyhjdHgsIHtcbiAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlMy5pbnZhbGlkX3R5cGUsXG4gICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlMy51bmRlZmluZWQsXG4gICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gSU5WQUxJRDY7XG4gICAgfVxuICAgIHJldHVybiBPSzMoaW5wdXQuZGF0YSk7XG4gIH1cbn07XG5ab2RVbmRlZmluZWQzLmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2RVbmRlZmluZWQzKHtcbiAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMy5ab2RVbmRlZmluZWQsXG4gICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtczMocGFyYW1zKVxuICB9KTtcbn07XG52YXIgWm9kTnVsbDMgPSBjbGFzcyBleHRlbmRzIFpvZFR5cGUzIHtcbiAgX3BhcnNlKGlucHV0KSB7XG4gICAgY29uc3QgcGFyc2VkVHlwZSA9IHRoaXMuX2dldFR5cGUoaW5wdXQpO1xuICAgIGlmIChwYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlMy5udWxsKSB7XG4gICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICBhZGRJc3N1ZVRvQ29udGV4dDMoY3R4LCB7XG4gICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZTMuaW52YWxpZF90eXBlLFxuICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZTMubnVsbCxcbiAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBJTlZBTElENjtcbiAgICB9XG4gICAgcmV0dXJuIE9LMyhpbnB1dC5kYXRhKTtcbiAgfVxufTtcblpvZE51bGwzLmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2ROdWxsMyh7XG4gICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZDMuWm9kTnVsbCxcbiAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zMyhwYXJhbXMpXG4gIH0pO1xufTtcbnZhciBab2RBbnkzID0gY2xhc3MgZXh0ZW5kcyBab2RUeXBlMyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgdGhpcy5fYW55ID0gdHJ1ZTtcbiAgfVxuICBfcGFyc2UoaW5wdXQpIHtcbiAgICByZXR1cm4gT0szKGlucHV0LmRhdGEpO1xuICB9XG59O1xuWm9kQW55My5jcmVhdGUgPSAocGFyYW1zKSA9PiB7XG4gIHJldHVybiBuZXcgWm9kQW55Myh7XG4gICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZDMuWm9kQW55LFxuICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMzKHBhcmFtcylcbiAgfSk7XG59O1xudmFyIFpvZFVua25vd24zID0gY2xhc3MgZXh0ZW5kcyBab2RUeXBlMyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgdGhpcy5fdW5rbm93biA9IHRydWU7XG4gIH1cbiAgX3BhcnNlKGlucHV0KSB7XG4gICAgcmV0dXJuIE9LMyhpbnB1dC5kYXRhKTtcbiAgfVxufTtcblpvZFVua25vd24zLmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2RVbmtub3duMyh7XG4gICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZDMuWm9kVW5rbm93bixcbiAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zMyhwYXJhbXMpXG4gIH0pO1xufTtcbnZhciBab2ROZXZlcjMgPSBjbGFzcyBleHRlbmRzIFpvZFR5cGUzIHtcbiAgX3BhcnNlKGlucHV0KSB7XG4gICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgIGFkZElzc3VlVG9Db250ZXh0MyhjdHgsIHtcbiAgICAgIGNvZGU6IFpvZElzc3VlQ29kZTMuaW52YWxpZF90eXBlLFxuICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUzLm5ldmVyLFxuICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlXG4gICAgfSk7XG4gICAgcmV0dXJuIElOVkFMSUQ2O1xuICB9XG59O1xuWm9kTmV2ZXIzLmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2ROZXZlcjMoe1xuICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQzLlpvZE5ldmVyLFxuICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMzKHBhcmFtcylcbiAgfSk7XG59O1xudmFyIFpvZFZvaWQzID0gY2xhc3MgZXh0ZW5kcyBab2RUeXBlMyB7XG4gIF9wYXJzZShpbnB1dCkge1xuICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICBpZiAocGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZTMudW5kZWZpbmVkKSB7XG4gICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICBhZGRJc3N1ZVRvQ29udGV4dDMoY3R4LCB7XG4gICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZTMuaW52YWxpZF90eXBlLFxuICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZTMudm9pZCxcbiAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBJTlZBTElENjtcbiAgICB9XG4gICAgcmV0dXJuIE9LMyhpbnB1dC5kYXRhKTtcbiAgfVxufTtcblpvZFZvaWQzLmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2RWb2lkMyh7XG4gICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZDMuWm9kVm9pZCxcbiAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zMyhwYXJhbXMpXG4gIH0pO1xufTtcbnZhciBab2RBcnJheTMgPSBjbGFzcyBleHRlbmRzIFpvZFR5cGUzIHtcbiAgX3BhcnNlKGlucHV0KSB7XG4gICAgY29uc3Qge2N0eCwgc3RhdHVzfSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XG4gICAgY29uc3QgZGVmID0gdGhpcy5fZGVmO1xuICAgIGlmIChjdHgucGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZTMuYXJyYXkpIHtcbiAgICAgIGFkZElzc3VlVG9Db250ZXh0MyhjdHgsIHtcbiAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlMy5pbnZhbGlkX3R5cGUsXG4gICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlMy5hcnJheSxcbiAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBJTlZBTElENjtcbiAgICB9XG4gICAgaWYgKGRlZi5taW5MZW5ndGggIT09IG51bGwpIHtcbiAgICAgIGlmIChjdHguZGF0YS5sZW5ndGggPCBkZWYubWluTGVuZ3RoLnZhbHVlKSB7XG4gICAgICAgIGFkZElzc3VlVG9Db250ZXh0MyhjdHgsIHtcbiAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUzLnRvb19zbWFsbCxcbiAgICAgICAgICBtaW5pbXVtOiBkZWYubWluTGVuZ3RoLnZhbHVlLFxuICAgICAgICAgIHR5cGU6IFwiYXJyYXlcIixcbiAgICAgICAgICBpbmNsdXNpdmU6IHRydWUsXG4gICAgICAgICAgbWVzc2FnZTogZGVmLm1pbkxlbmd0aC5tZXNzYWdlXG4gICAgICAgIH0pO1xuICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGRlZi5tYXhMZW5ndGggIT09IG51bGwpIHtcbiAgICAgIGlmIChjdHguZGF0YS5sZW5ndGggPiBkZWYubWF4TGVuZ3RoLnZhbHVlKSB7XG4gICAgICAgIGFkZElzc3VlVG9Db250ZXh0MyhjdHgsIHtcbiAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUzLnRvb19iaWcsXG4gICAgICAgICAgbWF4aW11bTogZGVmLm1heExlbmd0aC52YWx1ZSxcbiAgICAgICAgICB0eXBlOiBcImFycmF5XCIsXG4gICAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxuICAgICAgICAgIG1lc3NhZ2U6IGRlZi5tYXhMZW5ndGgubWVzc2FnZVxuICAgICAgICB9KTtcbiAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChjdHguY29tbW9uLmFzeW5jKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5hbGwoY3R4LmRhdGEubWFwKChpdGVtLCBpKSA9PiB7XG4gICAgICAgIHJldHVybiBkZWYudHlwZS5fcGFyc2VBc3luYyhuZXcgUGFyc2VJbnB1dExhenlQYXRoMyhjdHgsIGl0ZW0sIGN0eC5wYXRoLCBpKSk7XG4gICAgICB9KSkudGhlbigocmVzdWx0MikgPT4ge1xuICAgICAgICByZXR1cm4gUGFyc2VTdGF0dXMzLm1lcmdlQXJyYXkoc3RhdHVzLCByZXN1bHQyKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSBjdHguZGF0YS5tYXAoKGl0ZW0sIGkpID0+IHtcbiAgICAgIHJldHVybiBkZWYudHlwZS5fcGFyc2VTeW5jKG5ldyBQYXJzZUlucHV0TGF6eVBhdGgzKGN0eCwgaXRlbSwgY3R4LnBhdGgsIGkpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gUGFyc2VTdGF0dXMzLm1lcmdlQXJyYXkoc3RhdHVzLCByZXN1bHQpO1xuICB9XG4gIGdldCBlbGVtZW50KCkge1xuICAgIHJldHVybiB0aGlzLl9kZWYudHlwZTtcbiAgfVxuICBtaW4obWluTGVuZ3RoLCBtZXNzYWdlKSB7XG4gICAgcmV0dXJuIG5ldyBab2RBcnJheTMoe1xuICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgbWluTGVuZ3RoOiB7dmFsdWU6IG1pbkxlbmd0aCwgbWVzc2FnZTogZXJyb3JVdGlsMy50b1N0cmluZyhtZXNzYWdlKX1cbiAgICB9KTtcbiAgfVxuICBtYXgobWF4TGVuZ3RoLCBtZXNzYWdlKSB7XG4gICAgcmV0dXJuIG5ldyBab2RBcnJheTMoe1xuICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgbWF4TGVuZ3RoOiB7dmFsdWU6IG1heExlbmd0aCwgbWVzc2FnZTogZXJyb3JVdGlsMy50b1N0cmluZyhtZXNzYWdlKX1cbiAgICB9KTtcbiAgfVxuICBsZW5ndGgobGVuLCBtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMubWluKGxlbiwgbWVzc2FnZSkubWF4KGxlbiwgbWVzc2FnZSk7XG4gIH1cbiAgbm9uZW1wdHkobWVzc2FnZSkge1xuICAgIHJldHVybiB0aGlzLm1pbigxLCBtZXNzYWdlKTtcbiAgfVxufTtcblpvZEFycmF5My5jcmVhdGUgPSAoc2NoZW1hLCBwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2RBcnJheTMoe1xuICAgIHR5cGU6IHNjaGVtYSxcbiAgICBtaW5MZW5ndGg6IG51bGwsXG4gICAgbWF4TGVuZ3RoOiBudWxsLFxuICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQzLlpvZEFycmF5LFxuICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMzKHBhcmFtcylcbiAgfSk7XG59O1xudmFyIG9iamVjdFV0aWwzO1xuKGZ1bmN0aW9uKG9iamVjdFV0aWwyMikge1xuICBvYmplY3RVdGlsMjIubWVyZ2VTaGFwZXMgPSAoZmlyc3QsIHNlY29uZCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAuLi5maXJzdCxcbiAgICAgIC4uLnNlY29uZFxuICAgIH07XG4gIH07XG59KShvYmplY3RVdGlsMyB8fCAob2JqZWN0VXRpbDMgPSB7fSkpO1xudmFyIEF1Z21lbnRGYWN0b3J5MyA9IChkZWYpID0+IChhdWdtZW50YXRpb24pID0+IHtcbiAgcmV0dXJuIG5ldyBab2RPYmplY3QzKHtcbiAgICAuLi5kZWYsXG4gICAgc2hhcGU6ICgpID0+ICh7XG4gICAgICAuLi5kZWYuc2hhcGUoKSxcbiAgICAgIC4uLmF1Z21lbnRhdGlvblxuICAgIH0pXG4gIH0pO1xufTtcbmZ1bmN0aW9uIGRlZXBQYXJ0aWFsaWZ5MyhzY2hlbWEpIHtcbiAgaWYgKHNjaGVtYSBpbnN0YW5jZW9mIFpvZE9iamVjdDMpIHtcbiAgICBjb25zdCBuZXdTaGFwZSA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIHNjaGVtYS5zaGFwZSkge1xuICAgICAgY29uc3QgZmllbGRTY2hlbWEgPSBzY2hlbWEuc2hhcGVba2V5XTtcbiAgICAgIG5ld1NoYXBlW2tleV0gPSBab2RPcHRpb25hbDMuY3JlYXRlKGRlZXBQYXJ0aWFsaWZ5MyhmaWVsZFNjaGVtYSkpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFpvZE9iamVjdDMoe1xuICAgICAgLi4uc2NoZW1hLl9kZWYsXG4gICAgICBzaGFwZTogKCkgPT4gbmV3U2hhcGVcbiAgICB9KTtcbiAgfSBlbHNlIGlmIChzY2hlbWEgaW5zdGFuY2VvZiBab2RBcnJheTMpIHtcbiAgICByZXR1cm4gWm9kQXJyYXkzLmNyZWF0ZShkZWVwUGFydGlhbGlmeTMoc2NoZW1hLmVsZW1lbnQpKTtcbiAgfSBlbHNlIGlmIChzY2hlbWEgaW5zdGFuY2VvZiBab2RPcHRpb25hbDMpIHtcbiAgICByZXR1cm4gWm9kT3B0aW9uYWwzLmNyZWF0ZShkZWVwUGFydGlhbGlmeTMoc2NoZW1hLnVud3JhcCgpKSk7XG4gIH0gZWxzZSBpZiAoc2NoZW1hIGluc3RhbmNlb2YgWm9kTnVsbGFibGUzKSB7XG4gICAgcmV0dXJuIFpvZE51bGxhYmxlMy5jcmVhdGUoZGVlcFBhcnRpYWxpZnkzKHNjaGVtYS51bndyYXAoKSkpO1xuICB9IGVsc2UgaWYgKHNjaGVtYSBpbnN0YW5jZW9mIFpvZFR1cGxlMykge1xuICAgIHJldHVybiBab2RUdXBsZTMuY3JlYXRlKHNjaGVtYS5pdGVtcy5tYXAoKGl0ZW0pID0+IGRlZXBQYXJ0aWFsaWZ5MyhpdGVtKSkpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzY2hlbWE7XG4gIH1cbn1cbnZhciBab2RPYmplY3QzID0gY2xhc3MgZXh0ZW5kcyBab2RUeXBlMyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgdGhpcy5fY2FjaGVkID0gbnVsbDtcbiAgICB0aGlzLm5vbnN0cmljdCA9IHRoaXMucGFzc3Rocm91Z2g7XG4gICAgdGhpcy5hdWdtZW50ID0gQXVnbWVudEZhY3RvcnkzKHRoaXMuX2RlZik7XG4gICAgdGhpcy5leHRlbmQgPSBBdWdtZW50RmFjdG9yeTModGhpcy5fZGVmKTtcbiAgfVxuICBfZ2V0Q2FjaGVkKCkge1xuICAgIGlmICh0aGlzLl9jYWNoZWQgIT09IG51bGwpXG4gICAgICByZXR1cm4gdGhpcy5fY2FjaGVkO1xuICAgIGNvbnN0IHNoYXBlID0gdGhpcy5fZGVmLnNoYXBlKCk7XG4gICAgY29uc3Qga2V5cyA9IHV0aWwzLm9iamVjdEtleXMoc2hhcGUpO1xuICAgIHJldHVybiB0aGlzLl9jYWNoZWQgPSB7c2hhcGUsIGtleXN9O1xuICB9XG4gIF9wYXJzZShpbnB1dCkge1xuICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICBpZiAocGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZTMub2JqZWN0KSB7XG4gICAgICBjb25zdCBjdHgyID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgYWRkSXNzdWVUb0NvbnRleHQzKGN0eDIsIHtcbiAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlMy5pbnZhbGlkX3R5cGUsXG4gICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlMy5vYmplY3QsXG4gICAgICAgIHJlY2VpdmVkOiBjdHgyLnBhcnNlZFR5cGVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIElOVkFMSUQ2O1xuICAgIH1cbiAgICBjb25zdCB7c3RhdHVzLCBjdHh9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICBjb25zdCB7c2hhcGUsIGtleXM6IHNoYXBlS2V5c30gPSB0aGlzLl9nZXRDYWNoZWQoKTtcbiAgICBjb25zdCBleHRyYUtleXMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBjdHguZGF0YSkge1xuICAgICAgaWYgKCFzaGFwZUtleXMuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICBleHRyYUtleXMucHVzaChrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBwYWlycyA9IFtdO1xuICAgIGZvciAoY29uc3Qga2V5IG9mIHNoYXBlS2V5cykge1xuICAgICAgY29uc3Qga2V5VmFsaWRhdG9yID0gc2hhcGVba2V5XTtcbiAgICAgIGNvbnN0IHZhbHVlID0gY3R4LmRhdGFba2V5XTtcbiAgICAgIHBhaXJzLnB1c2goe1xuICAgICAgICBrZXk6IHtzdGF0dXM6IFwidmFsaWRcIiwgdmFsdWU6IGtleX0sXG4gICAgICAgIHZhbHVlOiBrZXlWYWxpZGF0b3IuX3BhcnNlKG5ldyBQYXJzZUlucHV0TGF6eVBhdGgzKGN0eCwgdmFsdWUsIGN0eC5wYXRoLCBrZXkpKSxcbiAgICAgICAgYWx3YXlzU2V0OiBrZXkgaW4gY3R4LmRhdGFcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAodGhpcy5fZGVmLmNhdGNoYWxsIGluc3RhbmNlb2YgWm9kTmV2ZXIzKSB7XG4gICAgICBjb25zdCB1bmtub3duS2V5cyA9IHRoaXMuX2RlZi51bmtub3duS2V5cztcbiAgICAgIGlmICh1bmtub3duS2V5cyA9PT0gXCJwYXNzdGhyb3VnaFwiKSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIGV4dHJhS2V5cykge1xuICAgICAgICAgIHBhaXJzLnB1c2goe1xuICAgICAgICAgICAga2V5OiB7c3RhdHVzOiBcInZhbGlkXCIsIHZhbHVlOiBrZXl9LFxuICAgICAgICAgICAgdmFsdWU6IHtzdGF0dXM6IFwidmFsaWRcIiwgdmFsdWU6IGN0eC5kYXRhW2tleV19XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodW5rbm93bktleXMgPT09IFwic3RyaWN0XCIpIHtcbiAgICAgICAgaWYgKGV4dHJhS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQzKGN0eCwge1xuICAgICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlMy51bnJlY29nbml6ZWRfa2V5cyxcbiAgICAgICAgICAgIGtleXM6IGV4dHJhS2V5c1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHVua25vd25LZXlzID09PSBcInN0cmlwXCIpXG4gICAgICAgIDtcbiAgICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludGVybmFsIFpvZE9iamVjdCBlcnJvcjogaW52YWxpZCB1bmtub3duS2V5cyB2YWx1ZS5gKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgY2F0Y2hhbGwgPSB0aGlzLl9kZWYuY2F0Y2hhbGw7XG4gICAgICBmb3IgKGNvbnN0IGtleSBvZiBleHRyYUtleXMpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBjdHguZGF0YVtrZXldO1xuICAgICAgICBwYWlycy5wdXNoKHtcbiAgICAgICAgICBrZXk6IHtzdGF0dXM6IFwidmFsaWRcIiwgdmFsdWU6IGtleX0sXG4gICAgICAgICAgdmFsdWU6IGNhdGNoYWxsLl9wYXJzZShuZXcgUGFyc2VJbnB1dExhenlQYXRoMyhjdHgsIHZhbHVlLCBjdHgucGF0aCwga2V5KSksXG4gICAgICAgICAgYWx3YXlzU2V0OiBrZXkgaW4gY3R4LmRhdGFcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChjdHguY29tbW9uLmFzeW5jKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHN5bmNQYWlycyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IHBhaXIgb2YgcGFpcnMpIHtcbiAgICAgICAgICBjb25zdCBrZXkgPSBhd2FpdCBwYWlyLmtleTtcbiAgICAgICAgICBzeW5jUGFpcnMucHVzaCh7XG4gICAgICAgICAgICBrZXksXG4gICAgICAgICAgICB2YWx1ZTogYXdhaXQgcGFpci52YWx1ZSxcbiAgICAgICAgICAgIGFsd2F5c1NldDogcGFpci5hbHdheXNTZXRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3luY1BhaXJzO1xuICAgICAgfSkudGhlbigoc3luY1BhaXJzKSA9PiB7XG4gICAgICAgIHJldHVybiBQYXJzZVN0YXR1czMubWVyZ2VPYmplY3RTeW5jKHN0YXR1cywgc3luY1BhaXJzKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gUGFyc2VTdGF0dXMzLm1lcmdlT2JqZWN0U3luYyhzdGF0dXMsIHBhaXJzKTtcbiAgICB9XG4gIH1cbiAgZ2V0IHNoYXBlKCkge1xuICAgIHJldHVybiB0aGlzLl9kZWYuc2hhcGUoKTtcbiAgfVxuICBzdHJpY3QobWVzc2FnZSkge1xuICAgIGVycm9yVXRpbDMuZXJyVG9PYmo7XG4gICAgcmV0dXJuIG5ldyBab2RPYmplY3QzKHtcbiAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgIHVua25vd25LZXlzOiBcInN0cmljdFwiLFxuICAgICAgLi4ubWVzc2FnZSAhPT0gdm9pZCAwID8ge1xuICAgICAgICBlcnJvck1hcDogKGlzc3VlLCBjdHgpID0+IHtcbiAgICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgICAgICAgY29uc3QgZGVmYXVsdEVycm9yID0gKF9jID0gKF9iID0gKF9hID0gdGhpcy5fZGVmKS5lcnJvck1hcCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EsIGlzc3VlLCBjdHgpLm1lc3NhZ2UpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IGN0eC5kZWZhdWx0RXJyb3I7XG4gICAgICAgICAgaWYgKGlzc3VlLmNvZGUgPT09IFwidW5yZWNvZ25pemVkX2tleXNcIilcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIG1lc3NhZ2U6IChfZCA9IGVycm9yVXRpbDMuZXJyVG9PYmoobWVzc2FnZSkubWVzc2FnZSkgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogZGVmYXVsdEVycm9yXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtZXNzYWdlOiBkZWZhdWx0RXJyb3JcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9IDoge31cbiAgICB9KTtcbiAgfVxuICBzdHJpcCgpIHtcbiAgICByZXR1cm4gbmV3IFpvZE9iamVjdDMoe1xuICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgdW5rbm93bktleXM6IFwic3RyaXBcIlxuICAgIH0pO1xuICB9XG4gIHBhc3N0aHJvdWdoKCkge1xuICAgIHJldHVybiBuZXcgWm9kT2JqZWN0Myh7XG4gICAgICAuLi50aGlzLl9kZWYsXG4gICAgICB1bmtub3duS2V5czogXCJwYXNzdGhyb3VnaFwiXG4gICAgfSk7XG4gIH1cbiAgc2V0S2V5KGtleSwgc2NoZW1hKSB7XG4gICAgcmV0dXJuIHRoaXMuYXVnbWVudCh7W2tleV06IHNjaGVtYX0pO1xuICB9XG4gIG1lcmdlKG1lcmdpbmcpIHtcbiAgICBjb25zdCBtZXJnZWQgPSBuZXcgWm9kT2JqZWN0Myh7XG4gICAgICB1bmtub3duS2V5czogbWVyZ2luZy5fZGVmLnVua25vd25LZXlzLFxuICAgICAgY2F0Y2hhbGw6IG1lcmdpbmcuX2RlZi5jYXRjaGFsbCxcbiAgICAgIHNoYXBlOiAoKSA9PiBvYmplY3RVdGlsMy5tZXJnZVNoYXBlcyh0aGlzLl9kZWYuc2hhcGUoKSwgbWVyZ2luZy5fZGVmLnNoYXBlKCkpLFxuICAgICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZDMuWm9kT2JqZWN0XG4gICAgfSk7XG4gICAgcmV0dXJuIG1lcmdlZDtcbiAgfVxuICBjYXRjaGFsbChpbmRleCkge1xuICAgIHJldHVybiBuZXcgWm9kT2JqZWN0Myh7XG4gICAgICAuLi50aGlzLl9kZWYsXG4gICAgICBjYXRjaGFsbDogaW5kZXhcbiAgICB9KTtcbiAgfVxuICBwaWNrKG1hc2spIHtcbiAgICBjb25zdCBzaGFwZSA9IHt9O1xuICAgIHV0aWwzLm9iamVjdEtleXMobWFzaykubWFwKChrZXkpID0+IHtcbiAgICAgIGlmICh0aGlzLnNoYXBlW2tleV0pXG4gICAgICAgIHNoYXBlW2tleV0gPSB0aGlzLnNoYXBlW2tleV07XG4gICAgfSk7XG4gICAgcmV0dXJuIG5ldyBab2RPYmplY3QzKHtcbiAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgIHNoYXBlOiAoKSA9PiBzaGFwZVxuICAgIH0pO1xuICB9XG4gIG9taXQobWFzaykge1xuICAgIGNvbnN0IHNoYXBlID0ge307XG4gICAgdXRpbDMub2JqZWN0S2V5cyh0aGlzLnNoYXBlKS5tYXAoKGtleSkgPT4ge1xuICAgICAgaWYgKHV0aWwzLm9iamVjdEtleXMobWFzaykuaW5kZXhPZihrZXkpID09PSAtMSkge1xuICAgICAgICBzaGFwZVtrZXldID0gdGhpcy5zaGFwZVtrZXldO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBuZXcgWm9kT2JqZWN0Myh7XG4gICAgICAuLi50aGlzLl9kZWYsXG4gICAgICBzaGFwZTogKCkgPT4gc2hhcGVcbiAgICB9KTtcbiAgfVxuICBkZWVwUGFydGlhbCgpIHtcbiAgICByZXR1cm4gZGVlcFBhcnRpYWxpZnkzKHRoaXMpO1xuICB9XG4gIHBhcnRpYWwobWFzaykge1xuICAgIGNvbnN0IG5ld1NoYXBlID0ge307XG4gICAgaWYgKG1hc2spIHtcbiAgICAgIHV0aWwzLm9iamVjdEtleXModGhpcy5zaGFwZSkubWFwKChrZXkpID0+IHtcbiAgICAgICAgaWYgKHV0aWwzLm9iamVjdEtleXMobWFzaykuaW5kZXhPZihrZXkpID09PSAtMSkge1xuICAgICAgICAgIG5ld1NoYXBlW2tleV0gPSB0aGlzLnNoYXBlW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3U2hhcGVba2V5XSA9IHRoaXMuc2hhcGVba2V5XS5vcHRpb25hbCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBuZXcgWm9kT2JqZWN0Myh7XG4gICAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgICAgc2hhcGU6ICgpID0+IG5ld1NoYXBlXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5zaGFwZSkge1xuICAgICAgICBjb25zdCBmaWVsZFNjaGVtYSA9IHRoaXMuc2hhcGVba2V5XTtcbiAgICAgICAgbmV3U2hhcGVba2V5XSA9IGZpZWxkU2NoZW1hLm9wdGlvbmFsKCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgWm9kT2JqZWN0Myh7XG4gICAgICAuLi50aGlzLl9kZWYsXG4gICAgICBzaGFwZTogKCkgPT4gbmV3U2hhcGVcbiAgICB9KTtcbiAgfVxuICByZXF1aXJlZCgpIHtcbiAgICBjb25zdCBuZXdTaGFwZSA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuc2hhcGUpIHtcbiAgICAgIGNvbnN0IGZpZWxkU2NoZW1hID0gdGhpcy5zaGFwZVtrZXldO1xuICAgICAgbGV0IG5ld0ZpZWxkID0gZmllbGRTY2hlbWE7XG4gICAgICB3aGlsZSAobmV3RmllbGQgaW5zdGFuY2VvZiBab2RPcHRpb25hbDMpIHtcbiAgICAgICAgbmV3RmllbGQgPSBuZXdGaWVsZC5fZGVmLmlubmVyVHlwZTtcbiAgICAgIH1cbiAgICAgIG5ld1NoYXBlW2tleV0gPSBuZXdGaWVsZDtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBab2RPYmplY3QzKHtcbiAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgIHNoYXBlOiAoKSA9PiBuZXdTaGFwZVxuICAgIH0pO1xuICB9XG59O1xuWm9kT2JqZWN0My5jcmVhdGUgPSAoc2hhcGUsIHBhcmFtcykgPT4ge1xuICByZXR1cm4gbmV3IFpvZE9iamVjdDMoe1xuICAgIHNoYXBlOiAoKSA9PiBzaGFwZSxcbiAgICB1bmtub3duS2V5czogXCJzdHJpcFwiLFxuICAgIGNhdGNoYWxsOiBab2ROZXZlcjMuY3JlYXRlKCksXG4gICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZDMuWm9kT2JqZWN0LFxuICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMzKHBhcmFtcylcbiAgfSk7XG59O1xuWm9kT2JqZWN0My5zdHJpY3RDcmVhdGUgPSAoc2hhcGUsIHBhcmFtcykgPT4ge1xuICByZXR1cm4gbmV3IFpvZE9iamVjdDMoe1xuICAgIHNoYXBlOiAoKSA9PiBzaGFwZSxcbiAgICB1bmtub3duS2V5czogXCJzdHJpY3RcIixcbiAgICBjYXRjaGFsbDogWm9kTmV2ZXIzLmNyZWF0ZSgpLFxuICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQzLlpvZE9iamVjdCxcbiAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zMyhwYXJhbXMpXG4gIH0pO1xufTtcblpvZE9iamVjdDMubGF6eWNyZWF0ZSA9IChzaGFwZSwgcGFyYW1zKSA9PiB7XG4gIHJldHVybiBuZXcgWm9kT2JqZWN0Myh7XG4gICAgc2hhcGUsXG4gICAgdW5rbm93bktleXM6IFwic3RyaXBcIixcbiAgICBjYXRjaGFsbDogWm9kTmV2ZXIzLmNyZWF0ZSgpLFxuICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQzLlpvZE9iamVjdCxcbiAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zMyhwYXJhbXMpXG4gIH0pO1xufTtcbnZhciBab2RVbmlvbjMgPSBjbGFzcyBleHRlbmRzIFpvZFR5cGUzIHtcbiAgX3BhcnNlKGlucHV0KSB7XG4gICAgY29uc3Qge2N0eH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLl9kZWYub3B0aW9ucztcbiAgICBmdW5jdGlvbiBoYW5kbGVSZXN1bHRzKHJlc3VsdHMpIHtcbiAgICAgIGZvciAoY29uc3QgcmVzdWx0IG9mIHJlc3VsdHMpIHtcbiAgICAgICAgaWYgKHJlc3VsdC5yZXN1bHQuc3RhdHVzID09PSBcInZhbGlkXCIpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LnJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9yIChjb25zdCByZXN1bHQgb2YgcmVzdWx0cykge1xuICAgICAgICBpZiAocmVzdWx0LnJlc3VsdC5zdGF0dXMgPT09IFwiZGlydHlcIikge1xuICAgICAgICAgIGN0eC5jb21tb24uaXNzdWVzLnB1c2goLi4ucmVzdWx0LmN0eC5jb21tb24uaXNzdWVzKTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LnJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3QgdW5pb25FcnJvcnMgPSByZXN1bHRzLm1hcCgocmVzdWx0KSA9PiBuZXcgWm9kRXJyb3IzKHJlc3VsdC5jdHguY29tbW9uLmlzc3VlcykpO1xuICAgICAgYWRkSXNzdWVUb0NvbnRleHQzKGN0eCwge1xuICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUzLmludmFsaWRfdW5pb24sXG4gICAgICAgIHVuaW9uRXJyb3JzXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBJTlZBTElENjtcbiAgICB9XG4gICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLmFsbChvcHRpb25zLm1hcChhc3luYyAob3B0aW9uKSA9PiB7XG4gICAgICAgIGNvbnN0IGNoaWxkQ3R4ID0ge1xuICAgICAgICAgIC4uLmN0eCxcbiAgICAgICAgICBjb21tb246IHtcbiAgICAgICAgICAgIC4uLmN0eC5jb21tb24sXG4gICAgICAgICAgICBpc3N1ZXM6IFtdXG4gICAgICAgICAgfSxcbiAgICAgICAgICBwYXJlbnQ6IG51bGxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICByZXN1bHQ6IGF3YWl0IG9wdGlvbi5fcGFyc2VBc3luYyh7XG4gICAgICAgICAgICBkYXRhOiBjdHguZGF0YSxcbiAgICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgICAgcGFyZW50OiBjaGlsZEN0eFxuICAgICAgICAgIH0pLFxuICAgICAgICAgIGN0eDogY2hpbGRDdHhcbiAgICAgICAgfTtcbiAgICAgIH0pKS50aGVuKGhhbmRsZVJlc3VsdHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgZGlydHkgPSB2b2lkIDA7XG4gICAgICBjb25zdCBpc3N1ZXMgPSBbXTtcbiAgICAgIGZvciAoY29uc3Qgb3B0aW9uIG9mIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgY2hpbGRDdHggPSB7XG4gICAgICAgICAgLi4uY3R4LFxuICAgICAgICAgIGNvbW1vbjoge1xuICAgICAgICAgICAgLi4uY3R4LmNvbW1vbixcbiAgICAgICAgICAgIGlzc3VlczogW11cbiAgICAgICAgICB9LFxuICAgICAgICAgIHBhcmVudDogbnVsbFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCByZXN1bHQgPSBvcHRpb24uX3BhcnNlU3luYyh7XG4gICAgICAgICAgZGF0YTogY3R4LmRhdGEsXG4gICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgcGFyZW50OiBjaGlsZEN0eFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHJlc3VsdC5zdGF0dXMgPT09IFwidmFsaWRcIikge1xuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0gZWxzZSBpZiAocmVzdWx0LnN0YXR1cyA9PT0gXCJkaXJ0eVwiICYmICFkaXJ0eSkge1xuICAgICAgICAgIGRpcnR5ID0ge3Jlc3VsdCwgY3R4OiBjaGlsZEN0eH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoaWxkQ3R4LmNvbW1vbi5pc3N1ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgaXNzdWVzLnB1c2goY2hpbGRDdHguY29tbW9uLmlzc3Vlcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChkaXJ0eSkge1xuICAgICAgICBjdHguY29tbW9uLmlzc3Vlcy5wdXNoKC4uLmRpcnR5LmN0eC5jb21tb24uaXNzdWVzKTtcbiAgICAgICAgcmV0dXJuIGRpcnR5LnJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHVuaW9uRXJyb3JzID0gaXNzdWVzLm1hcCgoaXNzdWVzMikgPT4gbmV3IFpvZEVycm9yMyhpc3N1ZXMyKSk7XG4gICAgICBhZGRJc3N1ZVRvQ29udGV4dDMoY3R4LCB7XG4gICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZTMuaW52YWxpZF91bmlvbixcbiAgICAgICAgdW5pb25FcnJvcnNcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIElOVkFMSUQ2O1xuICAgIH1cbiAgfVxuICBnZXQgb3B0aW9ucygpIHtcbiAgICByZXR1cm4gdGhpcy5fZGVmLm9wdGlvbnM7XG4gIH1cbn07XG5ab2RVbmlvbjMuY3JlYXRlID0gKHR5cGVzLCBwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2RVbmlvbjMoe1xuICAgIG9wdGlvbnM6IHR5cGVzLFxuICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQzLlpvZFVuaW9uLFxuICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMzKHBhcmFtcylcbiAgfSk7XG59O1xudmFyIFpvZERpc2NyaW1pbmF0ZWRVbmlvbjMgPSBjbGFzcyBleHRlbmRzIFpvZFR5cGUzIHtcbiAgX3BhcnNlKGlucHV0KSB7XG4gICAgY29uc3Qge2N0eH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgIGlmIChjdHgucGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZTMub2JqZWN0KSB7XG4gICAgICBhZGRJc3N1ZVRvQ29udGV4dDMoY3R4LCB7XG4gICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZTMuaW52YWxpZF90eXBlLFxuICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZTMub2JqZWN0LFxuICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIElOVkFMSUQ2O1xuICAgIH1cbiAgICBjb25zdCBkaXNjcmltaW5hdG9yID0gdGhpcy5kaXNjcmltaW5hdG9yO1xuICAgIGNvbnN0IGRpc2NyaW1pbmF0b3JWYWx1ZSA9IGN0eC5kYXRhW2Rpc2NyaW1pbmF0b3JdO1xuICAgIGNvbnN0IG9wdGlvbiA9IHRoaXMub3B0aW9ucy5nZXQoZGlzY3JpbWluYXRvclZhbHVlKTtcbiAgICBpZiAoIW9wdGlvbikge1xuICAgICAgYWRkSXNzdWVUb0NvbnRleHQzKGN0eCwge1xuICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUzLmludmFsaWRfdW5pb25fZGlzY3JpbWluYXRvcixcbiAgICAgICAgb3B0aW9uczogdGhpcy52YWxpZERpc2NyaW1pbmF0b3JWYWx1ZXMsXG4gICAgICAgIHBhdGg6IFtkaXNjcmltaW5hdG9yXVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gSU5WQUxJRDY7XG4gICAgfVxuICAgIGlmIChjdHguY29tbW9uLmFzeW5jKSB7XG4gICAgICByZXR1cm4gb3B0aW9uLl9wYXJzZUFzeW5jKHtcbiAgICAgICAgZGF0YTogY3R4LmRhdGEsXG4gICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICBwYXJlbnQ6IGN0eFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBvcHRpb24uX3BhcnNlU3luYyh7XG4gICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgcGFyZW50OiBjdHhcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBnZXQgZGlzY3JpbWluYXRvcigpIHtcbiAgICByZXR1cm4gdGhpcy5fZGVmLmRpc2NyaW1pbmF0b3I7XG4gIH1cbiAgZ2V0IHZhbGlkRGlzY3JpbWluYXRvclZhbHVlcygpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLm9wdGlvbnMua2V5cygpKTtcbiAgfVxuICBnZXQgb3B0aW9ucygpIHtcbiAgICByZXR1cm4gdGhpcy5fZGVmLm9wdGlvbnM7XG4gIH1cbiAgc3RhdGljIGNyZWF0ZShkaXNjcmltaW5hdG9yLCB0eXBlcywgcGFyYW1zKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gICAgdHJ5IHtcbiAgICAgIHR5cGVzLmZvckVhY2goKHR5cGUpID0+IHtcbiAgICAgICAgY29uc3QgZGlzY3JpbWluYXRvclZhbHVlID0gdHlwZS5zaGFwZVtkaXNjcmltaW5hdG9yXS52YWx1ZTtcbiAgICAgICAgb3B0aW9ucy5zZXQoZGlzY3JpbWluYXRvclZhbHVlLCB0eXBlKTtcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBkaXNjcmltaW5hdG9yIHZhbHVlIGNvdWxkIG5vdCBiZSBleHRyYWN0ZWQgZnJvbSBhbGwgdGhlIHByb3ZpZGVkIHNjaGVtYXNcIik7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLnNpemUgIT09IHR5cGVzLmxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU29tZSBvZiB0aGUgZGlzY3JpbWluYXRvciB2YWx1ZXMgYXJlIG5vdCB1bmlxdWVcIik7XG4gICAgfVxuICAgIHJldHVybiBuZXcgWm9kRGlzY3JpbWluYXRlZFVuaW9uMyh7XG4gICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMy5ab2REaXNjcmltaW5hdGVkVW5pb24sXG4gICAgICBkaXNjcmltaW5hdG9yLFxuICAgICAgb3B0aW9ucyxcbiAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMzKHBhcmFtcylcbiAgICB9KTtcbiAgfVxufTtcbmZ1bmN0aW9uIG1lcmdlVmFsdWVzMyhhLCBiKSB7XG4gIGNvbnN0IGFUeXBlID0gZ2V0UGFyc2VkVHlwZTMoYSk7XG4gIGNvbnN0IGJUeXBlID0gZ2V0UGFyc2VkVHlwZTMoYik7XG4gIGlmIChhID09PSBiKSB7XG4gICAgcmV0dXJuIHt2YWxpZDogdHJ1ZSwgZGF0YTogYX07XG4gIH0gZWxzZSBpZiAoYVR5cGUgPT09IFpvZFBhcnNlZFR5cGUzLm9iamVjdCAmJiBiVHlwZSA9PT0gWm9kUGFyc2VkVHlwZTMub2JqZWN0KSB7XG4gICAgY29uc3QgYktleXMgPSB1dGlsMy5vYmplY3RLZXlzKGIpO1xuICAgIGNvbnN0IHNoYXJlZEtleXMgPSB1dGlsMy5vYmplY3RLZXlzKGEpLmZpbHRlcigoa2V5KSA9PiBiS2V5cy5pbmRleE9mKGtleSkgIT09IC0xKTtcbiAgICBjb25zdCBuZXdPYmogPSB7Li4uYSwgLi4uYn07XG4gICAgZm9yIChjb25zdCBrZXkgb2Ygc2hhcmVkS2V5cykge1xuICAgICAgY29uc3Qgc2hhcmVkVmFsdWUgPSBtZXJnZVZhbHVlczMoYVtrZXldLCBiW2tleV0pO1xuICAgICAgaWYgKCFzaGFyZWRWYWx1ZS52YWxpZCkge1xuICAgICAgICByZXR1cm4ge3ZhbGlkOiBmYWxzZX07XG4gICAgICB9XG4gICAgICBuZXdPYmpba2V5XSA9IHNoYXJlZFZhbHVlLmRhdGE7XG4gICAgfVxuICAgIHJldHVybiB7dmFsaWQ6IHRydWUsIGRhdGE6IG5ld09ian07XG4gIH0gZWxzZSBpZiAoYVR5cGUgPT09IFpvZFBhcnNlZFR5cGUzLmFycmF5ICYmIGJUeXBlID09PSBab2RQYXJzZWRUeXBlMy5hcnJheSkge1xuICAgIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB7dmFsaWQ6IGZhbHNlfTtcbiAgICB9XG4gICAgY29uc3QgbmV3QXJyYXkgPSBbXTtcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgYS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIGNvbnN0IGl0ZW1BID0gYVtpbmRleF07XG4gICAgICBjb25zdCBpdGVtQiA9IGJbaW5kZXhdO1xuICAgICAgY29uc3Qgc2hhcmVkVmFsdWUgPSBtZXJnZVZhbHVlczMoaXRlbUEsIGl0ZW1CKTtcbiAgICAgIGlmICghc2hhcmVkVmFsdWUudmFsaWQpIHtcbiAgICAgICAgcmV0dXJuIHt2YWxpZDogZmFsc2V9O1xuICAgICAgfVxuICAgICAgbmV3QXJyYXkucHVzaChzaGFyZWRWYWx1ZS5kYXRhKTtcbiAgICB9XG4gICAgcmV0dXJuIHt2YWxpZDogdHJ1ZSwgZGF0YTogbmV3QXJyYXl9O1xuICB9IGVsc2UgaWYgKGFUeXBlID09PSBab2RQYXJzZWRUeXBlMy5kYXRlICYmIGJUeXBlID09PSBab2RQYXJzZWRUeXBlMy5kYXRlICYmICthID09PSArYikge1xuICAgIHJldHVybiB7dmFsaWQ6IHRydWUsIGRhdGE6IGF9O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB7dmFsaWQ6IGZhbHNlfTtcbiAgfVxufVxudmFyIFpvZEludGVyc2VjdGlvbjMgPSBjbGFzcyBleHRlbmRzIFpvZFR5cGUzIHtcbiAgX3BhcnNlKGlucHV0KSB7XG4gICAgY29uc3Qge3N0YXR1cywgY3R4fSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XG4gICAgY29uc3QgaGFuZGxlUGFyc2VkID0gKHBhcnNlZExlZnQsIHBhcnNlZFJpZ2h0KSA9PiB7XG4gICAgICBpZiAoaXNBYm9ydGVkMyhwYXJzZWRMZWZ0KSB8fCBpc0Fib3J0ZWQzKHBhcnNlZFJpZ2h0KSkge1xuICAgICAgICByZXR1cm4gSU5WQUxJRDY7XG4gICAgICB9XG4gICAgICBjb25zdCBtZXJnZWQgPSBtZXJnZVZhbHVlczMocGFyc2VkTGVmdC52YWx1ZSwgcGFyc2VkUmlnaHQudmFsdWUpO1xuICAgICAgaWYgKCFtZXJnZWQudmFsaWQpIHtcbiAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQzKGN0eCwge1xuICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZTMuaW52YWxpZF9pbnRlcnNlY3Rpb25fdHlwZXNcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBJTlZBTElENjtcbiAgICAgIH1cbiAgICAgIGlmIChpc0RpcnR5MyhwYXJzZWRMZWZ0KSB8fCBpc0RpcnR5MyhwYXJzZWRSaWdodCkpIHtcbiAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICB9XG4gICAgICByZXR1cm4ge3N0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogbWVyZ2VkLmRhdGF9O1xuICAgIH07XG4gICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLmFsbChbXG4gICAgICAgIHRoaXMuX2RlZi5sZWZ0Ll9wYXJzZUFzeW5jKHtcbiAgICAgICAgICBkYXRhOiBjdHguZGF0YSxcbiAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgICBwYXJlbnQ6IGN0eFxuICAgICAgICB9KSxcbiAgICAgICAgdGhpcy5fZGVmLnJpZ2h0Ll9wYXJzZUFzeW5jKHtcbiAgICAgICAgICBkYXRhOiBjdHguZGF0YSxcbiAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgICBwYXJlbnQ6IGN0eFxuICAgICAgICB9KVxuICAgICAgXSkudGhlbigoW2xlZnQsIHJpZ2h0XSkgPT4gaGFuZGxlUGFyc2VkKGxlZnQsIHJpZ2h0KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBoYW5kbGVQYXJzZWQodGhpcy5fZGVmLmxlZnQuX3BhcnNlU3luYyh7XG4gICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgcGFyZW50OiBjdHhcbiAgICAgIH0pLCB0aGlzLl9kZWYucmlnaHQuX3BhcnNlU3luYyh7XG4gICAgICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgcGFyZW50OiBjdHhcbiAgICAgIH0pKTtcbiAgICB9XG4gIH1cbn07XG5ab2RJbnRlcnNlY3Rpb24zLmNyZWF0ZSA9IChsZWZ0LCByaWdodCwgcGFyYW1zKSA9PiB7XG4gIHJldHVybiBuZXcgWm9kSW50ZXJzZWN0aW9uMyh7XG4gICAgbGVmdCxcbiAgICByaWdodCxcbiAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMy5ab2RJbnRlcnNlY3Rpb24sXG4gICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtczMocGFyYW1zKVxuICB9KTtcbn07XG52YXIgWm9kVHVwbGUzID0gY2xhc3MgZXh0ZW5kcyBab2RUeXBlMyB7XG4gIF9wYXJzZShpbnB1dCkge1xuICAgIGNvbnN0IHtzdGF0dXMsIGN0eH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgIGlmIChjdHgucGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZTMuYXJyYXkpIHtcbiAgICAgIGFkZElzc3VlVG9Db250ZXh0MyhjdHgsIHtcbiAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlMy5pbnZhbGlkX3R5cGUsXG4gICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlMy5hcnJheSxcbiAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBJTlZBTElENjtcbiAgICB9XG4gICAgaWYgKGN0eC5kYXRhLmxlbmd0aCA8IHRoaXMuX2RlZi5pdGVtcy5sZW5ndGgpIHtcbiAgICAgIGFkZElzc3VlVG9Db250ZXh0MyhjdHgsIHtcbiAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlMy50b29fc21hbGwsXG4gICAgICAgIG1pbmltdW06IHRoaXMuX2RlZi5pdGVtcy5sZW5ndGgsXG4gICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgdHlwZTogXCJhcnJheVwiXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBJTlZBTElENjtcbiAgICB9XG4gICAgY29uc3QgcmVzdCA9IHRoaXMuX2RlZi5yZXN0O1xuICAgIGlmICghcmVzdCAmJiBjdHguZGF0YS5sZW5ndGggPiB0aGlzLl9kZWYuaXRlbXMubGVuZ3RoKSB7XG4gICAgICBhZGRJc3N1ZVRvQ29udGV4dDMoY3R4LCB7XG4gICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZTMudG9vX2JpZyxcbiAgICAgICAgbWF4aW11bTogdGhpcy5fZGVmLml0ZW1zLmxlbmd0aCxcbiAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxuICAgICAgICB0eXBlOiBcImFycmF5XCJcbiAgICAgIH0pO1xuICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgfVxuICAgIGNvbnN0IGl0ZW1zID0gY3R4LmRhdGEubWFwKChpdGVtLCBpdGVtSW5kZXgpID0+IHtcbiAgICAgIGNvbnN0IHNjaGVtYSA9IHRoaXMuX2RlZi5pdGVtc1tpdGVtSW5kZXhdIHx8IHRoaXMuX2RlZi5yZXN0O1xuICAgICAgaWYgKCFzY2hlbWEpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgcmV0dXJuIHNjaGVtYS5fcGFyc2UobmV3IFBhcnNlSW5wdXRMYXp5UGF0aDMoY3R4LCBpdGVtLCBjdHgucGF0aCwgaXRlbUluZGV4KSk7XG4gICAgfSkuZmlsdGVyKCh4KSA9PiAhIXgpO1xuICAgIGlmIChjdHguY29tbW9uLmFzeW5jKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5hbGwoaXRlbXMpLnRoZW4oKHJlc3VsdHMpID0+IHtcbiAgICAgICAgcmV0dXJuIFBhcnNlU3RhdHVzMy5tZXJnZUFycmF5KHN0YXR1cywgcmVzdWx0cyk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFBhcnNlU3RhdHVzMy5tZXJnZUFycmF5KHN0YXR1cywgaXRlbXMpO1xuICAgIH1cbiAgfVxuICBnZXQgaXRlbXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RlZi5pdGVtcztcbiAgfVxuICByZXN0KHJlc3QpIHtcbiAgICByZXR1cm4gbmV3IFpvZFR1cGxlMyh7XG4gICAgICAuLi50aGlzLl9kZWYsXG4gICAgICByZXN0XG4gICAgfSk7XG4gIH1cbn07XG5ab2RUdXBsZTMuY3JlYXRlID0gKHNjaGVtYXMsIHBhcmFtcykgPT4ge1xuICByZXR1cm4gbmV3IFpvZFR1cGxlMyh7XG4gICAgaXRlbXM6IHNjaGVtYXMsXG4gICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZDMuWm9kVHVwbGUsXG4gICAgcmVzdDogbnVsbCxcbiAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zMyhwYXJhbXMpXG4gIH0pO1xufTtcbnZhciBab2RSZWNvcmQzID0gY2xhc3MgZXh0ZW5kcyBab2RUeXBlMyB7XG4gIGdldCBrZXlTY2hlbWEoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RlZi5rZXlUeXBlO1xuICB9XG4gIGdldCB2YWx1ZVNjaGVtYSgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGVmLnZhbHVlVHlwZTtcbiAgfVxuICBfcGFyc2UoaW5wdXQpIHtcbiAgICBjb25zdCB7c3RhdHVzLCBjdHh9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICBpZiAoY3R4LnBhcnNlZFR5cGUgIT09IFpvZFBhcnNlZFR5cGUzLm9iamVjdCkge1xuICAgICAgYWRkSXNzdWVUb0NvbnRleHQzKGN0eCwge1xuICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUzLmludmFsaWRfdHlwZSxcbiAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUzLm9iamVjdCxcbiAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBJTlZBTElENjtcbiAgICB9XG4gICAgY29uc3QgcGFpcnMgPSBbXTtcbiAgICBjb25zdCBrZXlUeXBlID0gdGhpcy5fZGVmLmtleVR5cGU7XG4gICAgY29uc3QgdmFsdWVUeXBlID0gdGhpcy5fZGVmLnZhbHVlVHlwZTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBjdHguZGF0YSkge1xuICAgICAgcGFpcnMucHVzaCh7XG4gICAgICAgIGtleToga2V5VHlwZS5fcGFyc2UobmV3IFBhcnNlSW5wdXRMYXp5UGF0aDMoY3R4LCBrZXksIGN0eC5wYXRoLCBrZXkpKSxcbiAgICAgICAgdmFsdWU6IHZhbHVlVHlwZS5fcGFyc2UobmV3IFBhcnNlSW5wdXRMYXp5UGF0aDMoY3R4LCBjdHguZGF0YVtrZXldLCBjdHgucGF0aCwga2V5KSlcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoY3R4LmNvbW1vbi5hc3luYykge1xuICAgICAgcmV0dXJuIFBhcnNlU3RhdHVzMy5tZXJnZU9iamVjdEFzeW5jKHN0YXR1cywgcGFpcnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gUGFyc2VTdGF0dXMzLm1lcmdlT2JqZWN0U3luYyhzdGF0dXMsIHBhaXJzKTtcbiAgICB9XG4gIH1cbiAgZ2V0IGVsZW1lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RlZi52YWx1ZVR5cGU7XG4gIH1cbiAgc3RhdGljIGNyZWF0ZShmaXJzdCwgc2Vjb25kLCB0aGlyZCkge1xuICAgIGlmIChzZWNvbmQgaW5zdGFuY2VvZiBab2RUeXBlMykge1xuICAgICAgcmV0dXJuIG5ldyBab2RSZWNvcmQzKHtcbiAgICAgICAga2V5VHlwZTogZmlyc3QsXG4gICAgICAgIHZhbHVlVHlwZTogc2Vjb25kLFxuICAgICAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMy5ab2RSZWNvcmQsXG4gICAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMzKHRoaXJkKVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgWm9kUmVjb3JkMyh7XG4gICAgICBrZXlUeXBlOiBab2RTdHJpbmczLmNyZWF0ZSgpLFxuICAgICAgdmFsdWVUeXBlOiBmaXJzdCxcbiAgICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQzLlpvZFJlY29yZCxcbiAgICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMzKHNlY29uZClcbiAgICB9KTtcbiAgfVxufTtcbnZhciBab2RNYXAzID0gY2xhc3MgZXh0ZW5kcyBab2RUeXBlMyB7XG4gIF9wYXJzZShpbnB1dCkge1xuICAgIGNvbnN0IHtzdGF0dXMsIGN0eH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgIGlmIChjdHgucGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZTMubWFwKSB7XG4gICAgICBhZGRJc3N1ZVRvQ29udGV4dDMoY3R4LCB7XG4gICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZTMuaW52YWxpZF90eXBlLFxuICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZTMubWFwLFxuICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIElOVkFMSUQ2O1xuICAgIH1cbiAgICBjb25zdCBrZXlUeXBlID0gdGhpcy5fZGVmLmtleVR5cGU7XG4gICAgY29uc3QgdmFsdWVUeXBlID0gdGhpcy5fZGVmLnZhbHVlVHlwZTtcbiAgICBjb25zdCBwYWlycyA9IFsuLi5jdHguZGF0YS5lbnRyaWVzKCldLm1hcCgoW2tleSwgdmFsdWVdLCBpbmRleCkgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAga2V5OiBrZXlUeXBlLl9wYXJzZShuZXcgUGFyc2VJbnB1dExhenlQYXRoMyhjdHgsIGtleSwgY3R4LnBhdGgsIFtpbmRleCwgXCJrZXlcIl0pKSxcbiAgICAgICAgdmFsdWU6IHZhbHVlVHlwZS5fcGFyc2UobmV3IFBhcnNlSW5wdXRMYXp5UGF0aDMoY3R4LCB2YWx1ZSwgY3R4LnBhdGgsIFtpbmRleCwgXCJ2YWx1ZVwiXSkpXG4gICAgICB9O1xuICAgIH0pO1xuICAgIGlmIChjdHguY29tbW9uLmFzeW5jKSB7XG4gICAgICBjb25zdCBmaW5hbE1hcCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihhc3luYyAoKSA9PiB7XG4gICAgICAgIGZvciAoY29uc3QgcGFpciBvZiBwYWlycykge1xuICAgICAgICAgIGNvbnN0IGtleSA9IGF3YWl0IHBhaXIua2V5O1xuICAgICAgICAgIGNvbnN0IHZhbHVlID0gYXdhaXQgcGFpci52YWx1ZTtcbiAgICAgICAgICBpZiAoa2V5LnN0YXR1cyA9PT0gXCJhYm9ydGVkXCIgfHwgdmFsdWUuc3RhdHVzID09PSBcImFib3J0ZWRcIikge1xuICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ2O1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoa2V5LnN0YXR1cyA9PT0gXCJkaXJ0eVwiIHx8IHZhbHVlLnN0YXR1cyA9PT0gXCJkaXJ0eVwiKSB7XG4gICAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZmluYWxNYXAuc2V0KGtleS52YWx1ZSwgdmFsdWUudmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7c3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiBmaW5hbE1hcH07XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZmluYWxNYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICAgICAgZm9yIChjb25zdCBwYWlyIG9mIHBhaXJzKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IHBhaXIua2V5O1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHBhaXIudmFsdWU7XG4gICAgICAgIGlmIChrZXkuc3RhdHVzID09PSBcImFib3J0ZWRcIiB8fCB2YWx1ZS5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKSB7XG4gICAgICAgICAgcmV0dXJuIElOVkFMSUQ2O1xuICAgICAgICB9XG4gICAgICAgIGlmIChrZXkuc3RhdHVzID09PSBcImRpcnR5XCIgfHwgdmFsdWUuc3RhdHVzID09PSBcImRpcnR5XCIpIHtcbiAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbE1hcC5zZXQoa2V5LnZhbHVlLCB2YWx1ZS52YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4ge3N0YXR1czogc3RhdHVzLnZhbHVlLCB2YWx1ZTogZmluYWxNYXB9O1xuICAgIH1cbiAgfVxufTtcblpvZE1hcDMuY3JlYXRlID0gKGtleVR5cGUsIHZhbHVlVHlwZSwgcGFyYW1zKSA9PiB7XG4gIHJldHVybiBuZXcgWm9kTWFwMyh7XG4gICAgdmFsdWVUeXBlLFxuICAgIGtleVR5cGUsXG4gICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZDMuWm9kTWFwLFxuICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMzKHBhcmFtcylcbiAgfSk7XG59O1xudmFyIFpvZFNldDMgPSBjbGFzcyBleHRlbmRzIFpvZFR5cGUzIHtcbiAgX3BhcnNlKGlucHV0KSB7XG4gICAgY29uc3Qge3N0YXR1cywgY3R4fSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XG4gICAgaWYgKGN0eC5wYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlMy5zZXQpIHtcbiAgICAgIGFkZElzc3VlVG9Db250ZXh0MyhjdHgsIHtcbiAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlMy5pbnZhbGlkX3R5cGUsXG4gICAgICAgIGV4cGVjdGVkOiBab2RQYXJzZWRUeXBlMy5zZXQsXG4gICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gSU5WQUxJRDY7XG4gICAgfVxuICAgIGNvbnN0IGRlZiA9IHRoaXMuX2RlZjtcbiAgICBpZiAoZGVmLm1pblNpemUgIT09IG51bGwpIHtcbiAgICAgIGlmIChjdHguZGF0YS5zaXplIDwgZGVmLm1pblNpemUudmFsdWUpIHtcbiAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQzKGN0eCwge1xuICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZTMudG9vX3NtYWxsLFxuICAgICAgICAgIG1pbmltdW06IGRlZi5taW5TaXplLnZhbHVlLFxuICAgICAgICAgIHR5cGU6IFwic2V0XCIsXG4gICAgICAgICAgaW5jbHVzaXZlOiB0cnVlLFxuICAgICAgICAgIG1lc3NhZ2U6IGRlZi5taW5TaXplLm1lc3NhZ2VcbiAgICAgICAgfSk7XG4gICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZGVmLm1heFNpemUgIT09IG51bGwpIHtcbiAgICAgIGlmIChjdHguZGF0YS5zaXplID4gZGVmLm1heFNpemUudmFsdWUpIHtcbiAgICAgICAgYWRkSXNzdWVUb0NvbnRleHQzKGN0eCwge1xuICAgICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZTMudG9vX2JpZyxcbiAgICAgICAgICBtYXhpbXVtOiBkZWYubWF4U2l6ZS52YWx1ZSxcbiAgICAgICAgICB0eXBlOiBcInNldFwiLFxuICAgICAgICAgIGluY2x1c2l2ZTogdHJ1ZSxcbiAgICAgICAgICBtZXNzYWdlOiBkZWYubWF4U2l6ZS5tZXNzYWdlXG4gICAgICAgIH0pO1xuICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgdmFsdWVUeXBlID0gdGhpcy5fZGVmLnZhbHVlVHlwZTtcbiAgICBmdW5jdGlvbiBmaW5hbGl6ZVNldChlbGVtZW50czIpIHtcbiAgICAgIGNvbnN0IHBhcnNlZFNldCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgZWxlbWVudHMyKSB7XG4gICAgICAgIGlmIChlbGVtZW50LnN0YXR1cyA9PT0gXCJhYm9ydGVkXCIpXG4gICAgICAgICAgcmV0dXJuIElOVkFMSUQ2O1xuICAgICAgICBpZiAoZWxlbWVudC5zdGF0dXMgPT09IFwiZGlydHlcIilcbiAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgcGFyc2VkU2V0LmFkZChlbGVtZW50LnZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7c3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiBwYXJzZWRTZXR9O1xuICAgIH1cbiAgICBjb25zdCBlbGVtZW50cyA9IFsuLi5jdHguZGF0YS52YWx1ZXMoKV0ubWFwKChpdGVtLCBpKSA9PiB2YWx1ZVR5cGUuX3BhcnNlKG5ldyBQYXJzZUlucHV0TGF6eVBhdGgzKGN0eCwgaXRlbSwgY3R4LnBhdGgsIGkpKSk7XG4gICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLmFsbChlbGVtZW50cykudGhlbigoZWxlbWVudHMyKSA9PiBmaW5hbGl6ZVNldChlbGVtZW50czIpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZpbmFsaXplU2V0KGVsZW1lbnRzKTtcbiAgICB9XG4gIH1cbiAgbWluKG1pblNpemUsIG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gbmV3IFpvZFNldDMoe1xuICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgbWluU2l6ZToge3ZhbHVlOiBtaW5TaXplLCBtZXNzYWdlOiBlcnJvclV0aWwzLnRvU3RyaW5nKG1lc3NhZ2UpfVxuICAgIH0pO1xuICB9XG4gIG1heChtYXhTaXplLCBtZXNzYWdlKSB7XG4gICAgcmV0dXJuIG5ldyBab2RTZXQzKHtcbiAgICAgIC4uLnRoaXMuX2RlZixcbiAgICAgIG1heFNpemU6IHt2YWx1ZTogbWF4U2l6ZSwgbWVzc2FnZTogZXJyb3JVdGlsMy50b1N0cmluZyhtZXNzYWdlKX1cbiAgICB9KTtcbiAgfVxuICBzaXplKHNpemUsIG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5taW4oc2l6ZSwgbWVzc2FnZSkubWF4KHNpemUsIG1lc3NhZ2UpO1xuICB9XG4gIG5vbmVtcHR5KG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5taW4oMSwgbWVzc2FnZSk7XG4gIH1cbn07XG5ab2RTZXQzLmNyZWF0ZSA9ICh2YWx1ZVR5cGUsIHBhcmFtcykgPT4ge1xuICByZXR1cm4gbmV3IFpvZFNldDMoe1xuICAgIHZhbHVlVHlwZSxcbiAgICBtaW5TaXplOiBudWxsLFxuICAgIG1heFNpemU6IG51bGwsXG4gICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZDMuWm9kU2V0LFxuICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMzKHBhcmFtcylcbiAgfSk7XG59O1xudmFyIFpvZEZ1bmN0aW9uMyA9IGNsYXNzIGV4dGVuZHMgWm9kVHlwZTMge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgIHRoaXMudmFsaWRhdGUgPSB0aGlzLmltcGxlbWVudDtcbiAgfVxuICBfcGFyc2UoaW5wdXQpIHtcbiAgICBjb25zdCB7Y3R4fSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XG4gICAgaWYgKGN0eC5wYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlMy5mdW5jdGlvbikge1xuICAgICAgYWRkSXNzdWVUb0NvbnRleHQzKGN0eCwge1xuICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUzLmludmFsaWRfdHlwZSxcbiAgICAgICAgZXhwZWN0ZWQ6IFpvZFBhcnNlZFR5cGUzLmZ1bmN0aW9uLFxuICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIElOVkFMSUQ2O1xuICAgIH1cbiAgICBmdW5jdGlvbiBtYWtlQXJnc0lzc3VlKGFyZ3MsIGVycm9yKSB7XG4gICAgICByZXR1cm4gbWFrZUlzc3VlMyh7XG4gICAgICAgIGRhdGE6IGFyZ3MsXG4gICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICBlcnJvck1hcHM6IFtcbiAgICAgICAgICBjdHguY29tbW9uLmNvbnRleHR1YWxFcnJvck1hcCxcbiAgICAgICAgICBjdHguc2NoZW1hRXJyb3JNYXAsXG4gICAgICAgICAgb3ZlcnJpZGVFcnJvck1hcDMsXG4gICAgICAgICAgZGVmYXVsdEVycm9yTWFwM1xuICAgICAgICBdLmZpbHRlcigoeCkgPT4gISF4KSxcbiAgICAgICAgaXNzdWVEYXRhOiB7XG4gICAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlMy5pbnZhbGlkX2FyZ3VtZW50cyxcbiAgICAgICAgICBhcmd1bWVudHNFcnJvcjogZXJyb3JcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG1ha2VSZXR1cm5zSXNzdWUocmV0dXJucywgZXJyb3IpIHtcbiAgICAgIHJldHVybiBtYWtlSXNzdWUzKHtcbiAgICAgICAgZGF0YTogcmV0dXJucyxcbiAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgIGVycm9yTWFwczogW1xuICAgICAgICAgIGN0eC5jb21tb24uY29udGV4dHVhbEVycm9yTWFwLFxuICAgICAgICAgIGN0eC5zY2hlbWFFcnJvck1hcCxcbiAgICAgICAgICBvdmVycmlkZUVycm9yTWFwMyxcbiAgICAgICAgICBkZWZhdWx0RXJyb3JNYXAzXG4gICAgICAgIF0uZmlsdGVyKCh4KSA9PiAhIXgpLFxuICAgICAgICBpc3N1ZURhdGE6IHtcbiAgICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUzLmludmFsaWRfcmV0dXJuX3R5cGUsXG4gICAgICAgICAgcmV0dXJuVHlwZUVycm9yOiBlcnJvclxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgcGFyYW1zID0ge2Vycm9yTWFwOiBjdHguY29tbW9uLmNvbnRleHR1YWxFcnJvck1hcH07XG4gICAgY29uc3QgZm4gPSBjdHguZGF0YTtcbiAgICBpZiAodGhpcy5fZGVmLnJldHVybnMgaW5zdGFuY2VvZiBab2RQcm9taXNlMykge1xuICAgICAgcmV0dXJuIE9LMyhhc3luYyAoLi4uYXJncykgPT4ge1xuICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBab2RFcnJvcjMoW10pO1xuICAgICAgICBjb25zdCBwYXJzZWRBcmdzID0gYXdhaXQgdGhpcy5fZGVmLmFyZ3MucGFyc2VBc3luYyhhcmdzLCBwYXJhbXMpLmNhdGNoKChlKSA9PiB7XG4gICAgICAgICAgZXJyb3IuYWRkSXNzdWUobWFrZUFyZ3NJc3N1ZShhcmdzLCBlKSk7XG4gICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBmbiguLi5wYXJzZWRBcmdzKTtcbiAgICAgICAgY29uc3QgcGFyc2VkUmV0dXJucyA9IGF3YWl0IHRoaXMuX2RlZi5yZXR1cm5zLl9kZWYudHlwZS5wYXJzZUFzeW5jKHJlc3VsdCwgcGFyYW1zKS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICAgIGVycm9yLmFkZElzc3VlKG1ha2VSZXR1cm5zSXNzdWUocmVzdWx0LCBlKSk7XG4gICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcGFyc2VkUmV0dXJucztcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gT0szKCguLi5hcmdzKSA9PiB7XG4gICAgICAgIGNvbnN0IHBhcnNlZEFyZ3MgPSB0aGlzLl9kZWYuYXJncy5zYWZlUGFyc2UoYXJncywgcGFyYW1zKTtcbiAgICAgICAgaWYgKCFwYXJzZWRBcmdzLnN1Y2Nlc3MpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgWm9kRXJyb3IzKFttYWtlQXJnc0lzc3VlKGFyZ3MsIHBhcnNlZEFyZ3MuZXJyb3IpXSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gZm4oLi4ucGFyc2VkQXJncy5kYXRhKTtcbiAgICAgICAgY29uc3QgcGFyc2VkUmV0dXJucyA9IHRoaXMuX2RlZi5yZXR1cm5zLnNhZmVQYXJzZShyZXN1bHQsIHBhcmFtcyk7XG4gICAgICAgIGlmICghcGFyc2VkUmV0dXJucy5zdWNjZXNzKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFpvZEVycm9yMyhbbWFrZVJldHVybnNJc3N1ZShyZXN1bHQsIHBhcnNlZFJldHVybnMuZXJyb3IpXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhcnNlZFJldHVybnMuZGF0YTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBwYXJhbWV0ZXJzKCkge1xuICAgIHJldHVybiB0aGlzLl9kZWYuYXJncztcbiAgfVxuICByZXR1cm5UeXBlKCkge1xuICAgIHJldHVybiB0aGlzLl9kZWYucmV0dXJucztcbiAgfVxuICBhcmdzKC4uLml0ZW1zKSB7XG4gICAgcmV0dXJuIG5ldyBab2RGdW5jdGlvbjMoe1xuICAgICAgLi4udGhpcy5fZGVmLFxuICAgICAgYXJnczogWm9kVHVwbGUzLmNyZWF0ZShpdGVtcykucmVzdChab2RVbmtub3duMy5jcmVhdGUoKSlcbiAgICB9KTtcbiAgfVxuICByZXR1cm5zKHJldHVyblR5cGUpIHtcbiAgICByZXR1cm4gbmV3IFpvZEZ1bmN0aW9uMyh7XG4gICAgICAuLi50aGlzLl9kZWYsXG4gICAgICByZXR1cm5zOiByZXR1cm5UeXBlXG4gICAgfSk7XG4gIH1cbiAgaW1wbGVtZW50KGZ1bmMpIHtcbiAgICBjb25zdCB2YWxpZGF0ZWRGdW5jID0gdGhpcy5wYXJzZShmdW5jKTtcbiAgICByZXR1cm4gdmFsaWRhdGVkRnVuYztcbiAgfVxuICBzdHJpY3RJbXBsZW1lbnQoZnVuYykge1xuICAgIGNvbnN0IHZhbGlkYXRlZEZ1bmMgPSB0aGlzLnBhcnNlKGZ1bmMpO1xuICAgIHJldHVybiB2YWxpZGF0ZWRGdW5jO1xuICB9XG59O1xuWm9kRnVuY3Rpb24zLmNyZWF0ZSA9IChhcmdzLCByZXR1cm5zLCBwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2RGdW5jdGlvbjMoe1xuICAgIGFyZ3M6IGFyZ3MgPyBhcmdzLnJlc3QoWm9kVW5rbm93bjMuY3JlYXRlKCkpIDogWm9kVHVwbGUzLmNyZWF0ZShbXSkucmVzdChab2RVbmtub3duMy5jcmVhdGUoKSksXG4gICAgcmV0dXJuczogcmV0dXJucyB8fCBab2RVbmtub3duMy5jcmVhdGUoKSxcbiAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMy5ab2RGdW5jdGlvbixcbiAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zMyhwYXJhbXMpXG4gIH0pO1xufTtcbnZhciBab2RMYXp5MyA9IGNsYXNzIGV4dGVuZHMgWm9kVHlwZTMge1xuICBnZXQgc2NoZW1hKCkge1xuICAgIHJldHVybiB0aGlzLl9kZWYuZ2V0dGVyKCk7XG4gIH1cbiAgX3BhcnNlKGlucHV0KSB7XG4gICAgY29uc3Qge2N0eH0gPSB0aGlzLl9wcm9jZXNzSW5wdXRQYXJhbXMoaW5wdXQpO1xuICAgIGNvbnN0IGxhenlTY2hlbWEgPSB0aGlzLl9kZWYuZ2V0dGVyKCk7XG4gICAgcmV0dXJuIGxhenlTY2hlbWEuX3BhcnNlKHtkYXRhOiBjdHguZGF0YSwgcGF0aDogY3R4LnBhdGgsIHBhcmVudDogY3R4fSk7XG4gIH1cbn07XG5ab2RMYXp5My5jcmVhdGUgPSAoZ2V0dGVyLCBwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2RMYXp5Myh7XG4gICAgZ2V0dGVyLFxuICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQzLlpvZExhenksXG4gICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtczMocGFyYW1zKVxuICB9KTtcbn07XG52YXIgWm9kTGl0ZXJhbDMgPSBjbGFzcyBleHRlbmRzIFpvZFR5cGUzIHtcbiAgX3BhcnNlKGlucHV0KSB7XG4gICAgaWYgKGlucHV0LmRhdGEgIT09IHRoaXMuX2RlZi52YWx1ZSkge1xuICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgYWRkSXNzdWVUb0NvbnRleHQzKGN0eCwge1xuICAgICAgICBjb2RlOiBab2RJc3N1ZUNvZGUzLmludmFsaWRfbGl0ZXJhbCxcbiAgICAgICAgZXhwZWN0ZWQ6IHRoaXMuX2RlZi52YWx1ZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gSU5WQUxJRDY7XG4gICAgfVxuICAgIHJldHVybiB7c3RhdHVzOiBcInZhbGlkXCIsIHZhbHVlOiBpbnB1dC5kYXRhfTtcbiAgfVxuICBnZXQgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RlZi52YWx1ZTtcbiAgfVxufTtcblpvZExpdGVyYWwzLmNyZWF0ZSA9ICh2YWx1ZSwgcGFyYW1zKSA9PiB7XG4gIHJldHVybiBuZXcgWm9kTGl0ZXJhbDMoe1xuICAgIHZhbHVlLFxuICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQzLlpvZExpdGVyYWwsXG4gICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtczMocGFyYW1zKVxuICB9KTtcbn07XG5mdW5jdGlvbiBjcmVhdGVab2RFbnVtMyh2YWx1ZXMsIHBhcmFtcykge1xuICByZXR1cm4gbmV3IFpvZEVudW0zKHtcbiAgICB2YWx1ZXMsXG4gICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZDMuWm9kRW51bSxcbiAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zMyhwYXJhbXMpXG4gIH0pO1xufVxudmFyIFpvZEVudW0zID0gY2xhc3MgZXh0ZW5kcyBab2RUeXBlMyB7XG4gIF9wYXJzZShpbnB1dCkge1xuICAgIGlmICh0eXBlb2YgaW5wdXQuZGF0YSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgY29uc3QgZXhwZWN0ZWRWYWx1ZXMgPSB0aGlzLl9kZWYudmFsdWVzO1xuICAgICAgYWRkSXNzdWVUb0NvbnRleHQzKGN0eCwge1xuICAgICAgICBleHBlY3RlZDogdXRpbDMuam9pblZhbHVlcyhleHBlY3RlZFZhbHVlcyksXG4gICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZSxcbiAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlMy5pbnZhbGlkX3R5cGVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIElOVkFMSUQ2O1xuICAgIH1cbiAgICBpZiAodGhpcy5fZGVmLnZhbHVlcy5pbmRleE9mKGlucHV0LmRhdGEpID09PSAtMSkge1xuICAgICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgICAgY29uc3QgZXhwZWN0ZWRWYWx1ZXMgPSB0aGlzLl9kZWYudmFsdWVzO1xuICAgICAgYWRkSXNzdWVUb0NvbnRleHQzKGN0eCwge1xuICAgICAgICByZWNlaXZlZDogY3R4LmRhdGEsXG4gICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZTMuaW52YWxpZF9lbnVtX3ZhbHVlLFxuICAgICAgICBvcHRpb25zOiBleHBlY3RlZFZhbHVlc1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gSU5WQUxJRDY7XG4gICAgfVxuICAgIHJldHVybiBPSzMoaW5wdXQuZGF0YSk7XG4gIH1cbiAgZ2V0IG9wdGlvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RlZi52YWx1ZXM7XG4gIH1cbiAgZ2V0IGVudW0oKSB7XG4gICAgY29uc3QgZW51bVZhbHVlcyA9IHt9O1xuICAgIGZvciAoY29uc3QgdmFsIG9mIHRoaXMuX2RlZi52YWx1ZXMpIHtcbiAgICAgIGVudW1WYWx1ZXNbdmFsXSA9IHZhbDtcbiAgICB9XG4gICAgcmV0dXJuIGVudW1WYWx1ZXM7XG4gIH1cbiAgZ2V0IFZhbHVlcygpIHtcbiAgICBjb25zdCBlbnVtVmFsdWVzID0ge307XG4gICAgZm9yIChjb25zdCB2YWwgb2YgdGhpcy5fZGVmLnZhbHVlcykge1xuICAgICAgZW51bVZhbHVlc1t2YWxdID0gdmFsO1xuICAgIH1cbiAgICByZXR1cm4gZW51bVZhbHVlcztcbiAgfVxuICBnZXQgRW51bSgpIHtcbiAgICBjb25zdCBlbnVtVmFsdWVzID0ge307XG4gICAgZm9yIChjb25zdCB2YWwgb2YgdGhpcy5fZGVmLnZhbHVlcykge1xuICAgICAgZW51bVZhbHVlc1t2YWxdID0gdmFsO1xuICAgIH1cbiAgICByZXR1cm4gZW51bVZhbHVlcztcbiAgfVxufTtcblpvZEVudW0zLmNyZWF0ZSA9IGNyZWF0ZVpvZEVudW0zO1xudmFyIFpvZE5hdGl2ZUVudW0zID0gY2xhc3MgZXh0ZW5kcyBab2RUeXBlMyB7XG4gIF9wYXJzZShpbnB1dCkge1xuICAgIGNvbnN0IG5hdGl2ZUVudW1WYWx1ZXMgPSB1dGlsMy5nZXRWYWxpZEVudW1WYWx1ZXModGhpcy5fZGVmLnZhbHVlcyk7XG4gICAgY29uc3QgY3R4ID0gdGhpcy5fZ2V0T3JSZXR1cm5DdHgoaW5wdXQpO1xuICAgIGlmIChjdHgucGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZTMuc3RyaW5nICYmIGN0eC5wYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlMy5udW1iZXIpIHtcbiAgICAgIGNvbnN0IGV4cGVjdGVkVmFsdWVzID0gdXRpbDMub2JqZWN0VmFsdWVzKG5hdGl2ZUVudW1WYWx1ZXMpO1xuICAgICAgYWRkSXNzdWVUb0NvbnRleHQzKGN0eCwge1xuICAgICAgICBleHBlY3RlZDogdXRpbDMuam9pblZhbHVlcyhleHBlY3RlZFZhbHVlcyksXG4gICAgICAgIHJlY2VpdmVkOiBjdHgucGFyc2VkVHlwZSxcbiAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlMy5pbnZhbGlkX3R5cGVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIElOVkFMSUQ2O1xuICAgIH1cbiAgICBpZiAobmF0aXZlRW51bVZhbHVlcy5pbmRleE9mKGlucHV0LmRhdGEpID09PSAtMSkge1xuICAgICAgY29uc3QgZXhwZWN0ZWRWYWx1ZXMgPSB1dGlsMy5vYmplY3RWYWx1ZXMobmF0aXZlRW51bVZhbHVlcyk7XG4gICAgICBhZGRJc3N1ZVRvQ29udGV4dDMoY3R4LCB7XG4gICAgICAgIHJlY2VpdmVkOiBjdHguZGF0YSxcbiAgICAgICAgY29kZTogWm9kSXNzdWVDb2RlMy5pbnZhbGlkX2VudW1fdmFsdWUsXG4gICAgICAgIG9wdGlvbnM6IGV4cGVjdGVkVmFsdWVzXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBJTlZBTElENjtcbiAgICB9XG4gICAgcmV0dXJuIE9LMyhpbnB1dC5kYXRhKTtcbiAgfVxuICBnZXQgZW51bSgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGVmLnZhbHVlcztcbiAgfVxufTtcblpvZE5hdGl2ZUVudW0zLmNyZWF0ZSA9ICh2YWx1ZXMsIHBhcmFtcykgPT4ge1xuICByZXR1cm4gbmV3IFpvZE5hdGl2ZUVudW0zKHtcbiAgICB2YWx1ZXMsXG4gICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZDMuWm9kTmF0aXZlRW51bSxcbiAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zMyhwYXJhbXMpXG4gIH0pO1xufTtcbnZhciBab2RQcm9taXNlMyA9IGNsYXNzIGV4dGVuZHMgWm9kVHlwZTMge1xuICBfcGFyc2UoaW5wdXQpIHtcbiAgICBjb25zdCB7Y3R4fSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XG4gICAgaWYgKGN0eC5wYXJzZWRUeXBlICE9PSBab2RQYXJzZWRUeXBlMy5wcm9taXNlICYmIGN0eC5jb21tb24uYXN5bmMgPT09IGZhbHNlKSB7XG4gICAgICBhZGRJc3N1ZVRvQ29udGV4dDMoY3R4LCB7XG4gICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZTMuaW52YWxpZF90eXBlLFxuICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZTMucHJvbWlzZSxcbiAgICAgICAgcmVjZWl2ZWQ6IGN0eC5wYXJzZWRUeXBlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBJTlZBTElENjtcbiAgICB9XG4gICAgY29uc3QgcHJvbWlzaWZpZWQgPSBjdHgucGFyc2VkVHlwZSA9PT0gWm9kUGFyc2VkVHlwZTMucHJvbWlzZSA/IGN0eC5kYXRhIDogUHJvbWlzZS5yZXNvbHZlKGN0eC5kYXRhKTtcbiAgICByZXR1cm4gT0szKHByb21pc2lmaWVkLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgIHJldHVybiB0aGlzLl9kZWYudHlwZS5wYXJzZUFzeW5jKGRhdGEsIHtcbiAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgIGVycm9yTWFwOiBjdHguY29tbW9uLmNvbnRleHR1YWxFcnJvck1hcFxuICAgICAgfSk7XG4gICAgfSkpO1xuICB9XG59O1xuWm9kUHJvbWlzZTMuY3JlYXRlID0gKHNjaGVtYSwgcGFyYW1zKSA9PiB7XG4gIHJldHVybiBuZXcgWm9kUHJvbWlzZTMoe1xuICAgIHR5cGU6IHNjaGVtYSxcbiAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMy5ab2RQcm9taXNlLFxuICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMzKHBhcmFtcylcbiAgfSk7XG59O1xudmFyIFpvZEVmZmVjdHMzID0gY2xhc3MgZXh0ZW5kcyBab2RUeXBlMyB7XG4gIGlubmVyVHlwZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGVmLnNjaGVtYTtcbiAgfVxuICBfcGFyc2UoaW5wdXQpIHtcbiAgICBjb25zdCB7c3RhdHVzLCBjdHh9ID0gdGhpcy5fcHJvY2Vzc0lucHV0UGFyYW1zKGlucHV0KTtcbiAgICBjb25zdCBlZmZlY3QgPSB0aGlzLl9kZWYuZWZmZWN0IHx8IG51bGw7XG4gICAgaWYgKGVmZmVjdC50eXBlID09PSBcInByZXByb2Nlc3NcIikge1xuICAgICAgY29uc3QgcHJvY2Vzc2VkID0gZWZmZWN0LnRyYW5zZm9ybShjdHguZGF0YSk7XG4gICAgICBpZiAoY3R4LmNvbW1vbi5hc3luYykge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHByb2Nlc3NlZCkudGhlbigocHJvY2Vzc2VkMikgPT4ge1xuICAgICAgICAgIHJldHVybiB0aGlzLl9kZWYuc2NoZW1hLl9wYXJzZUFzeW5jKHtcbiAgICAgICAgICAgIGRhdGE6IHByb2Nlc3NlZDIsXG4gICAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgICAgIHBhcmVudDogY3R4XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5zY2hlbWEuX3BhcnNlU3luYyh7XG4gICAgICAgICAgZGF0YTogcHJvY2Vzc2VkLFxuICAgICAgICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgICAgICAgIHBhcmVudDogY3R4XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBjaGVja0N0eCA9IHtcbiAgICAgIGFkZElzc3VlOiAoYXJnKSA9PiB7XG4gICAgICAgIGFkZElzc3VlVG9Db250ZXh0MyhjdHgsIGFyZyk7XG4gICAgICAgIGlmIChhcmcuZmF0YWwpIHtcbiAgICAgICAgICBzdGF0dXMuYWJvcnQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdGF0dXMuZGlydHkoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGdldCBwYXRoKCkge1xuICAgICAgICByZXR1cm4gY3R4LnBhdGg7XG4gICAgICB9XG4gICAgfTtcbiAgICBjaGVja0N0eC5hZGRJc3N1ZSA9IGNoZWNrQ3R4LmFkZElzc3VlLmJpbmQoY2hlY2tDdHgpO1xuICAgIGlmIChlZmZlY3QudHlwZSA9PT0gXCJyZWZpbmVtZW50XCIpIHtcbiAgICAgIGNvbnN0IGV4ZWN1dGVSZWZpbmVtZW50ID0gKGFjYykgPT4ge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBlZmZlY3QucmVmaW5lbWVudChhY2MsIGNoZWNrQ3R4KTtcbiAgICAgICAgaWYgKGN0eC5jb21tb24uYXN5bmMpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBc3luYyByZWZpbmVtZW50IGVuY291bnRlcmVkIGR1cmluZyBzeW5jaHJvbm91cyBwYXJzZSBvcGVyYXRpb24uIFVzZSAucGFyc2VBc3luYyBpbnN0ZWFkLlwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfTtcbiAgICAgIGlmIChjdHguY29tbW9uLmFzeW5jID09PSBmYWxzZSkge1xuICAgICAgICBjb25zdCBpbm5lciA9IHRoaXMuX2RlZi5zY2hlbWEuX3BhcnNlU3luYyh7XG4gICAgICAgICAgZGF0YTogY3R4LmRhdGEsXG4gICAgICAgICAgcGF0aDogY3R4LnBhdGgsXG4gICAgICAgICAgcGFyZW50OiBjdHhcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChpbm5lci5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKVxuICAgICAgICAgIHJldHVybiBJTlZBTElENjtcbiAgICAgICAgaWYgKGlubmVyLnN0YXR1cyA9PT0gXCJkaXJ0eVwiKVxuICAgICAgICAgIHN0YXR1cy5kaXJ0eSgpO1xuICAgICAgICBleGVjdXRlUmVmaW5lbWVudChpbm5lci52YWx1ZSk7XG4gICAgICAgIHJldHVybiB7c3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiBpbm5lci52YWx1ZX07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmLnNjaGVtYS5fcGFyc2VBc3luYyh7ZGF0YTogY3R4LmRhdGEsIHBhdGg6IGN0eC5wYXRoLCBwYXJlbnQ6IGN0eH0pLnRoZW4oKGlubmVyKSA9PiB7XG4gICAgICAgICAgaWYgKGlubmVyLnN0YXR1cyA9PT0gXCJhYm9ydGVkXCIpXG4gICAgICAgICAgICByZXR1cm4gSU5WQUxJRDY7XG4gICAgICAgICAgaWYgKGlubmVyLnN0YXR1cyA9PT0gXCJkaXJ0eVwiKVxuICAgICAgICAgICAgc3RhdHVzLmRpcnR5KCk7XG4gICAgICAgICAgcmV0dXJuIGV4ZWN1dGVSZWZpbmVtZW50KGlubmVyLnZhbHVlKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7c3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiBpbm5lci52YWx1ZX07XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZWZmZWN0LnR5cGUgPT09IFwidHJhbnNmb3JtXCIpIHtcbiAgICAgIGlmIChjdHguY29tbW9uLmFzeW5jID09PSBmYWxzZSkge1xuICAgICAgICBjb25zdCBiYXNlID0gdGhpcy5fZGVmLnNjaGVtYS5fcGFyc2VTeW5jKHtcbiAgICAgICAgICBkYXRhOiBjdHguZGF0YSxcbiAgICAgICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgICAgICBwYXJlbnQ6IGN0eFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFpc1ZhbGlkMyhiYXNlKSlcbiAgICAgICAgICByZXR1cm4gYmFzZTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gZWZmZWN0LnRyYW5zZm9ybShiYXNlLnZhbHVlLCBjaGVja0N0eCk7XG4gICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBBc3luY2hyb25vdXMgdHJhbnNmb3JtIGVuY291bnRlcmVkIGR1cmluZyBzeW5jaHJvbm91cyBwYXJzZSBvcGVyYXRpb24uIFVzZSAucGFyc2VBc3luYyBpbnN0ZWFkLmApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7c3RhdHVzOiBzdGF0dXMudmFsdWUsIHZhbHVlOiByZXN1bHR9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZi5zY2hlbWEuX3BhcnNlQXN5bmMoe2RhdGE6IGN0eC5kYXRhLCBwYXRoOiBjdHgucGF0aCwgcGFyZW50OiBjdHh9KS50aGVuKChiYXNlKSA9PiB7XG4gICAgICAgICAgaWYgKCFpc1ZhbGlkMyhiYXNlKSlcbiAgICAgICAgICAgIHJldHVybiBiYXNlO1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZWZmZWN0LnRyYW5zZm9ybShiYXNlLnZhbHVlLCBjaGVja0N0eCkpLnRoZW4oKHJlc3VsdCkgPT4gKHtzdGF0dXM6IHN0YXR1cy52YWx1ZSwgdmFsdWU6IHJlc3VsdH0pKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIHV0aWwzLmFzc2VydE5ldmVyKGVmZmVjdCk7XG4gIH1cbn07XG5ab2RFZmZlY3RzMy5jcmVhdGUgPSAoc2NoZW1hLCBlZmZlY3QsIHBhcmFtcykgPT4ge1xuICByZXR1cm4gbmV3IFpvZEVmZmVjdHMzKHtcbiAgICBzY2hlbWEsXG4gICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZDMuWm9kRWZmZWN0cyxcbiAgICBlZmZlY3QsXG4gICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtczMocGFyYW1zKVxuICB9KTtcbn07XG5ab2RFZmZlY3RzMy5jcmVhdGVXaXRoUHJlcHJvY2VzcyA9IChwcmVwcm9jZXNzLCBzY2hlbWEsIHBhcmFtcykgPT4ge1xuICByZXR1cm4gbmV3IFpvZEVmZmVjdHMzKHtcbiAgICBzY2hlbWEsXG4gICAgZWZmZWN0OiB7dHlwZTogXCJwcmVwcm9jZXNzXCIsIHRyYW5zZm9ybTogcHJlcHJvY2Vzc30sXG4gICAgdHlwZU5hbWU6IFpvZEZpcnN0UGFydHlUeXBlS2luZDMuWm9kRWZmZWN0cyxcbiAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zMyhwYXJhbXMpXG4gIH0pO1xufTtcbnZhciBab2RPcHRpb25hbDMgPSBjbGFzcyBleHRlbmRzIFpvZFR5cGUzIHtcbiAgX3BhcnNlKGlucHV0KSB7XG4gICAgY29uc3QgcGFyc2VkVHlwZSA9IHRoaXMuX2dldFR5cGUoaW5wdXQpO1xuICAgIGlmIChwYXJzZWRUeXBlID09PSBab2RQYXJzZWRUeXBlMy51bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBPSzModm9pZCAwKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2RlZi5pbm5lclR5cGUuX3BhcnNlKGlucHV0KTtcbiAgfVxuICB1bndyYXAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RlZi5pbm5lclR5cGU7XG4gIH1cbn07XG5ab2RPcHRpb25hbDMuY3JlYXRlID0gKHR5cGUsIHBhcmFtcykgPT4ge1xuICByZXR1cm4gbmV3IFpvZE9wdGlvbmFsMyh7XG4gICAgaW5uZXJUeXBlOiB0eXBlLFxuICAgIHR5cGVOYW1lOiBab2RGaXJzdFBhcnR5VHlwZUtpbmQzLlpvZE9wdGlvbmFsLFxuICAgIC4uLnByb2Nlc3NDcmVhdGVQYXJhbXMzKHBhcmFtcylcbiAgfSk7XG59O1xudmFyIFpvZE51bGxhYmxlMyA9IGNsYXNzIGV4dGVuZHMgWm9kVHlwZTMge1xuICBfcGFyc2UoaW5wdXQpIHtcbiAgICBjb25zdCBwYXJzZWRUeXBlID0gdGhpcy5fZ2V0VHlwZShpbnB1dCk7XG4gICAgaWYgKHBhcnNlZFR5cGUgPT09IFpvZFBhcnNlZFR5cGUzLm51bGwpIHtcbiAgICAgIHJldHVybiBPSzMobnVsbCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9kZWYuaW5uZXJUeXBlLl9wYXJzZShpbnB1dCk7XG4gIH1cbiAgdW53cmFwKCkge1xuICAgIHJldHVybiB0aGlzLl9kZWYuaW5uZXJUeXBlO1xuICB9XG59O1xuWm9kTnVsbGFibGUzLmNyZWF0ZSA9ICh0eXBlLCBwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2ROdWxsYWJsZTMoe1xuICAgIGlubmVyVHlwZTogdHlwZSxcbiAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMy5ab2ROdWxsYWJsZSxcbiAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zMyhwYXJhbXMpXG4gIH0pO1xufTtcbnZhciBab2REZWZhdWx0MyA9IGNsYXNzIGV4dGVuZHMgWm9kVHlwZTMge1xuICBfcGFyc2UoaW5wdXQpIHtcbiAgICBjb25zdCB7Y3R4fSA9IHRoaXMuX3Byb2Nlc3NJbnB1dFBhcmFtcyhpbnB1dCk7XG4gICAgbGV0IGRhdGEgPSBjdHguZGF0YTtcbiAgICBpZiAoY3R4LnBhcnNlZFR5cGUgPT09IFpvZFBhcnNlZFR5cGUzLnVuZGVmaW5lZCkge1xuICAgICAgZGF0YSA9IHRoaXMuX2RlZi5kZWZhdWx0VmFsdWUoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2RlZi5pbm5lclR5cGUuX3BhcnNlKHtcbiAgICAgIGRhdGEsXG4gICAgICBwYXRoOiBjdHgucGF0aCxcbiAgICAgIHBhcmVudDogY3R4XG4gICAgfSk7XG4gIH1cbiAgcmVtb3ZlRGVmYXVsdCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGVmLmlubmVyVHlwZTtcbiAgfVxufTtcblpvZERlZmF1bHQzLmNyZWF0ZSA9ICh0eXBlLCBwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2RPcHRpb25hbDMoe1xuICAgIGlubmVyVHlwZTogdHlwZSxcbiAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMy5ab2RPcHRpb25hbCxcbiAgICAuLi5wcm9jZXNzQ3JlYXRlUGFyYW1zMyhwYXJhbXMpXG4gIH0pO1xufTtcbnZhciBab2ROYU4zID0gY2xhc3MgZXh0ZW5kcyBab2RUeXBlMyB7XG4gIF9wYXJzZShpbnB1dCkge1xuICAgIGNvbnN0IHBhcnNlZFR5cGUgPSB0aGlzLl9nZXRUeXBlKGlucHV0KTtcbiAgICBpZiAocGFyc2VkVHlwZSAhPT0gWm9kUGFyc2VkVHlwZTMubmFuKSB7XG4gICAgICBjb25zdCBjdHggPSB0aGlzLl9nZXRPclJldHVybkN0eChpbnB1dCk7XG4gICAgICBhZGRJc3N1ZVRvQ29udGV4dDMoY3R4LCB7XG4gICAgICAgIGNvZGU6IFpvZElzc3VlQ29kZTMuaW52YWxpZF90eXBlLFxuICAgICAgICBleHBlY3RlZDogWm9kUGFyc2VkVHlwZTMubmFuLFxuICAgICAgICByZWNlaXZlZDogY3R4LnBhcnNlZFR5cGVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIElOVkFMSUQ2O1xuICAgIH1cbiAgICByZXR1cm4ge3N0YXR1czogXCJ2YWxpZFwiLCB2YWx1ZTogaW5wdXQuZGF0YX07XG4gIH1cbn07XG5ab2ROYU4zLmNyZWF0ZSA9IChwYXJhbXMpID0+IHtcbiAgcmV0dXJuIG5ldyBab2ROYU4zKHtcbiAgICB0eXBlTmFtZTogWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMy5ab2ROYU4sXG4gICAgLi4ucHJvY2Vzc0NyZWF0ZVBhcmFtczMocGFyYW1zKVxuICB9KTtcbn07XG52YXIgY3VzdG9tMyA9IChjaGVjaywgcGFyYW1zID0ge30sIGZhdGFsKSA9PiB7XG4gIGlmIChjaGVjaylcbiAgICByZXR1cm4gWm9kQW55My5jcmVhdGUoKS5zdXBlclJlZmluZSgoZGF0YSwgY3R4KSA9PiB7XG4gICAgICBpZiAoIWNoZWNrKGRhdGEpKSB7XG4gICAgICAgIGNvbnN0IHAgPSB0eXBlb2YgcGFyYW1zID09PSBcImZ1bmN0aW9uXCIgPyBwYXJhbXMoZGF0YSkgOiBwYXJhbXM7XG4gICAgICAgIGNvbnN0IHAyID0gdHlwZW9mIHAgPT09IFwic3RyaW5nXCIgPyB7bWVzc2FnZTogcH0gOiBwO1xuICAgICAgICBjdHguYWRkSXNzdWUoe2NvZGU6IFwiY3VzdG9tXCIsIC4uLnAyLCBmYXRhbH0pO1xuICAgICAgfVxuICAgIH0pO1xuICByZXR1cm4gWm9kQW55My5jcmVhdGUoKTtcbn07XG52YXIgbGF0ZTMgPSB7XG4gIG9iamVjdDogWm9kT2JqZWN0My5sYXp5Y3JlYXRlXG59O1xudmFyIFpvZEZpcnN0UGFydHlUeXBlS2luZDM7XG4oZnVuY3Rpb24oWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMjIpIHtcbiAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMjJbXCJab2RTdHJpbmdcIl0gPSBcIlpvZFN0cmluZ1wiO1xuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQyMltcIlpvZE51bWJlclwiXSA9IFwiWm9kTnVtYmVyXCI7XG4gIFpvZEZpcnN0UGFydHlUeXBlS2luZDIyW1wiWm9kTmFOXCJdID0gXCJab2ROYU5cIjtcbiAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMjJbXCJab2RCaWdJbnRcIl0gPSBcIlpvZEJpZ0ludFwiO1xuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQyMltcIlpvZEJvb2xlYW5cIl0gPSBcIlpvZEJvb2xlYW5cIjtcbiAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMjJbXCJab2REYXRlXCJdID0gXCJab2REYXRlXCI7XG4gIFpvZEZpcnN0UGFydHlUeXBlS2luZDIyW1wiWm9kVW5kZWZpbmVkXCJdID0gXCJab2RVbmRlZmluZWRcIjtcbiAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMjJbXCJab2ROdWxsXCJdID0gXCJab2ROdWxsXCI7XG4gIFpvZEZpcnN0UGFydHlUeXBlS2luZDIyW1wiWm9kQW55XCJdID0gXCJab2RBbnlcIjtcbiAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMjJbXCJab2RVbmtub3duXCJdID0gXCJab2RVbmtub3duXCI7XG4gIFpvZEZpcnN0UGFydHlUeXBlS2luZDIyW1wiWm9kTmV2ZXJcIl0gPSBcIlpvZE5ldmVyXCI7XG4gIFpvZEZpcnN0UGFydHlUeXBlS2luZDIyW1wiWm9kVm9pZFwiXSA9IFwiWm9kVm9pZFwiO1xuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQyMltcIlpvZEFycmF5XCJdID0gXCJab2RBcnJheVwiO1xuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQyMltcIlpvZE9iamVjdFwiXSA9IFwiWm9kT2JqZWN0XCI7XG4gIFpvZEZpcnN0UGFydHlUeXBlS2luZDIyW1wiWm9kVW5pb25cIl0gPSBcIlpvZFVuaW9uXCI7XG4gIFpvZEZpcnN0UGFydHlUeXBlS2luZDIyW1wiWm9kRGlzY3JpbWluYXRlZFVuaW9uXCJdID0gXCJab2REaXNjcmltaW5hdGVkVW5pb25cIjtcbiAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMjJbXCJab2RJbnRlcnNlY3Rpb25cIl0gPSBcIlpvZEludGVyc2VjdGlvblwiO1xuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQyMltcIlpvZFR1cGxlXCJdID0gXCJab2RUdXBsZVwiO1xuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQyMltcIlpvZFJlY29yZFwiXSA9IFwiWm9kUmVjb3JkXCI7XG4gIFpvZEZpcnN0UGFydHlUeXBlS2luZDIyW1wiWm9kTWFwXCJdID0gXCJab2RNYXBcIjtcbiAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMjJbXCJab2RTZXRcIl0gPSBcIlpvZFNldFwiO1xuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQyMltcIlpvZEZ1bmN0aW9uXCJdID0gXCJab2RGdW5jdGlvblwiO1xuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQyMltcIlpvZExhenlcIl0gPSBcIlpvZExhenlcIjtcbiAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMjJbXCJab2RMaXRlcmFsXCJdID0gXCJab2RMaXRlcmFsXCI7XG4gIFpvZEZpcnN0UGFydHlUeXBlS2luZDIyW1wiWm9kRW51bVwiXSA9IFwiWm9kRW51bVwiO1xuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQyMltcIlpvZEVmZmVjdHNcIl0gPSBcIlpvZEVmZmVjdHNcIjtcbiAgWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMjJbXCJab2ROYXRpdmVFbnVtXCJdID0gXCJab2ROYXRpdmVFbnVtXCI7XG4gIFpvZEZpcnN0UGFydHlUeXBlS2luZDIyW1wiWm9kT3B0aW9uYWxcIl0gPSBcIlpvZE9wdGlvbmFsXCI7XG4gIFpvZEZpcnN0UGFydHlUeXBlS2luZDIyW1wiWm9kTnVsbGFibGVcIl0gPSBcIlpvZE51bGxhYmxlXCI7XG4gIFpvZEZpcnN0UGFydHlUeXBlS2luZDIyW1wiWm9kRGVmYXVsdFwiXSA9IFwiWm9kRGVmYXVsdFwiO1xuICBab2RGaXJzdFBhcnR5VHlwZUtpbmQyMltcIlpvZFByb21pc2VcIl0gPSBcIlpvZFByb21pc2VcIjtcbn0pKFpvZEZpcnN0UGFydHlUeXBlS2luZDMgfHwgKFpvZEZpcnN0UGFydHlUeXBlS2luZDMgPSB7fSkpO1xudmFyIGluc3RhbmNlT2ZUeXBlMyA9IChjbHMsIHBhcmFtcyA9IHtcbiAgbWVzc2FnZTogYElucHV0IG5vdCBpbnN0YW5jZSBvZiAke2Nscy5uYW1lfWBcbn0pID0+IGN1c3RvbTMoKGRhdGEpID0+IGRhdGEgaW5zdGFuY2VvZiBjbHMsIHBhcmFtcywgdHJ1ZSk7XG52YXIgc3RyaW5nVHlwZTMgPSBab2RTdHJpbmczLmNyZWF0ZTtcbnZhciBudW1iZXJUeXBlMyA9IFpvZE51bWJlcjMuY3JlYXRlO1xudmFyIG5hblR5cGUzID0gWm9kTmFOMy5jcmVhdGU7XG52YXIgYmlnSW50VHlwZTMgPSBab2RCaWdJbnQzLmNyZWF0ZTtcbnZhciBib29sZWFuVHlwZTMgPSBab2RCb29sZWFuMy5jcmVhdGU7XG52YXIgZGF0ZVR5cGUzID0gWm9kRGF0ZTMuY3JlYXRlO1xudmFyIHVuZGVmaW5lZFR5cGUzID0gWm9kVW5kZWZpbmVkMy5jcmVhdGU7XG52YXIgbnVsbFR5cGUzID0gWm9kTnVsbDMuY3JlYXRlO1xudmFyIGFueVR5cGUzID0gWm9kQW55My5jcmVhdGU7XG52YXIgdW5rbm93blR5cGUzID0gWm9kVW5rbm93bjMuY3JlYXRlO1xudmFyIG5ldmVyVHlwZTMgPSBab2ROZXZlcjMuY3JlYXRlO1xudmFyIHZvaWRUeXBlMyA9IFpvZFZvaWQzLmNyZWF0ZTtcbnZhciBhcnJheVR5cGUzID0gWm9kQXJyYXkzLmNyZWF0ZTtcbnZhciBvYmplY3RUeXBlMyA9IFpvZE9iamVjdDMuY3JlYXRlO1xudmFyIHN0cmljdE9iamVjdFR5cGUzID0gWm9kT2JqZWN0My5zdHJpY3RDcmVhdGU7XG52YXIgdW5pb25UeXBlMyA9IFpvZFVuaW9uMy5jcmVhdGU7XG52YXIgZGlzY3JpbWluYXRlZFVuaW9uVHlwZTMgPSBab2REaXNjcmltaW5hdGVkVW5pb24zLmNyZWF0ZTtcbnZhciBpbnRlcnNlY3Rpb25UeXBlMyA9IFpvZEludGVyc2VjdGlvbjMuY3JlYXRlO1xudmFyIHR1cGxlVHlwZTMgPSBab2RUdXBsZTMuY3JlYXRlO1xudmFyIHJlY29yZFR5cGUzID0gWm9kUmVjb3JkMy5jcmVhdGU7XG52YXIgbWFwVHlwZTMgPSBab2RNYXAzLmNyZWF0ZTtcbnZhciBzZXRUeXBlMyA9IFpvZFNldDMuY3JlYXRlO1xudmFyIGZ1bmN0aW9uVHlwZTMgPSBab2RGdW5jdGlvbjMuY3JlYXRlO1xudmFyIGxhenlUeXBlMyA9IFpvZExhenkzLmNyZWF0ZTtcbnZhciBsaXRlcmFsVHlwZTMgPSBab2RMaXRlcmFsMy5jcmVhdGU7XG52YXIgZW51bVR5cGUzID0gWm9kRW51bTMuY3JlYXRlO1xudmFyIG5hdGl2ZUVudW1UeXBlMyA9IFpvZE5hdGl2ZUVudW0zLmNyZWF0ZTtcbnZhciBwcm9taXNlVHlwZTMgPSBab2RQcm9taXNlMy5jcmVhdGU7XG52YXIgZWZmZWN0c1R5cGUzID0gWm9kRWZmZWN0czMuY3JlYXRlO1xudmFyIG9wdGlvbmFsVHlwZTMgPSBab2RPcHRpb25hbDMuY3JlYXRlO1xudmFyIG51bGxhYmxlVHlwZTMgPSBab2ROdWxsYWJsZTMuY3JlYXRlO1xudmFyIHByZXByb2Nlc3NUeXBlMyA9IFpvZEVmZmVjdHMzLmNyZWF0ZVdpdGhQcmVwcm9jZXNzO1xudmFyIG9zdHJpbmczID0gKCkgPT4gc3RyaW5nVHlwZTMoKS5vcHRpb25hbCgpO1xudmFyIG9udW1iZXIzID0gKCkgPT4gbnVtYmVyVHlwZTMoKS5vcHRpb25hbCgpO1xudmFyIG9ib29sZWFuMyA9ICgpID0+IGJvb2xlYW5UeXBlMygpLm9wdGlvbmFsKCk7XG52YXIgbW9kMyA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuZnJlZXplKHtcbiAgX19wcm90b19fOiBudWxsLFxuICBnZXRQYXJzZWRUeXBlOiBnZXRQYXJzZWRUeXBlMyxcbiAgWm9kUGFyc2VkVHlwZTogWm9kUGFyc2VkVHlwZTMsXG4gIG1ha2VJc3N1ZTogbWFrZUlzc3VlMyxcbiAgRU1QVFlfUEFUSDogRU1QVFlfUEFUSDMsXG4gIGFkZElzc3VlVG9Db250ZXh0OiBhZGRJc3N1ZVRvQ29udGV4dDMsXG4gIFBhcnNlU3RhdHVzOiBQYXJzZVN0YXR1czMsXG4gIElOVkFMSUQ6IElOVkFMSUQ2LFxuICBESVJUWTogRElSVFkzLFxuICBPSzogT0szLFxuICBpc0Fib3J0ZWQ6IGlzQWJvcnRlZDMsXG4gIGlzRGlydHk6IGlzRGlydHkzLFxuICBpc1ZhbGlkOiBpc1ZhbGlkMyxcbiAgaXNBc3luYzogaXNBc3luYzMsXG4gIFpvZFR5cGU6IFpvZFR5cGUzLFxuICBab2RTdHJpbmc6IFpvZFN0cmluZzMsXG4gIFpvZE51bWJlcjogWm9kTnVtYmVyMyxcbiAgWm9kQmlnSW50OiBab2RCaWdJbnQzLFxuICBab2RCb29sZWFuOiBab2RCb29sZWFuMyxcbiAgWm9kRGF0ZTogWm9kRGF0ZTMsXG4gIFpvZFVuZGVmaW5lZDogWm9kVW5kZWZpbmVkMyxcbiAgWm9kTnVsbDogWm9kTnVsbDMsXG4gIFpvZEFueTogWm9kQW55MyxcbiAgWm9kVW5rbm93bjogWm9kVW5rbm93bjMsXG4gIFpvZE5ldmVyOiBab2ROZXZlcjMsXG4gIFpvZFZvaWQ6IFpvZFZvaWQzLFxuICBab2RBcnJheTogWm9kQXJyYXkzLFxuICBnZXQgb2JqZWN0VXRpbCgpIHtcbiAgICByZXR1cm4gb2JqZWN0VXRpbDM7XG4gIH0sXG4gIFpvZE9iamVjdDogWm9kT2JqZWN0MyxcbiAgWm9kVW5pb246IFpvZFVuaW9uMyxcbiAgWm9kRGlzY3JpbWluYXRlZFVuaW9uOiBab2REaXNjcmltaW5hdGVkVW5pb24zLFxuICBab2RJbnRlcnNlY3Rpb246IFpvZEludGVyc2VjdGlvbjMsXG4gIFpvZFR1cGxlOiBab2RUdXBsZTMsXG4gIFpvZFJlY29yZDogWm9kUmVjb3JkMyxcbiAgWm9kTWFwOiBab2RNYXAzLFxuICBab2RTZXQ6IFpvZFNldDMsXG4gIFpvZEZ1bmN0aW9uOiBab2RGdW5jdGlvbjMsXG4gIFpvZExhenk6IFpvZExhenkzLFxuICBab2RMaXRlcmFsOiBab2RMaXRlcmFsMyxcbiAgWm9kRW51bTogWm9kRW51bTMsXG4gIFpvZE5hdGl2ZUVudW06IFpvZE5hdGl2ZUVudW0zLFxuICBab2RQcm9taXNlOiBab2RQcm9taXNlMyxcbiAgWm9kRWZmZWN0czogWm9kRWZmZWN0czMsXG4gIFpvZFRyYW5zZm9ybWVyOiBab2RFZmZlY3RzMyxcbiAgWm9kT3B0aW9uYWw6IFpvZE9wdGlvbmFsMyxcbiAgWm9kTnVsbGFibGU6IFpvZE51bGxhYmxlMyxcbiAgWm9kRGVmYXVsdDogWm9kRGVmYXVsdDMsXG4gIFpvZE5hTjogWm9kTmFOMyxcbiAgY3VzdG9tOiBjdXN0b20zLFxuICBTY2hlbWE6IFpvZFR5cGUzLFxuICBab2RTY2hlbWE6IFpvZFR5cGUzLFxuICBsYXRlOiBsYXRlMyxcbiAgZ2V0IFpvZEZpcnN0UGFydHlUeXBlS2luZCgpIHtcbiAgICByZXR1cm4gWm9kRmlyc3RQYXJ0eVR5cGVLaW5kMztcbiAgfSxcbiAgYW55OiBhbnlUeXBlMyxcbiAgYXJyYXk6IGFycmF5VHlwZTMsXG4gIGJpZ2ludDogYmlnSW50VHlwZTMsXG4gIGJvb2xlYW46IGJvb2xlYW5UeXBlMyxcbiAgZGF0ZTogZGF0ZVR5cGUzLFxuICBkaXNjcmltaW5hdGVkVW5pb246IGRpc2NyaW1pbmF0ZWRVbmlvblR5cGUzLFxuICBlZmZlY3Q6IGVmZmVjdHNUeXBlMyxcbiAgZW51bTogZW51bVR5cGUzLFxuICBmdW5jdGlvbjogZnVuY3Rpb25UeXBlMyxcbiAgaW5zdGFuY2VvZjogaW5zdGFuY2VPZlR5cGUzLFxuICBpbnRlcnNlY3Rpb246IGludGVyc2VjdGlvblR5cGUzLFxuICBsYXp5OiBsYXp5VHlwZTMsXG4gIGxpdGVyYWw6IGxpdGVyYWxUeXBlMyxcbiAgbWFwOiBtYXBUeXBlMyxcbiAgbmFuOiBuYW5UeXBlMyxcbiAgbmF0aXZlRW51bTogbmF0aXZlRW51bVR5cGUzLFxuICBuZXZlcjogbmV2ZXJUeXBlMyxcbiAgbnVsbDogbnVsbFR5cGUzLFxuICBudWxsYWJsZTogbnVsbGFibGVUeXBlMyxcbiAgbnVtYmVyOiBudW1iZXJUeXBlMyxcbiAgb2JqZWN0OiBvYmplY3RUeXBlMyxcbiAgb2Jvb2xlYW46IG9ib29sZWFuMyxcbiAgb251bWJlcjogb251bWJlcjMsXG4gIG9wdGlvbmFsOiBvcHRpb25hbFR5cGUzLFxuICBvc3RyaW5nOiBvc3RyaW5nMyxcbiAgcHJlcHJvY2VzczogcHJlcHJvY2Vzc1R5cGUzLFxuICBwcm9taXNlOiBwcm9taXNlVHlwZTMsXG4gIHJlY29yZDogcmVjb3JkVHlwZTMsXG4gIHNldDogc2V0VHlwZTMsXG4gIHN0cmljdE9iamVjdDogc3RyaWN0T2JqZWN0VHlwZTMsXG4gIHN0cmluZzogc3RyaW5nVHlwZTMsXG4gIHRyYW5zZm9ybWVyOiBlZmZlY3RzVHlwZTMsXG4gIHR1cGxlOiB0dXBsZVR5cGUzLFxuICB1bmRlZmluZWQ6IHVuZGVmaW5lZFR5cGUzLFxuICB1bmlvbjogdW5pb25UeXBlMyxcbiAgdW5rbm93bjogdW5rbm93blR5cGUzLFxuICB2b2lkOiB2b2lkVHlwZTMsXG4gIFpvZElzc3VlQ29kZTogWm9kSXNzdWVDb2RlMyxcbiAgcXVvdGVsZXNzSnNvbjogcXVvdGVsZXNzSnNvbjMsXG4gIFpvZEVycm9yOiBab2RFcnJvcjMsXG4gIGRlZmF1bHRFcnJvck1hcDogZGVmYXVsdEVycm9yTWFwMyxcbiAgZ2V0IG92ZXJyaWRlRXJyb3JNYXAoKSB7XG4gICAgcmV0dXJuIG92ZXJyaWRlRXJyb3JNYXAzO1xuICB9LFxuICBzZXRFcnJvck1hcDogc2V0RXJyb3JNYXAzXG59KTtcbnZhciBMRUFGX05PREVfUFJFRklYID0gbmV3IFVpbnQ4QXJyYXkoWzBdKTtcbnZhciBJTk5FUl9OT0RFX1BSRUZJWCA9IG5ldyBVaW50OEFycmF5KFsxXSk7XG52YXIgSEFTSF9GVU5DVElPTl9OQU1FUyA9IFtcbiAgXCJzaGEyMjRcIixcbiAgXCJzaGEyNTZcIixcbiAgXCJzaGEzODRcIixcbiAgXCJzaGE1MTJcIixcbiAgXCJzaGE1MTJfMjU2XCIsXG4gIFwic2hhM18yMjRcIixcbiAgXCJzaGEzXzI1NlwiLFxuICBcInNoYTNfMzg0XCIsXG4gIFwic2hhM181MTJcIlxuXTtcbnZhciBSRUdFWF9IQVNIX0hFWF8yMF82NDIgPSAvXigoW2EtZjAtOV17Mn0pezIwLDY0fSkkL2k7XG52YXIgUkVHRVhfSEFTSF9IRVggPSAvXigoW2EtZjAtOV17Mn0pKykkL2k7XG52YXIgTWVya2xlUm9vdCA9IG1vZDMuaW5zdGFuY2VvZihVaW50OEFycmF5KS5yZWZpbmUoKHZhbCkgPT4gdmFsLmxlbmd0aCA+PSAyMCAmJiB2YWwubGVuZ3RoIDw9IDY0LCB7XG4gIG1lc3NhZ2U6IFwiTWVya2xlIHJvb3QgbXVzdCBiZSBhIFVpbnQ4QXJyYXkgd2l0aCBsZW5ndGggYmV0d2VlbiAyMCBhbmQgNjQgYnl0ZXNcIlxufSk7XG52YXIgUHJvb2ZCaW5hcnkgPSBtb2QzLmluc3RhbmNlb2YoVWludDhBcnJheSkucmVmaW5lKCh2YWwpID0+IHZhbC5sZW5ndGggPD0gMTAyNCAqIDEwMjQsIHtcbiAgbWVzc2FnZTogXCJCaW5hcnkgaW5jbHVzaW9uIHByb29mIG11c3QgYmUgYSBVaW50OEFycmF5IHdpdGggbGVuZ3RoIDw9IDEsMDQ4LDU3NiBieXRlc1wiXG59KTtcbnZhciBIYXNoRnVuY3Rpb24gPSBtb2QzLmZ1bmN0aW9uKCkuYXJncyhtb2QzLmluc3RhbmNlb2YoVWludDhBcnJheSkpLnJldHVybnMobW9kMy5pbnN0YW5jZW9mKFVpbnQ4QXJyYXkpKTtcbnZhciBUcmVlSGFzaEZ1bmN0aW9uTmFtZSA9IG1vZDMuc3RyaW5nKCkucmVmaW5lKCh2YWwpID0+IEhBU0hfRlVOQ1RJT05fTkFNRVMuaW5jbHVkZXModmFsKSwge1xuICBtZXNzYWdlOiBgVHJlZSBoYXNoIGZ1bmN0aW9uIG5hbWUgbXVzdCBiZSBvbmUgb2YgdGhlIGZvbGxvd2luZzogJHtIQVNIX0ZVTkNUSU9OX05BTUVTLmpvaW4oXCIsXCIpfWBcbn0pO1xudmFyIFRyZWVEYXRhID0gbW9kMy5hcnJheShtb2QzLmluc3RhbmNlb2YoVWludDhBcnJheSkpLm1pbigxKTtcbnZhciBUcmVlT3B0aW9ucyA9IG1vZDMub2JqZWN0KHtcbiAgcmVxdWlyZUJhbGFuY2VkOiBtb2QzLm9wdGlvbmFsKG1vZDMuYm9vbGVhbigpKSxcbiAgZGVidWc6IG1vZDMub3B0aW9uYWwobW9kMy5ib29sZWFuKCkpXG59KTtcbnZhciBQcm9vZkhleCA9IG1vZDMuc3RyaW5nKCkucmVnZXgoUkVHRVhfSEFTSF9IRVgpO1xudmFyIFByb29mT2JqZWN0TGF5ZXIyID0gbW9kMy50dXBsZShbXG4gIG1vZDMubnVtYmVyKCkuaW50KCkubWluKDApLm1heCgxKSxcbiAgbW9kMy5zdHJpbmcoKS5yZWdleChSRUdFWF9IQVNIX0hFWF8yMF82NDIpXG5dKTtcbnZhciBVbmlvblByb29mSGFzaFR5cGVzMiA9IG1vZDMudW5pb24oW1xuICBtb2QzLmxpdGVyYWwoXCJzaGEyMjRcIiksXG4gIG1vZDMubGl0ZXJhbChcInNoYTI1NlwiKSxcbiAgbW9kMy5saXRlcmFsKFwic2hhMzg0XCIpLFxuICBtb2QzLmxpdGVyYWwoXCJzaGE1MTJcIiksXG4gIG1vZDMubGl0ZXJhbChcInNoYTUxMl8yNTZcIiksXG4gIG1vZDMubGl0ZXJhbChcInNoYTNfMjI0XCIpLFxuICBtb2QzLmxpdGVyYWwoXCJzaGEzXzI1NlwiKSxcbiAgbW9kMy5saXRlcmFsKFwic2hhM18zODRcIiksXG4gIG1vZDMubGl0ZXJhbChcInNoYTNfNTEyXCIpXG5dKTtcbnZhciBQcm9vZk9iamVjdDIgPSBtb2QzLm9iamVjdCh7XG4gIHY6IG1vZDMubnVtYmVyKCkuaW50KCkubWluKDEpLm1heCgxKSxcbiAgaDogVW5pb25Qcm9vZkhhc2hUeXBlczIsXG4gIHA6IG1vZDMuYXJyYXkoUHJvb2ZPYmplY3RMYXllcjIpXG59KTtcbnZhciBUcmVlVHJlZSA9IG1vZDMuYXJyYXkobW9kMy5hcnJheShtb2QzLmluc3RhbmNlb2YoVWludDhBcnJheSkpKTtcbnZhciBSZXNvbHZlZEhhc2hOYW1lID0gbW9kMy5vYmplY3Qoe1xuICBuYW1lOiBtb2QzLnN0cmluZygpLFxuICBsZW5ndGg6IG1vZDMubnVtYmVyKCkuaW50KCkubWluKDIwKS5tYXgoNjQpLFxuICBmbjogSGFzaEZ1bmN0aW9uXG59KTtcbnZhciBpbXBvcnRfaGV4ID0gX190b0VTTTMocmVxdWlyZV9oZXgoKSwgMSk7XG52YXIgaW1wb3J0X2NvbnN0YW50X3RpbWUyID0gX190b0VTTTMocmVxdWlyZV9jb25zdGFudF90aW1lMigpLCAxKTtcbnZhciBpbXBvcnRfYnl0ZXMgPSBfX3RvRVNNMyhyZXF1aXJlX2J5dGVzKCksIDEpO1xudmFyIGltcG9ydF9zaGEyMjQgPSBfX3RvRVNNMyhyZXF1aXJlX3NoYTIyNCgpLCAxKTtcbnZhciBpbXBvcnRfc2hhMjU2MiA9IF9fdG9FU00zKHJlcXVpcmVfc2hhMjU2MigpLCAxKTtcbnZhciBpbXBvcnRfc2hhMzg0ID0gX190b0VTTTMocmVxdWlyZV9zaGEzODQoKSwgMSk7XG52YXIgaW1wb3J0X3NoYTUxMiA9IF9fdG9FU00zKHJlcXVpcmVfc2hhNTEyKCksIDEpO1xudmFyIGltcG9ydF9zaGE1MTJfMjU2ID0gX190b0VTTTMocmVxdWlyZV9zaGE1MTJfMjU2KCksIDEpO1xudmFyIGltcG9ydF9zaGEzID0gX190b0VTTTMocmVxdWlyZV9zaGEzKCksIDEpO1xuZnVuY3Rpb24gY29tcGFyZShhLCBiKSB7XG4gIHJldHVybiAoMCwgaW1wb3J0X2NvbnN0YW50X3RpbWUyLmVxdWFsKShhLCBiKTtcbn1cbmZ1bmN0aW9uIGNvbmNhdCguLi5hcnJheXMpIHtcbiAgcmV0dXJuICgwLCBpbXBvcnRfYnl0ZXMuY29uY2F0KSguLi5hcnJheXMpO1xufVxuZnVuY3Rpb24gZGVjb2RlSGV4KHMyKSB7XG4gIHJldHVybiAoMCwgaW1wb3J0X2hleC5kZWNvZGUpKHMyKTtcbn1cbmZ1bmN0aW9uIGVuY29kZUhleCh1KSB7XG4gIHJldHVybiAoMCwgaW1wb3J0X2hleC5lbmNvZGUpKHUsIHRydWUpO1xufVxuZnVuY3Rpb24gcG93ZXJPZlR3byh4KSB7XG4gIHJldHVybiBNYXRoLmxvZzIoeCkgJSAxID09PSAwO1xufVxuZnVuY3Rpb24gc2hhMjI0KGRhdGEpIHtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc2hhMjI0Lmhhc2gpKGRhdGEpO1xufVxuZnVuY3Rpb24gc2hhMjU2KGRhdGEpIHtcbiAgcmV0dXJuICgwLCBpbXBvcnRfc2hhMjU2Mi5oYXNoKShkYXRhKTtcbn1cbmZ1bmN0aW9uIHNoYTM4NChkYXRhKSB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NoYTM4NC5oYXNoKShkYXRhKTtcbn1cbmZ1bmN0aW9uIHNoYTUxMihkYXRhKSB7XG4gIHJldHVybiAoMCwgaW1wb3J0X3NoYTUxMi5oYXNoKShkYXRhKTtcbn1cbmZ1bmN0aW9uIHNoYTUxMl8yNTYoZGF0YSkge1xuICByZXR1cm4gKDAsIGltcG9ydF9zaGE1MTJfMjU2Lmhhc2gpKGRhdGEpO1xufVxuZnVuY3Rpb24gc2hhM18yMjQoZGF0YSkge1xuICByZXR1cm4gKDAsIGltcG9ydF9zaGEzLmhhc2gyMjQpKGRhdGEpO1xufVxuZnVuY3Rpb24gc2hhM18yNTYoZGF0YSkge1xuICByZXR1cm4gKDAsIGltcG9ydF9zaGEzLmhhc2gyNTYpKGRhdGEpO1xufVxuZnVuY3Rpb24gc2hhM18zODQoZGF0YSkge1xuICByZXR1cm4gKDAsIGltcG9ydF9zaGEzLmhhc2gzODQpKGRhdGEpO1xufVxuZnVuY3Rpb24gc2hhM181MTIoZGF0YSkge1xuICByZXR1cm4gKDAsIGltcG9ydF9zaGEzLmhhc2g1MTIpKGRhdGEpO1xufVxuZnVuY3Rpb24gaGV4VG9Qcm9vZihwcm9vZkhleCkge1xuICBQcm9vZkhleC5wYXJzZShwcm9vZkhleCk7XG4gIGNvbnN0IHByb29mID0gZGVjb2RlSGV4KHByb29mSGV4KTtcbiAgUHJvb2ZCaW5hcnkucGFyc2UocHJvb2YpO1xuICByZXR1cm4gcHJvb2Y7XG59XG5mdW5jdGlvbiBvYmplY3RUb1Byb29mKHByb29mT2JqKSB7XG4gIFByb29mT2JqZWN0Mi5wYXJzZShwcm9vZk9iaik7XG4gIGNvbnN0IGZpcnN0UHJvb2ZMYXllckhhc2hCeXRlTGVuID0gcHJvb2ZPYmoucFswXVsxXS5sZW5ndGggLyAyO1xuICBmb3IgKGNvbnN0IGxheWVyIG9mIHByb29mT2JqLnApIHtcbiAgICBpZiAobGF5ZXJbMV0ubGVuZ3RoIC8gMiAhPT0gZmlyc3RQcm9vZkxheWVySGFzaEJ5dGVMZW4pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImFsbCBvYmplY3QgcHJvb2YgaGFzaGVzIG11c3QgYmUgdGhlIHNhbWUgbGVuZ3RoXCIpO1xuICAgIH1cbiAgfVxuICBjb25zdCBwcm9vZkxheWVycyA9IHByb29mT2JqLnA7XG4gIGNvbnN0IHByb29mID0gbmV3IFVpbnQ4QXJyYXkocHJvb2ZMYXllcnMubGVuZ3RoICogKDEgKyBmaXJzdFByb29mTGF5ZXJIYXNoQnl0ZUxlbikpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHByb29mTGF5ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgW29yZGVyLCBoYXNoXSA9IHByb29mTGF5ZXJzW2ldO1xuICAgIHByb29mW2kgKiAoMSArIGZpcnN0UHJvb2ZMYXllckhhc2hCeXRlTGVuKV0gPSBvcmRlcjtcbiAgICBwcm9vZi5zZXQoZGVjb2RlSGV4KGhhc2gpLCBpICogKDEgKyBmaXJzdFByb29mTGF5ZXJIYXNoQnl0ZUxlbikgKyAxKTtcbiAgfVxuICBQcm9vZkJpbmFyeS5wYXJzZShwcm9vZik7XG4gIHJldHVybiBwcm9vZjtcbn1cbmZ1bmN0aW9uIHZlcmlmeShyb290LCBwcm9vZiwgZGF0YSwgaGFzaEZ1bmN0aW9uKSB7XG4gIE1lcmtsZVJvb3QucGFyc2Uocm9vdCk7XG4gIFByb29mQmluYXJ5LnBhcnNlKHByb29mKTtcbiAgSGFzaEZ1bmN0aW9uLnBhcnNlKGhhc2hGdW5jdGlvbik7XG4gIGNvbnN0IGhhc2hGdW5jT3V0TGVuID0gaGFzaEZ1bmN0aW9uKG5ldyBVaW50OEFycmF5KFswXSkpLmxlbmd0aDtcbiAgaWYgKGNvbXBhcmUocm9vdCwgZGF0YSkgJiYgcHJvb2YubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKGRhdGEubGVuZ3RoICE9PSBoYXNoRnVuY091dExlbikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCBpbnRlcm1lZGlhdGVTdGVwTGVuID0gZGF0YS5sZW5ndGggKyAxO1xuICBpZiAocHJvb2YubGVuZ3RoICUgaW50ZXJtZWRpYXRlU3RlcExlbiAhPT0gMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBmb3IgKGxldCBpID0gMDsgaSA8IHByb29mLmxlbmd0aDsgaSArPSBpbnRlcm1lZGlhdGVTdGVwTGVuKSB7XG4gICAgY29uc3QgaW50ZXJtZWRpYXRlSGFzaCA9IHByb29mLnN1YmFycmF5KGkgKyAxLCBpICsgaW50ZXJtZWRpYXRlU3RlcExlbik7XG4gICAgY29uc3QgcHJlZml4ID0gaSA9PT0gMCA/IExFQUZfTk9ERV9QUkVGSVggOiBJTk5FUl9OT0RFX1BSRUZJWDtcbiAgICBkYXRhID0gaGFzaEZ1bmN0aW9uKHByb29mW2ldID8gY29uY2F0KHByZWZpeCwgY29uY2F0KGludGVybWVkaWF0ZUhhc2gsIGRhdGEpKSA6IGNvbmNhdChwcmVmaXgsIGNvbmNhdChkYXRhLCBpbnRlcm1lZGlhdGVIYXNoKSkpO1xuICB9XG4gIHJldHVybiBjb21wYXJlKHJvb3QsIGRhdGEpO1xufVxuZnVuY3Rpb24gdHJlZURhdGFIYXNFeHBlY3RlZExlbmd0aChkYXRhLCBsZW5ndGgpIHtcbiAgZm9yIChjb25zdCBkIG9mIGRhdGEpIHtcbiAgICBpZiAoZC5sZW5ndGggIT09IGxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYXJndW1lbnQgJ2RhdGEnIGFycmF5IGNvbnRhaW5zIGl0ZW1zIHRoYXQgZG9uJ3QgbWF0Y2ggdGhlIGhhc2ggZnVuY3Rpb24gb3V0cHV0IGxlbmd0aFwiKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGRlYnVnTG9nKG1lc3NhZ2UsIGVuYWJsZWQpIHtcbiAgaWYgKGVuYWJsZWQpIHtcbiAgICBjb25zb2xlLmRlYnVnKG1lc3NhZ2UpO1xuICB9XG59XG5mdW5jdGlvbiByZXNvbHZlSGFzaE5hbWUoaGFzaE5hbWUpIHtcbiAgdHJ5IHtcbiAgICBUcmVlSGFzaEZ1bmN0aW9uTmFtZS5wYXJzZShoYXNoTmFtZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgbW9kMy5ab2RFcnJvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBpbnZhbGlkIGhhc2ggZnVuY3Rpb24gbmFtZTogJyR7aGFzaE5hbWV9J2ApO1xuICAgIH1cbiAgfVxuICBsZXQgZm91bmRIYXNoRnVuY3Rpb247XG4gIHN3aXRjaCAoaGFzaE5hbWUpIHtcbiAgICBjYXNlIFwic2hhMjI0XCI6XG4gICAgICBmb3VuZEhhc2hGdW5jdGlvbiA9IHNoYTIyNDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJzaGEyNTZcIjpcbiAgICAgIGZvdW5kSGFzaEZ1bmN0aW9uID0gc2hhMjU2O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInNoYTM4NFwiOlxuICAgICAgZm91bmRIYXNoRnVuY3Rpb24gPSBzaGEzODQ7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwic2hhNTEyXCI6XG4gICAgICBmb3VuZEhhc2hGdW5jdGlvbiA9IHNoYTUxMjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJzaGE1MTJfMjU2XCI6XG4gICAgICBmb3VuZEhhc2hGdW5jdGlvbiA9IHNoYTUxMl8yNTY7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwic2hhM18yMjRcIjpcbiAgICAgIGZvdW5kSGFzaEZ1bmN0aW9uID0gc2hhM18yMjQ7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwic2hhM18yNTZcIjpcbiAgICAgIGZvdW5kSGFzaEZ1bmN0aW9uID0gc2hhM18yNTY7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwic2hhM18zODRcIjpcbiAgICAgIGZvdW5kSGFzaEZ1bmN0aW9uID0gc2hhM18zODQ7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwic2hhM181MTJcIjpcbiAgICAgIGZvdW5kSGFzaEZ1bmN0aW9uID0gc2hhM181MTI7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bmtub3duIGhhc2ggZnVuY3Rpb24gbmFtZTogJHtoYXNoTmFtZX1gKTtcbiAgfVxuICBIYXNoRnVuY3Rpb24ucGFyc2UoZm91bmRIYXNoRnVuY3Rpb24pO1xuICByZXR1cm4gUmVzb2x2ZWRIYXNoTmFtZS5wYXJzZSh7XG4gICAgbmFtZTogaGFzaE5hbWUsXG4gICAgbGVuZ3RoOiBmb3VuZEhhc2hGdW5jdGlvbihuZXcgVWludDhBcnJheShbMF0pKS5sZW5ndGgsXG4gICAgZm46IGZvdW5kSGFzaEZ1bmN0aW9uXG4gIH0pO1xufVxudmFyIFRyZWUgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGRhdGEsIGhhc2hOYW1lID0gXCJzaGEyNTZcIiwgb3B0aW9ucyA9IHtcbiAgICByZXF1aXJlQmFsYW5jZWQ6IGZhbHNlLFxuICAgIGRlYnVnOiBmYWxzZVxuICB9KSB7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImRhdGFcIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcInRyZWVcIiwgW10pO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJoYXNoRnVuY3Rpb25cIik7XG4gICAgX19wdWJsaWNGaWVsZCh0aGlzLCBcImhhc2hOYW1lXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJoYXNoTGVuZ3RoXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJkZWJ1Z1wiKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwicmVxdWlyZUJhbGFuY2VkXCIpO1xuICAgIHZhciBfYSwgX2I7XG4gICAgVHJlZURhdGEucGFyc2UoZGF0YSk7XG4gICAgVHJlZU9wdGlvbnMucGFyc2Uob3B0aW9ucyk7XG4gICAgY29uc3QgcmVzb2x2ZWRIYXNoID0gcmVzb2x2ZUhhc2hOYW1lKGhhc2hOYW1lKTtcbiAgICB0aGlzLmhhc2hOYW1lID0gcmVzb2x2ZWRIYXNoLm5hbWU7XG4gICAgdGhpcy5oYXNoTGVuZ3RoID0gcmVzb2x2ZWRIYXNoLmxlbmd0aDtcbiAgICB0aGlzLmhhc2hGdW5jdGlvbiA9IHJlc29sdmVkSGFzaC5mbjtcbiAgICB0aGlzLnJlcXVpcmVCYWxhbmNlZCA9IChfYSA9IG9wdGlvbnMucmVxdWlyZUJhbGFuY2VkKSAhPSBudWxsID8gX2EgOiBmYWxzZTtcbiAgICB0aGlzLmRlYnVnID0gKF9iID0gb3B0aW9ucy5kZWJ1ZykgIT0gbnVsbCA/IF9iIDogZmFsc2U7XG4gICAgaWYgKHRoaXMucmVxdWlyZUJhbGFuY2VkICYmICFwb3dlck9mVHdvKGRhdGEubGVuZ3RoKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYXJndW1lbnQgJ2RhdGEnIGFycmF5IGxlbmd0aCBtdXN0IGJlIGEgcG93ZXIgb2YgdHdvIChvciBzZXQgJ3JlcXVpcmVCYWxhbmNlZCcgdG8gZmFsc2UpXCIpO1xuICAgIH1cbiAgICB0cmVlRGF0YUhhc0V4cGVjdGVkTGVuZ3RoKGRhdGEsIHRoaXMuaGFzaExlbmd0aCk7XG4gICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB0aGlzLmJ1aWxkKHRoaXMuZGF0YSk7XG4gICAgZGVidWdMb2coYGNvbnN0cnVjdG9yIG9wdGlvbnM6ICR7SlNPTi5zdHJpbmdpZnkob3B0aW9ucyl9YCwgdGhpcy5kZWJ1Zyk7XG4gICAgZGVidWdMb2coYGNvbnN0cnVjdG9yIGhhc2hGdW5jT3V0TGVuOiAke0pTT04uc3RyaW5naWZ5KHRoaXMuaGFzaExlbmd0aCl9YCwgdGhpcy5kZWJ1Zyk7XG4gICAgZGVidWdMb2coYGNvbnN0cnVjdG9yIGRhdGE6ICR7SlNPTi5zdHJpbmdpZnkodGhpcy5kYXRhKX1gLCB0aGlzLmRlYnVnKTtcbiAgfVxuICByb290KCkge1xuICAgIGNvbnN0IHJvb3QgPSB0aGlzLnRyZWVbdGhpcy50cmVlLmxlbmd0aCAtIDFdWzBdO1xuICAgIHJldHVybiBNZXJrbGVSb290LnBhcnNlKHJvb3QpO1xuICB9XG4gIGhlaWdodCgpIHtcbiAgICByZXR1cm4gdGhpcy50cmVlLmxlbmd0aCAtIDE7XG4gIH1cbiAgcHJvb2YoZGF0YUl0ZW0pIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGNvbXBhcmUodGhpcy5kYXRhW2ldLCBkYXRhSXRlbSkpIHtcbiAgICAgICAgZGVidWdMb2coYHByb29mIGRhdGFJdGVtIGZvdW5kOiAke0pTT04uc3RyaW5naWZ5KGRhdGFJdGVtKX1gLCB0aGlzLmRlYnVnKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvb2ZGb3JJbmRleChpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKFwicHJvb2YgZGF0YUl0ZW0gbm90IGZvdW5kXCIpO1xuICB9XG4gIHByb29mSGV4KGRhdGFJdGVtKSB7XG4gICAgY29uc3QgcHJvb2YgPSB0aGlzLnByb29mKGRhdGFJdGVtKTtcbiAgICBjb25zdCBwcm9vZkhleCA9IGVuY29kZUhleChwcm9vZik7XG4gICAgcmV0dXJuIFByb29mSGV4LnBhcnNlKHByb29mSGV4KTtcbiAgfVxuICBwcm9vZk9iamVjdChkYXRhSXRlbSkge1xuICAgIGNvbnN0IHByb29mID0gdGhpcy5wcm9vZihkYXRhSXRlbSk7XG4gICAgY29uc3QgbGF5ZXJIYXNoTGVuZ3RoUGx1c09uZSA9IHRoaXMuaGFzaExlbmd0aCArIDE7XG4gICAgY29uc3QgcHJvb2ZMZW5ndGggPSBwcm9vZi5ieXRlTGVuZ3RoO1xuICAgIGNvbnN0IHByb29mTGF5ZXJzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9vZkxlbmd0aDsgaSArPSBsYXllckhhc2hMZW5ndGhQbHVzT25lKSB7XG4gICAgICBjb25zdCBvcmRlciA9IHByb29mLnN1YmFycmF5KGksIGkgKyAxKTtcbiAgICAgIGNvbnN0IGhhc2ggPSBwcm9vZi5zdWJhcnJheShpICsgMSwgaSArIGxheWVySGFzaExlbmd0aFBsdXNPbmUpO1xuICAgICAgcHJvb2ZMYXllcnMucHVzaChbcGFyc2VJbnQoZW5jb2RlSGV4KG9yZGVyKSwgMTYpLCBlbmNvZGVIZXgoaGFzaCldKTtcbiAgICB9XG4gICAgcmV0dXJuIFByb29mT2JqZWN0Mi5wYXJzZSh7XG4gICAgICB2OiAxLFxuICAgICAgaDogdGhpcy5oYXNoTmFtZSxcbiAgICAgIHA6IHByb29mTGF5ZXJzXG4gICAgfSk7XG4gIH1cbiAgc3RhdGljIHZlcmlmeShyb290LCBwcm9vZiwgZGF0YSwgaGFzaE5hbWUpIHtcbiAgICBjb25zdCBiaW5hcnlQcm9vZiA9IFByb29mQmluYXJ5LnNhZmVQYXJzZShwcm9vZik7XG4gICAgaWYgKGJpbmFyeVByb29mLnN1Y2Nlc3MpIHtcbiAgICAgIGlmICghaGFzaE5hbWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaGFzaE5hbWUgaXMgcmVxdWlyZWQgaWYgcHJvdmlkaW5nIGEgYmluYXJ5IGVuY29kZWQgcHJvb2Ygd2hpY2ggaGFzIG5vIGhhc2ggZnVuY3Rpb24gbmFtZSBlbWJlZGRlZFwiKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJlc29sdmVkSGFzaCA9IHJlc29sdmVIYXNoTmFtZShoYXNoTmFtZSk7XG4gICAgICByZXR1cm4gdmVyaWZ5KHJvb3QsIGJpbmFyeVByb29mLmRhdGEsIGRhdGEsIHJlc29sdmVkSGFzaC5mbik7XG4gICAgfVxuICAgIGNvbnN0IGhleFByb29mID0gUHJvb2ZIZXguc2FmZVBhcnNlKHByb29mKTtcbiAgICBpZiAoaGV4UHJvb2Yuc3VjY2Vzcykge1xuICAgICAgaWYgKCFoYXNoTmFtZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJoYXNoTmFtZSBpcyByZXF1aXJlZCBpZiBwcm92aWRpbmcgYSBoZXggZW5jb2RlZCBwcm9vZiB3aGljaCBoYXMgbm8gaGFzaCBmdW5jdGlvbiBuYW1lIGVtYmVkZGVkXCIpO1xuICAgICAgfVxuICAgICAgY29uc3QgcmVzb2x2ZWRIYXNoID0gcmVzb2x2ZUhhc2hOYW1lKGhhc2hOYW1lKTtcbiAgICAgIHJldHVybiB2ZXJpZnkocm9vdCwgaGV4VG9Qcm9vZihoZXhQcm9vZi5kYXRhKSwgZGF0YSwgcmVzb2x2ZWRIYXNoLmZuKTtcbiAgICB9XG4gICAgY29uc3Qgb2JqZWN0UHJvb2YgPSBQcm9vZk9iamVjdDIuc2FmZVBhcnNlKHByb29mKTtcbiAgICBpZiAob2JqZWN0UHJvb2Yuc3VjY2Vzcykge1xuICAgICAgY29uc3QgcmVzb2x2ZWRIYXNoID0gcmVzb2x2ZUhhc2hOYW1lKG9iamVjdFByb29mLmRhdGEuaCk7XG4gICAgICByZXR1cm4gdmVyaWZ5KHJvb3QsIG9iamVjdFRvUHJvb2Yob2JqZWN0UHJvb2YuZGF0YSksIGRhdGEsIHJlc29sdmVkSGFzaC5mbik7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgb3IgY29ycnVwdGVkIHByb29mIHByb3ZpZGVkXCIpO1xuICB9XG4gIGJ1aWxkKGRhdGEsIGxlYXZlcyA9IHRydWUpIHtcbiAgICB0aGlzLnRyZWUucHVzaChkYXRhKTtcbiAgICBpZiAoZGF0YS5sZW5ndGggPT09IDEpXG4gICAgICByZXR1cm47XG4gICAgY29uc3QgbmV3TGV2ZWwgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgIGNvbnN0IHByZWZpeCA9IGxlYXZlcyA/IExFQUZfTk9ERV9QUkVGSVggOiBJTk5FUl9OT0RFX1BSRUZJWDtcbiAgICAgIGNvbnN0IGQxID0gZGF0YVtpXTtcbiAgICAgIGNvbnN0IGQyID0gZGF0YVtpICsgMV0gfHwgZDE7XG4gICAgICBuZXdMZXZlbC5wdXNoKHRoaXMuaGFzaEZ1bmN0aW9uKGNvbmNhdChwcmVmaXgsIGNvbmNhdChkMSwgZDIpKSkpO1xuICAgIH1cbiAgICB0aGlzLmJ1aWxkKG5ld0xldmVsLCBmYWxzZSk7XG4gIH1cbiAgcHJvb2ZGb3JJbmRleChpKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IGhlaWdodCA9IHRoaXMuaGVpZ2h0KCk7XG4gICAgbGV0IGxldmVsID0gMDtcbiAgICBsZXQgaXNSaWdodFNpZGVFbGVtZW50ID0gTWF0aC5mbG9vcihpICUgMik7XG4gICAgbGV0IGluZGV4ID0gaSAtIGlzUmlnaHRTaWRlRWxlbWVudDtcbiAgICBkZWJ1Z0xvZyhgcHJvb2ZGb3JJbmRleCBpOiAke2l9LCBpc1JpZ2h0U2lkZUVsZW1lbnQ6ICR7aXNSaWdodFNpZGVFbGVtZW50fSwgaW5kZXg6ICR7aW5kZXh9YCwgdGhpcy5kZWJ1Zyk7XG4gICAgY29uc3QgcHJvb2YgPSBbXTtcbiAgICB3aGlsZSAobGV2ZWwgPCBoZWlnaHQpIHtcbiAgICAgIGNvbnN0IGN1cnJlbnRMZXZlbEhhc2hlcyA9IHRoaXMudHJlZVtsZXZlbF07XG4gICAgICBkZWJ1Z0xvZyhgcHJvb2ZGb3JJbmRleCBlbnRlcmluZyB3aGlsZSA6IGxldmVsICR7bGV2ZWx9IGlzUmlnaHRTaWRlRWxlbWVudDogJHtpc1JpZ2h0U2lkZUVsZW1lbnR9IGluZGV4OiAke2luZGV4fWAsIHRoaXMuZGVidWcpO1xuICAgICAgY29uc3Qgb3RoZXJFbGVtZW50ID0gaXNSaWdodFNpZGVFbGVtZW50ID8gY3VycmVudExldmVsSGFzaGVzW2luZGV4XSA6IChfYSA9IGN1cnJlbnRMZXZlbEhhc2hlc1tpbmRleCArIDFdKSAhPSBudWxsID8gX2EgOiBjdXJyZW50TGV2ZWxIYXNoZXNbaW5kZXhdO1xuICAgICAgcHJvb2YucHVzaChpc1JpZ2h0U2lkZUVsZW1lbnQpO1xuICAgICAgZm9yIChjb25zdCBieXRlIG9mIG90aGVyRWxlbWVudCkge1xuICAgICAgICBwcm9vZi5wdXNoKGJ5dGUpO1xuICAgICAgfVxuICAgICAgaXNSaWdodFNpZGVFbGVtZW50ID0gTWF0aC5mbG9vcihpbmRleCAvIDIgJSAyKTtcbiAgICAgIGluZGV4ID0gTWF0aC5mbG9vcihpbmRleCAvIDIpIC0gaXNSaWdodFNpZGVFbGVtZW50O1xuICAgICAgZGVidWdMb2coYHByb29mRm9ySW5kZXggZXhpdGluZyB3aGlsZSA6IGxldmVsICR7bGV2ZWx9IGlzUmlnaHRTaWRlRWxlbWVudDogJHtpc1JpZ2h0U2lkZUVsZW1lbnR9IGluZGV4OiAke2luZGV4fWAsIHRoaXMuZGVidWcpO1xuICAgICAgbGV2ZWwrKztcbiAgICB9XG4gICAgZGVidWdMb2coYHByb29mRm9ySW5kZXggcHJvb2YgZGF0YSA6ICR7SlNPTi5zdHJpbmdpZnkocHJvb2YpfWAsIHRoaXMuZGVidWcpO1xuICAgIGNvbnN0IHByb29mVWludDhBcnJheSA9IG5ldyBVaW50OEFycmF5KHByb29mKTtcbiAgICByZXR1cm4gUHJvb2ZCaW5hcnkucGFyc2UocHJvb2ZVaW50OEFycmF5KTtcbiAgfVxufTtcbnZhciBpbXBvcnRfaGV4NCA9IF9fdG9FU00ocmVxdWlyZV9oZXgyKCksIDEpO1xudmFyIGltcG9ydF9iYXNlNjQ0ID0gX190b0VTTShyZXF1aXJlX2Jhc2U2NCgpLCAxKTtcbnZhciBpbXBvcnRfZWQyNTUxOTIgPSBfX3RvRVNNKHJlcXVpcmVfZWQyNTUxOSgpLCAxKTtcbmZ1bmN0aW9uIGhhc0NvbW1hKG51bSkge1xuICByZXR1cm4gbnVtID09PSAwID8gXCJcIiA6IFwiLFwiO1xufVxuZnVuY3Rpb24gY2Fub25pZnkob2JqZWN0KSB7XG4gIGlmIChvYmplY3QgPT09IG51bGwgfHwgdHlwZW9mIG9iamVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCB0eXBlb2Ygb2JqZWN0ID09PSBcImJvb2xlYW5cIiB8fCB0eXBlb2Ygb2JqZWN0ID09PSBcIm51bWJlclwiIHx8IHR5cGVvZiBvYmplY3QgPT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob2JqZWN0KTtcbiAgfVxuICBpZiAodHlwZW9mIG9iamVjdCA9PT0gXCJiaWdpbnRcIikge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJCaWdJbnQgdmFsdWUgY2FuJ3QgYmUgc2VyaWFsaXplZCBpbiBKU09OXCIpO1xuICB9XG4gIGlmICh0eXBlb2Ygb2JqZWN0ID09PSBcImZ1bmN0aW9uXCIgfHwgdHlwZW9mIG9iamVjdCA9PT0gXCJzeW1ib2xcIikge1xuICAgIHJldHVybiBjYW5vbmlmeSh2b2lkIDApO1xuICB9XG4gIGlmIChvYmplY3QudG9KU09OIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcbiAgICByZXR1cm4gY2Fub25pZnkob2JqZWN0LnRvSlNPTigpKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheShvYmplY3QpKSB7XG4gICAgY29uc3QgdmFsdWVzMiA9IG9iamVjdC5yZWR1Y2UoKHQsIGN2LCBjaSkgPT4ge1xuICAgICAgY29uc3QgdmFsdWUgPSBjdiA9PT0gdm9pZCAwIHx8IHR5cGVvZiBjdiA9PT0gXCJzeW1ib2xcIiB8fCB0eXBlb2YgY3YgPT09IFwiZnVuY3Rpb25cIiA/IG51bGwgOiBjdjtcbiAgICAgIHJldHVybiBgJHt0fSR7aGFzQ29tbWEoY2kpfSR7Y2Fub25pZnkodmFsdWUpfWA7XG4gICAgfSwgXCJcIik7XG4gICAgcmV0dXJuIGBbJHt2YWx1ZXMyfV1gO1xuICB9XG4gIGNvbnN0IHZhbHVlcyA9IE9iamVjdC5rZXlzKG9iamVjdCkuc29ydCgpLnJlZHVjZSgodCwgY3YpID0+IHtcbiAgICBpZiAob2JqZWN0W2N2XSA9PT0gdm9pZCAwIHx8IHR5cGVvZiBvYmplY3RbY3ZdID09PSBcInN5bWJvbFwiIHx8IHR5cGVvZiBvYmplY3RbY3ZdID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHJldHVybiB0O1xuICAgIH1cbiAgICByZXR1cm4gYCR7dH0ke2hhc0NvbW1hKHQubGVuZ3RoKX0ke2Nhbm9uaWZ5KGN2KX06JHtjYW5vbmlmeShvYmplY3RbY3ZdKX1gO1xuICB9LCBcIlwiKTtcbiAgcmV0dXJuIGB7JHt2YWx1ZXN9fWA7XG59XG52YXIgaW1wb3J0X3NoYTI1NjMgPSBfX3RvRVNNKHJlcXVpcmVfc2hhMjU2MygpLCAxKTtcbnZhciBpbXBvcnRfY29uc3RhbnRfdGltZTMgPSBfX3RvRVNNKHJlcXVpcmVfY29uc3RhbnRfdGltZTMoKSwgMSk7XG52YXIgaW1wb3J0X2hleDIgPSBfX3RvRVNNKHJlcXVpcmVfaGV4MigpLCAxKTtcbnZhciBpbXBvcnRfYmFzZTY0MiA9IF9fdG9FU00ocmVxdWlyZV9iYXNlNjQoKSwgMSk7XG52YXIgaW1wb3J0X2VkMjU1MTkgPSBfX3RvRVNNKHJlcXVpcmVfZWQyNTUxOSgpLCAxKTtcbnZhciBpbXBvcnRfaXNvbW9ycGhpY191bmZldGNoID0gX190b0VTTShyZXF1aXJlX2Jyb3dzZXIyKCksIDEpO1xudmFyIEVOVFJPUFlfU0VSVkVSX0JBU0VfVVJMID0gXCJodHRwczovL2VudHJvcHkudHJ1ZXN0YW1wLmNvbVwiO1xudmFyIEtFWV9TRVJWRVJfQkFTRV9VUkwgPSBcImh0dHBzOi8va2V5cy50cnVlc3RhbXAuY29tXCI7XG52YXIgQkFDS1VQX1BVQkxJQ19LRVlTID0gW1xuICB7XG4gICAgaGFuZGxlOiBcImE1NmZhYTJiXCIsXG4gICAgdHlwZTogXCJlZDI1NTE5XCIsXG4gICAgcHVibGljS2V5OiBcIks1NDZFaUdwNHZzQXZ2T0xZQTFtMFhLeXFjNFJvSis3cVBvWFpzNForTlU9XCIsXG4gICAgZW52aXJvbm1lbnQ6IFwiZGV2ZWxvcG1lbnRcIixcbiAgICBleHBpcmVkOiBmYWxzZSxcbiAgICBzZWxmU2lnbmF0dXJlOiBcIlZqMEE0a05hMmE0dFJMeE9FUEZ3Vjdpck5JR1VvZTdROFNYMUpma1JIZU5lYTlNKzNRM3ZUKzluNjQwbU1KaG0yblVJRHZiQ3RtdEIyeHFHb3FwbUNRPT1cIlxuICB9LFxuICB7XG4gICAgaGFuZGxlOiBcImYzNjk0N2QzXCIsXG4gICAgdHlwZTogXCJlZDI1NTE5XCIsXG4gICAgcHVibGljS2V5OiBcIjIvTjhLdG5PcTQ2V092UWF5L2N1bi8zdmluN2RZVTBqdHdsaVZmNmc4M3M9XCIsXG4gICAgZW52aXJvbm1lbnQ6IFwic3RhZ2luZ1wiLFxuICAgIGV4cGlyZWQ6IGZhbHNlLFxuICAgIHNlbGZTaWduYXR1cmU6IFwibFd4RC91anA5VWRHa2syTXNVVWxhMW9BUjNGb3BLOGpDZUU0ZU5mZVM2SFMvdWU2ZFVrK3Zob05JM3pVTnNHRmxOWFV6d3NrRVQvVnRTOGk1S2dRQ0E9PVwiXG4gIH0sXG4gIHtcbiAgICBoYW5kbGU6IFwiYjMzOTU1MDBcIixcbiAgICB0eXBlOiBcImVkMjU1MTlcIixcbiAgICBwdWJsaWNLZXk6IFwiQm5FLzJBWWhnTWQwS1k3dFhkTWZtUkpQb1BZNEk1aDdyaFFmKzluc3dBUT1cIixcbiAgICBlbnZpcm9ubWVudDogXCJwcm9kdWN0aW9uXCIsXG4gICAgZXhwaXJlZDogZmFsc2UsXG4gICAgc2VsZlNpZ25hdHVyZTogXCJ5WkcwbUpVcGVXZGFheVpNRjcwYkhyQm5qSVlpaG1vWm9pRWJmY2lHeEFSdm9jbUxwMEpsS1hhUDVNdFFHQ2Q3M3lxak9IWDFhWnFIR09QaXNlN2ZBdz09XCJcbiAgfVxuXTtcbmFzeW5jIGZ1bmN0aW9uIGdldEVudHJvcHlGcm9tSGFzaChoYXNoKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgZW50cm9weVVybCA9IGAke0VOVFJPUFlfU0VSVkVSX0JBU0VfVVJMfS9oYXNoLyR7aGFzaH1gO1xuICAgIGNvbnN0IGVudHJvcHlSZXNwID0gYXdhaXQgKDAsIGltcG9ydF9pc29tb3JwaGljX3VuZmV0Y2guZGVmYXVsdCkoZW50cm9weVVybCk7XG4gICAgaWYgKGVudHJvcHlSZXNwLm9rKSB7XG4gICAgICByZXR1cm4gRW50cm9weVJlc3BvbnNlLnBhcnNlKGF3YWl0IGVudHJvcHlSZXNwLmpzb24oKSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICB9XG4gIHJldHVybiB2b2lkIDA7XG59XG5mdW5jdGlvbiB0aW1lc3RhbXBNaWNyb3NlY29uZHNUb0lTTyh0aW1lc3RhbXApIHtcbiAgY29uc3QgdGltZXN0YW1wTWljcm9zZWNvbmRzID0gdHlwZW9mIHRpbWVzdGFtcCA9PT0gXCJzdHJpbmdcIiA/IEJpZ0ludCh0aW1lc3RhbXApIDogdGltZXN0YW1wO1xuICBjb25zdCB0aW1lc3RhbXBNaWxsaXNlY29uZHMgPSBOdW1iZXIodGltZXN0YW1wTWljcm9zZWNvbmRzIC8gQmlnSW50KDFlMykpO1xuICByZXR1cm4gRGF0ZVRpbWUuZnJvbU1pbGxpcyhNYXRoLmZsb29yKHRpbWVzdGFtcE1pbGxpc2Vjb25kcykpLnRvVVRDKCkudG9JU08oKTtcbn1cbmZ1bmN0aW9uIGdldEhhbmRsZUZvclB1YmxpY0tleShwdWJsaWNLZXkpIHtcbiAgcmV0dXJuICgwLCBpbXBvcnRfaGV4Mi5lbmNvZGUpKHNoYTI1NihwdWJsaWNLZXkpKS5zbGljZSgwLCA4KS50b0xvd2VyQ2FzZSgpO1xufVxuYXN5bmMgZnVuY3Rpb24gZ2V0S2V5QnlIYW5kbGUoaGFuZGxlLCBrZXlzKSB7XG4gIGNvbnN0IGtleXNQYXJzZVJlc3BvbnNlID0gU2lnbmVkS2V5cy5zYWZlUGFyc2Uoa2V5cyk7XG4gIGlmIChrZXlzUGFyc2VSZXNwb25zZS5zdWNjZXNzKSB7XG4gICAgcmV0dXJuIGtleXNQYXJzZVJlc3BvbnNlLmRhdGEuZmluZCgoa2V5KSA9PiBrZXkuaGFuZGxlID09PSBoYW5kbGUpO1xuICB9XG4gIHRyeSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtLRVlfU0VSVkVSX0JBU0VfVVJMfS8ke2hhbmRsZX1gKTtcbiAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgIHJldHVybiBTaWduZWRLZXkucGFyc2UoYXdhaXQgcmVzcG9uc2UuanNvbigpKTtcbiAgICB9XG4gICAgcmV0dXJuIEJBQ0tVUF9QVUJMSUNfS0VZUy5maW5kKChrZXkpID0+IGtleS5oYW5kbGUgPT09IGhhbmRsZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfVxufVxuYXN5bmMgZnVuY3Rpb24gcHVibGljS2V5TWF0Y2hlc0tub3duUHVibGljS2V5KHB1YmxpY0tleSwga2V5cykge1xuICB0cnkge1xuICAgIGNvbnN0IGhhbmRsZSA9IGdldEhhbmRsZUZvclB1YmxpY0tleShwdWJsaWNLZXkpO1xuICAgIGxldCBrZXkgPSB2b2lkIDA7XG4gICAga2V5ID0gYXdhaXQgZ2V0S2V5QnlIYW5kbGUoaGFuZGxlLCBrZXlzKTtcbiAgICBpZiAoa2V5ID09PSB2b2lkIDApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgZm91bmRQdWJsaWNLZXkgPSAoMCwgaW1wb3J0X2Jhc2U2NDIuZGVjb2RlKShrZXkucHVibGljS2V5KTtcbiAgICBpZiAoISgwLCBpbXBvcnRfY29uc3RhbnRfdGltZTMuZXF1YWwpKGZvdW5kUHVibGljS2V5LCBwdWJsaWNLZXkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChoYW5kbGUgIT09IGdldEhhbmRsZUZvclB1YmxpY0tleShmb3VuZFB1YmxpY0tleSkgfHwgaGFuZGxlICE9PSBrZXkuaGFuZGxlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGZvdW5kS2V5U2VsZlNpZ25hdHVyZSA9ICgwLCBpbXBvcnRfYmFzZTY0Mi5kZWNvZGUpKGtleS5zZWxmU2lnbmF0dXJlKTtcbiAgICBjb25zdCB1bnNpZ25lZEtleSA9IHtcbiAgICAgIGVudmlyb25tZW50OiBrZXkuZW52aXJvbm1lbnQsXG4gICAgICBleHBpcmVkOiBrZXkuZXhwaXJlZCxcbiAgICAgIGhhbmRsZToga2V5LmhhbmRsZSxcbiAgICAgIHB1YmxpY0tleToga2V5LnB1YmxpY0tleSxcbiAgICAgIHR5cGU6IGtleS50eXBlXG4gICAgfTtcbiAgICBjb25zdCBjYW5vbmljYWxIYXNoZWRVbnNpZ25lZEtleSA9IGNhbm9uaWNhbGl6ZUFuZEhhc2hEYXRhKHVuc2lnbmVkS2V5KTtcbiAgICBjb25zdCBpc0tleVNlbGZTaWduYXR1cmVWZXJpZmllZCA9ICgwLCBpbXBvcnRfZWQyNTUxOS52ZXJpZnkpKGZvdW5kUHVibGljS2V5LCBjYW5vbmljYWxIYXNoZWRVbnNpZ25lZEtleS5oYXNoLCBmb3VuZEtleVNlbGZTaWduYXR1cmUpO1xuICAgIGlmICghaXNLZXlTZWxmU2lnbmF0dXJlVmVyaWZpZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5mdW5jdGlvbiBjYW5vbmljYWxpemVBbmRIYXNoRGF0YShkYXRhKSB7XG4gIGNvbnN0IGNhbm9uaWNhbERhdGEgPSBjYW5vbmlmeShkYXRhKTtcbiAgY29uc3QgY2Fub25pY2FsRGF0YVVpbnQ4QXJyYXkgPSBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoY2Fub25pY2FsRGF0YSk7XG4gIGNvbnN0IGhhc2ggPSAoMCwgaW1wb3J0X3NoYTI1NjMuaGFzaCkoY2Fub25pY2FsRGF0YVVpbnQ4QXJyYXkpO1xuICBjb25zdCBoYXNoVWludDhBcnJheSA9IG5ldyBVaW50OEFycmF5KGhhc2gpO1xuICBjb25zdCBoYXNoSGV4ID0gKDAsIGltcG9ydF9oZXgyLmVuY29kZSkoaGFzaFVpbnQ4QXJyYXksIHRydWUpO1xuICByZXR1cm4ge1xuICAgIGhhc2g6IGhhc2hVaW50OEFycmF5LFxuICAgIGhhc2hIZXgsXG4gICAgaGFzaFR5cGU6IFwic2hhLTI1NlwiLFxuICAgIGNhbm9uaWNhbERhdGFcbiAgfTtcbn1cbnZhciBpbXBvcnRfaGV4MyA9IF9fdG9FU00ocmVxdWlyZV9oZXgyKCksIDEpO1xudmFyIGltcG9ydF9jb25zdGFudF90aW1lNCA9IF9fdG9FU00ocmVxdWlyZV9jb25zdGFudF90aW1lMygpLCAxKTtcbnZhciBpbXBvcnRfYmFzZTY0MyA9IF9fdG9FU00ocmVxdWlyZV9iYXNlNjQoKSwgMSk7XG52YXIgaW1wb3J0X2lzb21vcnBoaWNfdW5mZXRjaDIgPSBfX3RvRVNNKHJlcXVpcmVfYnJvd3NlcjIoKSwgMSk7XG52YXIgSG9yaXpvblRyYW5zYWN0aW9uUmVzcG9uc2UgPSBtb2Qub2JqZWN0KHtcbiAgbWVtbzogbW9kLnN0cmluZygpLnJlZ2V4KC9eKD86W0EtWmEtelxcZCsvXXs0fSkqKD86W0EtWmEtelxcZCsvXXszfT18W0EtWmEtelxcZCsvXXsyfT09KT8kLyksXG4gIG1lbW9fdHlwZTogbW9kLnN0cmluZygpLnJlZmluZSgodikgPT4gdiA9PT0gXCJoYXNoXCIsIHttZXNzYWdlOiBcIlRyYW5zYWN0aW9uIGZhaWxlZCA6IG1lbW9fdHlwZSBmaWVsZCBpcyBub3QgaGFzaFwifSksXG4gIGxlZGdlcjogbW9kLm51bWJlcigpLFxuICBzdWNjZXNzZnVsOiBtb2QuYm9vbGVhbigpLnJlZmluZSgodikgPT4gdiA9PT0gdHJ1ZSwge21lc3NhZ2U6IFwiVHJhbnNhY3Rpb24gZmFpbGVkIDogc3VjY2VzcyBmaWVsZCBpcyBub3QgdHJ1ZVwifSlcbn0pO1xudmFyIEhvcml6b25MZWRnZXJSZXNwb25zZSA9IG1vZC5vYmplY3Qoe1xuICBjbG9zZWRfYXQ6IG1vZC5zdHJpbmcoKSxcbiAgc2VxdWVuY2U6IG1vZC5udW1iZXIoKVxufSk7XG5hc3luYyBmdW5jdGlvbiB2ZXJpZnlTdGVsbGFyKGlucHV0VHgsIHRlc3RpbmcpIHtcbiAgY29uc3QgbWFjaGluZUJhc2VVcmwgPSB0ZXN0aW5nID8gXCJodHRwczovL2hvcml6b24tdGVzdG5ldC5zdGVsbGFyLm9yZ1wiIDogXCJodHRwczovL2hvcml6b24uc3RlbGxhci5vcmdcIjtcbiAgY29uc3QgbWFjaGluZVVybCA9IGAke21hY2hpbmVCYXNlVXJsfS90cmFuc2FjdGlvbnMvJHtpbnB1dFR4Lmhhc2h9YDtcbiAgY29uc3QgZm91bmRUeFJlc3AgPSBhd2FpdCAoMCwgaW1wb3J0X2lzb21vcnBoaWNfdW5mZXRjaDIuZGVmYXVsdCkobWFjaGluZVVybCk7XG4gIGlmICghZm91bmRUeFJlc3Aub2spIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFN0ZWxsYXIgOiBmYWlsZWQgdG8gZmV0Y2ggdHJhbnNhY3Rpb24gaGFzaCAnJHtpbnB1dFR4Lmhhc2h9JyA6IHN0YXR1cyAke2ZvdW5kVHhSZXNwLnN0YXR1c30gOiAke2ZvdW5kVHhSZXNwLnN0YXR1c1RleHR9YCk7XG4gIH1cbiAgY29uc3QgZm91bmRUeCA9IGF3YWl0IGZvdW5kVHhSZXNwLmpzb24oKTtcbiAgdHJ5IHtcbiAgICBIb3Jpem9uVHJhbnNhY3Rpb25SZXNwb25zZS5wYXJzZShmb3VuZFR4KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBtb2QuWm9kRXJyb3IpIHtcbiAgICAgIGNvbnN0IGpvaW5lZElzc3VlcyA9IGVycm9yLmlzc3Vlcy5tYXAoKGlzc3VlKSA9PiB7XG4gICAgICAgIHJldHVybiBgJHtpc3N1ZS5jb2RlfSA6IFske2lzc3VlLnBhdGguam9pbihcIiwgXCIpfV0gOiAke2lzc3VlLm1lc3NhZ2V9YDtcbiAgICAgIH0pLmpvaW4oXCI7IFwiKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgU3RlbGxhciA6IGZhaWxlZCB0byBwYXJzZSB0cmFuc2FjdGlvbiBoYXNoICcke2lucHV0VHguaGFzaH0nIDogJHtqb2luZWRJc3N1ZXN9YCk7XG4gICAgfSBlbHNlIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFN0ZWxsYXIgOiBmYWlsZWQgdG8gcGFyc2UgdHJhbnNhY3Rpb24gaGFzaCAnJHtpbnB1dFR4Lmhhc2h9JyA6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICB9XG4gIH1cbiAgY29uc3QgZm91bmRUeE1lbW9EZWNvZGVkID0gKDAsIGltcG9ydF9iYXNlNjQzLmRlY29kZSkoZm91bmRUeC5tZW1vKTtcbiAgaWYgKCEoMCwgaW1wb3J0X2NvbnN0YW50X3RpbWU0LmVxdWFsKShmb3VuZFR4TWVtb0RlY29kZWQsICgwLCBpbXBvcnRfaGV4My5kZWNvZGUpKGlucHV0VHguaW5wdXRIYXNoKSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFN0ZWxsYXIgOiBvbi1jaGFpbiAnbWVtbycgZGlkIG5vdCBtYXRjaCByZWNvcmRlZCAnbWVtbycuIEV4cGVjdGVkICcke2lucHV0VHguaW5wdXRIYXNofScgYnV0IHJlY2VpdmVkICckeygwLCBpbXBvcnRfaGV4My5lbmNvZGUpKGZvdW5kVHhNZW1vRGVjb2RlZCkudG9Mb3dlckNhc2UoKX0nIGZvciB0cmFuc2FjdGlvbiBoYXNoICcke2lucHV0VHguaGFzaH0nYCk7XG4gIH1cbiAgaWYgKGZvdW5kVHgubGVkZ2VyICE9PSBpbnB1dFR4LmxlZGdlcikge1xuICAgIHRocm93IG5ldyBFcnJvcihgU3RlbGxhciA6IG9uLWNoYWluIHRyYW5zYWN0aW9uICdsZWRnZXInIGRpZCBub3QgbWF0Y2ggcmVjb3JkZWQgJ2xlZGdlcicgZm9yIHRyYW5zYWN0aW9uIGhhc2ggJyR7aW5wdXRUeC5oYXNofSdgKTtcbiAgfVxuICBjb25zdCBsZWRnZXJSZXNwID0gYXdhaXQgKDAsIGltcG9ydF9pc29tb3JwaGljX3VuZmV0Y2gyLmRlZmF1bHQpKGAke21hY2hpbmVCYXNlVXJsfS9sZWRnZXJzLyR7aW5wdXRUeC5sZWRnZXJ9YCk7XG4gIGlmICghbGVkZ2VyUmVzcC5vaykge1xuICAgIHRocm93IG5ldyBFcnJvcihgU3RlbGxhciA6IGZhaWxlZCB0byBmZXRjaCBsZWRnZXIgJyR7aW5wdXRUeC5sZWRnZXJ9J2ApO1xuICB9XG4gIGNvbnN0IGxlZGdlciA9IGF3YWl0IGxlZGdlclJlc3AuanNvbigpO1xuICB0cnkge1xuICAgIEhvcml6b25MZWRnZXJSZXNwb25zZS5wYXJzZShsZWRnZXIpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIG1vZC5ab2RFcnJvcikge1xuICAgICAgY29uc3Qgam9pbmVkSXNzdWVzID0gZXJyb3IuaXNzdWVzLm1hcCgoaXNzdWUpID0+IHtcbiAgICAgICAgcmV0dXJuIGAke2lzc3VlLmNvZGV9IDogWyR7aXNzdWUucGF0aC5qb2luKFwiLCBcIil9XSA6ICR7aXNzdWUubWVzc2FnZX1gO1xuICAgICAgfSkuam9pbihcIjsgXCIpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBTdGVsbGFyIDogZmFpbGVkIHRvIHBhcnNlIGxlZGdlciAnJHtpbnB1dFR4LmxlZGdlcn0nIDogJHtqb2luZWRJc3N1ZXN9YCk7XG4gICAgfSBlbHNlIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFN0ZWxsYXIgOiBmYWlsZWQgdG8gcGFyc2UgbGVkZ2VyICcke2lucHV0VHgubGVkZ2VyfScgOiAke2Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgfVxuICB9XG4gIGNvbnN0IHVybEh1bWFuQmFzZSA9IFwiaHR0cHM6Ly9zdGVsbGFyLmV4cGVydC9leHBsb3JlclwiO1xuICBjb25zdCB1cmxIdW1hbkVudiA9IHRlc3RpbmcgPyBcInRlc3RuZXRcIiA6IFwicHVibGljXCI7XG4gIGNvbnN0IHVybEh1bWFuID0gYCR7dXJsSHVtYW5CYXNlfS8ke3VybEh1bWFuRW52fS90eC8ke2lucHV0VHguaGFzaH1gO1xuICBjb25zdCB2dCA9IHtcbiAgICB2ZXJpZmllZDogdHJ1ZSxcbiAgICBpbnRlbnQ6IFwic3RlbGxhclwiLFxuICAgIHRyYW5zYWN0aW9uOiBpbnB1dFR4LFxuICAgIHRpbWVzdGFtcDogbGVkZ2VyLmNsb3NlZF9hdCxcbiAgICB1cmxzOiB7XG4gICAgICBodW1hbjogW3VybEh1bWFuXSxcbiAgICAgIG1hY2hpbmU6IFttYWNoaW5lVXJsXVxuICAgIH1cbiAgfTtcbiAgcmV0dXJuIFZlcmlmaWNhdGlvblRyYW5zYWN0aW9uLnBhcnNlKHZ0KTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUNvbW1pdG1lbnRWZXJpZmljYXRpb25FcnJvcihlcnJvck1lc3NhZ2UpIHtcbiAgcmV0dXJuIHtcbiAgICB2ZXJpZmllZDogZmFsc2UsXG4gICAgZXJyb3I6IGBDb21taXRtZW50IGludmFsaWQgOiAke2Vycm9yTWVzc2FnZX1gXG4gIH07XG59XG5hc3luYyBmdW5jdGlvbiB2ZXJpZmllcihjb21taXRtZW50LCBrZXlzID0gdm9pZCAwLCBlbnRyb3B5RnJvbUhhc2hGdW5jdGlvbiwgc2tpcEl0ZW1TaWduYXR1cmVWZXJpZmljYXRpb24gPSBmYWxzZSwgc2tpcENvbW1pdG1lbnRTaWduYXR1cmVWZXJpZmljYXRpb24gPSBmYWxzZSkge1xuICB2YXIgX2E7XG4gIHRyeSB7XG4gICAgQ29tbWl0bWVudC5wYXJzZShjb21taXRtZW50KTtcbiAgICBjb25zdCB7Y29tbWl0bWVudERhdGEsIGNvbW1pdG1lbnREYXRhU2lnbmF0dXJlc30gPSBjb21taXRtZW50O1xuICAgIGNvbnN0IHtpZCwgaXRlbURhdGEsIGl0ZW1EYXRhU2lnbmF0dXJlcywgaXRlbVNpZ25hbHMsIHByb29mcywgdHJhbnNhY3Rpb25zfSA9IGNvbW1pdG1lbnREYXRhO1xuICAgIGNvbnN0IGRlY29kZWRJZCA9IGRlY29kZVVuc2FmZWx5KGlkKTtcbiAgICBpZiAoIWl0ZW1EYXRhKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb21taXRtZW50IGlzIG1pc3NpbmcgaXRlbURhdGEuXCIpO1xuICAgIH1cbiAgICBjb25zdCBjYW5vbmljYWxJdGVtRGF0YUhhc2ggPSBjYW5vbmljYWxpemVBbmRIYXNoRGF0YShpdGVtRGF0YSk7XG4gICAgaWYgKCFza2lwSXRlbVNpZ25hdHVyZVZlcmlmaWNhdGlvbikge1xuICAgICAgZm9yIChjb25zdCBzaWcgb2YgaXRlbURhdGFTaWduYXR1cmVzICE9IG51bGwgPyBpdGVtRGF0YVNpZ25hdHVyZXMgOiBbXSkge1xuICAgICAgICBjb25zdCB7cHVibGljS2V5LCBzaWduYXR1cmV9ID0gc2lnO1xuICAgICAgICBjb25zdCBwdWJsaWNLZXlEZWNvZGVkID0gKDAsIGltcG9ydF9iYXNlNjQ0LmRlY29kZSkocHVibGljS2V5KTtcbiAgICAgICAgY29uc3Qgc2lnbmF0dXJlSXNWZXJpZmllZCA9ICgwLCBpbXBvcnRfZWQyNTUxOTIudmVyaWZ5KShwdWJsaWNLZXlEZWNvZGVkLCBjYW5vbmljYWxJdGVtRGF0YUhhc2guaGFzaCwgKDAsIGltcG9ydF9iYXNlNjQ0LmRlY29kZSkoc2lnbmF0dXJlKSk7XG4gICAgICAgIGlmICghc2lnbmF0dXJlSXNWZXJpZmllZCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSXRlbURhdGEgc2lnbmF0dXJlIHZlcmlmaWNhdGlvbiBmYWlsZWQgZm9yIHB1YmxpYyBrZXkgJHtwdWJsaWNLZXl9LmApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGl0ZW1EYXRhSGFzaGVzID0gW107XG4gICAgZm9yIChjb25zdCBlbGVtZW50IG9mIGl0ZW1EYXRhICE9IG51bGwgPyBpdGVtRGF0YSA6IFtdKSB7XG4gICAgICBjb25zdCB7aGFzaCwgaGFzaFR5cGV9ID0gZWxlbWVudDtcbiAgICAgIGlmIChoYXNoICE9PSB2b2lkIDApIHtcbiAgICAgICAgaXRlbURhdGFIYXNoZXMucHVzaCh7aGFzaCwgaGFzaFR5cGV9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgaXRlbSA9IHtcbiAgICAgIGl0ZW1EYXRhLFxuICAgICAgaXRlbURhdGFTaWduYXR1cmVzLFxuICAgICAgaXRlbVNpZ25hbHNcbiAgICB9O1xuICAgIGNvbnN0IGNhbm9uaWNhbEl0ZW1IYXNoID0gY2Fub25pY2FsaXplQW5kSGFzaERhdGEoaXRlbSk7XG4gICAgbGV0IG9ic2VydmFibGVFbnRyb3B5Q3JlYXRlZEF0ID0gdm9pZCAwO1xuICAgIGlmIChpdGVtU2lnbmFscyA9PSBudWxsID8gdm9pZCAwIDogaXRlbVNpZ25hbHMub2JzZXJ2YWJsZUVudHJvcHkpIHtcbiAgICAgIGxldCBlbnRyb3B5O1xuICAgICAgaWYgKGVudHJvcHlGcm9tSGFzaEZ1bmN0aW9uKSB7XG4gICAgICAgIGVudHJvcHkgPSBhd2FpdCBlbnRyb3B5RnJvbUhhc2hGdW5jdGlvbihpdGVtU2lnbmFscyA9PSBudWxsID8gdm9pZCAwIDogaXRlbVNpZ25hbHMub2JzZXJ2YWJsZUVudHJvcHkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW50cm9weSA9IGF3YWl0IGdldEVudHJvcHlGcm9tSGFzaChpdGVtU2lnbmFscyA9PSBudWxsID8gdm9pZCAwIDogaXRlbVNpZ25hbHMub2JzZXJ2YWJsZUVudHJvcHkpO1xuICAgICAgfVxuICAgICAgaWYgKGVudHJvcHkpIHtcbiAgICAgICAgb2JzZXJ2YWJsZUVudHJvcHlDcmVhdGVkQXQgPSBuZXcgRGF0ZShlbnRyb3B5LmNyZWF0ZWRBdCk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGNhbm9uaWNhbENvbW1pdG1lbnREYXRhSGFzaCA9IGNhbm9uaWNhbGl6ZUFuZEhhc2hEYXRhKGNvbW1pdG1lbnREYXRhKTtcbiAgICBpZiAoIXNraXBDb21taXRtZW50U2lnbmF0dXJlVmVyaWZpY2F0aW9uKSB7XG4gICAgICBmb3IgKGNvbnN0IHNpZyBvZiBjb21taXRtZW50RGF0YVNpZ25hdHVyZXMpIHtcbiAgICAgICAgY29uc3Qge3B1YmxpY0tleSwgc2lnbmF0dXJlfSA9IHNpZztcbiAgICAgICAgY29uc3QgcHVibGljS2V5RGVjb2RlZCA9ICgwLCBpbXBvcnRfYmFzZTY0NC5kZWNvZGUpKHB1YmxpY0tleSk7XG4gICAgICAgIGNvbnN0IHNpZ25hdHVyZVZlcmlmaWVkID0gKDAsIGltcG9ydF9lZDI1NTE5Mi52ZXJpZnkpKHB1YmxpY0tleURlY29kZWQsIGNhbm9uaWNhbENvbW1pdG1lbnREYXRhSGFzaC5oYXNoLCAoMCwgaW1wb3J0X2Jhc2U2NDQuZGVjb2RlKShzaWduYXR1cmUpKTtcbiAgICAgICAgaWYgKCFzaWduYXR1cmVWZXJpZmllZCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ29tbWl0bWVudERhdGEgc2lnbmF0dXJlIHZlcmlmaWNhdGlvbiBmYWlsZWQgZm9yIHB1YmxpYyBrZXkgJyR7cHVibGljS2V5fSdgKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwdWJsaWNLZXlWZXJpZmllZCA9IGF3YWl0IHB1YmxpY0tleU1hdGNoZXNLbm93blB1YmxpY0tleShwdWJsaWNLZXlEZWNvZGVkLCBrZXlzKTtcbiAgICAgICAgaWYgKCFwdWJsaWNLZXlWZXJpZmllZCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ29tbWl0bWVudERhdGEgc2lnbmF0dXJlIHB1YmxpYyBrZXkgdmVyaWZpY2F0aW9uIGZhaWxlZCBmb3IgcHVibGljIGtleSAnJHtwdWJsaWNLZXl9J2ApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghcHJvb2ZzIHx8ICFBcnJheS5pc0FycmF5KHByb29mcykgfHwgcHJvb2ZzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ29tbWl0bWVudCBpcyBtaXNzaW5nIHByb29mc1wiKTtcbiAgICB9XG4gICAgY29uc3QgdmVyaWZpY2F0aW9uUHJvb2ZzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9vZnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIENvbW1pdFByb29mLnBhcnNlKHByb29mc1tpXSk7XG4gICAgICBjb25zdCBwcm9vZiA9IHByb29mc1tpXTtcbiAgICAgIGNvbnN0IHZwID0ge1xuICAgICAgICBpbnB1dEhhc2g6IHByb29mLmlucHV0SGFzaCxcbiAgICAgICAgbWVya2xlUm9vdDogcHJvb2YubWVya2xlUm9vdFxuICAgICAgfTtcbiAgICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgIGlmIChwcm9vZi5pbnB1dEhhc2ggIT09IGNhbm9uaWNhbEl0ZW1IYXNoLmhhc2hIZXgpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFByb29mIFske2l9XSBpbnB1dEhhc2ggJyR7cHJvb2YuaW5wdXRIYXNofScgbXVzdCBtYXRjaCBoYXNoIG9mIGNhbm9uaWNhbCBpdGVtRGF0YSwgaXRlbVNpZ25hdHVyZXMsIGl0ZW1TaWduYWxzIFske2Nhbm9uaWNhbEl0ZW1IYXNoLmhhc2hIZXh9XWApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaSA+PSAxKSB7XG4gICAgICAgIGNvbnN0IHByZXZpb3VzUHJvb2ZJbmRleCA9IGkgLSAxO1xuICAgICAgICBjb25zdCBwcmV2aW91c1Byb29mID0gcHJvb2ZzW3ByZXZpb3VzUHJvb2ZJbmRleF07XG4gICAgICAgIGlmIChwcm9vZi5pbnB1dEhhc2ggIT09IHByZXZpb3VzUHJvb2YubWVya2xlUm9vdCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgUHJvb2YgWyR7aX1dIGlucHV0SGFzaCAnJHtwcm9vZi5pbnB1dEhhc2h9JyBtdXN0IG1hdGNoIHByZXZpb3VzIHByb29mIFske3ByZXZpb3VzUHJvb2ZJbmRleH1dIG1lcmtsZVJvb3QgJyR7cHJldmlvdXNQcm9vZi5tZXJrbGVSb290fSdgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgaXNUcmVlVmVyaWZpZWQgPSBUcmVlLnZlcmlmeSgoMCwgaW1wb3J0X2hleDQuZGVjb2RlKShwcm9vZi5tZXJrbGVSb290KSwgcHJvb2YuaW5jbHVzaW9uUHJvb2YsICgwLCBpbXBvcnRfaGV4NC5kZWNvZGUpKHByb29mLmlucHV0SGFzaCkpO1xuICAgICAgICBpZiAoIWlzVHJlZVZlcmlmaWVkKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBQcm9vZiBbJHtpfV0gaXMgbm90IHZhbGlkIGZvciB0aGUgZ2l2ZW4gZGF0YSwgaW5jbHVzaW9uIHByb29mLCBhbmQgTWVya2xlIHJvb3QuYCk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBQcm9vZiBbJHtpfV0gaXMgbm90IHZhbGlkIGZvciB0aGUgZ2l2ZW4gZGF0YSwgaW5jbHVzaW9uIHByb29mLCBhbmQgTWVya2xlIHJvb3Q6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmVyaWZpY2F0aW9uUHJvb2ZzLnB1c2godnApO1xuICAgIH1cbiAgICBjb25zdCBwcm9vZk1lcmtsZVJvb3RzID0gcHJvb2ZzLm1hcCgocHJvb2YpID0+IHtcbiAgICAgIHJldHVybiBwcm9vZi5tZXJrbGVSb290O1xuICAgIH0pO1xuICAgIGlmICghcHJvb2ZNZXJrbGVSb290cyB8fCAhQXJyYXkuaXNBcnJheShwcm9vZk1lcmtsZVJvb3RzKSB8fCBwcm9vZk1lcmtsZVJvb3RzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ29tbWl0bWVudCBpcyBtaXNzaW5nIHByb29mIE1lcmtsZSByb290cy5cIik7XG4gICAgfVxuICAgIGNvbnN0IHZlcmlmaWNhdGlvblRyYW5zYWN0aW9ucyA9IFtdO1xuICAgIGZvciAoY29uc3QgbWVya2xlUm9vdCBvZiBwcm9vZk1lcmtsZVJvb3RzKSB7XG4gICAgICBjb25zdCB0cmFuc2FjdGlvbnNGb3JNZXJrbGVSb290ID0gdHJhbnNhY3Rpb25zW21lcmtsZVJvb3RdIHx8IFtdO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0cmFuc2FjdGlvbnNGb3JNZXJrbGVSb290Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgdHJhbnNhY3Rpb24gPSB0cmFuc2FjdGlvbnNGb3JNZXJrbGVSb290W2ldO1xuICAgICAgICAgIGxldCB2ZXJpZmljYXRpb25SZXN1bHQyO1xuICAgICAgICAgIHN3aXRjaCAodHJhbnNhY3Rpb24uaW50ZW50KSB7XG4gICAgICAgICAgICBjYXNlIFwiYml0Y29pblwiOlxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJldGhlcmV1bVwiOlxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJzdGVsbGFyXCI6XG4gICAgICAgICAgICAgIHZlcmlmaWNhdGlvblJlc3VsdDIgPSBhd2FpdCB2ZXJpZnlTdGVsbGFyKHRyYW5zYWN0aW9uLCBkZWNvZGVkSWQudGVzdCk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInR3aXR0ZXJcIjpcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBjb25zdCBpbnZhbGlkQ29tbWl0VHJhbnNhY3Rpb24gPSB0cmFuc2FjdGlvbjtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIHRyYW5zYWN0aW9uIGRpc2NyaW1pbmFudGApO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2ZXJpZmljYXRpb25UcmFuc2FjdGlvbnMucHVzaChWZXJpZmljYXRpb25UcmFuc2FjdGlvbi5wYXJzZSh2ZXJpZmljYXRpb25SZXN1bHQyKSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgbW9kLlpvZEVycm9yKSB7XG4gICAgICAgICAgICBjb25zdCBqb2luZWRJc3N1ZXMgPSBlcnJvci5pc3N1ZXMubWFwKChpc3N1ZSkgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gYCR7aXNzdWUuY29kZX0gOiBbJHtpc3N1ZS5wYXRoLmpvaW4oXCIsIFwiKX1dIDogJHtpc3N1ZS5tZXNzYWdlfWA7XG4gICAgICAgICAgICB9KS5qb2luKFwiOyBcIik7XG4gICAgICAgICAgICBjb25zdCB2ID0ge1xuICAgICAgICAgICAgICB2ZXJpZmllZDogZmFsc2UsXG4gICAgICAgICAgICAgIGludGVudDogdHJhbnNhY3Rpb25zRm9yTWVya2xlUm9vdFtpXS5pbnRlbnQsXG4gICAgICAgICAgICAgIHRyYW5zYWN0aW9uOiB0cmFuc2FjdGlvbnNGb3JNZXJrbGVSb290WzBdLFxuICAgICAgICAgICAgICBlcnJvcjogYFRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmb3IgJyR7dHJhbnNhY3Rpb25zRm9yTWVya2xlUm9vdFswXS5pbnRlbnR9JyBpbnB1dEhhc2ggJyR7dHJhbnNhY3Rpb25zRm9yTWVya2xlUm9vdFtpXS5pbnB1dEhhc2h9JyBmYWlsZWQgOiAke2pvaW5lZElzc3Vlc31gXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmVyaWZpY2F0aW9uVHJhbnNhY3Rpb25zLnB1c2godik7XG4gICAgICAgICAgfSBlbHNlIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICBjb25zdCB2ID0ge1xuICAgICAgICAgICAgICB2ZXJpZmllZDogZmFsc2UsXG4gICAgICAgICAgICAgIGludGVudDogdHJhbnNhY3Rpb25zRm9yTWVya2xlUm9vdFtpXS5pbnRlbnQsXG4gICAgICAgICAgICAgIHRyYW5zYWN0aW9uOiB0cmFuc2FjdGlvbnNGb3JNZXJrbGVSb290WzBdLFxuICAgICAgICAgICAgICBlcnJvcjogYFRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmb3IgJyR7dHJhbnNhY3Rpb25zRm9yTWVya2xlUm9vdFswXS5pbnRlbnR9JyBpbnB1dEhhc2ggJyR7dHJhbnNhY3Rpb25zRm9yTWVya2xlUm9vdFtpXS5pbnB1dEhhc2h9JyBmYWlsZWQgOiAke2Vycm9yLm1lc3NhZ2V9YFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZlcmlmaWNhdGlvblRyYW5zYWN0aW9ucy5wdXNoKHYpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBhbnlUcmFuc2FjdGlvbnNWZXJpZmllZCA9IHZlcmlmaWNhdGlvblRyYW5zYWN0aW9ucy5zb21lKCh2KSA9PiB7XG4gICAgICByZXR1cm4gdi52ZXJpZmllZCA9PT0gdHJ1ZTtcbiAgICB9KTtcbiAgICBjb25zdCBhbGxWZXJpZmllZFRyYW5zYWN0aW9uVGltZXN0YW1wcyA9IFtdO1xuICAgIHZlcmlmaWNhdGlvblRyYW5zYWN0aW9ucy5mb3JFYWNoKCh0eCkgPT4ge1xuICAgICAgaWYgKHR4LnZlcmlmaWVkICYmIHR4LnRpbWVzdGFtcCkge1xuICAgICAgICBhbGxWZXJpZmllZFRyYW5zYWN0aW9uVGltZXN0YW1wcy5wdXNoKHR4LnRpbWVzdGFtcCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgY29uc3QgYWxsVmVyaWZpZWRUcmFuc2FjdGlvblRpbWVzdGFtcHNTb3J0ZWQgPSBhbGxWZXJpZmllZFRyYW5zYWN0aW9uVGltZXN0YW1wcy5zb3J0KChhLCBiKSA9PiArbmV3IERhdGUoYSkgLSArbmV3IERhdGUoYikpO1xuICAgIGNvbnN0IHZlcmlmaWNhdGlvblJlc3VsdCA9IHtcbiAgICAgIGlkLFxuICAgICAgaWREYXRhOiBkZWNvZGVkSWQsXG4gICAgICB2ZXJpZmllZDogYW55VHJhbnNhY3Rpb25zVmVyaWZpZWQsXG4gICAgICBpdGVtRGF0YToge1xuICAgICAgICBoYXNoOiBjYW5vbmljYWxJdGVtRGF0YUhhc2guaGFzaEhleCxcbiAgICAgICAgaGFzaFR5cGU6IGNhbm9uaWNhbEl0ZW1EYXRhSGFzaC5oYXNoVHlwZSxcbiAgICAgICAgc2lnbmF0dXJlc0NvdW50OiBpdGVtRGF0YVNpZ25hdHVyZXMgPyBpdGVtRGF0YVNpZ25hdHVyZXMubGVuZ3RoIDogMFxuICAgICAgfSxcbiAgICAgIGl0ZW06IHtcbiAgICAgICAgaGFzaDogY2Fub25pY2FsSXRlbUhhc2guaGFzaEhleCxcbiAgICAgICAgaGFzaFR5cGU6IFwic2hhLTI1NlwiXG4gICAgICB9LFxuICAgICAgY29tbWl0bWVudERhdGE6IHtcbiAgICAgICAgaGFzaDogY2Fub25pY2FsQ29tbWl0bWVudERhdGFIYXNoLmhhc2hIZXgsXG4gICAgICAgIGhhc2hUeXBlOiBcInNoYS0yNTZcIixcbiAgICAgICAgc2lnbmF0dXJlc0NvdW50OiBjb21taXRtZW50RGF0YVNpZ25hdHVyZXMgPyBjb21taXRtZW50RGF0YVNpZ25hdHVyZXMubGVuZ3RoIDogMFxuICAgICAgfSxcbiAgICAgIHByb29mczogdmVyaWZpY2F0aW9uUHJvb2ZzLFxuICAgICAgdHJhbnNhY3Rpb25zOiB2ZXJpZmljYXRpb25UcmFuc2FjdGlvbnNcbiAgICB9O1xuICAgIGlmIChhbnlUcmFuc2FjdGlvbnNWZXJpZmllZCkge1xuICAgICAgdmVyaWZpY2F0aW9uUmVzdWx0LmNvbW1pdHNUbyA9IHtcbiAgICAgICAgaGFzaGVzOiBpdGVtRGF0YUhhc2hlcyxcbiAgICAgICAgb2JzZXJ2YWJsZUVudHJvcHk6IG9ic2VydmFibGVFbnRyb3B5Q3JlYXRlZEF0ID8gKF9hID0gaXRlbS5pdGVtU2lnbmFscykgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLm9ic2VydmFibGVFbnRyb3B5IDogdm9pZCAwLFxuICAgICAgICB0aW1lc3RhbXBzOiB7XG4gICAgICAgICAgc3VibWl0dGVkQWZ0ZXI6IG9ic2VydmFibGVFbnRyb3B5Q3JlYXRlZEF0ID09IG51bGwgPyB2b2lkIDAgOiBvYnNlcnZhYmxlRW50cm9weUNyZWF0ZWRBdC50b0lTT1N0cmluZygpLFxuICAgICAgICAgIHN1Ym1pdHRlZEF0OiB0aW1lc3RhbXBNaWNyb3NlY29uZHNUb0lTTyhkZWNvZGVkSWQudGltZXN0YW1wKSxcbiAgICAgICAgICBzdWJtaXR0ZWRCZWZvcmU6IGFsbFZlcmlmaWVkVHJhbnNhY3Rpb25UaW1lc3RhbXBzU29ydGVkLFxuICAgICAgICAgIHN1Ym1pdFdpbmRvd01pbGxpc2Vjb25kczogb2JzZXJ2YWJsZUVudHJvcHlDcmVhdGVkQXQgJiYgYWxsVmVyaWZpZWRUcmFuc2FjdGlvblRpbWVzdGFtcHNTb3J0ZWRbMF0gPyArbmV3IERhdGUoYWxsVmVyaWZpZWRUcmFuc2FjdGlvblRpbWVzdGFtcHNTb3J0ZWRbMF0pIC0gK25ldyBEYXRlKG9ic2VydmFibGVFbnRyb3B5Q3JlYXRlZEF0KSA6IHZvaWQgMFxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gQ29tbWl0bWVudFZlcmlmaWNhdGlvbi5wYXJzZSh2ZXJpZmljYXRpb25SZXN1bHQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIG1vZC5ab2RFcnJvcikge1xuICAgICAgY29uc3Qgam9pbmVkSXNzdWVzID0gZXJyb3IuaXNzdWVzLm1hcCgoaXNzdWUpID0+IHtcbiAgICAgICAgcmV0dXJuIGAke2lzc3VlLmNvZGV9IDogWyR7aXNzdWUucGF0aC5qb2luKFwiLCBcIil9XSA6ICR7aXNzdWUubWVzc2FnZX1gO1xuICAgICAgfSkuam9pbihcIjsgXCIpO1xuICAgICAgcmV0dXJuIGNyZWF0ZUNvbW1pdG1lbnRWZXJpZmljYXRpb25FcnJvcihqb2luZWRJc3N1ZXMpO1xuICAgIH0gZWxzZSBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgcmV0dXJuIGNyZWF0ZUNvbW1pdG1lbnRWZXJpZmljYXRpb25FcnJvcihlcnJvci5tZXNzYWdlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGNyZWF0ZUNvbW1pdG1lbnRWZXJpZmljYXRpb25FcnJvcihcIlVua25vd24gZXJyb3JcIik7XG4gICAgfVxuICB9XG59XG5hc3luYyBmdW5jdGlvbiB2ZXJpZnkyKGNvbW1pdG1lbnQsIG9wdGlvbnMpIHtcbiAgdmFyIF9hLCBfYiwgX2M7XG4gIHJldHVybiBhd2FpdCB2ZXJpZmllcihjb21taXRtZW50LCAoX2EgPSBvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLmtleXMpICE9IG51bGwgPyBfYSA6IFtdLCBvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLmVudHJvcHlGcm9tSGFzaEZ1bmN0aW9uLCAoX2IgPSBvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLnNraXBJdGVtU2lnbmF0dXJlVmVyaWZpY2F0aW9uKSAhPSBudWxsID8gX2IgOiBmYWxzZSwgKF9jID0gb3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy5za2lwQ29tbWl0bWVudFNpZ25hdHVyZVZlcmlmaWNhdGlvbikgIT0gbnVsbCA/IF9jIDogZmFsc2UpO1xufVxuYXN5bmMgZnVuY3Rpb24gaXNWZXJpZmllZChjb21taXRtZW50LCBvcHRpb25zKSB7XG4gIHZhciBfYSwgX2IsIF9jO1xuICB0cnkge1xuICAgIGNvbnN0IHZlcmlmaWNhdGlvbiA9IGF3YWl0IHZlcmlmaWVyKGNvbW1pdG1lbnQsIChfYSA9IG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMua2V5cykgIT0gbnVsbCA/IF9hIDogW10sIG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMuZW50cm9weUZyb21IYXNoRnVuY3Rpb24sIChfYiA9IG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMuc2tpcEl0ZW1TaWduYXR1cmVWZXJpZmljYXRpb24pICE9IG51bGwgPyBfYiA6IGZhbHNlLCAoX2MgPSBvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLnNraXBDb21taXRtZW50U2lnbmF0dXJlVmVyaWZpY2F0aW9uKSAhPSBudWxsID8gX2MgOiBmYWxzZSk7XG4gICAgcmV0dXJuIHZlcmlmaWNhdGlvbi52ZXJpZmllZDtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbmFzeW5jIGZ1bmN0aW9uIGFzc2VydFZlcmlmaWVkKGNvbW1pdG1lbnQsIG9wdGlvbnMpIHtcbiAgdmFyIF9hLCBfYiwgX2M7XG4gIGNvbnN0IHZlcmlmaWNhdGlvbiA9IGF3YWl0IHZlcmlmaWVyKGNvbW1pdG1lbnQsIChfYSA9IG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMua2V5cykgIT0gbnVsbCA/IF9hIDogW10sIG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMuZW50cm9weUZyb21IYXNoRnVuY3Rpb24sIChfYiA9IG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMuc2tpcEl0ZW1TaWduYXR1cmVWZXJpZmljYXRpb24pICE9IG51bGwgPyBfYiA6IGZhbHNlLCAoX2MgPSBvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLnNraXBDb21taXRtZW50U2lnbmF0dXJlVmVyaWZpY2F0aW9uKSAhPSBudWxsID8gX2MgOiBmYWxzZSk7XG4gIGlmICghdmVyaWZpY2F0aW9uLnZlcmlmaWVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHZlcmlmaWNhdGlvbi5lcnJvcik7XG4gIH1cbn1cbi8qISBzY3VyZS1iYXNlIC0gTUlUIExpY2Vuc2UgKGMpIDIwMjIgUGF1bCBNaWxsZXIgKHBhdWxtaWxsci5jb20pICovXG5leHBvcnQge0NvbW1pdG1lbnQsIENvbW1pdG1lbnRWZXJpZmljYXRpb24sIFNpZ25lZEtleSwgU2lnbmVkS2V5cywgYXNzZXJ0VmVyaWZpZWQsIGlzVmVyaWZpZWQsIHZlcmlmeTIgYXMgdmVyaWZ5fTtcbmV4cG9ydCBkZWZhdWx0IG51bGw7XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSSxTQUFTLEdBQUcsTUFBTSxDQUFDLGNBQWMsQUFBQztBQUN0QyxJQUFJLGFBQWEsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsS0FBSyxHQUFL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TSxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFFO29CQUNsQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEFBQUM7b0JBQ3ZELEdBQUcsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO29CQUMxQyxHQUFHLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztvQkFDMUMsR0FBRyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7b0JBQzFDLEdBQUcsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO2lCQUMzQztnQkFDRCxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQUFBQztnQkFDM0IsSUFBSSxJQUFJLEdBQUcsQ0FBQyxFQUFFO29CQUNaLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxBQUFDO29CQUM1RCxHQUFHLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztvQkFDMUMsR0FBRyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7b0JB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QUNyQixzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixxQkFBUztBQUNULHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1YscUJBQVM7QUFDVCxzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixxQkFBUztBQUNULHNCQUFVO0FBQ1YscUJBQVM7QUFDVCxzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixxQkFBUztBQUNULHNCQUFVO0FBQ1YscUJBQVM7QUFDVCxzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1YscUJBQVM7QUFDVCxxQkFBUztBQUNULHNCQUFVO0FBQ1YscUJBQVM7QUFDVCxzQkFBVTtBQUNWLHFCQUFTO0FBQ1Qsc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixxQkFBUztBQUNULHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixxQkFBUztBQUNULHNCQUFVO0FBQ1YscUJBQVM7QUFDVCxxQkFBUztBQUNULHFCQUFTO0FBQ1Qsc0JBQVU7QUFDVixxQkFBUztBQUNULHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHFCQUFTO0FBQ1Qsc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixxQkFBUztBQUNULHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHFCQUFTO0FBQ1QscUJBQVM7QUFDVCxxQkFBUztBQUNULHNCQUFVO0FBQ1YscUJBQVM7QUFDVCxzQkFBVTtBQUNWLHFCQUFTO0FBQ1Qsc0JBQVU7QUFDVixxQkFBUztBQUNULHNCQUFVO0FBQ1YscUJBQVM7QUFDVCxzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1YscUJBQVM7QUFDVCxzQkFBVTtBQUNWLHFCQUFTO0FBQ1Qsc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1YscUJBQVM7QUFDVCxzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHFCQUFTO0FBQ1Qsc0JBQVU7QUFDVixxQkFBUztBQUNULHNCQUFVO0FBQ1YscUJBQVM7QUFDVCxzQkFBVTtBQUNWLHFCQUFTO0FBQ1QscUJBQVM7QUFDVCxxQkFBUztBQUNULHFCQUFTO0FBQ1QscUJBQVM7QUFDVCxzQkFBVTtBQUNWLHNCQUFVO0FBQ1YscUJBQVM7QUFDVCxzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHFCQUFTO0FBQ1Qsc0JBQVU7QUFDVixzQkFBVTtTQUNYLENBQUMsQUFBQztRQUNILFNBQVMsVUFBVSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRTtZQUMvQyxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEFBQUM7WUFDbk4sSUFBSSxDQUFDLEVBQUUsRUFBRSxBQUFDO1lBQ1YsSUFBSSxFQUFFLEVBQUUsRUFBRSxBQUFDO1lBQ1gsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEFBQUM7WUFDZixNQUFPLEdBQUcsSUFBSSxHQUFHLENBQUU7Z0JBQ2pCLElBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUU7b0JBQzNCLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxBQUFDO29CQUNwQixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7b0JBQ3BDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7aUJBQ3pDO2dCQUNELElBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUU7b0JBQzNCLElBQUksR0FBRyxHQUFHLEdBQUcsQUFBQztvQkFDZCxJQUFJLEdBQUcsR0FBRyxHQUFHLEFBQUM7b0JBQ2QsSUFBSSxHQUFHLEdBQUcsR0FBRyxBQUFDO29CQUNkLElBQUksR0FBRyxHQUFHLEdBQUcsQUFBQztvQkFDZCxJQUFJLEdBQUcsR0FBRyxHQUFHLEFBQUM7b0JBQ2QsSUFBSSxHQUFHLEdBQUcsR0FBRyxBQUFDO29CQUNkLElBQUksR0FBRyxHQUFHLEdBQUcsQUFBQztvQkFDZCxJQUFJLEdBQUcsR0FBRyxHQUFHLEFBQUM7b0JBQ2QsSUFBSSxHQUFHLEdBQUcsR0FBRyxBQUFDO29CQUNkLElBQUksR0FBRyxHQUFHLEdBQUcsQUFBQztvQkFDZCxJQUFJLEdBQUcsR0FBRyxHQUFHLEFBQUM7b0JBQ2QsSUFBSSxHQUFHLEdBQUcsR0FBRyxBQUFDO29CQUNkLElBQUksR0FBRyxHQUFHLEdBQUcsQUFBQztvQkFDZCxJQUFJLEdBQUcsR0FBRyxHQUFHLEFBQUM7b0JBQ2QsSUFBSSxHQUFHLEdBQUcsR0FBRyxBQUFDO29CQUNkLElBQUksR0FBRyxHQUFHLEdBQUcsQUFBQztvQkFDZCxDQUFDLEdBQUcsR0FBRyxDQUFDO29CQUNSLEVBQUUsR0FBRyxHQUFHLENBQUM7b0JBQ1QsQ0FBQyxHQUFHLEVBQUUsR0FBRyxLQUFLLENBQUM7b0JBQ2YsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUM7b0JBQ2QsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7b0JBQ2QsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7b0JBQ2IsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLEVBQUUsR0FBRyxHQUFHLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLEVBQUUsR0FBRyxHQUFHLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLEVBQUUsR0FBRyxFQUFFLEdBQUcsR0FBRyxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO29CQUM5RyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEtBQUssRUFBRSxHQUFHLEdBQUcsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssRUFBRSxHQUFHLEdBQUcsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxHQUFHLElBQUksRUFBRSxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7b0JBQy9HLENBQUMsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDO29CQUNoQixDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQztvQkFDZixDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQztvQkFDZixDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztvQkFDZCxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7b0JBQzNCLEVBQUUsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztvQkFDNUIsQ0FBQyxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUM7b0JBQ2hCLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDO29CQUNmLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDO29CQUNmLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO29CQUNkLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO29CQUNiLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztvQkFDbEIsQ0FBQyxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUM7b0JBQ2hCLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDO29CQUNmLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDO29CQUNmLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO29CQUNkLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO29CQUNmLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO29CQUNoQixDQUFDLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQztvQkFDaEIsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUM7b0JBQ2YsQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUM7b0JBQ2YsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7b0JBQ2QsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7b0JBQ2QsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7b0JBQ2QsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7b0JBQ2QsRUFBRSxHQUFHLENBQUMsR0FBRyxLQUFLLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztvQkFDekIsRUFBRSxHQUFHLENBQUMsR0FBRyxLQUFLLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztvQkFDekIsQ0FBQyxHQUFHLEVBQUUsQ0FBQztvQkFDUCxFQUFFLEdBQUcsRUFBRSxDQUFDO29CQUNSLENBQUMsR0FBRyxFQUFFLEdBQUcsS0FBSyxDQUFDO29CQUNmLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDO29CQUNkLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO29CQUNkLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO29CQUNiLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxFQUFFLEdBQUcsR0FBRyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxFQUFFLEdBQUcsRUFBRSxHQUFHLEdBQUcsSUFBSSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxFQUFFLEdBQUcsRUFBRSxHQUFHLEdBQUcsSUFBSSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztvQkFDMUgsRUFBRSxHQUFHLENBQUMsR0FBRyxLQUFLLEVBQUUsR0FBRyxHQUFHLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLEVBQUUsR0FBRyxFQUFFLEdBQUcsR0FBRyxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLEVBQUUsR0FBRyxFQUFFLEdBQUcsR0FBRyxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO29CQUMzSCxDQUFDLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQztvQkFDaEIsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUM7b0JBQ2YsQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUM7b0JBQ2YsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7b0JBQ2QsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO29CQUN0QyxFQUFFLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7b0JBQ3ZDLENBQUMsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDO29CQUNoQixDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQztvQkFDZixDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQztvQkFDZixDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztvQkFDZCxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztvQkFDZCxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztvQkFDZCxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztvQkFDZCxHQUFHLEdBQUcsQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO29CQUMxQixHQUFHLEdBQUcsQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO29CQUMxQixDQUFDLEdBQUcsR0FBRyxDQUFDO29CQUNSLEVBQUUsR0FBRyxHQUFHLENBQUM7b0JBQ1QsQ0FBQyxHQUFHLEVBQUUsR0FBRyxLQUFLLENBQUM7b0JBQ2YsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUM7b0JBQ2QsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7b0JBQ2QsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7b0JBQ2IsQ0FBQyxHQUFHLEVBQUUsQ0FBQztvQkFDUCxFQUFFLEdBQUcsRUFBRSxDQUFDO29CQUNSLENBQUMsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDO29CQUNoQixDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQztvQkFDZixDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQztvQkFDZixDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztvQkFDZCxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztvQkFDZCxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztvQkFDZCxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztvQkFDZCxHQUFHLEdBQUcsQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO29CQUMxQixHQUFHLEdBQUcsQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO29CQUMxQixHQUFHLEdBQUcsR0FBRyxDQUFDO29CQUNWLEdBQUcsR0FBRyxHQUFHLENBQUM7b0JBQ1YsR0FBRyxHQUFHLEdBQUcsQ0FBQztvQkFDVixHQUFHLEdBQUcsR0FBRyxDQUFDO29CQUNWLEdBQUcsR0FBRyxHQUFHLENBQUM7b0JBQ1YsR0FBRyxHQUFHLEdBQUcsQ0FBQztvQkFDVixHQUFHLEdBQUcsR0FBRyxDQUFDO29CQUNWLEdBQUcsR0FBRyxHQUFHLENBQUM7b0JBQ1YsR0FBRyxHQUFHLEdBQUcsQ0FBQztvQkFDVixHQUFHLEdBQUcsR0FBRyxDQUFDO29CQUNWLEdBQUcsR0FBRyxHQUFHLENBQUM7b0JBQ1YsR0FBRyxHQUFHLEdBQUcsQ0FBQztvQkFDVixHQUFHLEdBQUcsR0FBRyxDQUFDO29CQUNWLEdBQUcsR0FBRyxHQUFHLENBQUM7b0JBQ1YsR0FBRyxHQUFHLEdBQUcsQ0FBQztvQkFDVixHQUFHLEdBQUcsR0FBRyxDQUFDO29CQUNWLElBQUksQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEVBQUU7d0JBQ2pCLElBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUU7NEJBQzNCLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7NEJBQ1YsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQzs0QkFDWCxDQUFDLEdBQUcsRUFBRSxHQUFHLEtBQUssQ0FBQzs0QkFDZixDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQzs0QkFDZCxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQzs0QkFDZCxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQzs0QkFDYixDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDOzRCQUNyQixFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDOzRCQUN0QixDQUFDLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQzs0QkFDaEIsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUM7NEJBQ2YsQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUM7NEJBQ2YsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7NEJBQ2QsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQzs0QkFDdEIsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQzs0QkFDdEIsQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7NEJBQ3JFLEVBQUUsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQzs0QkFDdkYsQ0FBQyxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUM7NEJBQ2hCLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDOzRCQUNmLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDOzRCQUNmLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDOzRCQUNkLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7NEJBQ3ZCLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7NEJBQ3ZCLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDOzRCQUNyRixFQUFFLEdBQUcsQ0FBQyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7NEJBQ3ZHLENBQUMsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDOzRCQUNoQixDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQzs0QkFDZixDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQzs0QkFDZixDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQzs0QkFDZCxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQzs0QkFDZCxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQzs0QkFDZCxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQzs0QkFDZCxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDOzRCQUM1QixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO3lCQUM3QjtxQkFDRjtpQkFDRjtnQkFDRCxDQUFDLEdBQUcsR0FBRyxDQUFDO2dCQUNSLEVBQUUsR0FBRyxHQUFHLENBQUM7Z0JBQ1QsQ0FBQyxHQUFHLEVBQUUsR0FBRyxLQUFLLENBQUM7Z0JBQ2YsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUM7Z0JBQ2QsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7Z0JBQ2QsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ2IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDVixFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNYLENBQUMsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDO2dCQUNoQixDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQztnQkFDZixDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQztnQkFDZixDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDZCxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDZCxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDZCxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDZCxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxLQUFLLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDbEMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ2xDLENBQUMsR0FBRyxHQUFHLENBQUM7Z0JBQ1IsRUFBRSxHQUFHLEdBQUcsQ0FBQztnQkFDVCxDQUFDLEdBQUcsRUFBRSxHQUFHLEtBQUssQ0FBQztnQkFDZixDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQztnQkFDZCxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztnQkFDZCxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDYixDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNWLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ1gsQ0FBQyxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUM7Z0JBQ2hCLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDO2dCQUNmLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDO2dCQUNmLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNkLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNkLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNkLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNkLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNsQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxLQUFLLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDbEMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztnQkFDUixFQUFFLEdBQUcsR0FBRyxDQUFDO2dCQUNULENBQUMsR0FBRyxFQUFFLEdBQUcsS0FBSyxDQUFDO2dCQUNmLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDO2dCQUNkLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO2dCQUNkLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNiLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ1YsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDWCxDQUFDLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQztnQkFDaEIsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUM7Z0JBQ2YsQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUM7Z0JBQ2YsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ2QsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ2QsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ2QsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ2QsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ2xDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNsQyxDQUFDLEdBQUcsR0FBRyxDQUFDO2dCQUNSLEVBQUUsR0FBRyxHQUFHLENBQUM7Z0JBQ1QsQ0FBQyxHQUFHLEVBQUUsR0FBRyxLQUFLLENBQUM7Z0JBQ2YsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUM7Z0JBQ2QsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7Z0JBQ2QsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ2IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDVixFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNYLENBQUMsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDO2dCQUNoQixDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQztnQkFDZixDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQztnQkFDZixDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDZCxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDZCxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDZCxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDZCxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxLQUFLLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDbEMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ2xDLENBQUMsR0FBRyxHQUFHLENBQUM7Z0JBQ1IsRUFBRSxHQUFHLEdBQUcsQ0FBQztnQkFDVCxDQUFDLEdBQUcsRUFBRSxHQUFHLEtBQUssQ0FBQztnQkFDZixDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQztnQkFDZCxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztnQkFDZCxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDYixDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNWLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ1gsQ0FBQyxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUM7Z0JBQ2hCLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDO2dCQUNmLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDO2dCQUNmLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNkLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNkLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNkLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNkLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNsQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxLQUFLLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDbEMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztnQkFDUixFQUFFLEdBQUcsR0FBRyxDQUFDO2dCQUNULENBQUMsR0FBRyxFQUFFLEdBQUcsS0FBSyxDQUFDO2dCQUNmLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDO2dCQUNkLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO2dCQUNkLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNiLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ1YsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDWCxDQUFDLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQztnQkFDaEIsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUM7Z0JBQ2YsQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUM7Z0JBQ2YsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ2QsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ2QsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ2QsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ2QsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ2xDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNsQyxDQUFDLEdBQUcsR0FBRyxDQUFDO2dCQUNSLEVBQUUsR0FBRyxHQUFHLENBQUM7Z0JBQ1QsQ0FBQyxHQUFHLEVBQUUsR0FBRyxLQUFLLENBQUM7Z0JBQ2YsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUM7Z0JBQ2QsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7Z0JBQ2QsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ2IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDVixFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNYLENBQUMsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDO2dCQUNoQixDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQztnQkFDZixDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQztnQkFDZixDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDZCxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDZCxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDZCxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDZCxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxLQUFLLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDbEMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ2xDLENBQUMsR0FBRyxHQUFHLENBQUM7Z0JBQ1IsRUFBRSxHQUFHLEdBQUcsQ0FBQztnQkFDVCxDQUFDLEdBQUcsRUFBRSxHQUFHLEtBQUssQ0FBQztnQkFDZixDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQztnQkFDZCxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztnQkFDZCxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDYixDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNWLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ1gsQ0FBQyxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUM7Z0JBQ2hCLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDO2dCQUNmLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDO2dCQUNmLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNkLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNkLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNkLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNkLEVBQUUsQ0FBQyxDQUFD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QUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEFBQUM7WUFDbGQsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNULEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2IsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDYixFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNiLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2IsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDYixFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNiLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2IsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDYixFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNiLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2IsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDZixHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUNmLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ2YsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDZixHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUNmLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ2YsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNULEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2IsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDYixFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNiLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2IsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDYixFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNiLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2IsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDYixFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNiLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2QsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDZixHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUNmLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ2YsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDZixHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUNmLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ2YsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNULEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2IsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDYixFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNiLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2IsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDYixFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNiLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2IsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDYixHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNkLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2QsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDZixHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUNmLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ2YsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDZixHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUNmLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ2YsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNULEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2IsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDYixFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNiLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2IsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDYixFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNiLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2IsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDZCxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNkLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2QsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDZixHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUNmLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ2YsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDZixHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUNmLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ2YsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNULEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2IsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDYixFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNiLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2IsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDYixFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNiLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2QsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDZCxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNkLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2QsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDZixHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUNmLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ2YsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDZixHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUNmLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ2YsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNULEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2IsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDYixFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNiLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2IsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDYixHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNkLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2QsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDZCxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNkLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2QsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDZixHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUNmLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ2YsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDZixHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUNmLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ2YsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNULEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2IsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDYixFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNiLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2IsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDZCxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNkLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2QsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDZCxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNkLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2QsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDZixHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUNmLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ2YsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDZixHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUNmLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ2YsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNULEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2IsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDYixFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNiLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2QsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDZCxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNkLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2QsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDZCxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNkLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2QsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDZixHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUNmLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ2YsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDZixHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUNmLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ2YsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNULEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2IsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDYixHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNkLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2QsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDZCxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNkLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2QsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDZCxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNkLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2QsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDZixHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUNmLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ2YsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDZixHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUNmLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ2YsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNULEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2IsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDZCxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNkLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2QsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDZCxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNkLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2QsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDZCxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNkLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2QsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDZixHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUNmLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ2YsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDZixHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUNmLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ2YsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNWLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2QsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDZCxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNkLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2QsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDZCxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNkLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2QsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDZCxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNkLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2QsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDZixHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUNmLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ2YsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDZixHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUNmLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ2YsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNWLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2QsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDZCxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNkLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2QsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDZCxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNkLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2QsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDZCxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNkLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2QsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDZixHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUNmLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ2YsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDZixHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUNmLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ2YsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNWLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2QsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDZCxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNkLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2QsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDZCxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNkLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2QsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDZCxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNkLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2QsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDZixHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUNmLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ2YsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDZixHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUNmLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ2YsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNWLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2QsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDZCxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNkLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2QsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDZCxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNkLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2QsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDZCxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNkLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2QsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDZixHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUNmLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ2YsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDZixHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUNmLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ2YsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNWLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2QsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDZCxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNkLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2QsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDZCxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNkLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2QsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDZCxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNkLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2QsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDZixHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUNmLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ2YsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDZixHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUNmLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ2YsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNWLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2QsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDZCxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNkLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2QsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDZCxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNkLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2QsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDZCxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNkLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2QsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDZixHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUNmLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ2YsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDZixHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUNmLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ2YsRUFBRSxJQUFJLEVBQUUsR0FBRyxHQUFHLENBQUM7WUFDZixFQUFFLElBQUksRUFBRSxHQUFHLEdBQUcsQ0FBQztZQUNmLEVBQUUsSUFBSSxFQUFFLEdBQUcsR0FBRyxDQUFDO1lBQ2YsRUFBRSxJQUFJLEVBQUUsR0FBRyxHQUFHLENBQUM7WUFDZixFQUFFLElBQUksRUFBRSxHQUFHLEdBQUcsQ0FBQztZQUNmLEVBQUUsSUFBSSxFQUFFLEdBQUcsR0FBRyxDQUFDO1lBQ2YsRUFBRSxJQUFJLEVBQUUsR0FBRyxHQUFHLENBQUM7WUFDZixFQUFFLElBQUksRUFBRSxHQUFHLEdBQUcsQ0FBQztZQUNmLEVBQUUsSUFBSSxFQUFFLEdBQUcsR0FBRyxDQUFDO1lBQ2YsRUFBRSxJQUFJLEVBQUUsR0FBRyxHQUFHLENBQUM7WUFDZixHQUFHLElBQUksRUFBRSxHQUFHLEdBQUcsQ0FBQztZQUNoQixHQUFHLElBQUksRUFBRSxHQUFHLEdBQUcsQ0FBQztZQUNoQixHQUFHLElBQUksRUFBRSxHQUFHLEdBQUcsQ0FBQztZQUNoQixHQUFHLElBQUksRUFBRSxHQUFHLEdBQUcsQ0FBQztZQUNoQixHQUFHLElBQUksRUFBRSxHQUFHLEdBQUcsQ0FBQztZQUNoQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ04sQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO1lBQ25CLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQztZQUMxQixFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7WUFDbkIsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO1lBQ25CLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQztZQUMxQixFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7WUFDbkIsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO1lBQ25CLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQztZQUMxQixFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7WUFDbkIsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO1lBQ25CLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQztZQUMxQixFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7WUFDbkIsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO1lBQ25CLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQztZQUMxQixFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7WUFDbkIsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO1lBQ25CLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQztZQUMxQixFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7WUFDbkIsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO1lBQ25CLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQztZQUMxQixFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7WUFDbkIsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO1lBQ25CLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQztZQUMxQixFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7WUFDbkIsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO1lBQ25CLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQztZQUMxQixFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7WUFDbkIsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO1lBQ25CLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQztZQUMxQixFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7WUFDbkIsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO1lBQ3BCLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQztZQUMxQixHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7WUFDcEIsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO1lBQ3BCLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQztZQUMxQixHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7WUFDcEIsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO1lBQ3BCLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQztZQUMxQixHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7WUFDcEIsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO1lBQ3BCLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQztZQUMxQixHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7WUFDcEIsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO1lBQ3BCLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQztZQUMxQixHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7WUFDcEIsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO1lBQ3BCLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQztZQUMxQixHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7WUFDcEIsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQzNCLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDTixDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7WUFDbkIsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO1lBQzFCLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztZQUNuQixDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7WUFDbkIsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO1lBQzFCLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztZQUNuQixDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7WUFDbkIsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO1lBQzFCLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztZQUNuQixDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7WUFDbkIsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO1lBQzFCLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztZQUNuQixDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7WUFDbkIsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO1lBQzFCLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztZQUNuQixDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7WUFDbkIsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO1lBQzFCLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztZQUNuQixDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7WUFDbkIsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO1lBQzFCLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztZQUNuQixDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7WUFDbkIsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO1lBQzFCLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztZQUNuQixDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7WUFDbkIsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO1lBQzFCLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztZQUNuQixDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7WUFDbkIsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO1lBQzFCLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztZQUNuQixDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7WUFDcEIsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO1lBQzFCLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztZQUNwQixDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7WUFDcEIsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO1lBQzFCLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztZQUNwQixDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7WUFDcEIsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO1lBQzFCLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztZQUNwQixDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7WUFDcEIsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO1lBQzFCLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztZQUNwQixDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7WUFDcEIsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO1lBQzFCLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztZQUNwQixDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7WUFDcEIsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO1lBQzFCLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztZQUNwQixFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDM0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNWLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDVixDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ1YsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNWLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDVixDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ1YsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNWLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDVixDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ1YsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNWLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDWixDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ1osQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUNaLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDWixDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ1osQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQztTQUNiO1FBQ0QsU0FBUyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUNwQixHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUNkO1FB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QUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQ3pCO1NBQ0Y7UUFDRCxTQUFTLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ2xCLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEFBQUM7WUFDcEMsUUFBUSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNuQixHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNsQixHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNsQixTQUFTLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ2pCLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxRQUFRLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzVCO1FBQ0QsU0FBUyxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUU7WUFDNUIsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUNwQixRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQ3BCLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDcEIsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUNwQixJQUFLLElBQUksQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFFO2dCQUM3QixJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxD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QztvQkFDcEIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2lCQUNwQztnQkFDRCxJQUFLLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFFO29CQUM1QixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxBQUFDO29CQUNqQixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxBQUFDO29CQUMxRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztvQkFDZCxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxBQUFDO29CQUN2RSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2lCQUNuRDtnQkFDRCxJQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFFO29CQUMzQixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQUFBQztvQkFDdEosSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEFBQUM7b0JBQ3pILENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQ04sQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDTixDQUFDLEdBQUcsQ0FBQyxDQUFDO29CQUNOLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztvQkFDZixDQUFDLEdBQUcsQ0FBQyxDQUFDO29CQUNOLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQ04sQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDTixDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7aUJBQ2pCO2dCQUNELENBQUMsQ0FBQyxDQUFDLENBQUMs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Q0FBQyxNQUFNLENBQUM7SUFDMUIsTUFBTSxFQUFFLFNBQVM7Q0FDbEIsQ0FBQyxBQUFDO0FBQ0gsSUFBSSxLQUFLLEdBQUcsQ0FBQyxLQUFLLEdBQUssQ0FBQztRQUFDLE1BQU0sRUFBRSxPQUFPO1FBQUUsS0FBSztLQUFDLENBQUMsQUFBQztBQUNsRCxJQUFJLEVBQUUsR0FBRyxDQUFDLEtBQUssR0FBSyxDQUFDO1FBQUMsTUFBTSxFQUFFLE9BQU87UUFBRSxLQUFLO0tBQUMsQ0FBQyxBQUFDO0FBQy9DLElBQUksU0FBUyxHQUFHLENBQUMsQ0FBQyxHQUFLLENBQUMsQ0FBQyxNQUFNLEtBQUssU0FBUyxBQUFDO0FBQzlDLElBQUksT0FBTyxHQUFHLENBQUMsQ0FBQyxHQUFLLENBQUMsQ0FBQyxNQUFNLEtBQUssT0FBTyxBQUFDO0FBQzFDLElBQUksT0FBTyxHQUFHLENBQUMsQ0FBQyxHQUFLLENBQUMsQ0FBQyxNQUFNLEtBQUssT0FBTyxBQUFDO0FBQzFDLElBQUksT0FBTyxHQUFHLENBQUMsQ0FBQyxHQUFLLE9BQU8sT0FBTyxLQUFLLEtBQUssQ0FBQyxJQUFJLENBQUMsWUFBWSxPQUFPLEFBQUM7QUFDdkUsSUFBSSxxQkFBcUIsR0FBRyxDQUFDLENBQUMsRUFBRSxLQUFLLEdBQUs7SUFDeEMsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7UUFDN0IsT0FBTyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7S0FDekI7SUFDRCxPQUFPLEtBQUssQ0FBQztDQUNkLEFBQUM7QUFDRixJQUFJLFNBQVMsQUFBQztBQUNkLENBQUMsU0FBUyxVQUFVLEVBQUU7SUFDcEIsVUFBVSxDQUFDLFFBQVEsR0FBRyxDQUFDLE9BQU8sR0FBSyxPQUFPLE9BQU8sS0FBSyxRQUFRLEdBQUc7WUFBQyxPQUFPO1NBQUMsR0FBRyxPQUFPLElBQUksRUFBRSxDQUFDO0lBQzNGLFVBQVUsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxPQUFPLEdBQUssT0FBTyxPQUFPLEtBQUssUUFBUSxHQUFHLE9BQU8sR0FBRyxPQUFPLEtBQUss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QUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQUFBQztvQkFDMUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7b0JBQ2QsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQUFBQztvQkFDdkUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztpQkFDbkQ7Z0JBQ0QsSUFBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBRTtvQkFDM0IsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEFBQUM7b0JBQ3RKLElBQUksRUFBRSxHQUFH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QUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7Z0JBQ3ZCLEVBQUUsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDdkIsRUFBRSxJQUFJLEVBQUUsQ0FBQztnQkFDVCxFQUFFLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7Z0JBQ3ZCLEVBQUUsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztnQkFDeEIsRUFBRSxJQUFJLEVBQUUsQ0FBQztnQkFDVCxFQUFFLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7Z0JBQ3hCLEVBQUUsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztnQkFDdkIsRUFBRSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUN2QixFQUFFLElBQUksRUFBRSxDQUFDO2dCQUNULEVBQUUsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztnQkFDeEIsRUFBRSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUN2QixFQUFFLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ3ZCLEVBQUUsSUFBSSxFQUFFLENBQUM7Z0JBQ1QsRUFBRSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUN2QixFQUFFLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ3ZCLEVBQUUsSUFBSSxFQUFFLENBQUM7Z0JBQ1QsRUFBRSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUN2QixFQUFFLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7Z0JBQ3hCLEVBQUUsSUFBSSxFQUFFLENBQUM7Z0JBQ1QsRUFBRSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUN4QixFQUFFLElBQUksQ0FBQyxDQUFDO2dCQUNSLEdBQUcsSUFBSSxDQUFDLENBQUM7Z0JBQ1QsR0FBRyxJQUFJLENBQUMsQ0FBQzthQUNWO1lBQ0QsT0FBUSxHQUFHO2dCQUNULEtBQUssQ0FBQztvQkFDSixHQUFHLElBQUksSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQzdCLEtBQUssQ0FBQztvQkFDSixHQUFHLElBQUksSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQzVCLEtBQUssQ0FBQztvQkFDSixHQUFHLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ3BCO1lBQ0QsRUFBRSxJQUFJLEdBQUcsQ0FBQztZQUNWLEVBQUUsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN2QixFQUFFLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDdkIsRUFBRSxJQUFJLEVBQUUsQ0FBQztZQUNULEVBQUUsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN4QixFQUFFLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDdkIsRUFBRSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLEVBQUUsSUFBSSxFQUFFLENBQUM7WUFDVCxFQUFFLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDdkIsRUFBRSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLEVBQUUsSUFBSSxFQUFFLENBQUM7WUFDVCxFQUFFLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDdkIsRUFBRSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ3hCLEVBQUUsSUFBSSxFQUFFLENBQUM7WUFDVCxFQUFFLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDeEIsRUFBRSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ3ZCLEVBQUUsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUN2QixFQUFFLElBQUksRUFBRSxDQUFDO1lBQ1QsRUFBRSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ3hCLEVBQUUsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN2QixFQUFFLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDdkIsRUFBRSxJQUFJLEVBQUUsQ0FBQztZQUNULEVBQUUsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN2QixFQUFFLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDdkIsRUFBRSxJQUFJLEVBQUUsQ0FBQztZQUNULEVBQUUsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN2QixFQUFFLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDeEIsRUFBRSxJQUFJLEVBQUUsQ0FBQztZQUNULEVBQUUsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN4QixFQUFFLElBQUksR0FBRyxDQUFDO1lBQ1YsRUFBRSxJQUFJLEdBQUcsQ0FBQztZQUNWLEVBQUUsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN2QixFQUFFLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDdkIsRUFBRSxJQUFJLEVBQUUsQ0FBQztZQUNULEVBQUUsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN4QixFQUFFLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDdkIsRUFBRSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLEVBQUUsSUFBSSxFQUFFLENBQUM7WUFDVCxFQUFFLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDdkIsRUFBRSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLEVBQUUsSUFBSSxFQUFFLENBQUM7WUFDVCxFQUFFLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDdkIsRUFBRSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ3hCLEVBQUUsSUFBSSxFQUFFLENBQUM7WUFDVCxFQUFFLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDeEIsRUFBRSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ3ZCLEVBQUUsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUN2QixFQUFFLElBQUksRUFBRSxDQUFDO1lBQ1QsRUFBRSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ3hCLEVBQUUsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN2QixFQUFFLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDdkIsRUFBRSxJQUFJLEVBQUUsQ0FBQztZQUNULEVBQUUsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN2QixFQUFFLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDdkIsRUFBRSxJQUFJLEVBQUUsQ0FBQztZQUNULEVBQUUsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN2QixFQUFFLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDeEIsRUFBRSxJQUFJLEVBQUUsQ0FBQztZQUNULEVBQUUsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN4QixFQUFFLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDdkIsRUFBRSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLEVBQUUsSUFBSSxFQUFFLENBQUM7WUFDVCxFQUFFLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDeEIsRUFBRSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ3ZCLEVBQUUsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUN2QixFQUFFLElBQUksRUFBRSxDQUFDO1lBQ1QsRUFBRSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ3ZCLEVBQUUsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUN2QixFQUFFLElBQUksRUFBRSxDQUFDO1lBQ1QsRUFBRSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ3ZCLEVBQUUsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN4QixFQUFFLElBQUksRUFBRSxDQUFDO1lBQ1QsRUFBRSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ3hCLEVBQUUsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN2QixFQUFFLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDdkIsRUFBRSxJQUFJLEVBQUUsQ0FBQztZQUNULEVBQUUsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN4QixFQUFFLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDdkIsRUFBRSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLEVBQUUsSUFBSSxFQUFFLENBQUM7WUFDVCxFQUFFLEdBQUcsS0FBSyxDQUFDLEdBQUcs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R0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUM3RCxhQUFhLEVBQUUsQ0FBQyxJQUFJLEdBQUssVUFBVSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3RFLFNBQVMsRUFBRSxDQUFDLE1BQU0sR0FBSyxVQUFVLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxNQUFNLENBQUM7S0FDcEQsQ0FBQztDQUNIO0FBQ0QsSUFBSSxLQUFLLEdBQUcsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksR0FBSyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUssR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQUFBQztBQUN6RyxJQUFJLFNBQVMsR0FBRyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxHQUFLO0lBQ3BDLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDbkMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7Q0FDWixFQUFFLENBQUMsR0FBRyxHQUFLO0lBQ1YsTUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxBQUFDO0lBQzFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ1gsT0FBTyxJQUFJLENBQUM7Q0FDYixDQUFDLEFBQUM7QUFDSCxJQUFJLE1BQU0sR0FBRyxDQUFDLFVBQVUsR0FBSztJQUMzQixNQUFNLEdBQUcsR0FBRyxVQUFVLFlBQVksS0FBSyxHQUFHLElBQU0sRUFBRSxHQUFHLElB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ckUsU0FBUyxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO0lBQ2hDLEtBQUssRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDMUQsYUFBYSxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNsRSxNQUFNLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzNELGNBQWMsRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbkUsZUFBZSxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDakUsZUFBZSxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNwRSxXQUFXLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUM5RCxDQUFDLEFBQUM7QUFDSCxJQUFJLE1BQU0sR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDO0lBQ3RCLFNBQVMsRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3BELE9BQU8sRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2xELGdCQUFnQixFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDM0QsS0FBSyxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzNELEtBQUssRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN6QyxHQUFHLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDckMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO0NBQy9CLENBQUMsQUFBQztBQUNILElBQUksU0FBUyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUM7SUFDekIsU0FBUyxFQUFFLE1BQU07SUFDakIsU0FBUyxFQUFFLE1BQU07SUFDakIsYUFBYSxFQUFFLEdBQUcsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO0lBQ3JDLE1BQU0sRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztDQUM3QixDQUFDLEFBQUM7QUFDSCxJQUFJLGdCQUFnQixHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUM7SUFDaEMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDO1FBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsRUFBRTtRQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUU7S0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5RSxJQUFJLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNyRCxPQUFPLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN4RCxJQUFJLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNyRCxTQUFTLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxRCxRQUFRLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6RCxTQUFTLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxRCxVQUFVLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMzRCxTQUFTLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxRCxNQUFNLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN2RCxVQUFVLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMzRCxRQUFRLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUMxRCxDQUFDLEFBQUM7QUFDSCxJQUFJLGFBQWEsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDO0lBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRTtJQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUU7SUFBRSxHQUFHLENBQUMsT0FBTyxFQUFFO0lBQUUsR0FBRyxDQUFDLElBQUksRUFBRTtDQUFDLENBQUMsQUFBQztBQUN2RixJQUFJLFVBQVUsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQU0sR0FBRyxDQUFDLEtBQUssQ0FBQztRQUFDLGFBQWE7UUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQztRQUFFLEdBQUcsQ0FB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QkFBUztBQUNULHFCQUFTO0FBQ1QscUJBQVM7QUFDVCxxQkFBUztBQUNULHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1YscUJBQVM7QUFDVCxxQkFBUztBQUNULHFCQUFTO0FBQ1QscUJBQVM7QUFDVCxxQkFBUztBQUNULHFCQUFTO0FBQ1Qsc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtTQUNYLENBQUMsQUFBQztRQUNILFNBQVMsVUFBVSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUU7WUFDckMsTUFBTyxHQUFHLElBQUksRUFBRSxDQUFFO2dCQUNoQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEFBQUM7Z0JBQ2IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxBQUFDO2dCQUNiLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFBQztnQkFDYixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEFBQUM7Z0JBQ2IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxBQUFDO2dCQUNiLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFBQztnQkFDYixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEFBQUM7Z0JBQ2IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxBQUFDO2dCQUNiLElBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUU7b0JBQzNCLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxBQUFDO29CQUNwQixDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7aUJBQ3BDO2dCQUNELElBQUssSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUU7b0JBQzVCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEFBQUM7b0JBQ2pCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEFBQUM7b0JBQzFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO29CQUNkLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEFBQUM7b0JBQ3ZFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7aUJBQ25EO2dCQUNELElBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUU7b0JBQzNCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxBQUFDO29CQUN0SixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQUFBQztvQkFDekgsQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDTixDQUFDLEdBQUcsQ0FBQyxDQUFDO29CQUNOLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQ04sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO29CQUNmLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQ04sQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDTixDQUFDLEdBQUcsQ0FBQyxDQUFDO29CQUNO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QUMsYUFBYSxHQUFHLENBQUMsQ0FBQztnQkFDdkIsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUM7Z0JBQ3RCLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO2dCQUN2QixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7YUFDZDtZQUNELE9BQU8sQ0FBQyxTQUFTLENBQUMsVUFBVSxHQUFHLFdBQVc7Z0JBQ3hDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDO2dCQUM5QixJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQztnQkFDOUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUM7Z0JBQzlCLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDO2dCQUM5QixJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQztnQkFDOUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUM7Z0JBQzlCLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsU0FBUyxDQUFDO2dCQUM3QixJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQztnQkFDOUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUM7Z0JBQzlCLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDO2dCQUM5QixJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQztnQkFDOUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUM7Z0JBQzlCLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDO2dCQUM5QixJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FB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QkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixxQkFBUztBQUNULHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHFCQUFTO0FBQ1Qsc0JBQVU7QUFDVixxQkFBUztBQUNULHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHFCQUFTO0FBQ1Qsc0JBQVU7QUFDVixxQkFBUztBQUNULHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixxQkFBUztBQUNULHFCQUFTO0FBQ1Qsc0JBQVU7QUFDVixxQkFBUztBQUNULHNCQUFVO0FBQ1YscUJBQVM7QUFDVCxzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHFCQUFTO0FBQ1Qsc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHFCQUFTO0FBQ1Qsc0JBQVU7QUFDVixxQkFBUztBQUNULHFCQUFTO0FBQ1QscUJBQVM7QUFDVCxzQkFBVTtBQUNWLHFCQUFTO0FBQ1Qsc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1YscUJBQVM7QUFDVCxzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHFCQUFTO0FBQ1Qsc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1YscUJBQVM7QUFDVCxxQkFBUztBQUNULHFCQUFTO0FBQ1Qsc0JBQVU7QUFDVixxQkFBUztBQUNULHNCQUFVO0FBQ1YscUJBQVM7QUFDVCxzQkFBVTtBQUNWLHFCQUFTO0FBQ1Qsc0JBQVU7QUFDVixxQkFBUztBQUNULHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixxQkFBUztBQUNULHNCQUFVO0FBQ1YscUJBQVM7QUFDVCxzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixxQkFBUztBQUNULHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1YscUJBQVM7QUFDVCxzQkFBVTtBQUNWLHFCQUFTO0FBQ1Qsc0JBQVU7QUFDVixxQkFBUztBQUNULHNCQUFVO0FBQ1YscUJBQVM7QUFDVCxxQkFBUztBQUNULHFCQUFTO0FBQ1QscUJBQVM7QUFDVCxxQkFBUztBQUNULHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixxQkFBUztBQUNULHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1Ysc0JBQVU7QUFDVixzQkFBVTtBQUNWLHNCQUFVO0FBQ1YscUJBQVM7QUFDVCxzQkFBVTtBQUNWLHNCQUFVO1NBQ1gsQ0FBQyxBQUFDO1FBQ0gsU0FBUyxVQUFVLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFO1lBQy9DLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQUFBQztZQUNuTixJQUFJLENBQUMsRUFBRSxFQUFFLEFBQUM7WUFDVixJQUFJLEVBQUUsRUFBRSxFQUFFLEFBQUM7WUFDWCxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQUFBQztZQUNmLE1BQU8sR0FBRyxJQUFJLEdBQUcsQ0FBRTtnQkFDakIsSUFBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBRTtvQkFDM0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEFBQUM7b0JBQ3BCLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztvQkFDcEMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztpQkFDekM7Z0JBQ0QsSUFBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBRTtvQkFDM0IsSUFBSSxHQUFHLEdBQUcsR0FBRyxBQUFDO29CQUNkLElBQUksR0FBRyxHQUFHLEdBQUcsQUFBQztvQkFDZCxJQUFJLEdBQUcsR0FBRyxHQUFHLEFBQUM7b0JBQ2QsSUFBSSxHQUFHLEdBQUcsR0FBRyxBQUFDO29CQUNkLElBQUksR0FBRyxHQUFHLEdBQUcsQUFBQztvQkFDZCxJQUFJLEdBQUcsR0FBRyxHQUFHLEFBQUM7b0JBQ2QsSUFBSSxHQUFHLEdBQUcsR0FBRyxBQUFDO29CQUNkLElBQUksR0FBRyxHQUFHLEdBQUcsQUFBQztvQkFDZCxJQUFJLEdBQUcsR0FBRyxHQUFHLEFBQUM7b0JBQ2QsSUFBSSxHQUFHLEdBQUcsR0FBRyxBQUFDO29CQUNkLElBQUksR0FBRyxHQUFHLEdBQUcsQUFBQztvQkFDZCxJQUFJLEdBQUcsR0FBRyxHQUFHLEFBQUM7b0JBQ2QsSUFBSSxHQUFHLEdBQUcsR0FBRyxBQUFDO29CQUNkLElBQUksR0FBRyxHQUFHLEdBQUcsQUFBQztvQkFDZCxJQUFJLEdBQUcsR0FBRyxHQUFHLEFBQUM7b0JBQ2QsSUFBSSxHQUFHLEdBQUcsR0FBRyxBQUFDO29CQUNkLENBQUMsR0FBRyxHQUFHLENBQUM7b0JBQ1IsRUFBRSxHQUFHLEdBQUcsQ0FBQztvQkFDVCxDQUFDLEdBQUcsRUFBRSxHQUFHLEtBQUssQ0FBQztvQkFDZixDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQztvQkFDZCxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztvQkFDZCxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztvQkFDYixDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssRUFBRSxHQUFHLEdBQUcsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssRUFBRSxHQUFHLEdBQUcsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxHQUFHLElBQUksRUFBRSxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7b0JBQzlHLEVBQUUsR0FBRyxDQUFDLEdBQUcsS0FBSyxFQUFFLEdBQUcsR0FBRyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxFQUFFLEdBQUcsR0FBRyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxFQUFFLEdBQUcsRUFBRSxHQUFHLEdBQUcsSUFBSSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztvQkFDL0csQ0FBQyxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUM7b0JBQ2hCLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDO29CQUNmLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDO29CQUNmLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO29CQUNkLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztvQkFDM0IsRUFBRSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO29CQUM1QixDQUFDLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQztvQkFDaEIsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUM7b0JBQ2YsQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUM7b0JBQ2YsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7b0JBQ2QsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7b0JBQ2IsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO29CQUNsQixDQUFDLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQztvQkFDaEIsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUM7b0JBQ2YsQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUM7b0JBQ2YsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7b0JBQ2QsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7b0JBQ2YsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7b0JBQ2hCLENBQUMsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDO29CQUNoQixDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQztvQkFDZixDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQztvQkFDZixDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztvQkFDZCxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztvQkFDZCxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztvQkFDZCxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztvQkFDZCxFQUFFLEdBQUcsQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO29CQUN6QixFQUFFLEdBQUcsQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO29CQUN6QixDQUFDLEdBQUcsRUFBRSxDQUFDO29CQUNQLEVBQUUsR0FBRyxFQUFFLENBQUM7b0JBQ1IsQ0FBQyxHQUFHLEVBQUUsR0FBRyxLQUFLLENBQUM7b0JBQ2YsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUM7b0JBQ2QsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7b0JBQ2QsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7b0JBQ2IsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLEVBQUUsR0FBRyxHQUFHLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLEVBQUUsR0FBRyxFQUFFLEdBQUcsR0FBRyxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLEVBQUUsR0FBRyxFQUFFLEdBQUcsR0FBRyxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO29CQUMxSCxFQUFFLEdBQUcsQ0FBQyxHQUFHLEtBQUssRUFBRSxHQUFHLEdBQUcsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxHQUFHLElBQUksRUFBRSxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxHQUFHLElBQUksRUFBRSxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7b0JBQzNILENBQUMsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDO29CQUNoQixDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQztvQkFDZixDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQztvQkFDZixDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztvQkFDZCxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7b0JBQ3RDLEVBQUUsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztvQkFDdkMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUM7b0JBQ2hCLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDO29CQUNmLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDO29CQUNmLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO29CQUNkLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO29CQUNkLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO29CQUNkLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO29CQUNkLEdBQUcsR0FBRyxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7b0JBQzFCLEdBQUcsR0FBRyxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7b0JBQzFCLENBQUMsR0FBRyxHQUFHLENBQUM7b0JBQ1IsRUFBRSxHQUFHLEdBQUcsQ0FBQztvQkFDVCxDQUFDLEdBQUcsRUFBRSxHQUFHLEtBQUssQ0FBQztvQkFDZixDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQztvQkFDZCxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztvQkFDZCxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztvQkFDYixDQUFDLEdBQUcsRUFBRSxDQUFDO29CQUNQLEVBQUUsR0FBRyxFQUFFLENBQUM7b0JBQ1IsQ0FBQyxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUM7b0JBQ2hCLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDO29CQUNmLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDO29CQUNmLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO29CQUNkLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO29CQUNkLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO29CQUNkLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO29CQUNkLEdBQUcsR0FBRyxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7b0JBQzFCLEdBQUcsR0FBRyxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7b0JBQzFCLEdBQUcsR0FBRyxHQUFHLENBQUM7b0JBQ1YsR0FBRyxHQUFHLEdBQUcsQ0FBQztvQkFDVixHQUFHLEdBQUcsR0FBRyxDQUFDO29CQUNWLEdBQUcsR0FBRyxHQUFHLENBQUM7b0JBQ1YsR0FBRyxHQUFHLEdBQUcsQ0FBQztvQkFDVixHQUFHLEdBQUcsR0FBRyxDQUFDO29CQUNWLEdBQUcsR0FBRyxHQUFHLENBQUM7b0JBQ1YsR0FBRyxHQUFHLEdBQUcsQ0FBQztvQkFDVixHQUFHLEdBQUcsR0FBRyxDQUFDO29CQUNWLEdBQUcsR0FBRyxHQUFHLENBQUM7b0JBQ1YsR0FBRyxHQUFHLEdBQUcsQ0FBQztvQkFDVixHQUFHLEdBQUcsR0FBRyxDQUFDO29CQUNWLEdBQUcsR0FBRyxHQUFHLENBQUM7b0JBQ1YsR0FBRyxHQUFHLEdBQUcsQ0FBQztvQkFDVixHQUFHLEdBQUcsR0FBRyxDQUFDO29CQUNWLEdBQUcsR0FBRyxHQUFHLENBQUM7b0JBQ1YsSUFBSSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsRUFBRTt3QkFDakIsSUFBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBRTs0QkFDM0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQzs0QkFDVixFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDOzRCQUNYLENBQUMsR0FBRyxFQUFFLEdBQUcsS0FBSyxDQUFDOzRCQUNmLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDOzRCQUNkLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDOzRCQUNkLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDOzRCQUNiLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7NEJBQ3JCLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7NEJBQ3RCLENBQUMsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDOzRCQUNoQixDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQzs0QkFDZixDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQzs0QkFDZixDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQzs0QkFDZCxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDOzRCQUN0QixFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDOzRCQUN0QixDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQzs0QkFDckUsRUFBRSxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDOzRCQUN2RixDQUFDLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQzs0QkFDaEIsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUM7NEJBQ2YsQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUM7NEJBQ2YsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7NEJBQ2QsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQzs0QkFDdkIsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQzs0QkFDdkIsQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7NEJBQ3JGLEVBQUUsR0FBRyxDQUFDLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQzs0QkFDdkcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUM7NEJBQ2hCLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDOzRCQUNmLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDOzRCQUNmLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDOzRCQUNkLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDOzRCQUNkLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDOzRCQUNkLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDOzRCQUNkLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7NEJBQzVCLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7eUJBQzdCO3FCQUNGO2lCQUNGO2dCQUNELENBQUMsR0FBRyxHQUFHLENBQUM7Z0JBQ1IsRUFBRSxHQUFHLEdBQUcsQ0FBQztnQkFDVCxDQUFDLEdBQUcsRUFBRSxHQUFHLEtBQUssQ0FBQztnQkFDZixDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQztnQkFDZCxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztnQkFDZCxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDYixDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNWLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ1gsQ0FBQyxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUM7Z0JBQ2hCLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDO2dCQUNmLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDO2dCQUNmLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNkLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNkLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNkLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNkLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNsQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxLQUFLLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDbEMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztnQkFDUixFQUFFLEdBQUcsR0FBRyxDQUFDO2dCQUNULENBQUMsR0FBRyxFQUFFLEdBQUcsS0FBSyxDQUFDO2dCQUNmLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDO2dCQUNkLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO2dCQUNkLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNiLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ1YsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDWCxDQUFDLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQztnQkFDaEIsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUM7Z0JBQ2YsQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUM7Z0JBQ2YsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ2QsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ2QsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ2QsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ2QsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ2xDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNsQyxDQUFDLEdBQUcsR0FBRyxDQUFDO2dCQUNSLEVBQUUsR0FBRyxHQUFHLENBQUM7Z0JBQ1QsQ0FBQyxHQUFHLEVBQUUsR0FBRyxLQUFLLENBQUM7Z0JBQ2YsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUM7Z0JBQ2QsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7Z0JBQ2QsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ2IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDVixFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNYLENBQUMsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDO2dCQUNoQixDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQztnQkFDZixDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQztnQkFDZixDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDZCxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDZCxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDZCxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDZCxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxLQUFLLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDbEMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ2xDLENBQUMsR0FBRyxHQUFHLENBQUM7Z0JBQ1IsRUFBRSxHQUFHLEdBQUcsQ0FBQztnQkFDVCxDQUFDLEdBQUcsRUFBRSxHQUFHLEtBQUssQ0FBQztnQkFDZixDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQztnQkFDZCxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztnQkFDZCxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDYixDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNWLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ1gsQ0FBQyxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUM7Z0JBQ2hCLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDO2dCQUNmLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDO2dCQUNmLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNkLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNkLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNkLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNkLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNsQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxLQUFLLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDbEMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztnQkFDUixFQUFFLEdBQUcsR0FBRyxDQUFDO2dCQUNULENBQUMsR0FBRyxFQUFFLEdBQUcsS0FBSyxDQUFDO2dCQUNmLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDO2dCQUNkLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO2dCQUNkLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNiLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ1YsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDWCxDQUFDLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQztnQkFDaEIsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUM7Z0JBQ2YsQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUM7Z0JBQ2YsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ2QsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ2QsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ2QsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ2QsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ2xDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNsQyxDQUFDLEdBQUcsR0FBRyxDQUFDO2dCQUNSLEVBQUUsR0FBRyxHQUFHLENBQUM7Z0JBQ1QsQ0FBQyxHQUFHLEVBQUUsR0FBRyxLQUFLLENBQUM7Z0JBQ2YsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUM7Z0JBQ2QsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7Z0JBQ2QsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ2IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDVixFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNYLENBQUMsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDO2dCQUNoQixDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQztnQkFDZixDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQztnQkFDZixDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDZCxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDZCxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDZCxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDZCxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxLQUFLLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDbEMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ2xDLENBQUMsR0FBRyxHQUFHLENBQUM7Z0JBQ1IsRUFBRSxHQUFHLEdBQUcsQ0FBQztnQkFDVCxDQUFDLEdBQUcsRUFBRSxHQUFHLEtBQUssQ0FBQztnQkFDZixDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQztnQkFDZCxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztnQkFDZCxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDYixDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNWLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ1gsQ0FBQyxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUM7Z0JBQ2hCLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDO2dCQUNmLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDO2dCQUNmLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNkLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNkLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNkLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNkLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNsQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxLQUFLLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDbEMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztnQkFDUixFQUFFLEdBQUcsR0FBRyxDQUFDO2dCQUNULENBQUMsR0FBRyxFQUFFLEdBQUcsS0FBSyxDQUFDO2dCQUNmLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDO2dCQUNkLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO2dCQUNkLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNiLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ1YsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDWCxDQUFDLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQztnQkFDaEIsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUM7Z0JBQ2YsQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUM7Z0JBQ2YsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ2QsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ2QsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ2QsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ2QsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7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QUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ2hELElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNoRCxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDaEQsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ2hELElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNoRCxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDaEQsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ2hELElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNoRCxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDaEQsRUFBRSxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsSUFBSSxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDMUMsRUFBRSxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsSUFBSSxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDMUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDWixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNaLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ2IsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDYixFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNiLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ1osRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDWixFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNiLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ2IsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDYixFQUFFLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxJQUFJLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUMxQyxFQUFFLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxJQUFJLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUMxQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNaLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ1osRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDYixFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNiLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ2IsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDWixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNaLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ2IsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDYixFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNiLEVBQUUsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLElBQUksS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQzFDLEVBQUUsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLElBQUksS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQzFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ1osRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDWixFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNiLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ2IsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDYixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNaLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ1osRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDYixFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNiLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ2IsRUFBRSxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsSUFBSSxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDMUMsRUFBRSxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsSUFBSSxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDMUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDWixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNaLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ1osRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDWixFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNiLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ2IsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDYixFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNiLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ2IsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDYixFQUFFLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxJQUFJLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUMxQyxFQUFFLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxJQUFJLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUMxQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNaLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ1osRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDYixFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNiLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ2IsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDWixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNaLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ2IsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDYixFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNiLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ1gsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDWCxJQUFJLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNkLElBQUksR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ2QsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7Z0JBQ2pDLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUNqQyxFQUFFLEdBQUcsSUFBSSxDQUFDO2dCQUNWLEVBQUUsR0FBRyxJQUFJLENBQUM7Z0JBQ1YsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDYixJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNiLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUNoQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztnQkFDaEMsRUFBRSxHQUFHLElBQUksQ0FBQztnQkFDVixFQUFFLEdBQUcsSUFBSSxDQUFDO2dCQUNWLElBQUksR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ2QsSUFBSSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDZCxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztnQkFDakMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7Z0JBQ2pDLEVBQUUsR0FBRyxJQUFJLENBQUM7Z0JBQ1YsRUFBRSxHQUFHLElBQUksQ0FBQztnQkFDVixJQUFJLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNkLElBQUksR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ2QsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUM7Z0JBQ25DLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDO2dCQUNuQyxFQUFFLEdBQUcsSUFBSSxDQUFDO2dCQUNWLEVBQUUsR0FBRyxJQUFJLENBQUM7Z0JBQ1YsSUFBSSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDZCxJQUFJLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNkLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDO2dCQUNuQyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQztnQkFDbkMsRUFBRSxHQUFHLElBQUksQ0FBQztnQkFDVixFQUFFLEdBQUcsSUFBSSxDQUFDO2dCQUNWLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2IsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDYixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQztnQkFDbEMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUM7Z0JBQ2xDLEVBQUUsR0FBRyxJQUFJLENBQUM7Z0JBQ1YsRUFBRSxHQUFHLElBQUksQ0FBQztnQkFDVixJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNiLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2IsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUM7Z0JBQ2xDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFD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LEdBQUcsSUFBSSxDQUFDO2dCQUNWLEVBQUUsR0FBRyxJQUFJLENBQUM7Z0JBQ1YsSUFBSSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDZCxJQUFJLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNkLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUNqQyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztnQkFDakMsRUFBRSxHQUFHLElBQUksQ0FBQztnQkFDVixFQUFFLEdBQUcsSUFBSSxDQUFDO2dCQUNWLElBQUksR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ2QsSUFBSSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDZCxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQztnQkFDbkMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUM7Z0JBQ25DLEVBQUUsR0FBRyxJQUFJLENBQUM7Z0JBQ1YsRUFBRSxHQUFHLElBQUksQ0FBQztnQkFDVixJQUFJLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNkLElBQUksR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ2QsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7Z0JBQ2pDLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUNqQyxFQUFFLEdBQUcsSUFBSSxDQUFDO2dCQUNWLEVBQUUsR0FBRyxJQUFJLENBQUM7Z0JBQ1YsSUFBSSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDZCxJQUFJLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNkLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDO2dCQUNuQyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQztnQkFDbkMsRUFBRSxHQUFHLElBQUksQ0FBQztnQkFDVixFQUFFLEdBQUcsSUFBSSxDQUFDO2dCQUNWLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2IsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDYixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQztnQkFDbEMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUM7Z0JBQ2xDLEVBQUUsR0FBRyxJQUFJLENBQUM7Z0JBQ1YsRUFBRSxHQUFHLElBQUksQ0FBQztnQkFDVixJQUFJLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNkLElBQUksR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ2QsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUM7Z0JBQ25DLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDO2dCQUNuQyxFQUFFLEdBQUcsSUFBSSxDQUFDO2dCQUNWLEVBQUUsR0FBRyxJQUFJLENBQUM7Z0JBQ1YsSUFBSSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDZCxJQUFJLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNkLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDO2dCQUNuQyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQztnQkFDbkMsRUFBRSxHQUFHLElBQUksQ0FBQztnQkFDVixFQUFFLEdBQUcsSUFBSSxDQUFDO2dCQUNWLElBQUksR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ2QsSUFBSSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDZCxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztnQkFDakMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7Z0JBQ2pDLEVBQUUsR0FBRyxJQUFJLENBQUM7Z0JBQ1YsRUFBRSxHQUFHLElBQUksQ0FBQztnQkFDVixJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNiLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2IsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUM7Z0JBQ2xDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDO2dCQUNsQyxFQUFFLEdBQUcsSUFBSSxDQUFDO2dCQUNWLEVBQUUsR0FBRyxJQUFJLENBQUM7Z0JBQ1YsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDYixJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNiLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDO2dCQUNsQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQztnQkFDbEMsRUFBRSxHQUFHLElBQUksQ0FBQztnQkFDVixFQUFFLEdBQUcsSUFBSSxDQUFDO2dCQUNWLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2IsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDYixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQztnQkFDbEMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUM7Z0JBQ2xDLEVBQUUsR0FBRyxJQUFJLENBQUM7Z0JBQ1YsRUFBRSxHQUFHLElBQUksQ0FBQztnQkFDVixJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNiLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2IsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDYixJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNiLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2IsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztnQkFDdEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztnQkFDdEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztnQkFDdEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztnQkFDdEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztnQkFDdEIsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDYixJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNiLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2IsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDYixJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNiLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7Z0JBQ3RCLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7Z0JBQ3RCLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7Z0JBQ3RCLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7Z0JBQ3RCLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7Z0JBQ3RCLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2IsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDYixJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNiLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2IsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDYixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO2dCQUN0QixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO2dCQUN0QixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO2dCQUN0QixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO2dCQUN0QixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO2dCQUN0QixJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNiLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2IsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDYixJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNiLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2IsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztnQkFDdEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztnQkFDdEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztnQkFDdEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztnQkFDdEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztnQkFDdEIsSUFBSSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDZCxJQUFJLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNkLElBQUksR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ2QsSUFBSSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDZCxJQUFJLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNkLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7Z0JBQ3ZCLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7Z0JBQ3ZCLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7Z0JBQ3ZCLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7Z0JBQ3ZCLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7Z0JBQ3ZCLElBQUksR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ2QsSUFBSSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDZCxJQUFJLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNkLElBQUksR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ2QsSUFBSSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDZCxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO2dCQUN2QixFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO2dCQUN2QixFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO2dCQUN2QixFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO2dCQUN2QixFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO2dCQUN2QixJQUFJLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNkLElBQUksR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ2QsSUFBSSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDZCxJQUFJLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNkLElBQUksR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ2QsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztnQkFDdkIsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztnQkFDdkIsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztnQkFDdkIsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztnQkFDdkIsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztnQkFDdkIsSUFBSSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDZCxJQUFJLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNkLElBQUksR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ2QsSUFBSSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDZCxJQUFJLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNkLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7Z0JBQ3ZCLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7Z0JBQ3ZCLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7Z0JBQ3ZCLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7Z0JBQ3ZCLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7Z0JBQ3ZCLElBQUksR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ2QsSUFBSSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDZCxJQUFJLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNkLElBQUksR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ2QsSUFBSSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDZCxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO2dCQUN2QixFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO2dCQUN2QixFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO2dCQUN2QixFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO2dCQUN2QixFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO2dCQUN2QixJQUFJLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNkLElBQUksR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ2QsSUFBSSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDZCxJQUFJLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUNkLElBQUksR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ2QsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztnQkFDdkIsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztnQkFDdkIsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztnQkFDdkIsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztnQkFDdkIsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztnQkFDdkIsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDcEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNyQjtZQUNELElBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUU7Z0JBQzNCLFFBQVEsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQzFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2FBQy9DO1NBQ0Y7S0FDRjtDQUNGLENBQUMsQUFBQztBQUNILElBQUksS0FBSyxBQUFDO0FBQ1YsQ0FBQyxTQUFTLE1BQU0sRUFBRTtJQUNoQixTQUFTLFdBQVcsQ0FBQyxFQUFFLEVBQUU7UUFDdkIsTUFBTSxJQUFJLEtBQUssRUFBRSxDQUFDO0tBQ25CO0lBQ0QsTUFBTSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7SUFDakMsTUFBTSxDQUFDLFdBQVcsR0FBRyxDQUFDLEtBQUssR0FBSztRQUM5QixNQUFNLEdBQUcsR0FBRyxFQUFFLEFBQUM7UUFDZixLQUFLLE1BQU0sSUFBSSxJQUFJLEtBQUssQ0FBRTtZQUN4QixHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDO1NBQ2xCO1FBQ0QsT0FBTyxHQUFHLENBQUM7S0FDWixDQUFDO0lBQ0YsTUFBTSxDQUFDLGtCQUFrQixHQUFHLENBQUMsR0FBRyxHQUFLO1FBQ25DLE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFLLE9BQU8sR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVEsQ0FBQyxBQUFDO1FBQ3hGLE1BQU0sUUFBUSxHQUFHLEVBQUUsQUFBQztRQUNwQixLQUFLLE1BQU0sQ0FBQyxJQUFJLFNBQVMsQ0FBRTtZQUN6QixRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3RCO1FBQ0QsT0FBTyxNQUFNLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ3RDLENBQUM7SUFDRixNQUFNLENBQUMsWUFBWSxHQUFHLENBQUMsR0FBRyxHQUFLO1FBQzdCLE9BQU8sTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDNUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDZixDQUFDLENBQUM7S0FDSixDQUFDO0lBQ0YsTUFBTSxDQUFDLFVBQVUsR0FBRyxPQUFPLE1BQU0sQ0FBQyxJQUFJLEtBQUssVUFBVSxHQUFHLENBQUMsR0FBRyxHQUFLLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUs7UUFDOUYsTUFBTSxJQUFJLEdBQUcsRUFBRSxBQUFDO1FBQ2hCLElBQUssTUFBTSxHQUFHLElBQUksTUFBTSxDQUFFO1lBQ3hCLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsRUFBRTtnQkFDckQsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUNoQjtTQUNGO1FBQ0QsT0FBTyxJQUFJLENBQUM7S0FDYixDQUFDO0lBQ0YsTUFBTSxDQUFDLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxPQUFPLEdBQUs7UUFDOUIsS0FBSyxNQUFNLElBQUksSUFBSSxHQUFHLENBQUU7WUFDdEIsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQ2YsT0FBTyxJQUFJLENBQUM7U0FDZjtRQUNELE9BQU8sS0FBSyxDQUFDLENBQUM7S0FDZixDQUFDO0lBQ0YsTUFBTSxDQUFDLFNBQVMsR0FBRyxPQUFPLE1BQU0sQ0FBQyxTQUFTLEtBQUssVUFBVSxHQUFHLENBQUMsR0FBRyxHQUFLLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUssT0FBTyxHQUFHLEtBQUssUUFBUSxJQUFJLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQztJQUMxSyxTQUFTLFVBQVUsQ0FBQyxLQUFLLEVBQUUsU0FBUyxHQUFHLEtBQUssRUFBRTtRQUM1QyxPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUssT0FBTyxHQUFHLEtBQUssUUFBUSxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7S0FDdkY7SUFDRCxNQUFNLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztDQUNoQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDMUIsSUFBSSxjQUFjLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQztJQUNyQyxRQUFRO0lBQ1IsS0FBSztJQUNMLFFBQVE7SUFDUixTQUFTO0lBQ1QsT0FBTztJQUNQLFNBQVM7SUFDVCxNQUFNO0lBQ04sUUFBUTtJQUNSLFFBQVE7SUFDUixVQUFVO0lBQ1YsV0FBVztJQUNYLE1BQU07SUFDTixPQUFPO0lBQ1AsUUFBUTtJQUNSLFNBQVM7SUFDVCxTQUFTO0lBQ1QsTUFBTTtJQUNOLE9BQU87SUFDUCxLQUFLO0lBQ0wsS0FBSztDQUNOLENBQUMsQUFBQztBQUNILElBQUksY0FBYyxHQUFHLENBQUMsSUFBSSxHQUFLO0lBQzdCLE1BQU0sQ0FBQyxHQUFHLE9BQU8sSUFBSSxBQUFDO0lBQ3RCLE9BQVEsQ0FBQztRQUNQLEtBQUssV0FBVztZQUNkLE9BQU8sY0FBYyxDQUFDLFNBQVMsQ0FBQztRQUNsQyxLQUFLLFFBQVE7WUFDWCxPQUFPLGNBQWMsQ0FBQyxNQUFNLENBQUM7UUFDL0IsS0FBSyxRQUFRO1lBQ1gsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsY0FBYyxDQUFDLEdBQUcsR0FBRyxjQUFjLENBQUMsTUFBTSxDQUFDO1FBQ2xFLEtBQUssU0FBUztZQUNaLE9BQU8sY0FBYyxDQUFDLE9BQU8sQ0FBQztRQUNoQyxLQUFLLFVBQVU7WUFDYixPQUFPLGNBQWMsQ0FBQyxRQUFRLENBQUM7UUFDakMsS0FBSyxRQUFRO1lBQ1gsT0FBTyxjQUFjLENBQUMsTUFBTSxDQUFDO1FBQy9CLEtBQUssUUFBUTtZQUNYLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDdkIsT0FBTyxjQUFjLENBQUMsS0FBSyxDQUFDO2FBQzdCO1lBQ0QsSUFBSSxJQUFJLEtBQUssSUFBSSxFQUFFO2dCQUNqQixPQUFPLGNBQWMsQ0FBQyxJQUFJLENBQUM7YUFDNUI7WUFDRCxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLFVBQVUsSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLE9BQU8sSUFBSSxDQUFDLEtBQUssS0FBSyxVQUFVLEVBQUU7Z0JBQ2xHLE9BQU8sY0FBYyxDQUFDLE9BQU8sQ0FBQzthQUMvQjtZQUNELElBQUksT0FBTyxHQUFHLEtBQUssV0FBVyxJQUFJLElBQUksWUFBWSxHQUFHLEVBQUU7Z0JBQ3JELE9BQU8sY0FBYyxDQUFDLEdBQUcsQ0FBQzthQUMzQjtZQUNELElBQUksT0FBTyxHQUFHLEtBQUssV0FBVyxJQUFJLElBQUksWUFBWSxHQUFHLEVBQUU7Z0JBQ3JELE9BQU8sY0FBYyxDQUFDLEdBQUcsQ0FBQzthQUMzQjtZQUNELElBQUksT0FBTyxJQUFJLEtBQUssV0FBVyxJQUFJLElBQUksWUFBWSxJQUFJLEVBQUU7Z0JBQ3ZELE9BQU8sY0FBYyxDQUFDLElBQUksQ0FBQzthQUM1QjtZQUNELE9BQU8sY0FBYyxDQUFDLE1BQU0sQ0FBQztRQUMvQjtZQUNFLE9BQU8sY0FBYyxDQUFDLE9BQU8sQ0FBQztLQUNqQztDQUNGLEFBQUM7QUFDRixJQUFJLGFBQWEsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDO0lBQ3BDLGNBQWM7SUFDZCxpQkFBaUI7SUFDakIsUUFBUTtJQUNSLGVBQWU7SUFDZiw2QkFBNkI7SUFDN0Isb0JBQW9CO0lBQ3BCLG1CQUFtQjtJQUNuQixtQkFBbUI7SUFDbkIscUJBQXFCO0lBQ3JCLGNBQWM7SUFDZCxnQkFBZ0I7SUFDaEIsV0FBVztJQUNYLFNBQVM7SUFDVCw0QkFBNEI7SUFDNUIsaUJBQWlCO0NBQ2xCLENBQUMsQUFBQztBQUNILElBQUksY0FBYyxHQUFHLENBQUMsR0FBRyxHQUFLO0lBQzVCLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQUFBQztJQUMxQyxPQUFPLElBQUksQ0FBQyxPQUFPLGdCQUFnQixLQUFLLENBQUMsQ0FBQztDQUMzQyxBQUFDO0FBQ0YsSUFBSSxTQUFTLEdBQUcsY0FBYyxLQUFLO0lBQ2pDLFlBQVksTUFBTSxDQUFFO1FBQ2xCLEtBQUssRUFBRSxDQUFDO1FBQ1IsSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFDakIsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLEdBQUcsR0FBSztZQUN2QixJQUFJLENBQUMsTUFBTSxHQUFHO21CQUFJLElBQUksQ0FBQyxNQUFNO2dCQUFFLEdBQUc7YUFBQyxDQUFDO1NBQ3JDLENBQUM7UUFDRixJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsSUFBSSxHQUFHLEVBQUUsR0FBSztZQUM5QixJQUFJLENBQUMsTUFBTSxHQUFHO21CQUFJLElBQUksQ0FBQyxNQUFNO21CQUFLLElBQUk7YUFBQyxDQUFDO1NBQ3pDLENBQUM7UUFDRixNQUFNLFdBQVcsR0FBRyxVQUFVLENBQUMsU0FBUyxBQUFDO1FBQ3pDLElBQUksTUFBTSxDQUFDLGNBQWMsRUFBRTtZQUN6QixNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQztTQUMxQyxNQUFNO1lBQ0wsSUFBSSxDQUFDLFNBQVMsR0FBRyxXQUFXLENBQUM7U0FDOUI7UUFDRCxJQUFJLENBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBQztRQUN2QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztLQUN0QjtJQUNELElBQUksTUFBTSxHQUFHO1FBQ1gsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0tBQ3BCO0lBQ0QsTUFBTSxDQUFDLE9BQU8sRUFBRTtRQUNkLE1BQU0sTUFBTSxHQUFHLE9BQU8sSUFBSSxTQUFTLEtBQUssRUFBRTtZQUN4QyxPQUFPLEtBQUssQ0FBQyxPQUFPLENBQUM7U0FDdEIsQUFBQztRQUNGLE1BQU0sV0FBVyxHQUFHO1lBQUMsT0FBTyxFQUFFLEVBQUU7U0FBQyxBQUFDO1FBQ2xDLE1BQU0sWUFBWSxHQUFHLENBQUMsS0FBSyxHQUFLO1lBQzlCLEtBQUssTUFBTSxLQUFLLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBRTtnQkFDaEMsSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLGVBQWUsRUFBRTtvQkFDbEMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7aUJBQ3JDLE1BQU0sSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLHFCQUFxQixFQUFFO29CQUMvQyxZQUFZLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO2lCQUNyQyxNQUFNLElBQUksS0FBSyxDQUFDLElBQUksS0FBSyxtQkFBbUIsRUFBRTtvQkFDN0MsWUFBWSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQztpQkFDcEMsTUFBTSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtvQkFDbEMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7aUJBQ3pDLE1BQU07b0JBQ0wsSUFBSSxJQUFJLEdBQUcsV0FBVyxBQUFDO29CQUN2QixJQUFJLENBQUMsR0FBRyxDQUFDLEFBQUM7b0JBQ1YsTUFBTyxDQUFDLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUU7d0JBQzVCLE1BQU0sRUFBRSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEFBQUM7d0JBQ3pCLE1BQU0sUUFBUSxHQUFHLENBQUMsS0FBSyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEFBQUM7d0JBQzdDLElBQUksQ0FBQyxRQUFRLEVBQUU7NEJBQ2IsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSTtnQ0FBQyxPQUFPLEVBQUUsRUFBRTs2QkFBQyxDQUFDO3lCQUN0QyxNQUFNOzRCQUNMLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUk7Z0NBQUMsT0FBTyxFQUFFLEVBQUU7NkJBQUMsQ0FBQzs0QkFDckMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7eUJBQ3RDO3dCQUNELElBQUksR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7d0JBQ2hCLENBQUMsRUFBRSxDQUFDO3FCQUNMO2lCQUNGO2FBQ0Y7U0FDRixBQUFDO1FBQ0YsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ25CLE9BQU8sV0FBVyxDQUFDO0tBQ3BCO0lBQ0QsUUFBUSxHQUFHO1FBQ1QsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0tBQ3JCO0lBQ0QsSUFBSSxPQUFPLEdBQUc7UUFDWixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDN0M7SUFDRCxJQUFJLE9BQU8sR0FBRztRQUNaLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDO0tBQ2pDO0lBQ0QsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLEtBQUssR0FBSyxLQUFLLENBQUMsT0FBTyxFQUFFO1FBQ3pDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQUFBQztRQUN2QixNQUFNLFVBQVUsR0FBRyxFQUFFLEFBQUM7UUFDdEIsS0FBSyxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFFO1lBQzdCLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUN2QixXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUMxRCxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzthQUM1QyxNQUFNO2dCQUNMLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDOUI7U0FDRjtRQUNELE9BQU87WUFBQyxVQUFVO1lBQUUsV0FBVztTQUFDLENBQUM7S0FDbEM7SUFDRCxJQUFJLFVBQVUsR0FBRztRQUNmLE9BQU8sSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0tBQ3ZCO0NBQ0YsQUFBQztBQUNGLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxNQUFNLEdBQUs7SUFDN0IsTUFBTSxLQUFLLEdBQUcsSUFBSSxTQUFTLENBQUMsTUFBTSxDQUFDLEFBQUM7SUFDcEMsT0FBTyxLQUFLLENBQUM7Q0FDZCxDQUFDO0FBQ0YsSUFBSSxnQkFBZ0IsR0FBRyxDQUFDLEtBQUssRUFBRSxJQUFJLEdBQUs7SUFDdEMsSUFBSSxPQUFPLEFBQUM7SUFDWixPQUFRLEtBQUssQ0FBQyxJQUFJO1FBQ2hCLEtBQUssYUFBYSxDQUFDLFlBQVk7WUFDN0IsSUFBSSxLQUFLLENBQUMsUUFBUSxLQUFLLGNBQWMsQ0FBQyxTQUFTLEVBQUU7Z0JBQy9DLE9BQU8sR0FBRyxVQUFVLENBQUM7YUFDdEIsTUFBTTtnQkFDTCxPQUFPLEdBQUcsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7YUFDcEU7WUFDRCxNQUFNO1FBQ1IsS0FBSyxhQUFhLENBQUMsZUFBZTtZQUNoQyxPQUFPLEdBQUcsQ0FBQyxnQ0FBZ0MsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDOUUsTUFBTTtRQUNSLEtBQUssYUFBYSxDQUFDLGlCQUFpQjtZQUNsQyxPQUFPLEdBQUcsQ0FBQywrQkFBK0IsRUFBRSxLQUFLLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pGLE1BQU07UUFDUixLQUFLLGFBQWEsQ0FBQyxhQUFhO1lBQzlCLE9BQU8sR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQzFCLE1BQU07UUFDUixLQUFLLGFBQWEsQ0FBQywyQkFBMkI7WUFDNUMsT0FBTyxHQUFHLENBQUMsc0NBQXNDLEVBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3JGLE1BQU07UUFDUixLQUFLLGFBQWEsQ0FBQyxrQkFBa0I7WUFDbkMsT0FBTyxHQUFHLENBQUMsNkJBQTZCLEVBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsWUFBWSxFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDMUcsTUFBTTtRQUNSLEtBQUssYUFBYSxDQUFDLGlCQUFpQjtZQUNsQyxPQUFPLEdBQUcsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1lBQ3ZDLE1BQU07UUFDUixLQUFLLGFBQWEsQ0FBQyxtQkFBbUI7WUFDcEMsT0FBTyxHQUFHLENBQUMsNEJBQTRCLENBQUMsQ0FBQztZQUN6QyxNQUFNO1FBQ1IsS0FBSyxhQUFhLENBQUMsWUFBWTtZQUM3QixPQUFPLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUN6QixNQUFNO1FBQ1IsS0FBSyxhQUFhLENBQUMsY0FBYztZQUMvQixJQUFJLEtBQUssQ0FBQyxVQUFVLEtBQUssT0FBTyxFQUM5QixPQUFPLEdBQUcsQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7aUJBRXhDLE9BQU8sR0FBRyxTQUFTLENBQUM7WUFDdEIsTUFBTTtRQUNSLEtBQUssYUFBYSxDQUFDLFNBQVM7WUFDMUIsSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLE9BQU8sRUFDeEIsT0FBTyxHQUFHLENBQUMsbUJBQW1CLEVBQUUsS0FBSyxDQUFDLFNBQVMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7aUJBQ3RHLElBQUksS0FBSyxDQUFDLElBQUksS0FBSyxRQUFRLEVBQzlCLE9BQU8sR0FBRyxDQUFDLG9CQUFvQixFQUFFLEtBQUssQ0FBQyxTQUFTLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO2lCQUNwRyxJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssUUFBUSxFQUM5QixPQUFPLEdBQUcsQ0FBQyw0QkFBNEIsRUFBRSxLQUFLLENBQUMsU0FBUyxHQUFHLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztpQkFFakcsT0FBTyxHQUFHLGVBQWUsQ0FBQztZQUM1QixNQUFNO1FBQ1IsS0FBSyxhQUFhLENBQUMsT0FBTztZQUN4QixJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssT0FBTyxFQUN4QixPQUFPLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRSxLQUFLLENBQUMsU0FBUyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztpQkFDckcsSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLFFBQVEsRUFDOUIsT0FBTyxHQUFHLENBQUMsb0JBQW9CLEVBQUUsS0FBSyxDQUFDLFNBQVMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7aUJBQ3BHLElBQUksS0FBSyxDQUFDLElBQUksS0FBSyxRQUFRLEVBQzlCLE9BQU8sR0FBRyxDQUFDLHlCQUF5QixFQUFFLEtBQUssQ0FBQyxTQUFTLEdBQUcsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2lCQUU5RixPQUFPLEdBQUcsZUFBZSxDQUFDO1lBQzVCLE1BQU07UUFDUixLQUFLLGFBQWEsQ0FBQyxNQUFNO1lBQ3ZCLE9BQU8sR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQzFCLE1BQU07UUFDUixLQUFLLGFBQWEsQ0FBQywwQkFBMEI7WUFDM0MsT0FBTyxHQUFHLENBQUMsd0NBQXdDLENBQUMsQ0FBQztZQUNyRCxNQUFNO1FBQ1IsS0FBSyxhQUFhLENBQUMsZUFBZTtZQUNoQyxPQUFPLEdBQUcsQ0FBQyw2QkFBNkIsRUFBRSxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztZQUM3RCxNQUFNO1FBQ1I7WUFDRSxPQUFPLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztZQUM1QixLQUFLLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQzVCO0lBQ0QsT0FBTztRQUFDLE9BQU87S0FBQyxDQUFDO0NBQ2xCLEFBQUM7QUFDRixJQUFJLGlCQUFpQixHQUFHLGdCQUFnQixBQUFDO0FBQ3pDLElBQUksWUFBWSxHQUFHLENBQUMsR0FBRyxHQUFLO0lBQzFCLGlCQUFpQixHQUFHLEdBQUcsQ0FBQztDQUN6QixBQUFDO0FBQ0YsSUFBSSxVQUFVLEdBQUcsQ0FBQyxNQUFNLEdBQUs7SUFDM0IsTUFBTSxFQUFDLElBQUksQ0FBQSxFQUFFLElBQUksQ0FBQSxFQUFFLFNBQVMsQ0FBQSxFQUFFLFNBQVMsQ0FBQSxFQUFDLEdBQUcsTUFBTSxBQUFDO0lBQ2xELE1BQU0sUUFBUSxHQUFHO1dBQUksSUFBSTtXQUFLLFNBQVMsQ0FBQyxJQUFJLElBQUksRUFBRTtLQUFDLEFBQUM7SUFDcEQsTUFBTSxTQUFTLEdBQUc7UUFDaEIsR0FBRyxTQUFTO1FBQ1osSUFBSSxFQUFFLFFBQVE7S0FDZixBQUFDO0lBQ0YsSUFBSSxZQUFZLEdBQUcsRUFBRSxBQUFDO0lBQ3RCLE1BQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLE9BQU8sRUFBRSxBQUFDO0lBQzVELEtBQUssTUFBTSxHQUFHLElBQUksSUFBSSxDQUFFO1FBQ3RCLFlBQVksR0FBRyxHQUFHLENBQUMsU0FBUyxFQUFFO1lBQUMsSUFBSTtZQUFFLFlBQVksRUFBRSxZQUFZO1NBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztLQUMzRTtJQUNELE9BQU87UUFDTCxHQUFHLFNBQVM7UUFDWixJQUFJLEVBQUUsUUFBUTtRQUNkLE9BQU8sRUFBRSxTQUFTLENBQUMsT0FBTyxJQUFJLFlBQVk7S0FDM0MsQ0FBQztDQUNILEFBQUM7QUFDRixJQUFJLFdBQVcsR0FBRyxFQUFFLEFBQUM7QUFDckIsU0FBUyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsU0FBUyxFQUFFO0lBQzFDLE1BQU0sS0FBSyxHQUFHLFVBQVUsQ0FBQztRQUN2QixTQUFTO1FBQ1QsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJO1FBQ2QsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJO1FBQ2QsU0FBUyxFQUFFO1lBQ1QsR0FBRyxDQUFDLE1BQU0sQ0FBQyxrQkFBa0I7WUFDN0IsR0FBRyxDQUFDLGNBQWM7WUFDbEIsaUJBQWlCO1lBQ2pCLGdCQUFnQjtTQUNqQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3JCLENBQUMsQUFBQztJQUNILEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztDQUMvQjtBQUNELElBQUksWUFBWSxHQUFHO0lBQ2pCLGFBQWM7UUFDWixJQUFJLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQztLQUN0QjtJQUNELEtBQUssR0FBRztRQUNOLElBQUksSUFBSSxDQUFDLEtBQUssS0FBSyxPQUFPLEVBQ3hCLElBQUksQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDO0tBQ3hCO0lBQ0QsS0FBSyxHQUFHO1FBQ04sSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLFNBQVMsRUFDMUIsSUFBSSxDQUFDLEtBQUssR0FBRyxTQUFTLENBQUM7S0FDMUI7SUFDRCxPQUFPLFVBQVUsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFO1FBQ2pDLE1BQU0sVUFBVSxHQUFHLEVBQUUsQUFBQztRQUN0QixLQUFLLE1BQU0sRUFBRSxJQUFJLE9BQU8sQ0FBRTtZQUN4QixJQUFJLEVBQUUsQ0FBQyxNQUFNLEtBQUssU0FBUyxFQUN6QixPQUFPLFFBQVEsQ0FBQztZQUNsQixJQUFJLEVBQUUsQ0FBQyxNQUFNLEtBQUssT0FBTyxFQUN2QixNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDakIsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDM0I7UUFDRCxPQUFPO1lBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxLQUFLO1lBQUUsS0FBSyxFQUFFLFVBQVU7U0FBQyxDQUFDO0tBQ2xEO0lBQ0QsYUFBYSxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFO1FBQzNDLE1BQU0sU0FBUyxHQUFHLEVBQUUsQUFBQztRQUNyQixLQUFLLE1BQU0sSUFBSSxJQUFJLEtBQUssQ0FBRTtZQUN4QixTQUFTLENBQUMsSUFBSSxDQUFDO2dCQUNiLEdBQUcsRUFBRSxNQUFNLElBQUksQ0FBQyxHQUFHO2dCQUNuQixLQUFLLEVBQUUsTUFBTSxJQUFJLENBQUMsS0FBSzthQUN4QixDQUFDLENBQUM7U0FDSjtRQUNELE9BQU8sWUFBWSxDQUFDLGVBQWUsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7S0FDeEQ7SUFDRCxPQUFPLGVBQWUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFO1FBQ3BDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQUFBQztRQUN2QixLQUFLLE1BQU0sSUFBSSxJQUFJLEtBQUssQ0FBRTtZQUN4QixNQUFNLEVBQUMsR0FBRyxDQUFBLEVBQUUsS0FBSyxDQUFBLEVBQUMsR0FBRyxJQUFJLEFBQUM7WUFDMUIsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLFNBQVMsRUFDMUIsT0FBTyxRQUFRLENBQUM7WUFDbEIsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLFNBQVMsRUFDNUIsT0FBTyxRQUFRLENBQUM7WUFDbEIsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLE9BQU8sRUFDeEIsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ2pCLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxPQUFPLEVBQzFCLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNqQixJQUFJLE9BQU8sS0FBSyxDQUFDLEtBQUssS0FBSyxXQUFXLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtnQkFDeEQsV0FBVyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDO2FBQ3RDO1NBQ0Y7UUFDRCxPQUFPO1lBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxLQUFLO1lBQUUsS0FBSyxFQUFFLFdBQVc7U0FBQyxDQUFDO0tBQ25EO0NBQ0YsQUFBQztBQUNGLElBQUksUUFBUSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDM0IsTUFBTSxFQUFFLFNBQVM7Q0FDbEIsQ0FBQyxBQUFDO0FBQ0gsSUFBSSxNQUFNLEdBQUcsQ0FBQyxLQUFLLEdBQUssQ0FBQztRQUFDLE1BQU0sRUFBRSxPQUFPO1FBQUUsS0FBSztLQUFDLENBQUMsQUFBQztBQUNuRCxJQUFJLEdBQUcsR0FBRyxDQUFDLEtBQUssR0FBSyxDQUFDO1FBQUMsTUFBTSxFQUFFLE9BQU87UUFBRSxLQUFLO0tBQUMsQ0FBQyxBQUFDO0FBQ2hELElBQUksVUFBVSxHQUFHLENBQUMsQ0FBQyxHQUFLLENBQUMsQ0FBQyxNQUFNLEtBQUssU0FBUyxBQUFDO0FBQy9DLElBQUksUUFBUSxHQUFHLENBQUMsQ0FBQyxHQUFLLENBQUMsQ0FBQyxNQUFNLEtBQUssT0FBTyxBQUFDO0FBQzNDLElBQUksUUFBUSxHQUFHLENBQUMsQ0FBQyxHQUFLLENBQUMsQ0FBQyxNQUFNLEtBQUssT0FBTyxBQUFDO0FBQzNDLElBQUksUUFBUSxHQUFHLENBQUMsQ0FBQyxHQUFLLE9BQU8sT0FBTyxLQUFLLEtBQUssQ0FBQyxJQUFJLENBQUMsWUFBWSxPQUFPLEFBQUM7QUFDeEUsSUFBSSxVQUFVLEFBQUM7QUFDZixDQUFDLFNBQVMsV0FBVyxFQUFFO0lBQ3JCLFdBQVcsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxPQUFPLEdBQUssT0FBTyxPQUFPLEtBQUssUUFBUSxHQUFHO1lBQUMsT0FBTztTQUFDLEdBQUcsT0FBTyxJQUFJLEVBQUUsQ0FBQztJQUM1RixXQUFXLENBQUMsUUFBUSxHQUFHLENBQUMsT0FBTyxHQUFLLE9BQU8sT0FBTyxLQUFLLFFBQVEsR0FBRyxPQUFPLEdBQUcsT0FBTyxLQUFLLElBQUksSUFBSSxPQUFPLEtBQUssS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQztDQUMvSSxDQUFDLENBQUMsVUFBVSxJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDcEMsSUFBSSxtQkFBbUIsR0FBRztJQUN4QixZQUFZLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBRTtRQUNwQyxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztRQUNsQixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztRQUNsQixJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztLQUNqQjtJQUNELElBQUksSUFBSSxHQUFHO1FBQ1QsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDckM7Q0FDRixBQUFDO0FBQ0YsSUFBSSxhQUFhLEdBQUcsQ0FBQyxHQUFHLEVBQUUsTUFBTSxHQUFLO0lBQ25DLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQ3BCLE9BQU87WUFBQyxPQUFPLEVBQUUsSUFBSTtZQUFFLElBQUksRUFBRSxNQUFNLENBQUMsS0FBSztTQUFDLENBQUM7S0FDNUMsTUFBTTtRQUNMLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7WUFDN0IsTUFBTSxJQUFJLEtBQUssQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDO1NBQzlEO1FBQ0QsTUFBTSxLQUFLLEdBQUcsSUFBSSxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQUFBQztRQUMvQyxPQUFPO1lBQUMsT0FBTyxFQUFFLEtBQUs7WUFBRSxLQUFLO1NBQUMsQ0FBQztLQUNoQztDQUNGLEFBQUM7QUFDRixTQUFTLG9CQUFvQixDQUFDLE1BQU0sRUFBRTtJQUNwQyxJQUFJLENBQUMsTUFBTSxFQUNULE9BQU8sRUFBRSxDQUFDO0lBQ1osTUFBTSxFQUFDLFFBQVEsQ0FBQSxFQUFFLGtCQUFrQixDQUFBLEVBQUUsY0FBYyxDQUFBLEVBQUUsV0FBVyxDQUFBLEVBQUMsR0FBRyxNQUFNLEFBQUM7SUFDM0UsSUFBSSxRQUFRLElBQUksQ0FBQyxrQkFBa0IsSUFBSSxjQUFjLENBQUMsRUFBRTtRQUN0RCxNQUFNLElBQUksS0FBSyxDQUFDLENBQUMsdUVBQXVFLENBQUMsQ0FBQyxDQUFDO0tBQzVGO0lBQ0QsSUFBSSxRQUFRLEVBQ1YsT0FBTztRQUFDLFFBQVE7UUFBRSxXQUFXO0tBQUMsQ0FBQztJQUNqQyxNQUFNLFNBQVMsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLEdBQUs7UUFDOUIsSUFBSSxHQUFHLENBQUMsSUFBSSxLQUFLLGNBQWMsRUFDN0IsT0FBTztZQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsWUFBWTtTQUFDLENBQUM7UUFDckMsSUFBSSxPQUFPLEdBQUcsQ0FBQyxJQUFJLEtBQUssV0FBVyxJQUFJLGNBQWMsRUFDbkQsT0FBTztZQUFDLE9BQU8sRUFBRSxjQUFjO1NBQUMsQ0FBQztRQUNuQyxJQUFJLE1BQU0sQ0FBQyxrQkFBa0IsRUFDM0IsT0FBTztZQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsa0JBQWtCO1NBQUMsQ0FBQztRQUM5QyxPQUFPO1lBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxZQUFZO1NBQUMsQ0FBQztLQUNwQyxBQUFDO0lBQ0YsT0FBTztRQUFDLFFBQVEsRUFBRSxTQUFTO1FBQUUsV0FBVztLQUFDLENBQUM7Q0FDM0M7QUFDRCxJQUFJLFFBQVEsR0FBRztJQUNiLFlBQVksR0FBRyxDQUFFO1FBQ2YsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDO1FBQy9CLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUNwQyxJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztRQUNoQixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ25DLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDM0MsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM3QyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyQyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0MsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN6QyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdkMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNuQyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdkMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN6QyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDOUM7SUFDRCxJQUFJLFdBQVcsR0FBRztRQUNoQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO0tBQzlCO0lBQ0QsUUFBUSxDQUFDLEtBQUssRUFBRTtRQUNkLE9BQU8sY0FBYyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUNuQztJQUNELGVBQWUsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFO1FBQzFCLE9BQU8sR0FBRyxJQUFJO1lBQ1osTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTTtZQUMzQixJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUk7WUFDaEIsVUFBVSxFQUFFLGNBQWMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO1lBQ3RDLGNBQWMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVE7WUFDbEMsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJO1lBQ2hCLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTtTQUNyQixDQUFDO0tBQ0g7SUFDRCxtQkFBbUIsQ0FBQyxLQUFLLEVBQUU7UUFDekIsT0FBTztZQUNMLE1BQU0sRUFBRSxJQUFJLFlBQVksRUFBRTtZQUMxQixHQUFHLEVBQUU7Z0JBQ0gsTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTTtnQkFDM0IsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJO2dCQUNoQixVQUFVLEVBQUUsY0FBYyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7Z0JBQ3RDLGNBQWMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVE7Z0JBQ2xDLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSTtnQkFDaEIsTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNO2FBQ3JCO1NBQ0YsQ0FBQztLQUNIO0lBQ0QsVUFBVSxDQUFDLEtBQUssRUFBRTtRQUNoQixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxBQUFDO1FBQ2xDLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ3BCLE1BQU0sSUFBSSxLQUFLLENBQUMsd0NBQXdDLENBQUMsQ0FBQztTQUMzRDtRQUNELE9BQU8sTUFBTSxDQUFDO0tBQ2Y7SUFDRCxXQUFXLENBQUMsS0FBSyxFQUFFO1FBQ2pCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEFBQUM7UUFDbEMsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ2hDO0lBQ0QsS0FBSyxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUU7UUFDbEIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLEFBQUM7UUFDNUMsSUFBSSxNQUFNLENBQUMsT0FBTyxFQUNoQixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDckIsTUFBTSxNQUFNLENBQUMsS0FBSyxDQUFDO0tBQ3BCO0lBQ0QsU0FBUyxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUU7UUFDdEIsSUFBSSxFQUFFLEFBQUM7UUFDUCxNQUFNLEdBQUcsR0FBRztZQUNWLE1BQU0sRUFBRTtnQkFDTixNQUFNLEVBQUUsRUFBRTtnQkFDVixLQUFLLEVBQUUsQ0FBQyxFQUFFLEdBQUcsTUFBTSxLQUFLLElBQUksSUFBSSxNQUFNLEtBQUssS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLElBQUksSUFBSSxFQUFFLEtBQUssS0FBSyxDQUFDLEdBQUcsRUFBRSxHQUFHLEtBQUs7Z0JBQ2pILGtCQUFrQixFQUFFLE1BQU0sS0FBSyxJQUFJLElBQUksTUFBTSxLQUFLLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLE1BQU0sQ0FBQyxRQUFRO2FBQ3BGO1lBQ0QsSUFBSSxFQUFFLENBQUMsTUFBTSxLQUFLLElBQUksSUFBSSxNQUFNLEtBQUssS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDekUsY0FBYyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUTtZQUNsQyxNQUFNLEVBQUUsSUFBSTtZQUNaLElBQUk7WUFDSixVQUFVLEVBQUUsY0FBYyxDQUFDLElBQUksQ0FBQztTQUNqQyxBQUFDO1FBQ0YsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztZQUFDLElBQUk7WUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUk7WUFBRSxNQUFNLEVBQUUsR0FBRztTQUFDLENBQUMsQUFBQztRQUNwRSxPQUFPLGFBQWEsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7S0FDbkM7SUFDRCxNQUFNLFVBQVUsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFO1FBQzdCLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLEFBQUM7UUFDdkQsSUFBSSxNQUFNLENBQUMsT0FBTyxFQUNoQixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDckIsTUFBTSxNQUFNLENBQUMsS0FBSyxDQUFDO0tBQ3BCO0lBQ0QsTUFBTSxjQUFjLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRTtRQUNqQyxNQUFNLEdBQUcsR0FBRztZQUNWLE1BQU0sRUFBRTtnQkFDTixNQUFNLEVBQUUsRUFBRTtnQkFDVixrQkFBa0IsRUFBRSxNQUFNLEtBQUssSUFBSSxJQUFJLE1BQU0sS0FBSyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBRyxNQUFNLENBQUMsUUFBUTtnQkFDbkYsS0FBSyxFQUFFLElBQUk7YUFDWjtZQUNELElBQUksRUFBRSxDQUFDLE1BQU0sS0FBSyxJQUFJLElBQUksTUFBTSxLQUFLLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ3pFLGNBQWMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVE7WUFDbEMsTUFBTSxFQUFFLElBQUk7WUFDWixJQUFJO1lBQ0osVUFBVSxFQUFFLGNBQWMsQ0FBQyxJQUFJLENBQUM7U0FDakMsQUFBQztRQUNGLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUFDLElBQUk7WUFBRSxJQUFJLEVBQUUsRUFBRTtZQUFFLE1BQU0sRUFBRSxHQUFHO1NBQUMsQ0FBQyxBQUFDO1FBQ3BFLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxnQkFBZ0IsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQUFBQztRQUN6RyxPQUFPLGFBQWEsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7S0FDbkM7SUFDRCxNQUFNLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRTtRQUNyQixNQUFNLGtCQUFrQixHQUFHLENBQUMsR0FBRyxHQUFLO1lBQ2xDLElBQUksT0FBTyxPQUFPLEtBQUssUUFBUSxJQUFJLE9BQU8sT0FBTyxLQUFLLFdBQVcsRUFBRTtnQkFDakUsT0FBTztvQkFBQyxPQUFPO2lCQUFDLENBQUM7YUFDbEIsTUFBTSxJQUFJLE9BQU8sT0FBTyxLQUFLLFVBQVUsRUFBRTtnQkFDeEMsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDckIsTUFBTTtnQkFDTCxPQUFPLE9BQU8sQ0FBQzthQUNoQjtTQUNGLEFBQUM7UUFDRixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxHQUFLO1lBQ3BDLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQUFBQztZQUMxQixNQUFNLFFBQVEsR0FBRyxJQUFNLEdBQUcsQ0FBQyxRQUFRLENBQUM7b0JBQ2xDLElBQUksRUFBRSxhQUFhLENBQUMsTUFBTTtvQkFDMUIsR0FBRyxrQkFBa0IsQ0FBQyxHQUFHLENBQUM7aUJBQzNCLENBQUMsQUFBQztZQUNILElBQUksT0FBTyxPQUFPLEtBQUssV0FBVyxJQUFJLE1BQU0sWUFBWSxPQUFPLEVBQUU7Z0JBQy9ELE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksR0FBSztvQkFDM0IsSUFBSSxDQUFDLElBQUksRUFBRTt3QkFDVCxRQUFRLEVBQUUsQ0FBQzt3QkFDWCxPQUFPLEtBQUssQ0FBQztxQkFDZCxNQUFNO3dCQUNMLE9BQU8sSUFBSSxDQUFDO3FCQUNiO2lCQUNGLENBQUMsQ0FBQzthQUNKO1lBQ0QsSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFDWCxRQUFRLEVBQUUsQ0FBQztnQkFDWCxPQUFPLEtBQUssQ0FBQzthQUNkLE1BQU07Z0JBQ0wsT0FBTyxJQUFJLENBQUM7YUFDYjtTQUNGLENBQUMsQ0FBQztLQUNKO0lBQ0QsVUFBVSxDQUFDLEtBQUssRUFBRSxjQUFjLEVBQUU7UUFDaEMsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsR0FBSztZQUNwQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUNmLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxjQUFjLEtBQUssVUFBVSxHQUFHLGNBQWMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsY0FBYyxDQUFDLENBQUM7Z0JBQy9GLE9BQU8sS0FBSyxDQUFDO2FBQ2QsTUFBTTtnQkFDTCxPQUFPLElBQUksQ0FBQzthQUNiO1NBQ0YsQ0FBQyxDQUFDO0tBQ0o7SUFDRCxXQUFXLENBQUMsVUFBVSxFQUFFO1FBQ3RCLE9BQU8sSUFBSSxXQUFXLENBQUM7WUFDckIsTUFBTSxFQUFFLElBQUk7WUFDWixRQUFRLEVBQUUsc0JBQXNCLENBQUMsVUFBVTtZQUMzQyxNQUFNLEVBQUU7Z0JBQUMsSUFBSSxFQUFFLFlBQVk7Z0JBQUUsVUFBVTthQUFDO1NBQ3pDLENBQUMsQ0FBQztLQUNKO0lBQ0QsUUFBUSxHQUFHO1FBQ1QsT0FBTyxZQUFZLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ2xDO0lBQ0QsUUFBUSxHQUFHO1FBQ1QsT0FBTyxZQUFZLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ2xDO0lBQ0QsT0FBTyxHQUFHO1FBQ1IsT0FBTyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUM7S0FDbkM7SUFDRCxLQUFLLEdBQUc7UUFDTixPQUFPLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDL0I7SUFDRCxPQUFPLEdBQUc7UUFDUixPQUFPLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDakM7SUFDRCxFQUFFLENBQUMsTUFBTSxFQUFFO1FBQ1QsT0FBTyxTQUFTLENBQUMsTUFBTSxDQUFDO1lBQUMsSUFBSTtZQUFFLE1BQU07U0FBQyxDQUFDLENBQUM7S0FDekM7SUFDRCxHQUFHLENBQUMsUUFBUSxFQUFFO1FBQ1osT0FBTyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0tBQ2hEO0lBQ0QsU0FBUyxDQUFDLFNBQVMsRUFBRTtRQUNuQixPQUFPLElBQUksV0FBVyxDQUFDO1lBQ3JCLE1BQU0sRUFBRSxJQUFJO1lBQ1osUUFBUSxFQUFFLHNCQUFzQixDQUFDLFVBQVU7WUFDM0MsTUFBTSxFQUFFO2dCQUFDLElBQUksRUFBRSxXQUFXO2dCQUFFLFNBQVM7YUFBQztTQUN2QyxDQUFDLENBQUM7S0FDSjtJQUNELE9BQU8sQ0FBQyxHQUFHLEVBQUU7UUFDWCxNQUFNLGdCQUFnQixHQUFHLE9BQU8sR0FBRyxLQUFLLFVBQVUsR0FBRyxHQUFHLEdBQUcsSUFBTSxHQUFHLEFBQUM7UUFDckUsT0FBTyxJQUFJLFdBQVcsQ0FBQztZQUNyQixTQUFTLEVBQUUsSUFBSTtZQUNmLFlBQVksRUFBRSxnQkFBZ0I7WUFDOUIsUUFBUSxFQUFFLHNCQUFzQixDQUFDLFVBQVU7U0FDNUMsQ0FBQyxDQUFDO0tBQ0o7SUFDRCxRQUFRLENBQUMsV0FBVyxFQUFFO1FBQ3BCLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLEFBQUM7UUFDOUIsT0FBTyxJQUFJLElBQUksQ0FBQztZQUNkLEdBQUcsSUFBSSxDQUFDLElBQUk7WUFDWixXQUFXO1NBQ1osQ0FBQyxDQUFDO0tBQ0o7SUFDRCxVQUFVLEdBQUc7UUFDWCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7S0FDdkM7SUFDRCxVQUFVLEdBQUc7UUFDWCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDO0tBQ3JDO0NBQ0YsQUFBQztBQUNGLElBQUksVUFBVSxtQkFBbUIsQUFBQztBQUNsQyxJQUFJLFVBQVUsZ0hBQWdILEFBQUM7QUFDL0gsSUFBSSxXQUFXLHlIQUF5SCxBQUFDO0FBQ3pJLElBQUksVUFBVSxHQUFHLGNBQWMsUUFBUTtJQUNyQyxhQUFjO1FBQ1osS0FBSyxJQUFJLFNBQVMsQ0FBQyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxLQUFLLEVBQUUsVUFBVSxFQUFFLE9BQU8sR0FBSyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxHQUFLLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ3hGLFVBQVU7Z0JBQ1YsSUFBSSxFQUFFLGFBQWEsQ0FBQyxjQUFjO2dCQUNsQyxHQUFHLFVBQVUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO2FBQ2hDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxPQUFPLEdBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsVUFBVSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3ZFLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBTSxJQUFJLFVBQVUsQ0FBQztnQkFDL0IsR0FBRyxJQUFJLENBQUMsSUFBSTtnQkFDWixNQUFNLEVBQUU7dUJBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNO29CQUFFO3dCQUFDLElBQUksRUFBRSxNQUFNO3FCQUFDO2lCQUFDO2FBQzlDLENBQUMsQ0FBQztLQUNKO0lBQ0QsTUFBTSxDQUFDLEtBQUssRUFBRTtRQUNaLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEFBQUM7UUFDeEMsSUFBSSxVQUFVLEtBQUssY0FBYyxDQUFDLE1BQU0sRUFBRTtZQUN4QyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxBQUFDO1lBQ3pDLGtCQUFrQixDQUFDLElBQUksRUFBRTtnQkFDdkIsSUFBSSxFQUFFLGFBQWEsQ0FBQyxZQUFZO2dCQUNoQyxRQUFRLEVBQUUsY0FBYyxDQUFDLE1BQU07Z0JBQy9CLFFBQVEsRUFBRSxJQUFJLENBQUMsVUFBVTthQUMxQixDQUFDLENBQUM7WUFDSCxPQUFPLFFBQVEsQ0FBQztTQUNqQjtRQUNELE1BQU0sTUFBTSxHQUFHLElBQUksWUFBWSxFQUFFLEFBQUM7UUFDbEMsSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLEFBQUM7UUFDakIsS0FBSyxNQUFNLEtBQUssSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBRTtZQUNwQyxJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssS0FBSyxFQUFFO2dCQUN4QixJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxLQUFLLEVBQUU7b0JBQ25DLEdBQUcsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztvQkFDdkMsa0JBQWtCLENBQUMsR0FBRyxFQUFFO3dCQUN0QixJQUFJLEVBQUUsYUFBYSxDQUFDLFNBQVM7d0JBQzdCLE9BQU8sRUFBRSxLQUFLLENBQUMsS0FBSzt3QkFDcEIsSUFBSSxFQUFFLFFBQVE7d0JBQ2QsU0FBUyxFQUFFLElBQUk7d0JBQ2YsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO3FCQUN2QixDQUFDLENBQUM7b0JBQ0gsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO2lCQUNoQjthQUNGLE1BQU0sSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLEtBQUssRUFBRTtnQkFDL0IsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsS0FBSyxFQUFFO29CQUNuQyxHQUFHLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7b0JBQ3ZDLGtCQUFrQixDQUFDLEdBQUcsRUFBRTt3QkFDdEIsSUFBSSxFQUFFLGFBQWEsQ0FBQyxPQUFPO3dCQUMzQixPQUFPLEVBQUUsS0FBSyxDQUFDLEtBQUs7d0JBQ3BCLElBQUksRUFBRSxRQUFRO3dCQUNkLFNBQVMsRUFBRSxJQUFJO3dCQUNmLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTztxQkFDdkIsQ0FBQyxDQUFDO29CQUNILE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztpQkFDaEI7YUFDRixNQUFNLElBQUksS0FBSyxDQUFDLElBQUksS0FBSyxPQUFPLEVBQUU7Z0JBQ2pDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRTtvQkFDakMsR0FBRyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO29CQUN2QyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUU7d0JBQ3RCLFVBQVUsRUFBRSxPQUFPO3dCQUNuQixJQUFJLEVBQUUsYUFBYSxDQUFDLGNBQWM7d0JBQ2xDLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTztxQkFDdkIsQ0FBQyxDQUFDO29CQUNILE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztpQkFDaEI7YUFDRixNQUFNLElBQUksS0FBSyxDQUFDLElBQUksS0FBSyxNQUFNLEVBQUU7Z0JBQ2hDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRTtvQkFDaEMsR0FBRyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO29CQUN2QyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUU7d0JBQ3RCLFVBQVUsRUFBRSxNQUFNO3dCQUNsQixJQUFJLEVBQUUsYUFBYSxDQUFDLGNBQWM7d0JBQ2xDLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTztxQkFDdkIsQ0FBQyxDQUFDO29CQUNILE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztpQkFDaEI7YUFDRixNQUFNLElBQUksS0FBSyxDQUFDLElBQUksS0FBSyxNQUFNLEVBQUU7Z0JBQ2hDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRTtvQkFDaEMsR0FBRyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO29CQUN2QyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUU7d0JBQ3RCLFVBQVUsRUFBRSxNQUFNO3dCQUNsQixJQUFJLEVBQUUsYUFBYSxDQUFDLGNBQWM7d0JBQ2xDLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTztxQkFDdkIsQ0FBQyxDQUFDO29CQUNILE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztpQkFDaEI7YUFDRixNQUFNLElBQUksS0FBSyxDQUFDLElBQUksS0FBSyxLQUFLLEVBQUU7Z0JBQy9CLElBQUk7b0JBQ0YsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUNyQixDQUFDLE9BQU8sRUFBRSxFQUFFO29CQUNYLEdBQUcsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztvQkFDdkMsa0JBQWtCLENBQUMsR0FBRyxFQUFFO3dCQUN0QixVQUFVLEVBQUUsS0FBSzt3QkFDakIsSUFBSSxFQUFFLGFBQWEsQ0FBQyxjQUFjO3dCQUNsQyxPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87cUJBQ3ZCLENBQUMsQ0FBQztvQkFDSCxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7aUJBQ2hCO2FBQ0YsTUFBTSxJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssT0FBTyxFQUFFO2dCQUNqQyxLQUFLLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7Z0JBQzFCLE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQUFBQztnQkFDaEQsSUFBSSxDQUFDLFVBQVUsRUFBRTtvQkFDZixHQUFHLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7b0JBQ3ZDLGtCQUFrQixDQUFDLEdBQUcsRUFBRTt3QkFDdEIsVUFBVSxFQUFFLE9BQU87d0JBQ25CLElBQUksRUFBRSxhQUFhLENBQUMsY0FBYzt3QkFDbEMsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO3FCQUN2QixDQUFDLENBQUM7b0JBQ0gsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO2lCQUNoQjthQUNGLE1BQU0sSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLE1BQU0sRUFBRTtnQkFDaEMsS0FBSyxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO2FBQ2hDLE1BQU07Z0JBQ0wsS0FBSyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUMxQjtTQUNGO1FBQ0QsT0FBTztZQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsS0FBSztZQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsSUFBSTtTQUFDLENBQUM7S0FDbEQ7SUFDRCxTQUFTLENBQUMsS0FBSyxFQUFFO1FBQ2YsT0FBTyxJQUFJLFVBQVUsQ0FBQztZQUNwQixHQUFHLElBQUksQ0FBQyxJQUFJO1lBQ1osTUFBTSxFQUFFO21CQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTTtnQkFBRSxLQUFLO2FBQUM7U0FDckMsQ0FBQyxDQUFDO0tBQ0o7SUFDRCxLQUFLLENBQUMsT0FBTyxFQUFFO1FBQ2IsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQUMsSUFBSSxFQUFFLE9BQU87WUFBRSxHQUFHLFVBQVUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO1NBQUMsQ0FBQyxDQUFDO0tBQ3pFO0lBQ0QsR0FBRyxDQUFDLE9BQU8sRUFBRTtRQUNYLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUFDLElBQUksRUFBRSxLQUFLO1lBQUUsR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQztTQUFDLENBQUMsQ0FBQztLQUN2RTtJQUNELElBQUksQ0FBQyxPQUFPLEVBQUU7UUFDWixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7WUFBQyxJQUFJLEVBQUUsTUFBTTtZQUFFLEdBQUcsVUFBVSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUM7U0FBQyxDQUFDLENBQUM7S0FDeEU7SUFDRCxJQUFJLENBQUMsT0FBTyxFQUFFO1FBQ1osT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQUMsSUFBSSxFQUFFLE1BQU07WUFBRSxHQUFHLFVBQVUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO1NBQUMsQ0FBQyxDQUFDO0tBQ3hFO0lBQ0QsS0FBSyxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUU7UUFDcEIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQ3BCLElBQUksRUFBRSxPQUFPO1lBQ2IsS0FBSztZQUNMLEdBQUcsVUFBVSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUM7U0FDaEMsQ0FBQyxDQUFDO0tBQ0o7SUFDRCxHQUFHLENBQUMsU0FBUyxFQUFFLE9BQU8sRUFBRTtRQUN0QixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDcEIsSUFBSSxFQUFFLEtBQUs7WUFDWCxLQUFLLEVBQUUsU0FBUztZQUNoQixHQUFHLFVBQVUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO1NBQ2hDLENBQUMsQ0FBQztLQUNKO0lBQ0QsR0FBRyxDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUU7UUFDdEIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQ3BCLElBQUksRUFBRSxLQUFLO1lBQ1gsS0FBSyxFQUFFLFNBQVM7WUFDaEIsR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQztTQUNoQyxDQUFDLENBQUM7S0FDSjtJQUNELE1BQU0sQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFO1FBQ25CLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQztLQUNqRDtJQUNELElBQUksT0FBTyxHQUFHO1FBQ1osT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxHQUFLLEVBQUUsQ0FBQyxJQUFJLEtBQUssT0FBTyxDQUFDLENBQUM7S0FDN0Q7SUFDRCxJQUFJLEtBQUssR0FBRztRQUNWLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsR0FBSyxFQUFFLENBQUMsSUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDO0tBQzNEO0lBQ0QsSUFBSSxNQUFNLEdBQUc7UUFDWCxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLEdBQUssRUFBRSxDQUFDLElBQUksS0FBSyxNQUFNLENBQUMsQ0FBQztLQUM1RDtJQUNELElBQUksTUFBTSxHQUFHO1FBQ1gsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxHQUFLLEVBQUUsQ0FBQyxJQUFJLEtBQUssTUFBTSxDQUFDLENBQUM7S0FDNUQ7SUFDRCxJQUFJLFNBQVMsR0FBRztRQUNkLElBQUksR0FBRyxHQUFHLENBQUMsUUFBUSxBQUFDO1FBQ3BCLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBSztZQUMzQixJQUFJLEVBQUUsQ0FBQyxJQUFJLEtBQUssS0FBSyxFQUFFO2dCQUNyQixJQUFJLEdBQUcsS0FBSyxJQUFJLElBQUksRUFBRSxDQUFDLEtBQUssR0FBRyxHQUFHLEVBQUU7b0JBQ2xDLEdBQUcsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO2lCQUNoQjthQUNGO1NBQ0YsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxHQUFHLENBQUM7S0FDWjtJQUNELElBQUksU0FBUyxHQUFHO1FBQ2QsSUFBSSxHQUFHLEdBQUcsSUFBSSxBQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFLO1lBQzNCLElBQUksRUFBRSxDQUFDLElBQUksS0FBSyxLQUFLLEVBQUU7Z0JBQ3JCLElBQUksR0FBRyxLQUFLLElBQUksSUFBSSxFQUFFLENBQUMsS0FBSyxHQUFHLEdBQUcsRUFBRTtvQkFDbEMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUM7aUJBQ2hCO2FBQ0Y7U0FDRixDQUFDLENBQUM7UUFDSCxPQUFPLEdBQUcsQ0FBQztLQUNaO0NBQ0YsQUFBQztBQUNGLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxNQUFNLEdBQUs7SUFDOUIsT0FBTyxJQUFJLFVBQVUsQ0FBQztRQUNwQixNQUFNLEVBQUUsRUFBRTtRQUNWLFFBQVEsRUFBRSxzQkFBc0IsQ0FBQyxTQUFTO1FBQzFDLEdBQUcsb0JBQW9CLENBQUMsTUFBTSxDQUFDO0tBQ2hDLENBQUMsQ0FBQztDQUNKLENBQUM7QUFDRixTQUFTLG1CQUFtQixDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUU7SUFDdEMsTUFBTSxXQUFXLEdBQUcsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQUFBQztJQUNoRSxNQUFNLFlBQVksR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsTUFBTSxBQUFDO0lBQ2xFLE1BQU0sUUFBUSxHQUFHLFdBQVcsR0FBRyxZQUFZLEdBQUcsV0FBVyxHQUFHLFlBQVksQUFBQztJQUN6RSxNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEFBQUM7SUFDaEUsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxBQUFDO0lBQ2xFLE9BQU8sTUFBTSxHQUFHLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztDQUNsRDtBQUNELElBQUksVUFBVSxHQUFHLGNBQWMsUUFBUTtJQUNyQyxhQUFjO1FBQ1osS0FBSyxJQUFJLFNBQVMsQ0FBQyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztRQUNwQixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7UUFDcEIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO0tBQzdCO0lBQ0QsTUFBTSxDQUFDLEtBQUssRUFBRTtRQUNaLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEFBQUM7UUFDeEMsSUFBSSxVQUFVLEtBQUssY0FBYyxDQUFDLE1BQU0sRUFBRTtZQUN4QyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxBQUFDO1lBQ3pDLGtCQUFrQixDQUFDLElBQUksRUFBRTtnQkFDdkIsSUFBSSxFQUFFLGFBQWEsQ0FBQyxZQUFZO2dCQUNoQyxRQUFRLEVBQUUsY0FBYyxDQUFDLE1BQU07Z0JBQy9CLFFBQVEsRUFBRSxJQUFJLENBQUMsVUFBVTthQUMxQixDQUFDLENBQUM7WUFDSCxPQUFPLFFBQVEsQ0FBQztTQUNqQjtRQUNELElBQUksR0FBRyxHQUFHLEtBQUssQ0FBQyxBQUFDO1FBQ2pCLE1BQU0sTUFBTSxHQUFHLElBQUksWUFBWSxFQUFFLEFBQUM7UUFDbEMsS0FBSyxNQUFNLEtBQUssSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBRTtZQUNwQyxJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssS0FBSyxFQUFFO2dCQUN4QixJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUU7b0JBQ2hDLEdBQUcsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztvQkFDdkMsa0JBQWtCLENBQUMsR0FBRyxFQUFFO3dCQUN0QixJQUFJLEVBQUUsYUFBYSxDQUFDLFlBQVk7d0JBQ2hDLFFBQVEsRUFBRSxTQUFTO3dCQUNuQixRQUFRLEVBQUUsT0FBTzt3QkFDakIsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO3FCQUN2QixDQUFDLENBQUM7b0JBQ0gsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO2lCQUNoQjthQUNGLE1BQU0sSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLEtBQUssRUFBRTtnQkFDL0IsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLElBQUksSUFBSSxLQUFLLENBQUMsS0FBSyxBQUFDO2dCQUN4RixJQUFJLFFBQVEsRUFBRTtvQkFDWixHQUFHLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7b0JBQ3ZDLGtCQUFrQixDQUFDLEdBQUcsRUFBRTt3QkFDdEIsSUFBSSxFQUFFLGFBQWEsQ0FBQyxTQUFTO3dCQUM3QixPQUFPLEVBQUUsS0FBSyxDQUFDLEtBQUs7d0JBQ3BCLElBQUksRUFBRSxRQUFRO3dCQUNkLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUzt3QkFDMUIsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO3FCQUN2QixDQUFDLENBQUM7b0JBQ0gsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO2lCQUNoQjthQUNGLE1BQU0sSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLEtBQUssRUFBRTtnQkFDL0IsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLElBQUksSUFBSSxLQUFLLENBQUMsS0FBSyxBQUFDO2dCQUN0RixJQUFJLE1BQU0sRUFBRTtvQkFDVixHQUFHLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7b0JBQ3ZDLGtCQUFrQixDQUFDLEdBQUcsRUFBRTt3QkFDdEIsSUFBSSxFQUFFLGFBQWEsQ0FBQyxPQUFPO3dCQUMzQixPQUFPLEVBQUUsS0FBSyxDQUFDLEtBQUs7d0JBQ3BCLElBQUksRUFBRSxRQUFRO3dCQUNkLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUzt3QkFDMUIsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO3FCQUN2QixDQUFDLENBQUM7b0JBQ0gsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO2lCQUNoQjthQUNGLE1BQU0sSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLFlBQVksRUFBRTtnQkFDdEMsSUFBSSxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUU7b0JBQ3RELEdBQUcsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztvQkFDdkMsa0JBQWtCLENBQUMsR0FBRyxFQUFFO3dCQUN0QixJQUFJLEVBQUUsYUFBYSxDQUFDLGVBQWU7d0JBQ25DLFVBQVUsRUFBRSxLQUFLLENBQUMsS0FBSzt3QkFDdkIsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO3FCQUN2QixDQUFDLENBQUM7b0JBQ0gsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO2lCQUNoQjthQUNGLE1BQU07Z0JBQ0wsS0FBSyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUMxQjtTQUNGO1FBQ0QsT0FBTztZQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsS0FBSztZQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsSUFBSTtTQUFDLENBQUM7S0FDbEQ7SUFDRCxHQUFHLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRTtRQUNsQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsVUFBVSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0tBQ3hFO0lBQ0QsRUFBRSxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUU7UUFDakIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLFVBQVUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztLQUN6RTtJQUNELEdBQUcsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxVQUFVLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7S0FDeEU7SUFDRCxFQUFFLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRTtRQUNqQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsVUFBVSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0tBQ3pFO0lBQ0QsUUFBUSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRTtRQUN4QyxPQUFPLElBQUksVUFBVSxDQUFDO1lBQ3BCLEdBQUcsSUFBSSxDQUFDLElBQUk7WUFDWixNQUFNLEVBQUU7bUJBQ0gsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNO2dCQUNuQjtvQkFDRSxJQUFJO29CQUNKLEtBQUs7b0JBQ0wsU0FBUztvQkFDVCxPQUFPLEVBQUUsVUFBVSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUM7aUJBQ3RDO2FBQ0Y7U0FDRixDQUFDLENBQUM7S0FDSjtJQUNELFNBQVMsQ0FBQyxLQUFLLEVBQUU7UUFDZixPQUFPLElBQUksVUFBVSxDQUFDO1lBQ3BCLEdBQUcsSUFBSSxDQUFDLElBQUk7WUFDWixNQUFNLEVBQUU7bUJBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNO2dCQUFFLEtBQUs7YUFBQztTQUNyQyxDQUFDLENBQUM7S0FDSjtJQUNELEdBQUcsQ0FBQyxPQUFPLEVBQUU7UUFDWCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDcEIsSUFBSSxFQUFFLEtBQUs7WUFDWCxPQUFPLEVBQUUsVUFBVSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUM7U0FDdEMsQ0FBQyxDQUFDO0tBQ0o7SUFDRCxRQUFRLENBQUMsT0FBTyxFQUFFO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUNwQixJQUFJLEVBQUUsS0FBSztZQUNYLEtBQUssRUFBRSxDQUFDO1lBQ1IsU0FBUyxFQUFFLEtBQUs7WUFDaEIsT0FBTyxFQUFFLFVBQVUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO1NBQ3RDLENBQUMsQ0FBQztLQUNKO0lBQ0QsUUFBUSxDQUFDLE9BQU8sRUFBRTtRQUNoQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDcEIsSUFBSSxFQUFFLEtBQUs7WUFDWCxLQUFLLEVBQUUsQ0FBQztZQUNSLFNBQVMsRUFBRSxLQUFLO1lBQ2hCLE9BQU8sRUFBRSxVQUFVLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQztTQUN0QyxDQUFDLENBQUM7S0FDSjtJQUNELFdBQVcsQ0FBQyxPQUFPLEVBQUU7UUFDbkIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQ3BCLElBQUksRUFBRSxLQUFLO1lBQ1gsS0FBSyxFQUFFLENBQUM7WUFDUixTQUFTLEVBQUUsSUFBSTtZQUNmLE9BQU8sRUFBRSxVQUFVLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQztTQUN0QyxDQUFDLENBQUM7S0FDSjtJQUNELFdBQVcsQ0FBQyxPQUFPLEVBQUU7UUFDbkIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQ3BCLElBQUksRUFBRSxLQUFLO1lBQ1gsS0FBSyxFQUFFLENBQUM7WUFDUixTQUFTLEVBQUUsSUFBSTtZQUNmLE9BQU8sRUFBRSxVQUFVLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQztTQUN0QyxDQUFDLENBQUM7S0FDSjtJQUNELFVBQVUsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUNwQixJQUFJLEVBQUUsWUFBWTtZQUNsQixLQUFLO1lBQ0wsT0FBTyxFQUFFLFVBQVUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO1NBQ3RDLENBQUMsQ0FBQztLQUNKO0lBQ0QsSUFBSSxRQUFRLEdBQUc7UUFDYixJQUFJLEdBQUcsR0FBRyxJQUFJLEFBQUM7UUFDZixLQUFLLE1BQU0sRUFBRSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFFO1lBQ2pDLElBQUksRUFBRSxDQUFDLElBQUksS0FBSyxLQUFLLEVBQUU7Z0JBQ3JCLElBQUksR0FBRyxLQUFLLElBQUksSUFBSSxFQUFFLENBQUMsS0FBSyxHQUFHLEdBQUcsRUFDaEMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUM7YUFDbEI7U0FDRjtRQUNELE9BQU8sR0FBRyxDQUFDO0tBQ1o7SUFDRCxJQUFJLFFBQVEsR0FBRztRQUNiLElBQUksR0FBRyxHQUFHLElBQUksQUFBQztRQUNmLEtBQUssTUFBTSxFQUFFLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUU7WUFDakMsSUFBSSxFQUFFLENBQUMsSUFBSSxLQUFLLEtBQUssRUFBRTtnQkFDckIsSUFBSSxHQUFHLEtBQUssSUFBSSxJQUFJLEVBQUUsQ0FBQyxLQUFLLEdBQUcsR0FBRyxFQUNoQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQzthQUNsQjtTQUNGO1FBQ0QsT0FBTyxHQUFHLENBQUM7S0FDWjtJQUNELElBQUksS0FBSyxHQUFHO1FBQ1YsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxHQUFLLEVBQUUsQ0FBQyxJQUFJLEtBQUssS0FBSyxDQUFDLENBQUM7S0FDM0Q7Q0FDRixBQUFDO0FBQ0YsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLE1BQU0sR0FBSztJQUM5QixPQUFPLElBQUksVUFBVSxDQUFDO1FBQ3BCLE1BQU0sRUFBRSxFQUFFO1FBQ1YsUUFBUSxFQUFFLHNCQUFzQixDQUFDLFNBQVM7UUFDMUMsR0FBRyxvQkFBb0IsQ0FBQyxNQUFNLENBQUM7S0FDaEMsQ0FBQyxDQUFDO0NBQ0osQ0FBQztBQUNGLElBQUksVUFBVSxHQUFHLGNBQWMsUUFBUTtJQUNyQyxNQUFNLENBQUMsS0FBSyxFQUFFO1FBQ1osTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQUFBQztRQUN4QyxJQUFJLFVBQVUsS0FBSyxjQUFjLENBQUMsTUFBTSxFQUFFO1lBQ3hDLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLEFBQUM7WUFDeEMsa0JBQWtCLENBQUMsR0FBRyxFQUFFO2dCQUN0QixJQUFJLEVBQUUsYUFBYSxDQUFDLFlBQVk7Z0JBQ2hDLFFBQVEsRUFBRSxjQUFjLENBQUMsTUFBTTtnQkFDL0IsUUFBUSxFQUFFLEdBQUcsQ0FBQyxVQUFVO2FBQ3pCLENBQUMsQ0FBQztZQUNILE9BQU8sUUFBUSxDQUFDO1NBQ2pCO1FBQ0QsT0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3hCO0NBQ0YsQUFBQztBQUNGLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxNQUFNLEdBQUs7SUFDOUIsT0FBTyxJQUFJLFVBQVUsQ0FBQztRQUNwQixRQUFRLEVBQUUsc0JBQXNCLENBQUMsU0FBUztRQUMxQyxHQUFHLG9CQUFvQixDQUFDLE1BQU0sQ0FBQztLQUNoQyxDQUFDLENBQUM7Q0FDSixDQUFDO0FBQ0YsSUFBSSxXQUFXLEdBQUcsY0FBYyxRQUFRO0lBQ3RDLE1BQU0sQ0FBQyxLQUFLLEVBQUU7UUFDWixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxBQUFDO1FBQ3hDLElBQUksVUFBVSxLQUFLLGNBQWMsQ0FBQyxPQUFPLEVBQUU7WUFDekMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQUFBQztZQUN4QyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUU7Z0JBQ3RCLElBQUksRUFBRSxhQUFhLENBQUMsWUFBWTtnQkFDaEMsUUFBUSxFQUFFLGNBQWMsQ0FBQyxPQUFPO2dCQUNoQyxRQUFRLEVBQUUsR0FBRyxDQUFDLFVBQVU7YUFDekIsQ0FBQyxDQUFDO1lBQ0gsT0FBTyxRQUFRLENBQUM7U0FDakI7UUFDRCxPQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDeEI7Q0FDRixBQUFDO0FBQ0YsV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLE1BQU0sR0FBSztJQUMvQixPQUFPLElBQUksV0FBVyxDQUFDO1FBQ3JCLFFBQVEsRUFBRSxzQkFBc0IsQ0FBQyxVQUFVO1FBQzNDLEdBQUcsb0JBQW9CLENBQUMsTUFBTSxDQUFDO0tBQ2hDLENBQUMsQ0FBQztDQUNKLENBQUM7QUFDRixJQUFJLFFBQVEsR0FBRyxjQUFjLFFBQVE7SUFDbkMsTUFBTSxDQUFDLEtBQUssRUFBRTtRQUNaLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEFBQUM7UUFDeEMsSUFBSSxVQUFVLEtBQUssY0FBYyxDQUFDLElBQUksRUFBRTtZQUN0QyxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxBQUFDO1lBQ3hDLGtCQUFrQixDQUFDLEdBQUcsRUFBRTtnQkFDdEIsSUFBSSxFQUFFLGFBQWEsQ0FBQyxZQUFZO2dCQUNoQyxRQUFRLEVBQUUsY0FBYyxDQUFDLElBQUk7Z0JBQzdCLFFBQVEsRUFBRSxHQUFHLENBQUMsVUFBVTthQUN6QixDQUFDLENBQUM7WUFDSCxPQUFPLFFBQVEsQ0FBQztTQUNqQjtRQUNELElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBRTtZQUMvQixNQUFNLElBQUcsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxBQUFDO1lBQ3hDLGtCQUFrQixDQUFDLElBQUcsRUFBRTtnQkFDdEIsSUFBSSxFQUFFLGFBQWEsQ0FBQyxZQUFZO2FBQ2pDLENBQUMsQ0FBQztZQUNILE9BQU8sUUFBUSxDQUFDO1NBQ2pCO1FBQ0QsT0FBTztZQUNMLE1BQU0sRUFBRSxPQUFPO1lBQ2YsS0FBSyxFQUFFLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDdEMsQ0FBQztLQUNIO0NBQ0YsQUFBQztBQUNGLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxNQUFNLEdBQUs7SUFDNUIsT0FBTyxJQUFJLFFBQVEsQ0FBQztRQUNsQixRQUFRLEVBQUUsc0JBQXNCLENBQUMsT0FBTztRQUN4QyxHQUFHLG9CQUFvQixDQUFDLE1BQU0sQ0FBQztLQUNoQyxDQUFDLENBQUM7Q0FDSixDQUFDO0FBQ0YsSUFBSSxhQUFhLEdBQUcsY0FBYyxRQUFRO0lBQ3hDLE1BQU0sQ0FBQyxLQUFLLEVBQUU7UUFDWixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxBQUFDO1FBQ3hDLElBQUksVUFBVSxLQUFLLGNBQWMsQ0FBQyxTQUFTLEVBQUU7WUFDM0MsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQUFBQztZQUN4QyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUU7Z0JBQ3RCLElBQUksRUFBRSxhQUFhLENBQUMsWUFBWTtnQkFDaEMsUUFBUSxFQUFFLGNBQWMsQ0FBQyxTQUFTO2dCQUNsQyxRQUFRLEVBQUUsR0FBRyxDQUFDLFVBQVU7YUFDekIsQ0FBQyxDQUFDO1lBQ0gsT0FBTyxRQUFRLENBQUM7U0FDakI7UUFDRCxPQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDeEI7Q0FDRixBQUFDO0FBQ0YsYUFBYSxDQUFDLE1BQU0sR0FBRyxDQUFDLE1BQU0sR0FBSztJQUNqQyxPQUFPLElBQUksYUFBYSxDQUFDO1FBQ3ZCLFFBQVEsRUFBRSxzQkFBc0IsQ0FBQyxZQUFZO1FBQzdDLEdBQUcsb0JBQW9CLENBQUMsTUFBTSxDQUFDO0tBQ2hDLENBQUMsQ0FBQztDQUNKLENBQUM7QUFDRixJQUFJLFFBQVEsR0FBRyxjQUFjLFFBQVE7SUFDbkMsTUFBTSxDQUFDLEtBQUssRUFBRTtRQUNaLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEFBQUM7UUFDeEMsSUFBSSxVQUFVLEtBQUssY0FBYyxDQUFDLElBQUksRUFBRTtZQUN0QyxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxBQUFDO1lBQ3hDLGtCQUFrQixDQUFDLEdBQUcsRUFBRTtnQkFDdEIsSUFBSSxFQUFFLGFBQWEsQ0FBQyxZQUFZO2dCQUNoQyxRQUFRLEVBQUUsY0FBYyxDQUFDLElBQUk7Z0JBQzdCLFFBQVEsRUFBRSxHQUFHLENBQUMsVUFBVTthQUN6QixDQUFDLENBQUM7WUFDSCxPQUFPLFFBQVEsQ0FBQztTQUNqQjtRQUNELE9BQU8sR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN4QjtDQUNGLEFBQUM7QUFDRixRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsTUFBTSxHQUFLO0lBQzVCLE9BQU8sSUFBSSxRQUFRLENBQUM7UUFDbEIsUUFBUSxFQUFFLHNCQUFzQixDQUFDLE9BQU87UUFDeEMsR0FBRyxvQkFBb0IsQ0FBQyxNQUFNLENBQUM7S0FDaEMsQ0FBQyxDQUFDO0NBQ0osQ0FBQztBQUNGLElBQUksT0FBTyxHQUFHLGNBQWMsUUFBUTtJQUNsQyxhQUFjO1FBQ1osS0FBSyxJQUFJLFNBQVMsQ0FBQyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0tBQ2xCO0lBQ0QsTUFBTSxDQUFDLEtBQUssRUFBRTtRQUNaLE9BQU8sR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN4QjtDQUNGLEFBQUM7QUFDRixPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsTUFBTSxHQUFLO0lBQzNCLE9BQU8sSUFBSSxPQUFPLENBQUM7UUFDakIsUUFBUSxFQUFFLHNCQUFzQixDQUFDLE1BQU07UUFDdkMsR0FBRyxvQkFBb0IsQ0FBQyxNQUFNLENBQUM7S0FDaEMsQ0FBQyxDQUFDO0NBQ0osQ0FBQztBQUNGLElBQUksV0FBVyxHQUFHLGNBQWMsUUFBUTtJQUN0QyxhQUFjO1FBQ1osS0FBSyxJQUFJLFNBQVMsQ0FBQyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO0tBQ3RCO0lBQ0QsTUFBTSxDQUFDLEtBQUssRUFBRTtRQUNaLE9BQU8sR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN4QjtDQUNGLEFBQUM7QUFDRixXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsTUFBTSxHQUFLO0lBQy9CLE9BQU8sSUFBSSxXQUFXLENBQUM7UUFDckIsUUFBUSxFQUFFLHNCQUFzQixDQUFDLFVBQVU7UUFDM0MsR0FBRyxvQkFBb0IsQ0FBQyxNQUFNLENBQUM7S0FDaEMsQ0FBQyxDQUFDO0NBQ0osQ0FBQztBQUNGLElBQUksU0FBUyxHQUFHLGNBQWMsUUFBUTtJQUNwQyxNQUFNLENBQUMsS0FBSyxFQUFFO1FBQ1osTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQUFBQztRQUN4QyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUU7WUFDdEIsSUFBSSxFQUFFLGFBQWEsQ0FBQyxZQUFZO1lBQ2hDLFFBQVEsRUFBRSxjQUFjLENBQUMsS0FBSztZQUM5QixRQUFRLEVBQUUsR0FBRyxDQUFDLFVBQVU7U0FDekIsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxRQUFRLENBQUM7S0FDakI7Q0FDRixBQUFDO0FBQ0YsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLE1BQU0sR0FBSztJQUM3QixPQUFPLElBQUksU0FBUyxDQUFDO1FBQ25CLFFBQVEsRUFBRSxzQkFBc0IsQ0FBQyxRQUFRO1FBQ3pDLEdBQUcsb0JBQW9CLENBQUMsTUFBTSxDQUFDO0tBQ2hDLENBQUMsQ0FBQztDQUNKLENBQUM7QUFDRixJQUFJLFFBQVEsR0FBRyxjQUFjLFFBQVE7SUFDbkMsTUFBTSxDQUFDLEtBQUssRUFBRTtRQUNaLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEFBQUM7UUFDeEMsSUFBSSxVQUFVLEtBQUssY0FBYyxDQUFDLFNBQVMsRUFBRTtZQUMzQyxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxBQUFDO1lBQ3hDLGtCQUFrQixDQUFDLEdBQUcsRUFBRTtnQkFDdEIsSUFBSSxFQUFFLGFBQWEsQ0FBQyxZQUFZO2dCQUNoQyxRQUFRLEVBQUUsY0FBYyxDQUFDLElBQUk7Z0JBQzdCLFFBQVEsRUFBRSxHQUFHLENBQUMsVUFBVTthQUN6QixDQUFDLENBQUM7WUFDSCxPQUFPLFFBQVEsQ0FBQztTQUNqQjtRQUNELE9BQU8sR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN4QjtDQUNGLEFBQUM7QUFDRixRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsTUFBTSxHQUFLO0lBQzVCLE9BQU8sSUFBSSxRQUFRLENBQUM7UUFDbEIsUUFBUSxFQUFFLHNCQUFzQixDQUFDLE9BQU87UUFDeEMsR0FBRyxvQkFBb0IsQ0FBQyxNQUFNLENBQUM7S0FDaEMsQ0FBQyxDQUFDO0NBQ0osQ0FBQztBQUNGLElBQUksU0FBUyxHQUFHLGNBQWMsUUFBUTtJQUNwQyxNQUFNLENBQUMsS0FBSyxFQUFFO1FBQ1osTUFBTSxFQUFDLEdBQUcsQ0FBQSxFQUFFLE1BQU0sQ0FBQSxFQUFDLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxBQUFDO1FBQ3RELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEFBQUM7UUFDdEIsSUFBSSxHQUFHLENBQUMsVUFBVSxLQUFLLGNBQWMsQ0FBQyxLQUFLLEVBQUU7WUFDM0Msa0JBQWtCLENBQUMsR0FBRyxFQUFFO2dCQUN0QixJQUFJLEVBQUUsYUFBYSxDQUFDLFlBQVk7Z0JBQ2hDLFFBQVEsRUFBRSxjQUFjLENBQUMsS0FBSztnQkFDOUIsUUFBUSxFQUFFLEdBQUcsQ0FBQyxVQUFVO2FBQ3pCLENBQUMsQ0FBQztZQUNILE9BQU8sUUFBUSxDQUFDO1NBQ2pCO1FBQ0QsSUFBSSxHQUFHLENBQUMsU0FBUyxLQUFLLElBQUksRUFBRTtZQUMxQixJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFO2dCQUN6QyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUU7b0JBQ3RCLElBQUksRUFBRSxhQUFhLENBQUMsU0FBUztvQkFDN0IsT0FBTyxFQUFFLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSztvQkFDNUIsSUFBSSxFQUFFLE9BQU87b0JBQ2IsU0FBUyxFQUFFLElBQUk7b0JBQ2YsT0FBTyxFQUFFLEdBQUcsQ0FBQyxTQUFTLENBQUMsT0FBTztpQkFDL0IsQ0FBQyxDQUFDO2dCQUNILE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQzthQUNoQjtTQUNGO1FBQ0QsSUFBSSxHQUFHLENBQUMsU0FBUyxLQUFLLElBQUksRUFBRTtZQUMxQixJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFO2dCQUN6QyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUU7b0JBQ3RCLElBQUksRUFBRSxhQUFhLENBQUMsT0FBTztvQkFDM0IsT0FBTyxFQUFFLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSztvQkFDNUIsSUFBSSxFQUFFLE9BQU87b0JBQ2IsU0FBUyxFQUFFLElBQUk7b0JBQ2YsT0FBTyxFQUFFLEdBQUcsQ0FBQyxTQUFTLENBQUMsT0FBTztpQkFDL0IsQ0FBQyxDQUFDO2dCQUNILE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQzthQUNoQjtTQUNGO1FBQ0QsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRTtZQUNwQixPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxHQUFLO2dCQUMzQyxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksbUJBQW1CLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDOUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxHQUFLO2dCQUNwQixPQUFPLFlBQVksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO2FBQ2pELENBQUMsQ0FBQztTQUNKO1FBQ0QsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxHQUFLO1lBQ3ZDLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxtQkFBbUIsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUM3RSxDQUFDLEFBQUM7UUFDSCxPQUFPLFlBQVksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0tBQ2hEO0lBQ0QsSUFBSSxPQUFPLEdBQUc7UUFDWixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO0tBQ3ZCO0lBQ0QsR0FBRyxDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUU7UUFDdEIsT0FBTyxJQUFJLFNBQVMsQ0FBQztZQUNuQixHQUFHLElBQUksQ0FBQyxJQUFJO1lBQ1osU0FBUyxFQUFFO2dCQUFDLEtBQUssRUFBRSxTQUFTO2dCQUFFLE9BQU8sRUFBRSxVQUFVLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQzthQUFDO1NBQ3JFLENBQUMsQ0FBQztLQUNKO0lBQ0QsR0FBRyxDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUU7UUFDdEIsT0FBTyxJQUFJLFNBQVMsQ0FBQztZQUNuQixHQUFHLElBQUksQ0FBQyxJQUFJO1lBQ1osU0FBUyxFQUFFO2dCQUFDLEtBQUssRUFBRSxTQUFTO2dCQUFFLE9BQU8sRUFBRSxVQUFVLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQzthQUFDO1NBQ3JFLENBQUMsQ0FBQztLQUNKO0lBQ0QsTUFBTSxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUU7UUFDbkIsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0tBQ2pEO0lBQ0QsUUFBUSxDQUFDLE9BQU8sRUFBRTtRQUNoQixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0tBQzdCO0NBQ0YsQUFBQztBQUNGLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxHQUFLO0lBQ3JDLE9BQU8sSUFBSSxTQUFTLENBQUM7UUFDbkIsSUFBSSxFQUFFLE1BQU07UUFDWixTQUFTLEVBQUUsSUFBSTtRQUNmLFNBQVMsRUFBRSxJQUFJO1FBQ2YsUUFBUSxFQUFFLHNCQUFzQixDQUFDLFFBQVE7UUFDekMsR0FBRyxvQkFBb0IsQ0FBQyxNQUFNLENBQUM7S0FDaEMsQ0FBQyxDQUFDO0NBQ0osQ0FBQztBQUNGLElBQUksV0FBVyxBQUFDO0FBQ2hCLENBQUMsU0FBUyxZQUFZLEVBQUU7SUFDdEIsWUFBWSxDQUFDLFdBQVcsR0FBRyxDQUFDLEtBQUssRUFBRSxNQUFNLEdBQUs7UUFDNUMsT0FBTztZQUNMLEdBQUcsS0FBSztZQUNSLEdBQUcsTUFBTTtTQUNWLENBQUM7S0FDSCxDQUFDO0NBQ0gsQ0FBQyxDQUFDLFdBQVcsSUFBSSxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3RDLElBQUksZUFBZSxHQUFHLENBQUMsR0FBRyxHQUFLLENBQUMsWUFBWSxHQUFLO1FBQy9DLE9BQU8sSUFBSSxVQUFVLENBQUM7WUFDcEIsR0FBRyxHQUFHO1lBQ04sS0FBSyxFQUFFLElBQU0sQ0FBQztvQkFDWixHQUFHLEdBQUcsQ0FBQyxLQUFLLEVBQUU7b0JBQ2QsR0FBRyxZQUFZO2lCQUNoQixDQUFDO1NBQ0gsQ0FBQyxDQUFDO0tBQ0osQUFBQztBQUNGLFNBQVMsZUFBZSxDQUFDLE1BQU0sRUFBRTtJQUMvQixJQUFJLE1BQU0sWUFBWSxVQUFVLEVBQUU7UUFDaEMsTUFBTSxRQUFRLEdBQUcsRUFBRSxBQUFDO1FBQ3BCLElBQUssTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBRTtZQUM5QixNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxBQUFDO1lBQ3RDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1NBQ25FO1FBQ0QsT0FBTyxJQUFJLFVBQVUsQ0FBQztZQUNwQixHQUFHLE1BQU0sQ0FBQyxJQUFJO1lBQ2QsS0FBSyxFQUFFLElBQU0sUUFBUTtTQUN0QixDQUFDLENBQUM7S0FDSixNQUFNLElBQUksTUFBTSxZQUFZLFNBQVMsRUFBRTtRQUN0QyxPQUFPLFNBQVMsQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0tBQzFELE1BQU0sSUFBSSxNQUFNLFlBQVksWUFBWSxFQUFFO1FBQ3pDLE9BQU8sWUFBWSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztLQUM5RCxNQUFNLElBQUksTUFBTSxZQUFZLFlBQVksRUFBRTtRQUN6QyxPQUFPLFlBQVksQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDOUQsTUFBTSxJQUFJLE1BQU0sWUFBWSxTQUFTLEVBQUU7UUFDdEMsT0FBTyxTQUFTLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxHQUFLLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDNUUsTUFBTTtRQUNMLE9BQU8sTUFBTSxDQUFDO0tBQ2Y7Q0FDRjtBQUNELElBQUksVUFBVSxHQUFHLGNBQWMsUUFBUTtJQUNyQyxhQUFjO1FBQ1osS0FBSyxJQUFJLFNBQVMsQ0FBQyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUNsQyxJQUFJLENBQUMsT0FBTyxHQUFHLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDMUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQzFDO0lBQ0QsVUFBVSxHQUFHO1FBQ1gsSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLElBQUksRUFDdkIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ3RCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEFBQUM7UUFDaEMsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQUFBQztRQUNyQyxPQUFPLElBQUksQ0FBQyxPQUFPLEdBQUc7WUFBQyxLQUFLO1lBQUUsSUFBSTtTQUFDLENBQUM7S0FDckM7SUFDRCxNQUFNLENBQUMsS0FBSyxFQUFFO1FBQ1osTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQUFBQztRQUN4QyxJQUFJLFVBQVUsS0FBSyxjQUFjLENBQUMsTUFBTSxFQUFFO1lBQ3hDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLEFBQUM7WUFDekMsa0JBQWtCLENBQUMsSUFBSSxFQUFFO2dCQUN2QixJQUFJLEVBQUUsYUFBYSxDQUFDLFlBQVk7Z0JBQ2hDLFFBQVEsRUFBRSxjQUFjLENBQUMsTUFBTTtnQkFDL0IsUUFBUSxFQUFFLElBQUksQ0FBQyxVQUFVO2FBQzFCLENBQUMsQ0FBQztZQUNILE9BQU8sUUFBUSxDQUFDO1NBQ2pCO1FBQ0QsTUFBTSxFQUFDLE1BQU0sQ0FBQSxFQUFFLEdBQUcsQ0FBQSxFQUFDLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxBQUFDO1FBQ3RELE1BQU0sRUFBQyxLQUFLLENBQUEsRUFBRSxJQUFJLEVBQUUsU0FBUyxDQUFBLEVBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFLEFBQUM7UUFDbkQsTUFBTSxTQUFTLEdBQUcsRUFBRSxBQUFDO1FBQ3JCLElBQUssTUFBTSxHQUFHLElBQUksR0FBRyxDQUFDLElBQUksQ0FBRTtZQUMxQixJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDNUIsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUNyQjtTQUNGO1FBQ0QsTUFBTSxLQUFLLEdBQUcsRUFBRSxBQUFDO1FBQ2pCLEtBQUssTUFBTSxJQUFHLElBQUksU0FBUyxDQUFFO1lBQzNCLE1BQU0sWUFBWSxHQUFHLEtBQUssQ0FBQyxJQUFHLENBQUMsQUFBQztZQUNoQyxNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUcsQ0FBQyxBQUFDO1lBQzVCLEtBQUssQ0FBQyxJQUFJLENBQUM7Z0JBQ1QsR0FBRyxFQUFFO29CQUFDLE1BQU0sRUFBRSxPQUFPO29CQUFFLEtBQUssRUFBRSxJQUFHO2lCQUFDO2dCQUNsQyxLQUFLLEVBQUUsWUFBWSxDQUFDLE1BQU0sQ0FBQyxJQUFJLG1CQUFtQixDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLElBQUksRUFBRSxJQUFHLENBQUMsQ0FBQztnQkFDOUUsU0FBUyxFQUFFLElBQUcsSUFBSSxHQUFHLENBQUMsSUFBSTthQUMzQixDQUFDLENBQUM7U0FDSjtRQUNELElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLFlBQVksU0FBUyxFQUFFO1lBQzNDLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxBQUFDO1lBQzFDLElBQUksV0FBVyxLQUFLLGFBQWEsRUFBRTtnQkFDakMsS0FBSyxNQUFNLElBQUcsSUFBSSxTQUFTLENBQUU7b0JBQzNCLEtBQUssQ0FBQyxJQUFJLENBQUM7d0JBQ1QsR0FBRyxFQUFFOzRCQUFDLE1BQU0sRUFBRSxPQUFPOzRCQUFFLEtBQUssRUFBRSxJQUFHO3lCQUFDO3dCQUNsQyxLQUFLLEVBQUU7NEJBQUMsTUFBTSxFQUFFLE9BQU87NEJBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBRyxDQUFDO3lCQUFDO3FCQUMvQyxDQUFDLENBQUM7aUJBQ0o7YUFDRixNQUFNLElBQUksV0FBVyxLQUFLLFFBQVEsRUFBRTtnQkFDbkMsSUFBSSxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtvQkFDeEIsa0JBQWtCLENBQUMsR0FBRyxFQUFFO3dCQUN0QixJQUFJLEVBQUUsYUFBYSxDQUFDLGlCQUFpQjt3QkFDckMsSUFBSSxFQUFFLFNBQVM7cUJBQ2hCLENBQUMsQ0FBQztvQkFDSCxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7aUJBQ2hCO2FBQ0YsTUFBTSxJQUFJLFdBQVcsS0FBSyxPQUFPO2lCQUU3QjtnQkFDSCxNQUFNLElBQUksS0FBSyxDQUFDLENBQUMsb0RBQW9ELENBQUMsQ0FBQyxDQUFDO2FBQ3pFO1NBQ0YsTUFBTTtZQUNMLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxBQUFDO1lBQ3BDLEtBQUssTUFBTSxJQUFHLElBQUksU0FBUyxDQUFFO2dCQUMzQixNQUFNLE1BQUssR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUcsQ0FBQyxBQUFDO2dCQUM1QixLQUFLLENBQUMsSUFBSSxDQUFDO29CQUNULEdBQUcsRUFBRTt3QkFBQyxNQUFNLEVBQUUsT0FBTzt3QkFBRSxLQUFLLEVBQUUsSUFBRztxQkFBQztvQkFDbEMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxtQkFBbUIsQ0FBQyxHQUFHLEVBQUUsTUFBSyxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBRyxDQUFDLENBQUM7b0JBQzFFLFNBQVMsRUFBRSxJQUFHLElBQUksR0FBRyxDQUFDLElBQUk7aUJBQzNCLENBQUMsQ0FBQzthQUNKO1NBQ0Y7UUFDRCxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFO1lBQ3BCLE9BQU8sT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFZO2dCQUN4QyxNQUFNLFNBQVMsR0FBRyxFQUFFLEFBQUM7Z0JBQ3JCLEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxDQUFFO29CQUN4QixNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQyxHQUFHLEFBQUM7b0JBQzNCLFNBQVMsQ0FBQyxJQUFJLENBQUM7d0JBQ2IsR0FBRzt3QkFDSCxLQUFLLEVBQUUsTUFBTSxJQUFJLENBQUMsS0FBSzt3QkFDdkIsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO3FCQUMxQixDQUFDLENBQUM7aUJBQ0o7Z0JBQ0QsT0FBTyxTQUFTLENBQUM7YUFDbEIsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsR0FBSztnQkFDckIsT0FBTyxZQUFZLENBQUMsZUFBZSxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQzthQUN4RCxDQUFDLENBQUM7U0FDSixNQUFNO1lBQ0wsT0FBTyxZQUFZLENBQUMsZUFBZSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztTQUNwRDtLQUNGO0lBQ0QsSUFBSSxLQUFLLEdBQUc7UUFDVixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7S0FDMUI7SUFDRCxNQUFNLENBQUMsT0FBTyxFQUFFO1FBQ2QsVUFBVSxDQUFDLFFBQVEsQ0FBQztRQUNwQixPQUFPLElBQUksVUFBVSxDQUFDO1lBQ3BCLEdBQUcsSUFBSSxDQUFDLElBQUk7WUFDWixXQUFXLEVBQUUsUUFBUTtZQUNyQixHQUFHLE9BQU8sS0FBSyxLQUFLLENBQUMsR0FBRztnQkFDdEIsUUFBUSxFQUFFLENBQUMsS0FBSyxFQUFFLEdBQUcsR0FBSztvQkFDeEIsSUFBSSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEFBQUM7b0JBQ25CLE1BQU0sWUFBWSxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxJQUFJLElBQUksRUFBRSxLQUFLLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxJQUFJLElBQUksRUFBRSxLQUFLLEtBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRyxHQUFHLENBQUMsWUFBWSxBQUFDO29CQUNwTCxJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssbUJBQW1CLEVBQ3BDLE9BQU87d0JBQ0wsT0FBTyxFQUFFLENBQUMsRUFBRSxHQUFHLFVBQVUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssSUFBSSxJQUFJLEVBQUUsS0FBSyxLQUFLLENBQUMsR0FBRyxFQUFFLEdBQUcsWUFBWTtxQkFDbkcsQ0FBQztvQkFDSixPQUFPO3dCQUNMLE9BQU8sRUFBRSxZQUFZO3FCQUN0QixDQUFDO2lCQUNIO2FBQ0YsR0FBRyxFQUFFO1NBQ1AsQ0FBQyxDQUFDO0tBQ0o7SUFDRCxLQUFLLEdBQUc7UUFDTixPQUFPLElBQUksVUFBVSxDQUFDO1lBQ3BCLEdBQUcsSUFBSSxDQUFDLElBQUk7WUFDWixXQUFXLEVBQUUsT0FBTztTQUNyQixDQUFDLENBQUM7S0FDSjtJQUNELFdBQVcsR0FBRztRQUNaLE9BQU8sSUFBSSxVQUFVLENBQUM7WUFDcEIsR0FBRyxJQUFJLENBQUMsSUFBSTtZQUNaLFdBQVcsRUFBRSxhQUFhO1NBQzNCLENBQUMsQ0FBQztLQUNKO0lBQ0QsTUFBTSxDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUU7UUFDbEIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxNQUFNO1NBQUMsQ0FBQyxDQUFDO0tBQ3RDO0lBQ0QsS0FBSyxDQUFDLE9BQU8sRUFBRTtRQUNiLE1BQU0sTUFBTSxHQUFHLElBQUksVUFBVSxDQUFDO1lBQzVCLFdBQVcsRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVc7WUFDckMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUTtZQUMvQixLQUFLLEVBQUUsSUFBTSxXQUFXLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUM3RSxRQUFRLEVBQUUsc0JBQXNCLENBQUMsU0FBUztTQUMzQyxDQUFDLEFBQUM7UUFDSCxPQUFPLE1BQU0sQ0FBQztLQUNmO0lBQ0QsUUFBUSxDQUFDLEtBQUssRUFBRTtRQUNkLE9BQU8sSUFBSSxVQUFVLENBQUM7WUFDcEIsR0FBRyxJQUFJLENBQUMsSUFBSTtZQUNaLFFBQVEsRUFBRSxLQUFLO1NBQ2hCLENBQUMsQ0FBQztLQUNKO0lBQ0QsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNULE1BQU0sS0FBSyxHQUFHLEVBQUUsQUFBQztRQUNqQixLQUFLLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBSztZQUNsQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQ2pCLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ2hDLENBQUMsQ0FBQztRQUNILE9BQU8sSUFBSSxVQUFVLENBQUM7WUFDcEIsR0FBRyxJQUFJLENBQUMsSUFBSTtZQUNaLEtBQUssRUFBRSxJQUFNLEtBQUs7U0FDbkIsQ0FBQyxDQUFDO0tBQ0o7SUFDRCxJQUFJLENBQUMsSUFBSSxFQUFFO1FBQ1QsTUFBTSxLQUFLLEdBQUcsRUFBRSxBQUFDO1FBQ2pCLEtBQUssQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBSztZQUN4QyxJQUFJLEtBQUssQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO2dCQUM5QyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUM5QjtTQUNGLENBQUMsQ0FBQztRQUNILE9BQU8sSUFBSSxVQUFVLENBQUM7WUFDcEIsR0FBRyxJQUFJLENBQUMsSUFBSTtZQUNaLEtBQUssRUFBRSxJQUFNLEtBQUs7U0FDbkIsQ0FBQyxDQUFDO0tBQ0o7SUFDRCxXQUFXLEdBQUc7UUFDWixPQUFPLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUM5QjtJQUNELE9BQU8sQ0FBQyxJQUFJLEVBQUU7UUFDWixNQUFNLFFBQVEsR0FBRyxFQUFFLEFBQUM7UUFDcEIsSUFBSSxJQUFJLEVBQUU7WUFDUixLQUFLLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUs7Z0JBQ3hDLElBQUksS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7b0JBQzlDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2lCQUNqQyxNQUFNO29CQUNMLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO2lCQUM1QzthQUNGLENBQUMsQ0FBQztZQUNILE9BQU8sSUFBSSxVQUFVLENBQUM7Z0JBQ3BCLEdBQUcsSUFBSSxDQUFDLElBQUk7Z0JBQ1osS0FBSyxFQUFFLElBQU0sUUFBUTthQUN0QixDQUFDLENBQUM7U0FDSixNQUFNO1lBQ0wsSUFBSyxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFFO2dCQUM1QixNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxBQUFDO2dCQUNwQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDO2FBQ3hDO1NBQ0Y7UUFDRCxPQUFPLElBQUksVUFBVSxDQUFDO1lBQ3BCLEdBQUcsSUFBSSxDQUFDLElBQUk7WUFDWixLQUFLLEVBQUUsSUFBTSxRQUFRO1NBQ3RCLENBQUMsQ0FBQztLQUNKO0lBQ0QsUUFBUSxHQUFHO1FBQ1QsTUFBTSxRQUFRLEdBQUcsRUFBRSxBQUFDO1FBQ3BCLElBQUssTUFBTSxHQUFHLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBRTtZQUM1QixNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxBQUFDO1lBQ3BDLElBQUksUUFBUSxHQUFHLFdBQVcsQUFBQztZQUMzQixNQUFPLFFBQVEsWUFBWSxZQUFZLENBQUU7Z0JBQ3ZDLFFBQVEsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQzthQUNwQztZQUNELFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxRQUFRLENBQUM7U0FDMUI7UUFDRCxPQUFPLElBQUksVUFBVSxDQUFDO1lBQ3BCLEdBQUcsSUFBSSxDQUFDLElBQUk7WUFDWixLQUFLLEVBQUUsSUFBTSxRQUFRO1NBQ3RCLENBQUMsQ0FBQztLQUNKO0NBQ0YsQUFBQztBQUNGLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxLQUFLLEVBQUUsTUFBTSxHQUFLO0lBQ3JDLE9BQU8sSUFBSSxVQUFVLENBQUM7UUFDcEIsS0FBSyxFQUFFLElBQU0sS0FBSztRQUNsQixXQUFXLEVBQUUsT0FBTztRQUNwQixRQUFRLEVBQUUsU0FBUyxDQUFDLE1BQU0sRUFBRTtRQUM1QixRQUFRLEVBQUUsc0JBQXNCLENBQUMsU0FBUztRQUMxQyxHQUFHLG9CQUFvQixDQUFDLE1BQU0sQ0FBQztLQUNoQyxDQUFDLENBQUM7Q0FDSixDQUFDO0FBQ0YsVUFBVSxDQUFDLFlBQVksR0FBRyxDQUFDLEtBQUssRUFBRSxNQUFNLEdBQUs7SUFDM0MsT0FBTyxJQUFJLFVBQVUsQ0FBQztRQUNwQixLQUFLLEVBQUUsSUFBTSxLQUFLO1FBQ2xCLFdBQVcsRUFBRSxRQUFRO1FBQ3JCLFFBQVEsRUFBRSxTQUFTLENBQUMsTUFBTSxFQUFFO1FBQzVCLFFBQVEsRUFBRSxzQkFBc0IsQ0FBQyxTQUFTO1FBQzFDLEdBQUcsb0JBQW9CLENBQUMsTUFBTSxDQUFDO0tBQ2hDLENBQUMsQ0FBQztDQUNKLENBQUM7QUFDRixVQUFVLENBQUMsVUFBVSxHQUFHLENBQUMsS0FBSyxFQUFFLE1BQU0sR0FBSztJQUN6QyxPQUFPLElBQUksVUFBVSxDQUFDO1FBQ3BCLEtBQUs7UUFDTCxXQUFXLEVBQUUsT0FBTztRQUNwQixRQUFRLEVBQUUsU0FBUyxDQUFDLE1BQU0sRUFBRTtRQUM1QixRQUFRLEVBQUUsc0JBQXNCLENBQUMsU0FBUztRQUMxQyxHQUFHLG9CQUFvQixDQUFDLE1BQU0sQ0FBQztLQUNoQyxDQUFDLENBQUM7Q0FDSixDQUFDO0FBQ0YsSUFBSSxTQUFTLEdBQUcsY0FBYyxRQUFRO0lBQ3BDLE1BQU0sQ0FBQyxLQUFLLEVBQUU7UUFDWixNQUFNLEVBQUMsR0FBRyxDQUFBLEVBQUMsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLEFBQUM7UUFDOUMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEFBQUM7UUFDbEMsU0FBUyxhQUFhLENBQUMsT0FBTyxFQUFFO1lBQzlCLEtBQUssTUFBTSxNQUFNLElBQUksT0FBTyxDQUFFO2dCQUM1QixJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxLQUFLLE9BQU8sRUFBRTtvQkFDcEMsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDO2lCQUN0QjthQUNGO1lBQ0QsS0FBSyxNQUFNLE9BQU0sSUFBSSxPQUFPLENBQUU7Z0JBQzVCLElBQUksT0FBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEtBQUssT0FBTyxFQUFFO29CQUNwQyxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksT0FBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7b0JBQ3BELE9BQU8sT0FBTSxDQUFDLE1BQU0sQ0FBQztpQkFDdEI7YUFDRjtZQUNELE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEdBQUssSUFBSSxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQUFBQztZQUNyRixrQkFBa0IsQ0FBQyxHQUFHLEVBQUU7Z0JBQ3RCLElBQUksRUFBRSxhQUFhLENBQUMsYUFBYTtnQkFDakMsV0FBVzthQUNaLENBQUMsQ0FBQztZQUNILE9BQU8sUUFBUSxDQUFDO1NBQ2pCO1FBQ0QsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRTtZQUNwQixPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLE1BQU0sR0FBSztnQkFDL0MsTUFBTSxRQUFRLEdBQUc7b0JBQ2YsR0FBRyxHQUFHO29CQUNOLE1BQU0sRUFBRTt3QkFDTixHQUFHLEdBQUcsQ0FBQyxNQUFNO3dCQUNiLE1BQU0sRUFBRSxFQUFFO3FCQUNYO29CQUNELE1BQU0sRUFBRSxJQUFJO2lCQUNiLEFBQUM7Z0JBQ0YsT0FBTztvQkFDTCxNQUFNLEVBQUUsTUFBTSxNQUFNLENBQUMsV0FBVyxDQUFDO3dCQUMvQixJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUk7d0JBQ2QsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJO3dCQUNkLE1BQU0sRUFBRSxRQUFRO3FCQUNqQixDQUFDO29CQUNGLEdBQUcsRUFBRSxRQUFRO2lCQUNkLENBQUM7YUFDSCxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDekIsTUFBTTtZQUNMLElBQUksS0FBSyxHQUFHLEtBQUssQ0FBQyxBQUFDO1lBQ25CLE1BQU0sTUFBTSxHQUFHLEVBQUUsQUFBQztZQUNsQixLQUFLLE1BQU0sTUFBTSxJQUFJLE9BQU8sQ0FBRTtnQkFDNUIsTUFBTSxRQUFRLEdBQUc7b0JBQ2YsR0FBRyxHQUFHO29CQUNOLE1BQU0sRUFBRTt3QkFDTixHQUFHLEdBQUcsQ0FBQyxNQUFNO3dCQUNiLE1BQU0sRUFBRSxFQUFFO3FCQUNYO29CQUNELE1BQU0sRUFBRSxJQUFJO2lCQUNiLEFBQUM7Z0JBQ0YsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQztvQkFDL0IsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJO29CQUNkLElBQUksRUFBRSxHQUFHLENBQUMsSUFBSTtvQkFDZCxNQUFNLEVBQUUsUUFBUTtpQkFDakIsQ0FBQyxBQUFDO2dCQUNILElBQUksTUFBTSxDQUFDLE1BQU0sS0FBSyxPQUFPLEVBQUU7b0JBQzdCLE9BQU8sTUFBTSxDQUFDO2lCQUNmLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxLQUFLLE9BQU8sSUFBSSxDQUFDLEtBQUssRUFBRTtvQkFDOUMsS0FBSyxHQUFHO3dCQUFDLE1BQU07d0JBQUUsR0FBRyxFQUFFLFFBQVE7cUJBQUMsQ0FBQztpQkFDakM7Z0JBQ0QsSUFBSSxRQUFRLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7b0JBQ2pDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztpQkFDckM7YUFDRjtZQUNELElBQUksS0FBSyxFQUFFO2dCQUNULEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDbkQsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDO2FBQ3JCO1lBQ0QsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sR0FBSyxJQUFJLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxBQUFDO1lBQ3BFLGtCQUFrQixDQUFDLEdBQUcsRUFBRTtnQkFDdEIsSUFBSSxFQUFFLGFBQWEsQ0FBQyxhQUFhO2dCQUNqQyxXQUFXO2FBQ1osQ0FBQyxDQUFDO1lBQ0gsT0FBTyxRQUFRLENBQUM7U0FDakI7S0FDRjtJQUNELElBQUksT0FBTyxHQUFHO1FBQ1osT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztLQUMxQjtDQUNGLEFBQUM7QUFDRixTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsS0FBSyxFQUFFLE1BQU0sR0FBSztJQUNwQyxPQUFPLElBQUksU0FBUyxDQUFDO1FBQ25CLE9BQU8sRUFBRSxLQUFLO1FBQ2QsUUFBUSxFQUFFLHNCQUFzQixDQUFDLFFBQVE7UUFDekMsR0FBRyxvQkFBb0IsQ0FBQyxNQUFNLENBQUM7S0FDaEMsQ0FBQyxDQUFDO0NBQ0osQ0FBQztBQUNGLElBQUksc0JBQXNCLEdBQUcsY0FBYyxRQUFRO0lBQ2pELE1BQU0sQ0FBQyxLQUFLLEVBQUU7UUFDWixNQUFNLEVBQUMsR0FBRyxDQUFBLEVBQUMsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLEFBQUM7UUFDOUMsSUFBSSxHQUFHLENBQUMsVUFBVSxLQUFLLGNBQWMsQ0FBQyxNQUFNLEVBQUU7WUFDNUMsa0JBQWtCLENBQUMsR0FBRyxFQUFFO2dCQUN0QixJQUFJLEVBQUUsYUFBYSxDQUFDLFlBQVk7Z0JBQ2hDLFFBQVEsRUFBRSxjQUFjLENBQUMsTUFBTTtnQkFDL0IsUUFBUSxFQUFFLEdBQUcsQ0FBQyxVQUFVO2FBQ3pCLENBQUMsQ0FBQztZQUNILE9BQU8sUUFBUSxDQUFDO1NBQ2pCO1FBQ0QsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLGFBQWEsQUFBQztRQUN6QyxNQUFNLGtCQUFrQixHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEFBQUM7UUFDbkQsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsQUFBQztRQUNwRCxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ1gsa0JBQWtCLENBQUMsR0FBRyxFQUFFO2dCQUN0QixJQUFJLEVBQUUsYUFBYSxDQUFDLDJCQUEyQjtnQkFDL0MsT0FBTyxFQUFFLElBQUksQ0FBQyx3QkFBd0I7Z0JBQ3RDLElBQUksRUFBRTtvQkFBQyxhQUFhO2lCQUFDO2FBQ3RCLENBQUMsQ0FBQztZQUNILE9BQU8sUUFBUSxDQUFDO1NBQ2pCO1FBQ0QsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRTtZQUNwQixPQUFPLE1BQU0sQ0FBQyxXQUFXLENBQUM7Z0JBQ3hCLElBQUksRUFBRSxHQUFHLENBQUMsSUFBSTtnQkFDZCxJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUk7Z0JBQ2QsTUFBTSxFQUFFLEdBQUc7YUFDWixDQUFDLENBQUM7U0FDSixNQUFNO1lBQ0wsT0FBTyxNQUFNLENBQUMsVUFBVSxDQUFDO2dCQUN2QixJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUk7Z0JBQ2QsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJO2dCQUNkLE1BQU0sRUFBRSxHQUFHO2FBQ1osQ0FBQyxDQUFDO1NBQ0o7S0FDRjtJQUNELElBQUksYUFBYSxHQUFHO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUM7S0FDaEM7SUFDRCxJQUFJLHdCQUF3QixHQUFHO1FBQzdCLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7S0FDeEM7SUFDRCxJQUFJLE9BQU8sR0FBRztRQUNaLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7S0FDMUI7SUFDRCxPQUFPLE1BQU0sQ0FBQyxhQUFhLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRTtRQUMxQyxNQUFNLE9BQU8sR0FBRyxlQUFlLENBQUMsSUFBSSxHQUFHLEVBQUUsQUFBQztRQUMxQyxJQUFJO1lBQ0YsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksR0FBSztnQkFDdEIsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDLEtBQUssQUFBQztnQkFDM0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxJQUFJLENBQUMsQ0FBQzthQUN2QyxDQUFDLENBQUM7U0FDSixDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1YsTUFBTSxJQUFJLEtBQUssQ0FBQyw4RUFBOEUsQ0FBQyxDQUFDO1NBQ2pHO1FBQ0QsSUFBSSxPQUFPLENBQUMsSUFBSSxLQUFLLEtBQUssQ0FBQyxNQUFNLEVBQUU7WUFDakMsTUFBTSxJQUFJLEtBQUssQ0FBQyxpREFBaUQsQ0FBQyxDQUFDO1NBQ3BFO1FBQ0QsT0FBTyxJQUFJLHNCQUFzQixDQUFDO1lBQ2hDLFFBQVEsRUFBRSxzQkFBc0IsQ0FBQyxxQkFBcUI7WUFDdEQsYUFBYTtZQUNiLE9BQU87WUFDUCxHQUFHLG9CQUFvQixDQUFDLE1BQU0sQ0FBQztTQUNoQyxDQUFDLENBQUM7S0FDSjtDQUNGLEFBQUM7QUFDRixTQUFTLFlBQVksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFO0lBQzFCLE1BQU0sS0FBSyxHQUFHLGNBQWMsQ0FBQyxDQUFDLENBQUMsQUFBQztJQUNoQyxNQUFNLEtBQUssR0FBRyxjQUFjLENBQUMsQ0FBQyxDQUFDLEFBQUM7SUFDaEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ1gsT0FBTztZQUFDLEtBQUssRUFBRSxJQUFJO1lBQUUsSUFBSSxFQUFFLENBQUM7U0FBQyxDQUFDO0tBQy9CLE1BQU0sSUFBSSxLQUFLLEtBQUssY0FBYyxDQUFDLE1BQU0sSUFBSSxLQUFLLEtBQUssY0FBYyxDQUFDLE1BQU0sRUFBRTtRQUM3RSxNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxBQUFDO1FBQ2xDLE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxHQUFLLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQUFBQztRQUNsRixNQUFNLE1BQU0sR0FBRztZQUFDLEdBQUcsQ0FBQztZQUFFLEdBQUcsQ0FBQztTQUFDLEFBQUM7UUFDNUIsS0FBSyxNQUFNLEdBQUcsSUFBSSxVQUFVLENBQUU7WUFDNUIsTUFBTSxXQUFXLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQUFBQztZQUNqRCxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRTtnQkFDdEIsT0FBTztvQkFBQyxLQUFLLEVBQUUsS0FBSztpQkFBQyxDQUFDO2FBQ3ZCO1lBQ0QsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQUM7U0FDaEM7UUFDRCxPQUFPO1lBQUMsS0FBSyxFQUFFLElBQUk7WUFBRSxJQUFJLEVBQUUsTUFBTTtTQUFDLENBQUM7S0FDcEMsTUFBTSxJQUFJLEtBQUssS0FBSyxjQUFjLENBQUMsS0FBSyxJQUFJLEtBQUssS0FBSyxjQUFjLENBQUMsS0FBSyxFQUFFO1FBQzNFLElBQUksQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsTUFBTSxFQUFFO1lBQ3pCLE9BQU87Z0JBQUMsS0FBSyxFQUFFLEtBQUs7YUFBQyxDQUFDO1NBQ3ZCO1FBQ0QsTUFBTSxRQUFRLEdBQUcsRUFBRSxBQUFDO1FBQ3BCLElBQUssSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEtBQUssR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFFO1lBQzdDLE1BQU0sS0FBSyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQUFBQztZQUN2QixNQUFNLEtBQUssR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLEFBQUM7WUFDdkIsTUFBTSxZQUFXLEdBQUcsWUFBWSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQUFBQztZQUMvQyxJQUFJLENBQUMsWUFBVyxDQUFDLEtBQUssRUFBRTtnQkFDdEIsT0FBTztvQkFBQyxLQUFLLEVBQUUsS0FBSztpQkFBQyxDQUFDO2FBQ3ZCO1lBQ0QsUUFBUSxDQUFDLElBQUksQ0FBQyxZQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDakM7UUFDRCxPQUFPO1lBQUMsS0FBSyxFQUFFLElBQUk7WUFBRSxJQUFJLEVBQUUsUUFBUTtTQUFDLENBQUM7S0FDdEMsTUFBTSxJQUFJLEtBQUssS0FBSyxjQUFjLENBQUMsSUFBSSxJQUFJLEtBQUssS0FBSyxjQUFjLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO1FBQ3RGLE9BQU87WUFBQyxLQUFLLEVBQUUsSUFBSTtZQUFFLElBQUksRUFBRSxDQUFDO1NBQUMsQ0FBQztLQUMvQixNQUFNO1FBQ0wsT0FBTztZQUFDLEtBQUssRUFBRSxLQUFLO1NBQUMsQ0FBQztLQUN2QjtDQUNGO0FBQ0QsSUFBSSxnQkFBZ0IsR0FBRyxjQUFjLFFBQVE7SUFDM0MsTUFBTSxDQUFDLEtBQUssRUFBRTtRQUNaLE1BQU0sRUFBQyxNQUFNLENBQUEsRUFBRSxHQUFHLENBQUEsRUFBQyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQUFBQztRQUN0RCxNQUFNLFlBQVksR0FBRyxDQUFDLFVBQVUsRUFBRSxXQUFXLEdBQUs7WUFDaEQsSUFBSSxVQUFVLENBQUMsVUFBVSxDQUFDLElBQUksVUFBVSxDQUFDLFdBQVcsQ0FBQyxFQUFFO2dCQUNyRCxPQUFPLFFBQVEsQ0FBQzthQUNqQjtZQUNELE1BQU0sTUFBTSxHQUFHLFlBQVksQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBQyxLQUFLLENBQUMsQUFBQztZQUNqRSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRTtnQkFDakIsa0JBQWtCLENBQUMsR0FBRyxFQUFFO29CQUN0QixJQUFJLEVBQUUsYUFBYSxDQUFDLDBCQUEwQjtpQkFDL0MsQ0FBQyxDQUFDO2dCQUNILE9BQU8sUUFBUSxDQUFDO2FBQ2pCO1lBQ0QsSUFBSSxRQUFRLENBQUMsVUFBVSxDQUFDLElBQUksUUFBUSxDQUFDLFdBQVcsQ0FBQyxFQUFFO2dCQUNqRCxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7YUFDaEI7WUFDRCxPQUFPO2dCQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsS0FBSztnQkFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLElBQUk7YUFBQyxDQUFDO1NBQ25ELEFBQUM7UUFDRixJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFO1lBQ3BCLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQztnQkFDakIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO29CQUN6QixJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUk7b0JBQ2QsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJO29CQUNkLE1BQU0sRUFBRSxHQUFHO2lCQUNaLENBQUM7Z0JBQ0YsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDO29CQUMxQixJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUk7b0JBQ2QsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJO29CQUNkLE1BQU0sRUFBRSxHQUFHO2lCQUNaLENBQUM7YUFDSCxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLEdBQUssWUFBWSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO1NBQ3ZELE1BQU07WUFDTCxPQUFPLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7Z0JBQzVDLElBQUksRUFBRSxHQUFHLENBQUMsSUFBSTtnQkFDZCxJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUk7Z0JBQ2QsTUFBTSxFQUFFLEdBQUc7YUFDWixDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDO2dCQUM3QixJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUk7Z0JBQ2QsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJO2dCQUNkLE1BQU0sRUFBRSxHQUFHO2FBQ1osQ0FBQyxDQUFDLENBQUM7U0FDTDtLQUNGO0NBQ0YsQUFBQztBQUNGLGdCQUFnQixDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsTUFBTSxHQUFLO0lBQ2pELE9BQU8sSUFBSSxnQkFBZ0IsQ0FBQztRQUMxQixJQUFJO1FBQ0osS0FBSztRQUNMLFFBQVEsRUFBRSxzQkFBc0IsQ0FBQyxlQUFlO1FBQ2hELEdBQUcsb0JBQW9CLENBQUMsTUFBTSxDQUFDO0tBQ2hDLENBQUMsQ0FBQztDQUNKLENBQUM7QUFDRixJQUFJLFNBQVMsR0FBRyxjQUFjLFFBQVE7SUFDcEMsTUFBTSxDQUFDLEtBQUssRUFBRTtRQUNaLE1BQU0sRUFBQyxNQUFNLENBQUEsRUFBRSxHQUFHLENBQUEsRUFBQyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQUFBQztRQUN0RCxJQUFJLEdBQUcsQ0FBQyxVQUFVLEtBQUssY0FBYyxDQUFDLEtBQUssRUFBRTtZQUMzQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUU7Z0JBQ3RCLElBQUksRUFBRSxhQUFhLENBQUMsWUFBWTtnQkFDaEMsUUFBUSxFQUFFLGNBQWMsQ0FBQyxLQUFLO2dCQUM5QixRQUFRLEVBQUUsR0FBRyxDQUFDLFVBQVU7YUFDekIsQ0FBQyxDQUFDO1lBQ0gsT0FBTyxRQUFRLENBQUM7U0FDakI7UUFDRCxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRTtZQUM1QyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUU7Z0JBQ3RCLElBQUksRUFBRSxhQUFhLENBQUMsU0FBUztnQkFDN0IsT0FBTyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU07Z0JBQy9CLFNBQVMsRUFBRSxJQUFJO2dCQUNmLElBQUksRUFBRSxPQUFPO2FBQ2QsQ0FBQyxDQUFDO1lBQ0gsT0FBTyxRQUFRLENBQUM7U0FDakI7UUFDRCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQUFBQztRQUM1QixJQUFJLENBQUMsSUFBSSxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRTtZQUNyRCxrQkFBa0IsQ0FBQyxHQUFHLEVBQUU7Z0JBQ3RCLElBQUksRUFBRSxhQUFhLENBQUMsT0FBTztnQkFDM0IsT0FBTyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU07Z0JBQy9CLFNBQVMsRUFBRSxJQUFJO2dCQUNmLElBQUksRUFBRSxPQUFPO2FBQ2QsQ0FBQyxDQUFDO1lBQ0gsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ2hCO1FBQ0QsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsU0FBUyxHQUFLO1lBQzlDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxBQUFDO1lBQzVELElBQUksQ0FBQyxNQUFNLEVBQ1QsT0FBTyxJQUFJLENBQUM7WUFDZCxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxtQkFBbUIsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQztTQUMvRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQUFBQztRQUN0QixJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFO1lBQ3BCLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLEdBQUs7Z0JBQzFDLE9BQU8sWUFBWSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7YUFDakQsQ0FBQyxDQUFDO1NBQ0osTUFBTTtZQUNMLE9BQU8sWUFBWSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDL0M7S0FDRjtJQUNELElBQUksS0FBSyxHQUFHO1FBQ1YsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztLQUN4QjtJQUNELElBQUksQ0FBQyxJQUFJLEVBQUU7UUFDVCxPQUFPLElBQUksU0FBUyxDQUFDO1lBQ25CLEdBQUcsSUFBSSxDQUFDLElBQUk7WUFDWixJQUFJO1NBQ0wsQ0FBQyxDQUFDO0tBQ0o7Q0FDRixBQUFDO0FBQ0YsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLE9BQU8sRUFBRSxNQUFNLEdBQUs7SUFDdEMsT0FBTyxJQUFJLFNBQVMsQ0FBQztRQUNuQixLQUFLLEVBQUUsT0FBTztRQUNkLFFBQVEsRUFBRSxzQkFBc0IsQ0FBQyxRQUFRO1FBQ3pDLElBQUksRUFBRSxJQUFJO1FBQ1YsR0FBRyxvQkFBb0IsQ0FBQyxNQUFNLENBQUM7S0FDaEMsQ0FBQyxDQUFDO0NBQ0osQ0FBQztBQUNGLElBQUksVUFBVSxHQUFHLGNBQWMsUUFBUTtJQUNyQyxJQUFJLFNBQVMsR0FBRztRQUNkLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7S0FDMUI7SUFDRCxJQUFJLFdBQVcsR0FBRztRQUNoQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO0tBQzVCO0lBQ0QsTUFBTSxDQUFDLEtBQUssRUFBRTtRQUNaLE1BQU0sRUFBQyxNQUFNLENBQUEsRUFBRSxHQUFHLENBQUEsRUFBQyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQUFBQztRQUN0RCxJQUFJLEdBQUcsQ0FBQyxVQUFVLEtBQUssY0FBYyxDQUFDLE1BQU0sRUFBRTtZQUM1QyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUU7Z0JBQ3RCLElBQUksRUFBRSxhQUFhLENBQUMsWUFBWTtnQkFDaEMsUUFBUSxFQUFFLGNBQWMsQ0FBQyxNQUFNO2dCQUMvQixRQUFRLEVBQUUsR0FBRyxDQUFDLFVBQVU7YUFDekIsQ0FBQyxDQUFDO1lBQ0gsT0FBTyxRQUFRLENBQUM7U0FDakI7UUFDRCxNQUFNLEtBQUssR0FBRyxFQUFFLEFBQUM7UUFDakIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEFBQUM7UUFDbEMsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEFBQUM7UUFDdEMsSUFBSyxNQUFNLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFFO1lBQzFCLEtBQUssQ0FBQyxJQUFJLENBQUM7Z0JBQ1QsR0FBRyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxtQkFBbUIsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7Z0JBQ3JFLEtBQUssRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksbUJBQW1CLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQzthQUNwRixDQUFDLENBQUM7U0FDSjtRQUNELElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUU7WUFDcEIsT0FBTyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ3JELE1BQU07WUFDTCxPQUFPLFlBQVksQ0FBQyxlQUFlLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ3BEO0tBQ0Y7SUFDRCxJQUFJLE9BQU8sR0FBRztRQUNaLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7S0FDNUI7SUFDRCxPQUFPLE1BQU0sQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRTtRQUNsQyxJQUFJLE1BQU0sWUFBWSxRQUFRLEVBQUU7WUFDOUIsT0FBTyxJQUFJLFVBQVUsQ0FBQztnQkFDcEIsT0FBTyxFQUFFLEtBQUs7Z0JBQ2QsU0FBUyxFQUFFLE1BQU07Z0JBQ2pCLFFBQVEsRUFBRSxzQkFBc0IsQ0FBQyxTQUFTO2dCQUMxQyxHQUFHLG9CQUFvQixDQUFDLEtBQUssQ0FBQzthQUMvQixDQUFDLENBQUM7U0FDSjtRQUNELE9BQU8sSUFBSSxVQUFVLENBQUM7WUFDcEIsT0FBTyxFQUFFLFVBQVUsQ0FBQyxNQUFNLEVBQUU7WUFDNUIsU0FBUyxFQUFFLEtBQUs7WUFDaEIsUUFBUSxFQUFFLHNCQUFzQixDQUFDLFNBQVM7WUFDMUMsR0FBRyxvQkFBb0IsQ0FBQyxNQUFNLENBQUM7U0FDaEMsQ0FBQyxDQUFDO0tBQ0o7Q0FDRixBQUFDO0FBQ0YsSUFBSSxPQUFPLEdBQUcsY0FBYyxRQUFRO0lBQ2xDLE1BQU0sQ0FBQyxLQUFLLEVBQUU7UUFDWixNQUFNLEVBQUMsTUFBTSxDQUFBLEVBQUUsR0FBRyxDQUFBLEVBQUMsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLEFBQUM7UUFDdEQsSUFBSSxHQUFHLENBQUMsVUFBVSxLQUFLLGNBQWMsQ0FBQyxHQUFHLEVBQUU7WUFDekMsa0JBQWtCLENBQUMsR0FBRyxFQUFFO2dCQUN0QixJQUFJLEVBQUUsYUFBYSxDQUFDLFlBQVk7Z0JBQ2hDLFFBQVEsRUFBRSxjQUFjLENBQUMsR0FBRztnQkFDNUIsUUFBUSxFQUFFLEdBQUcsQ0FBQyxVQUFVO2FBQ3pCLENBQUMsQ0FBQztZQUNILE9BQU8sUUFBUSxDQUFDO1NBQ2pCO1FBQ0QsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEFBQUM7UUFDbEMsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEFBQUM7UUFDdEMsTUFBTSxLQUFLLEdBQUc7ZUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtTQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEVBQUUsS0FBSyxHQUFLO1lBQ2pFLE9BQU87Z0JBQ0wsR0FBRyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxtQkFBbUIsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUU7b0JBQUMsS0FBSztvQkFBRSxLQUFLO2lCQUFDLENBQUMsQ0FBQztnQkFDaEYsS0FBSyxFQUFFLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxtQkFBbUIsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUU7b0JBQUMsS0FBSztvQkFBRSxPQUFPO2lCQUFDLENBQUMsQ0FBQzthQUN6RixDQUFDO1NBQ0gsQ0FBQyxBQUFDO1FBQ0gsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRTtZQUNwQixNQUFNLFFBQVEsR0FBRyxlQUFlLENBQUMsSUFBSSxHQUFHLEVBQUUsQUFBQztZQUMzQyxPQUFPLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBWTtnQkFDeEMsS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLENBQUU7b0JBQ3hCLE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDLEdBQUcsQUFBQztvQkFDM0IsTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsS0FBSyxBQUFDO29CQUMvQixJQUFJLEdBQUcsQ0FBQyxNQUFNLEtBQUssU0FBUyxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssU0FBUyxFQUFFO3dCQUMxRCxPQUFPLFFBQVEsQ0FBQztxQkFDakI7b0JBQ0QsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLE9BQU8sSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLE9BQU8sRUFBRTt3QkFDdEQsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO3FCQUNoQjtvQkFDRCxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUN0QztnQkFDRCxPQUFPO29CQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsS0FBSztvQkFBRSxLQUFLLEVBQUUsUUFBUTtpQkFBQyxDQUFDO2FBQ2hELENBQUMsQ0FBQztTQUNKLE1BQU07WUFDTCxNQUFNLFNBQVEsR0FBRyxlQUFlLENBQUMsSUFBSSxHQUFHLEVBQUUsQUFBQztZQUMzQyxLQUFLLE1BQU0sSUFBSSxJQUFJLEtBQUssQ0FBRTtnQkFDeEIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQUFBQztnQkFDckIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQUFBQztnQkFDekIsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLFNBQVMsRUFBRTtvQkFDMUQsT0FBTyxRQUFRLENBQUM7aUJBQ2pCO2dCQUNELElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxPQUFPLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxPQUFPLEVBQUU7b0JBQ3RELE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztpQkFDaEI7Z0JBQ0QsU0FBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUN0QztZQUNELE9BQU87Z0JBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxLQUFLO2dCQUFFLEtBQUssRUFBRSxTQUFRO2FBQUMsQ0FBQztTQUNoRDtLQUNGO0NBQ0YsQUFBQztBQUNGLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sR0FBSztJQUMvQyxPQUFPLElBQUksT0FBTyxDQUFDO1FBQ2pCLFNBQVM7UUFDVCxPQUFPO1FBQ1AsUUFBUSxFQUFFLHNCQUFzQixDQUFDLE1BQU07UUFDdkMsR0FBRyxvQkFBb0IsQ0FBQyxNQUFNLENBQUM7S0FDaEMsQ0FBQyxDQUFDO0NBQ0osQ0FBQztBQUNGLElBQUksT0FBTyxHQUFHLGNBQWMsUUFBUTtJQUNsQyxNQUFNLENBQUMsS0FBSyxFQUFFO1FBQ1osTUFBTSxFQUFDLE1BQU0sQ0FBQSxFQUFFLEdBQUcsQ0FBQSxFQUFDLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxBQUFDO1FBQ3RELElBQUksR0FBRyxDQUFDLFVBQVUsS0FBSyxjQUFjLENBQUMsR0FBRyxFQUFFO1lBQ3pDLGtCQUFrQixDQUFDLEdBQUcsRUFBRTtnQkFDdEIsSUFBSSxFQUFFLGFBQWEsQ0FBQyxZQUFZO2dCQUNoQyxRQUFRLEVBQUUsY0FBYyxDQUFDLEdBQUc7Z0JBQzVCLFFBQVEsRUFBRSxHQUFHLENBQUMsVUFBVTthQUN6QixDQUFDLENBQUM7WUFDSCxPQUFPLFFBQVEsQ0FBQztTQUNqQjtRQUNELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEFBQUM7UUFDdEIsSUFBSSxHQUFHLENBQUMsT0FBTyxLQUFLLElBQUksRUFBRTtZQUN4QixJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFO2dCQUNyQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUU7b0JBQ3RCLElBQUksRUFBRSxhQUFhLENBQUMsU0FBUztvQkFDN0IsT0FBTyxFQUFFLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSztvQkFDMUIsSUFBSSxFQUFFLEtBQUs7b0JBQ1gsU0FBUyxFQUFFLElBQUk7b0JBQ2YsT0FBTyxFQUFFLEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTztpQkFDN0IsQ0FBQyxDQUFDO2dCQUNILE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQzthQUNoQjtTQUNGO1FBQ0QsSUFBSSxHQUFHLENBQUMsT0FBTyxLQUFLLElBQUksRUFBRTtZQUN4QixJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFO2dCQUNyQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUU7b0JBQ3RCLElBQUksRUFBRSxhQUFhLENBQUMsT0FBTztvQkFDM0IsT0FBTyxFQUFFLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSztvQkFDMUIsSUFBSSxFQUFFLEtBQUs7b0JBQ1gsU0FBUyxFQUFFLElBQUk7b0JBQ2YsT0FBTyxFQUFFLEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTztpQkFDN0IsQ0FBQyxDQUFDO2dCQUNILE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQzthQUNoQjtTQUNGO1FBQ0QsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEFBQUM7UUFDdEMsU0FBUyxXQUFXLENBQUMsU0FBUyxFQUFFO1lBQzlCLE1BQU0sU0FBUyxHQUFHLGVBQWUsQ0FBQyxJQUFJLEdBQUcsRUFBRSxBQUFDO1lBQzVDLEtBQUssTUFBTSxPQUFPLElBQUksU0FBUyxDQUFFO2dCQUMvQixJQUFJLE9BQU8sQ0FBQyxNQUFNLEtBQUssU0FBUyxFQUM5QixPQUFPLFFBQVEsQ0FBQztnQkFDbEIsSUFBSSxPQUFPLENBQUMsTUFBTSxLQUFLLE9BQU8sRUFDNUIsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNqQixTQUFTLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUM5QjtZQUNELE9BQU87Z0JBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxLQUFLO2dCQUFFLEtBQUssRUFBRSxTQUFTO2FBQUMsQ0FBQztTQUNqRDtRQUNELE1BQU0sUUFBUSxHQUFHO2VBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7U0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUssU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLG1CQUFtQixDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEFBQUM7UUFDNUgsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRTtZQUNwQixPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxHQUFLLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1NBQzFFLE1BQU07WUFDTCxPQUFPLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUM5QjtLQUNGO0lBQ0QsR0FBRyxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUU7UUFDcEIsT0FBTyxJQUFJLE9BQU8sQ0FBQztZQUNqQixHQUFHLElBQUksQ0FBQyxJQUFJO1lBQ1osT0FBTyxFQUFFO2dCQUFDLEtBQUssRUFBRSxPQUFPO2dCQUFFLE9BQU8sRUFBRSxVQUFVLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQzthQUFDO1NBQ2pFLENBQUMsQ0FBQztLQUNKO0lBQ0QsR0FBRyxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUU7UUFDcEIsT0FBTyxJQUFJLE9BQU8sQ0FBQztZQUNqQixHQUFHLElBQUksQ0FBQyxJQUFJO1lBQ1osT0FBTyxFQUFFO2dCQUFDLEtBQUssRUFBRSxPQUFPO2dCQUFFLE9BQU8sRUFBRSxVQUFVLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQzthQUFDO1NBQ2pFLENBQUMsQ0FBQztLQUNKO0lBQ0QsSUFBSSxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUU7UUFDbEIsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0tBQ25EO0lBQ0QsUUFBUSxDQUFDLE9BQU8sRUFBRTtRQUNoQixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0tBQzdCO0NBQ0YsQUFBQztBQUNGLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxTQUFTLEVBQUUsTUFBTSxHQUFLO0lBQ3RDLE9BQU8sSUFBSSxPQUFPLENBQUM7UUFDakIsU0FBUztRQUNULE9BQU8sRUFBRSxJQUFJO1FBQ2IsT0FBTyxFQUFFLElBQUk7UUFDYixRQUFRLEVBQUUsc0JBQXNCLENBQUMsTUFBTTtRQUN2QyxHQUFHLG9CQUFvQixDQUFDLE1BQU0sQ0FBQztLQUNoQyxDQUFDLENBQUM7Q0FDSixDQUFDO0FBQ0YsSUFBSSxZQUFZLEdBQUcsY0FBYyxRQUFRO0lBQ3ZDLGFBQWM7UUFDWixLQUFLLElBQUksU0FBUyxDQUFDLENBQUM7UUFDcEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO0tBQ2hDO0lBQ0QsTUFBTSxDQUFDLEtBQUssRUFBRTtRQUNaLE1BQU0sRUFBQyxHQUFHLENBQUEsRUFBQyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQUFBQztRQUM5QyxJQUFJLEdBQUcsQ0FBQyxVQUFVLEtBQUssY0FBYyxDQUFDLFFBQVEsRUFBRTtZQUM5QyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUU7Z0JBQ3RCLElBQUksRUFBRSxhQUFhLENBQUMsWUFBWTtnQkFDaEMsUUFBUSxFQUFFLGNBQWMsQ0FBQyxRQUFRO2dCQUNqQyxRQUFRLEVBQUUsR0FBRyxDQUFDLFVBQVU7YUFDekIsQ0FBQyxDQUFDO1lBQ0gsT0FBTyxRQUFRLENBQUM7U0FDakI7UUFDRCxTQUFTLGFBQWEsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFO1lBQ2xDLE9BQU8sVUFBVSxDQUFDO2dCQUNoQixJQUFJLEVBQUUsSUFBSTtnQkFDVixJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUk7Z0JBQ2QsU0FBUyxFQUFFO29CQUNULEdBQUcsQ0FBQyxNQUFNLENBQUMsa0JBQWtCO29CQUM3QixHQUFHLENBQUMsY0FBYztvQkFDbEIsaUJBQWlCO29CQUNqQixnQkFBZ0I7aUJBQ2pCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3BCLFNBQVMsRUFBRTtvQkFDVCxJQUFJLEVBQUUsYUFBYSxDQUFDLGlCQUFpQjtvQkFDckMsY0FBYyxFQUFFLEtBQUs7aUJBQ3RCO2FBQ0YsQ0FBQyxDQUFDO1NBQ0o7UUFDRCxTQUFTLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUU7WUFDeEMsT0FBTyxVQUFVLENBQUM7Z0JBQ2hCLElBQUksRUFBRSxPQUFPO2dCQUNiLElBQUksRUFBRSxHQUFHLENBQUMsSUFBSTtnQkFDZCxTQUFTLEVBQUU7b0JBQ1QsR0FBRyxDQUFDLE1BQU0sQ0FBQyxrQkFBa0I7b0JBQzdCLEdBQUcsQ0FBQyxjQUFjO29CQUNsQixpQkFBaUI7b0JBQ2pCLGdCQUFnQjtpQkFDakIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDcEIsU0FBUyxFQUFFO29CQUNULElBQUksRUFBRSxhQUFhLENBQUMsbUJBQW1CO29CQUN2QyxlQUFlLEVBQUUsS0FBSztpQkFDdkI7YUFDRixDQUFDLENBQUM7U0FDSjtRQUNELE1BQU0sTUFBTSxHQUFHO1lBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsa0JBQWtCO1NBQUMsQUFBQztRQUN6RCxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsSUFBSSxBQUFDO1FBQ3BCLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLFlBQVksV0FBVyxFQUFFO1lBQzVDLE9BQU8sR0FBRyxDQUFDLE9BQVUsR0FBQSxJQUFJLEdBQUs7Z0JBQzVCLE1BQU0sS0FBSyxHQUFHLElBQUksU0FBUyxDQUFDLEVBQUUsQ0FBQyxBQUFDO2dCQUNoQyxNQUFNLFVBQVUsR0FBRyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFLO29CQUM1RSxLQUFLLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDdkMsTUFBTSxLQUFLLENBQUM7aUJBQ2IsQ0FBQyxBQUFDO2dCQUNILE1BQU0sTUFBTSxHQUFHLE1BQU0sRUFBRSxJQUFJLFVBQVUsQ0FBQyxBQUFDO2dCQUN2QyxNQUFNLGFBQWEsR0FBRyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUs7b0JBQzlGLEtBQUssQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQzVDLE1BQU0sS0FBSyxDQUFDO2lCQUNiLENBQUMsQUFBQztnQkFDSCxPQUFPLGFBQWEsQ0FBQzthQUN0QixDQUFDLENBQUM7U0FDSixNQUFNO1lBQ0wsT0FBTyxHQUFHLENBQUMsQ0FBSSxHQUFBLElBQUksR0FBSztnQkFDdEIsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQUFBQztnQkFDMUQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUU7b0JBQ3ZCLE1BQU0sSUFBSSxTQUFTLENBQUM7d0JBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsS0FBSyxDQUFDO3FCQUFDLENBQUMsQ0FBQztpQkFDOUQ7Z0JBQ0QsTUFBTSxNQUFNLEdBQUcsRUFBRSxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsQUFBQztnQkFDdEMsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQUFBQztnQkFDbEUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUU7b0JBQzFCLE1BQU0sSUFBSSxTQUFTLENBQUM7d0JBQUMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLGFBQWEsQ0FBQyxLQUFLLENBQUM7cUJBQUMsQ0FBQyxDQUFDO2lCQUN0RTtnQkFDRCxPQUFPLGFBQWEsQ0FBQyxJQUFJLENBQUM7YUFDM0IsQ0FBQyxDQUFDO1NBQ0o7S0FDRjtJQUNELFVBQVUsR0FBRztRQUNYLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7S0FDdkI7SUFDRCxVQUFVLEdBQUc7UUFDWCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO0tBQzFCO0lBQ0QsSUFBSSxDQUFDLEdBQUcsS0FBSyxFQUFFO1FBQ2IsT0FBTyxJQUFJLFlBQVksQ0FBQztZQUN0QixHQUFHLElBQUksQ0FBQyxJQUFJO1lBQ1osSUFBSSxFQUFFLFNBQVMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUN6RCxDQUFDLENBQUM7S0FDSjtJQUNELE9BQU8sQ0FBQyxVQUFVLEVBQUU7UUFDbEIsT0FBTyxJQUFJLFlBQVksQ0FBQztZQUN0QixHQUFHLElBQUksQ0FBQyxJQUFJO1lBQ1osT0FBTyxFQUFFLFVBQVU7U0FDcEIsQ0FBQyxDQUFDO0tBQ0o7SUFDRCxTQUFTLENBQUMsSUFBSSxFQUFFO1FBQ2QsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQUFBQztRQUN2QyxPQUFPLGFBQWEsQ0FBQztLQUN0QjtJQUNELGVBQWUsQ0FBQyxJQUFJLEVBQUU7UUFDcEIsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQUFBQztRQUN2QyxPQUFPLGFBQWEsQ0FBQztLQUN0QjtDQUNGLEFBQUM7QUFDRixZQUFZLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxNQUFNLEdBQUs7SUFDL0MsT0FBTyxJQUFJLFlBQVksQ0FBQztRQUN0QixJQUFJLEVBQUUsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQzlGLE9BQU8sRUFBRSxPQUFPLElBQUksV0FBVyxDQUFDLE1BQU0sRUFBRTtRQUN4QyxRQUFRLEVBQUUsc0JBQXNCLENBQUMsV0FBVztRQUM1QyxHQUFHLG9CQUFvQixDQUFDLE1BQU0sQ0FBQztLQUNoQyxDQUFDLENBQUM7Q0FDSixDQUFDO0FBQ0YsSUFBSSxRQUFRLEdBQUcsY0FBYyxRQUFRO0lBQ25DLElBQUksTUFBTSxHQUFHO1FBQ1gsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0tBQzNCO0lBQ0QsTUFBTSxDQUFDLEtBQUssRUFBRTtRQUNaLE1BQU0sRUFBQyxHQUFHLENBQUEsRUFBQyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQUFBQztRQUM5QyxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxBQUFDO1FBQ3RDLE9BQU8sVUFBVSxDQUFDLE1BQU0sQ0FBQztZQUFDLElBQUksRUFBRSxHQUFHLENBQUMsSUFBSTtZQUFFLElBQUksRUFBRSxHQUFHLENBQUMsSUFBSTtZQUFFLE1BQU0sRUFBRSxHQUFHO1NBQUMsQ0FBQyxDQUFDO0tBQ3pFO0NBQ0YsQUFBQztBQUNGLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxHQUFLO0lBQ3BDLE9BQU8sSUFBSSxRQUFRLENBQUM7UUFDbEIsTUFBTTtRQUNOLFFBQVEsRUFBRSxzQkFBc0IsQ0FBQyxPQUFPO1FBQ3hDLEdBQUcsb0JBQW9CLENBQUMsTUFBTSxDQUFDO0tBQ2hDLENBQUMsQ0FBQztDQUNKLENBQUM7QUFDRixJQUFJLFdBQVcsR0FBRyxjQUFjLFFBQVE7SUFDdEMsTUFBTSxDQUFDLEtBQUssRUFBRTtRQUNaLElBQUksS0FBSyxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNsQyxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxBQUFDO1lBQ3hDLGtCQUFrQixDQUFDLEdBQUcsRUFBRTtnQkFDdEIsSUFBSSxFQUFFLGFBQWEsQ0FBQyxlQUFlO2dCQUNuQyxRQUFRLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLO2FBQzFCLENBQUMsQ0FBQztZQUNILE9BQU8sUUFBUSxDQUFDO1NBQ2pCO1FBQ0QsT0FBTztZQUFDLE1BQU0sRUFBRSxPQUFPO1lBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxJQUFJO1NBQUMsQ0FBQztLQUM3QztJQUNELElBQUksS0FBSyxHQUFHO1FBQ1YsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztLQUN4QjtDQUNGLEFBQUM7QUFDRixXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsS0FBSyxFQUFFLE1BQU0sR0FBSztJQUN0QyxPQUFPLElBQUksV0FBVyxDQUFDO1FBQ3JCLEtBQUs7UUFDTCxRQUFRLEVBQUUsc0JBQXNCLENBQUMsVUFBVTtRQUMzQyxHQUFHLG9CQUFvQixDQUFDLE1BQU0sQ0FBQztLQUNoQyxDQUFDLENBQUM7Q0FDSixDQUFDO0FBQ0YsU0FBUyxjQUFjLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRTtJQUN0QyxPQUFPLElBQUksUUFBUSxDQUFDO1FBQ2xCLE1BQU07UUFDTixRQUFRLEVBQUUsc0JBQXNCLENBQUMsT0FBTztRQUN4QyxHQUFHLG9CQUFvQixDQUFDLE1BQU0sQ0FBQztLQUNoQyxDQUFDLENBQUM7Q0FDSjtBQUNELElBQUksUUFBUSxHQUFHLGNBQWMsUUFBUTtJQUNuQyxNQUFNLENBQUMsS0FBSyxFQUFFO1FBQ1osSUFBSSxPQUFPLEtBQUssQ0FBQyxJQUFJLEtBQUssUUFBUSxFQUFFO1lBQ2xDLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLEFBQUM7WUFDeEMsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEFBQUM7WUFDeEMsa0JBQWtCLENBQUMsR0FBRyxFQUFFO2dCQUN0QixRQUFRLEVBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUM7Z0JBQzFDLFFBQVEsRUFBRSxHQUFHLENBQUMsVUFBVTtnQkFDeEIsSUFBSSxFQUFFLGFBQWEsQ0FBQyxZQUFZO2FBQ2pDLENBQUMsQ0FBQztZQUNILE9BQU8sUUFBUSxDQUFDO1NBQ2pCO1FBQ0QsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQy9DLE1BQU0sSUFBRyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLEFBQUM7WUFDeEMsTUFBTSxlQUFjLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEFBQUM7WUFDeEMsa0JBQWtCLENBQUMsSUFBRyxFQUFFO2dCQUN0QixRQUFRLEVBQUUsSUFBRyxDQUFDLElBQUk7Z0JBQ2xCLElBQUksRUFBRSxhQUFhLENBQUMsa0JBQWtCO2dCQUN0QyxPQUFPLEVBQUUsZUFBYzthQUN4QixDQUFDLENBQUM7WUFDSCxPQUFPLFFBQVEsQ0FBQztTQUNqQjtRQUNELE9BQU8sR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN4QjtJQUNELElBQUksT0FBTyxHQUFHO1FBQ1osT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztLQUN6QjtJQUNELElBQUksSUFBSSxHQUFHO1FBQ1QsTUFBTSxVQUFVLEdBQUcsRUFBRSxBQUFDO1FBQ3RCLEtBQUssTUFBTSxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUU7WUFDbEMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztTQUN2QjtRQUNELE9BQU8sVUFBVSxDQUFDO0tBQ25CO0lBQ0QsSUFBSSxNQUFNLEdBQUc7UUFDWCxNQUFNLFVBQVUsR0FBRyxFQUFFLEFBQUM7UUFDdEIsS0FBSyxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBRTtZQUNsQyxVQUFVLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1NBQ3ZCO1FBQ0QsT0FBTyxVQUFVLENBQUM7S0FDbkI7SUFDRCxJQUFJLElBQUksR0FBRztRQUNULE1BQU0sVUFBVSxHQUFHLEVBQUUsQUFBQztRQUN0QixLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFFO1lBQ2xDLFVBQVUsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7U0FDdkI7UUFDRCxPQUFPLFVBQVUsQ0FBQztLQUNuQjtDQUNGLEFBQUM7QUFDRixRQUFRLENBQUMsTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUNqQyxJQUFJLGNBQWMsR0FBRyxjQUFjLFFBQVE7SUFDekMsTUFBTSxDQUFDLEtBQUssRUFBRTtRQUNaLE1BQU0sZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEFBQUM7UUFDcEUsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQUFBQztRQUN4QyxJQUFJLEdBQUcsQ0FBQyxVQUFVLEtBQUssY0FBYyxDQUFDLE1BQU0sSUFBSSxHQUFHLENBQUMsVUFBVSxLQUFLLGNBQWMsQ0FBQyxNQUFNLEVBQUU7WUFDeEYsTUFBTSxjQUFjLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxBQUFDO1lBQzVELGtCQUFrQixDQUFDLEdBQUcsRUFBRTtnQkFDdEIsUUFBUSxFQUFFLEtBQUssQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDO2dCQUMxQyxRQUFRLEVBQUUsR0FBRyxDQUFDLFVBQVU7Z0JBQ3hCLElBQUksRUFBRSxhQUFhLENBQUMsWUFBWTthQUNqQyxDQUFDLENBQUM7WUFDSCxPQUFPLFFBQVEsQ0FBQztTQUNqQjtRQUNELElBQUksZ0JBQWdCLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtZQUMvQyxNQUFNLGVBQWMsR0FBRyxLQUFLLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLEFBQUM7WUFDNUQsa0JBQWtCLENBQUMsR0FBRyxFQUFFO2dCQUN0QixRQUFRLEVBQUUsR0FBRyxDQUFDLElBQUk7Z0JBQ2xCLElBQUksRUFBRSxhQUFhLENBQUMsa0JBQWtCO2dCQUN0QyxPQUFPLEVBQUUsZUFBYzthQUN4QixDQUFDLENBQUM7WUFDSCxPQUFPLFFBQVEsQ0FBQztTQUNqQjtRQUNELE9BQU8sR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN4QjtJQUNELElBQUksSUFBSSxHQUFHO1FBQ1QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztLQUN6QjtDQUNGLEFBQUM7QUFDRixjQUFjLENBQUMsTUFBTSxHQUFHLENBQUMsTUFBTSxFQUFFLE1BQU0sR0FBSztJQUMxQyxPQUFPLElBQUksY0FBYyxDQUFDO1FBQ3hCLE1BQU07UUFDTixRQUFRLEVBQUUsc0JBQXNCLENBQUMsYUFBYTtRQUM5QyxHQUFHLG9CQUFvQixDQUFDLE1BQU0sQ0FBQztLQUNoQyxDQUFDLENBQUM7Q0FDSixDQUFDO0FBQ0YsSUFBSSxXQUFXLEdBQUcsY0FBYyxRQUFRO0lBQ3RDLE1BQU0sQ0FBQyxLQUFLLEVBQUU7UUFDWixNQUFNLEVBQUMsR0FBRyxDQUFBLEVBQUMsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLEFBQUM7UUFDOUMsSUFBSSxHQUFHLENBQUMsVUFBVSxLQUFLLGNBQWMsQ0FBQyxPQUFPLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEtBQUssS0FBSyxFQUFFO1lBQzNFLGtCQUFrQixDQUFDLEdBQUcsRUFBRTtnQkFDdEIsSUFBSSxFQUFFLGFBQWEsQ0FBQyxZQUFZO2dCQUNoQyxRQUFRLEVBQUUsY0FBYyxDQUFDLE9BQU87Z0JBQ2hDLFFBQVEsRUFBRSxHQUFHLENBQUMsVUFBVTthQUN6QixDQUFDLENBQUM7WUFDSCxPQUFPLFFBQVEsQ0FBQztTQUNqQjtRQUNELE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQyxVQUFVLEtBQUssY0FBYyxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxBQUFDO1FBQ3JHLE9BQU8sR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEdBQUs7WUFDcEMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFO2dCQUNyQyxJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUk7Z0JBQ2QsUUFBUSxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsa0JBQWtCO2FBQ3hDLENBQUMsQ0FBQztTQUNKLENBQUMsQ0FBQyxDQUFDO0tBQ0w7Q0FDRixBQUFDO0FBQ0YsV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLE1BQU0sRUFBRSxNQUFNLEdBQUs7SUFDdkMsT0FBTyxJQUFJLFdBQVcsQ0FBQztRQUNyQixJQUFJLEVBQUUsTUFBTTtRQUNaLFFBQVEsRUFBRSxzQkFBc0IsQ0FBQyxVQUFVO1FBQzNDLEdBQUcsb0JBQW9CLENBQUMsTUFBTSxDQUFDO0tBQ2hDLENBQUMsQ0FBQztDQUNKLENBQUM7QUFDRixJQUFJLFdBQVcsR0FBRyxjQUFjLFFBQVE7SUFDdEMsU0FBUyxHQUFHO1FBQ1YsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztLQUN6QjtJQUNELE1BQU0sQ0FBQyxLQUFLLEVBQUU7UUFDWixNQUFNLEVBQUMsTUFBTSxDQUFBLEVBQUUsR0FBRyxDQUFBLEVBQUMsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLEFBQUM7UUFDdEQsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxBQUFDO1FBQ3hDLElBQUksTUFBTSxDQUFDLElBQUksS0FBSyxZQUFZLEVBQUU7WUFDaEMsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEFBQUM7WUFDN0MsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRTtnQkFDcEIsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFVBQVUsR0FBSztvQkFDckQsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUM7d0JBQ2xDLElBQUksRUFBRSxVQUFVO3dCQUNoQixJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUk7d0JBQ2QsTUFBTSxFQUFFLEdBQUc7cUJBQ1osQ0FBQyxDQUFDO2lCQUNKLENBQUMsQ0FBQzthQUNKLE1BQU07Z0JBQ0wsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUM7b0JBQ2pDLElBQUksRUFBRSxTQUFTO29CQUNmLElBQUksRUFBRSxHQUFHLENBQUMsSUFBSTtvQkFDZCxNQUFNLEVBQUUsR0FBRztpQkFDWixDQUFDLENBQUM7YUFDSjtTQUNGO1FBQ0QsTUFBTSxRQUFRLEdBQUc7WUFDZixRQUFRLEVBQUUsQ0FBQyxHQUFHLEdBQUs7Z0JBQ2pCLGtCQUFrQixDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztnQkFDN0IsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFO29CQUNiLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztpQkFDaEIsTUFBTTtvQkFDTCxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7aUJBQ2hCO2FBQ0Y7WUFDRCxJQUFJLElBQUksSUFBRztnQkFDVCxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUM7YUFDakI7U0FDRixBQUFDO1FBQ0YsUUFBUSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNyRCxJQUFJLE1BQU0sQ0FBQyxJQUFJLEtBQUssWUFBWSxFQUFFO1lBQ2hDLE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxHQUFHLEdBQUs7Z0JBQ2pDLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxBQUFDO2dCQUNoRCxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFO29CQUNwQixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQ2hDO2dCQUNELElBQUksTUFBTSxZQUFZLE9BQU8sRUFBRTtvQkFDN0IsTUFBTSxJQUFJLEtBQUssQ0FBQywyRkFBMkYsQ0FBQyxDQUFDO2lCQUM5RztnQkFDRCxPQUFPLEdBQUcsQ0FBQzthQUNaLEFBQUM7WUFDRixJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxLQUFLLEtBQUssRUFBRTtnQkFDOUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDO29CQUN4QyxJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUk7b0JBQ2QsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJO29CQUNkLE1BQU0sRUFBRSxHQUFHO2lCQUNaLENBQUMsQUFBQztnQkFDSCxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssU0FBUyxFQUM1QixPQUFPLFFBQVEsQ0FBQztnQkFDbEIsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLE9BQU8sRUFDMUIsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNqQixpQkFBaUIsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQy9CLE9BQU87b0JBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxLQUFLO29CQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSztpQkFBQyxDQUFDO2FBQ25ELE1BQU07Z0JBQ0wsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUM7b0JBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJO29CQUFFLElBQUksRUFBRSxHQUFHLENBQUMsSUFBSTtvQkFBRSxNQUFNLEVBQUUsR0FBRztpQkFBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxHQUFLO29CQUNqRyxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssU0FBUyxFQUM1QixPQUFPLFFBQVEsQ0FBQztvQkFDbEIsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLE9BQU8sRUFDMUIsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO29CQUNqQixPQUFPLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBTTt3QkFDL0MsT0FBTzs0QkFBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLEtBQUs7NEJBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLO3lCQUFDLENBQUM7cUJBQ25ELENBQUMsQ0FBQztpQkFDSixDQUFDLENBQUM7YUFDSjtTQUNGO1FBQ0QsSUFBSSxNQUFNLENBQUMsSUFBSSxLQUFLLFdBQVcsRUFBRTtZQUMvQixJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxLQUFLLEtBQUssRUFBRTtnQkFDOUIsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDO29CQUN2QyxJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUk7b0JBQ2QsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJO29CQUNkLE1BQU0sRUFBRSxHQUFHO2lCQUNaLENBQUMsQUFBQztnQkFDSCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUNqQixPQUFPLElBQUksQ0FBQztnQkFDZCxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLEFBQUM7Z0JBQ3RELElBQUksTUFBTSxZQUFZLE9BQU8sRUFBRTtvQkFDN0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxDQUFDLCtGQUErRixDQUFDLENBQUMsQ0FBQztpQkFDcEg7Z0JBQ0QsT0FBTztvQkFBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLEtBQUs7b0JBQUUsS0FBSyxFQUFFLE1BQU07aUJBQUMsQ0FBQzthQUM5QyxNQUFNO2dCQUNMLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDO29CQUFDLElBQUksRUFBRSxHQUFHLENBQUMsSUFBSTtvQkFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUk7b0JBQUUsTUFBTSxFQUFFLEdBQUc7aUJBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksR0FBSztvQkFDaEcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFDakIsT0FBTyxJQUFJLENBQUM7b0JBQ2QsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sR0FBSyxDQUFDOzRCQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsS0FBSzs0QkFBRSxLQUFLLEVBQUUsTUFBTTt5QkFBQyxDQUFDLENBQUMsQ0FBQztpQkFDMUgsQ0FBQyxDQUFDO2FBQ0o7U0FDRjtRQUNELEtBQUssQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDM0I7Q0FDRixBQUFDO0FBQ0YsV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxHQUFLO0lBQy9DLE9BQU8sSUFBSSxXQUFXLENBQUM7UUFDckIsTUFBTTtRQUNOLFFBQVEsRUFBRSxzQkFBc0IsQ0FBQyxVQUFVO1FBQzNDLE1BQU07UUFDTixHQUFHLG9CQUFvQixDQUFDLE1BQU0sQ0FBQztLQUNoQyxDQUFDLENBQUM7Q0FDSixDQUFDO0FBQ0YsV0FBVyxDQUFDLG9CQUFvQixHQUFHLENBQUMsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLEdBQUs7SUFDakUsT0FBTyxJQUFJLFdBQVcsQ0FBQztRQUNyQixNQUFNO1FBQ04sTUFBTSxFQUFFO1lBQUMsSUFBSSxFQUFFLFlBQVk7WUFBRSxTQUFTLEVBQUUsVUFBVTtTQUFDO1FBQ25ELFFBQVEsRUFBRSxzQkFBc0IsQ0FBQyxVQUFVO1FBQzNDLEdBQUcsb0JBQW9CLENBQUMsTUFBTSxDQUFDO0tBQ2hDLENBQUMsQ0FBQztDQUNKLENBQUM7QUFDRixJQUFJLFlBQVksR0FBRyxjQUFjLFFBQVE7SUFDdkMsTUFBTSxDQUFDLEtBQUssRUFBRTtRQUNaLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEFBQUM7UUFDeEMsSUFBSSxVQUFVLEtBQUssY0FBYyxDQUFDLFNBQVMsRUFBRTtZQUMzQyxPQUFPLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1NBQ3BCO1FBQ0QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDMUM7SUFDRCxNQUFNLEdBQUc7UUFDUCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO0tBQzVCO0NBQ0YsQUFBQztBQUNGLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxHQUFLO0lBQ3RDLE9BQU8sSUFBSSxZQUFZLENBQUM7UUFDdEIsU0FBUyxFQUFFLElBQUk7UUFDZixRQUFRLEVBQUUsc0JBQXNCLENBQUMsV0FBVztRQUM1QyxHQUFHLG9CQUFvQixDQUFDLE1BQU0sQ0FBQztLQUNoQyxDQUFDLENBQUM7Q0FDSixDQUFDO0FBQ0YsSUFBSSxZQUFZLEdBQUcsY0FBYyxRQUFRO0lBQ3ZDLE1BQU0sQ0FBQyxLQUFLLEVBQUU7UUFDWixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxBQUFDO1FBQ3hDLElBQUksVUFBVSxLQUFLLGNBQWMsQ0FBQyxJQUFJLEVBQUU7WUFDdEMsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDbEI7UUFDRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUMxQztJQUNELE1BQU0sR0FBRztRQUNQLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7S0FDNUI7Q0FDRixBQUFDO0FBQ0YsWUFBWSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksRUFBRSxNQUFNLEdBQUs7SUFDdEMsT0FBTyxJQUFJLFlBQVksQ0FBQztRQUN0QixTQUFTLEVBQUUsSUFBSTtRQUNmLFFBQVEsRUFBRSxzQkFBc0IsQ0FBQyxXQUFXO1FBQzVDLEdBQUcsb0JBQW9CLENBQUMsTUFBTSxDQUFDO0tBQ2hDLENBQUMsQ0FBQztDQUNKLENBQUM7QUFDRixJQUFJLFdBQVcsR0FBRyxjQUFjLFFBQVE7SUFDdEMsTUFBTSxDQUFDLEtBQUssRUFBRTtRQUNaLE1BQU0sRUFBQyxHQUFHLENBQUEsRUFBQyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQUFBQztRQUM5QyxJQUFJLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxBQUFDO1FBQ3BCLElBQUksR0FBRyxDQUFDLFVBQVUsS0FBSyxjQUFjLENBQUMsU0FBUyxFQUFFO1lBQy9DLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1NBQ2pDO1FBQ0QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7WUFDaEMsSUFBSTtZQUNKLElBQUksRUFBRSxHQUFHLENBQUMsSUFBSTtZQUNkLE1BQU0sRUFBRSxHQUFHO1NBQ1osQ0FBQyxDQUFDO0tBQ0o7SUFDRCxhQUFhLEdBQUc7UUFDZCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO0tBQzVCO0NBQ0YsQUFBQztBQUNGLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxHQUFLO0lBQ3JDLE9BQU8sSUFBSSxZQUFZLENBQUM7UUFDdEIsU0FBUyxFQUFFLElBQUk7UUFDZixRQUFRLEVBQUUsc0JBQXNCLENBQUMsV0FBVztRQUM1QyxHQUFHLG9CQUFvQixDQUFDLE1BQU0sQ0FBQztLQUNoQyxDQUFDLENBQUM7Q0FDSixDQUFDO0FBQ0YsSUFBSSxPQUFPLEdBQUcsY0FBYyxRQUFRO0lBQ2xDLE1BQU0sQ0FBQyxLQUFLLEVBQUU7UUFDWixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxBQUFDO1FBQ3hDLElBQUksVUFBVSxLQUFLLGNBQWMsQ0FBQyxHQUFHLEVBQUU7WUFDckMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQUFBQztZQUN4QyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUU7Z0JBQ3RCLElBQUksRUFBRSxhQUFhLENBQUMsWUFBWTtnQkFDaEMsUUFBUSxFQUFFLGNBQWMsQ0FBQyxHQUFHO2dCQUM1QixRQUFRLEVBQUUsR0FBRyxDQUFDLFVBQVU7YUFDekIsQ0FBQyxDQUFDO1lBQ0gsT0FBTyxRQUFRLENBQUM7U0FDakI7UUFDRCxPQUFPO1lBQUMsTUFBTSxFQUFFLE9BQU87WUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLElBQUk7U0FBQyxDQUFDO0tBQzdDO0NBQ0YsQUFBQztBQUNGLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxNQUFNLEdBQUs7SUFDM0IsT0FBTyxJQUFJLE9BQU8sQ0FBQztRQUNqQixRQUFRLEVBQUUsc0JBQXNCLENBQUMsTUFBTTtRQUN2QyxHQUFHLG9CQUFvQixDQUFDLE1BQU0sQ0FBQztLQUNoQyxDQUFDLENBQUM7Q0FDSixDQUFDO0FBQ0YsSUFBSSxPQUFPLEdBQUcsQ0FBQyxLQUFLLEVBQUUsTUFBTSxHQUFHLEVBQUUsRUFBRSxLQUFLLEdBQUs7SUFDM0MsSUFBSSxLQUFLLEVBQ1AsT0FBTyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxFQUFFLEdBQUcsR0FBSztRQUNqRCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2hCLE1BQU0sQ0FBQyxHQUFHLE9BQU8sTUFBTSxLQUFLLFVBQVUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsTUFBTSxBQUFDO1lBQy9ELE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxLQUFLLFFBQVEsR0FBRztnQkFBQyxPQUFPLEVBQUUsQ0FBQzthQUFDLEdBQUcsQ0FBQyxBQUFDO1lBQ3BELEdBQUcsQ0FBQyxRQUFRLENBQUM7Z0JBQUMsSUFBSSxFQUFFLFFBQVE7Z0JBQUUsR0FBRyxFQUFFO2dCQUFFLEtBQUs7YUFBQyxDQUFDLENBQUM7U0FDOUM7S0FDRixDQUFDLENBQUM7SUFDTCxPQUFPLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztDQUN6QixBQUFDO0FBQ0YsSUFBSSxLQUFLLEdBQUc7SUFDVixNQUFNLEVBQUUsVUFBVSxDQUFDLFVBQVU7Q0FDOUIsQUFBQztBQUNGLElBQUksc0JBQXNCLEFBQUM7QUFDM0IsQ0FBQyxTQUFTLHVCQUF1QixFQUFFO0lBQ2pDLHVCQUF1QixDQUFDLFdBQVcsQ0FBQyxHQUFHLFdBQVcsQ0FBQztJQUNuRCx1QkFBdUIsQ0FBQyxXQUFXLENBQUMsR0FBRyxXQUFXLENBQUM7SUFDbkQsdUJBQXVCLENBQUMsUUFBUSxDQUFDLEdBQUcsUUFBUSxDQUFDO0lBQzdDLHVCQUF1QixDQUFDLFdBQVcsQ0FBQyxHQUFHLFdBQVcsQ0FBQztJQUNuRCx1QkFBdUIsQ0FBQyxZQUFZLENBQUMsR0FBRyxZQUFZLENBQUM7SUFDckQsdUJBQXVCLENBQUMsU0FBUyxDQUFDLEdBQUcsU0FBUyxDQUFDO0lBQy9DLHVCQUF1QixDQUFDLGNBQWMsQ0FBQyxHQUFHLGNBQWMsQ0FBQztJQUN6RCx1QkFBdUIsQ0FBQyxTQUFTLENBQUMsR0FBRyxTQUFTLENBQUM7SUFDL0MsdUJBQXVCLENBQUMsUUFBUSxDQUFDLEdBQUcsUUFBUSxDQUFDO0lBQzdDLHVCQUF1QixDQUFDLFlBQVksQ0FBQyxHQUFHLFlBQVksQ0FBQztJQUNyRCx1QkFBdUIsQ0FBQyxVQUFVLENBQUMsR0FBRyxVQUFVLENBQUM7SUFDakQsdUJBQXVCLENBQUMsU0FBUyxDQUFDLEdBQUcsU0FBUyxDQUFDO0lBQy9DLHVCQUF1QixDQUFDLFVBQVUsQ0FBQyxHQUFHLFVBQVUsQ0FBQztJQUNqRCx1QkFBdUIsQ0FBQyxXQUFXLENBQUMsR0FBRyxXQUFXLENBQUM7SUFDbkQsdUJBQXVCLENBQUMsVUFBVSxDQUFDLEdBQUcsVUFBVSxDQUFDO0lBQ2pELHVCQUF1QixDQUFDLHVCQUF1QixDQUFDLEdBQUcsdUJBQXVCLENBQUM7SUFDM0UsdUJBQXVCLENBQUMsaUJBQWlCLENBQUMsR0FBRyxpQkFBaUIsQ0FBQztJQUMvRCx1QkFBdUIsQ0FBQyxVQUFVLENBQUMsR0FBRyxVQUFVLENBQUM7SUFDakQsdUJBQXVCLENBQUMsV0FBVyxDQUFDLEdBQUcsV0FBVyxDQUFDO0lBQ25ELHVCQUF1QixDQUFDLFFBQVEsQ0FBQyxHQUFHLFFBQVEsQ0FBQztJQUM3Qyx1QkFBdUIsQ0FBQyxRQUFRLENBQUMsR0FBRyxRQUFRLENBQUM7SUFDN0MsdUJBQXVCLENBQUMsYUFBYSxDQUFDLEdBQUcsYUFBYSxDQUFDO0lBQ3ZELHVCQUF1QixDQUFDLFNBQVMsQ0FBQyxHQUFHLFNBQVMsQ0FBQztJQUMvQyx1QkFBdUIsQ0FBQyxZQUFZLENBQUMsR0FBRyxZQUFZLENBQUM7SUFDckQsdUJBQXVCLENBQUMsU0FBUyxDQUFDLEdBQUcsU0FBUyxDQUFDO0lBQy9DLHVCQUF1QixDQUFDLFlBQVksQ0FBQyxHQUFHLFlBQVksQ0FBQztJQUNyRCx1QkFBdUIsQ0FBQyxlQUFlLENBQUMsR0FBRyxlQUFlLENBQUM7SUFDM0QsdUJBQXVCLENBQUMsYUFBYSxDQUFDLEdBQUcsYUFBYSxDQUFDO0lBQ3ZELHVCQUF1QixDQUFDLGFBQWEsQ0FBQyxHQUFHLGFBQWEsQ0FBQztJQUN2RCx1QkFBdUIsQ0FBQyxZQUFZLENBQUMsR0FBRyxZQUFZLENBQUM7SUFDckQsdUJBQXVCLENBQUMsWUFBWSxDQUFDLEdBQUcsWUFBWSxDQUFDO0NBQ3RELENBQUMsQ0FBQyxzQkFBc0IsSUFBSSxDQUFDLHNCQUFzQixHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDNUQsSUFBSSxlQUFlLEdBQUcsQ0FBQyxHQUFHLEVBQUUsTUFBTSxHQUFHO0lBQ25DLE9BQU8sRUFBRSxDQUFDLHNCQUFzQixFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztDQUM3QyxHQUFLLE9BQU8sQ0FBQyxDQUFDLElBQUksR0FBSyxJQUFJLFlBQVksR0FBRyxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQUFBQztBQUMzRCxJQUFJLFdBQVcsR0FBRyxVQUFVLENBQUMsTUFBTSxBQUFDO0FBQ3BDLElBQUksV0FBVyxHQUFHLFVBQVUsQ0FBQyxNQUFNLEFBQUM7QUFDcEMsSUFBSSxRQUFRLEdBQUcsT0FBTyxDQUFDLE1BQU0sQUFBQztBQUM5QixJQUFJLFdBQVcsR0FBRyxVQUFVLENBQUMsTUFBTSxBQUFDO0FBQ3BDLElBQUksWUFBWSxHQUFHLFdBQVcsQ0FBQyxNQUFNLEFBQUM7QUFDdEMsSUFBSSxTQUFTLEdBQUcsUUFBUSxDQUFDLE1BQU0sQUFBQztBQUNoQyxJQUFJLGNBQWMsR0FBRyxhQUFhLENBQUMsTUFBTSxBQUFDO0FBQzFDLElBQUksU0FBUyxHQUFHLFFBQVEsQ0FBQyxNQUFNLEFBQUM7QUFDaEMsSUFBSSxRQUFRLEdBQUcsT0FBTyxDQUFDLE1BQU0sQUFBQztBQUM5QixJQUFJLFlBQVksR0FBRyxXQUFXLENBQUMsTUFBTSxBQUFDO0FBQ3RDLElBQUksVUFBVSxHQUFHLFNBQVMsQ0FBQyxNQUFNLEFBQUM7QUFDbEMsSUFBSSxTQUFTLEdBQUcsUUFBUSxDQUFDLE1BQU0sQUFBQztBQUNoQyxJQUFJLFVBQVUsR0FBRyxTQUFTLENBQUMsTUFBTSxBQUFDO0FBQ2xDLElBQUksV0FBVyxHQUFHLFVBQVUsQ0FBQyxNQUFNLEFBQUM7QUFDcEMsSUFBSSxpQkFBaUIsR0FBRyxVQUFVLENBQUMsWUFBWSxBQUFDO0FBQ2hELElBQUksVUFBVSxHQUFHLFNBQVMsQ0FBQyxNQUFNLEFBQUM7QUFDbEMsSUFBSSx1QkFBdUIsR0FBRyxzQkFBc0IsQ0FBQyxNQUFNLEFBQUM7QUFDNUQsSUFBSSxpQkFBaUIsR0FBRyxnQkFBZ0IsQ0FBQyxNQUFNLEFBQUM7QUFDaEQsSUFBSSxVQUFVLEdBQUcsU0FBUyxDQUFDLE1BQU0sQUFBQztBQUNsQyxJQUFJLFdBQVcsR0FBRyxVQUFVLENBQUMsTUFBTSxBQUFDO0FBQ3BDLElBQUksUUFBUSxHQUFHLE9BQU8sQ0FBQyxNQUFNLEFBQUM7QUFDOUIsSUFBSSxRQUFRLEdBQUcsT0FBTyxDQUFDLE1BQU0sQUFBQztBQUM5QixJQUFJLGFBQWEsR0FBRyxZQUFZLENBQUMsTUFBTSxBQUFDO0FBQ3hDLElBQUksU0FBUyxHQUFHLFFBQVEsQ0FBQyxNQUFNLEFBQUM7QUFDaEMsSUFBSSxZQUFZLEdBQUcsV0FBVyxDQUFDLE1BQU0sQUFBQztBQUN0QyxJQUFJLFNBQVMsR0FBRyxRQUFRLENBQUMsTUFBTSxBQUFDO0FBQ2hDLElBQUksZUFBZSxHQUFHLGNBQWMsQ0FBQyxNQUFNLEFBQUM7QUFDNUMsSUFBSSxZQUFZLEdBQUcsV0FBVyxDQUFDLE1BQU0sQUFBQztBQUN0QyxJQUFJLFlBQVksR0FBRyxXQUFXLENBQUMsTUFBTSxBQUFDO0FBQ3RDLElBQUksYUFBYSxHQUFHLFlBQVksQ0FBQyxNQUFNLEFBQUM7QUFDeEMsSUFBSSxhQUFhLEdBQUcsWUFBWSxDQUFDLE1BQU0sQUFBQztBQUN4QyxJQUFJLGVBQWUsR0FBRyxXQUFXLENBQUMsb0JBQW9CLEFBQUM7QUFDdkQsSUFBSSxRQUFRLEdBQUcsSUFBTSxXQUFXLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQUFBQztBQUM5QyxJQUFJLFFBQVEsR0FBRyxJQUFNLFdBQVcsRUFBRSxDQUFDLFFBQVEsRUFBRSxBQUFDO0FBQzlDLElBQUksU0FBUyxHQUFHLElBQU0sWUFBWSxFQUFFLENBQUMsUUFBUSxFQUFFLEFBQUM7QUFDaEQsSUFBSSxJQUFJLEdBQUcsZUFBZSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDdkMsU0FBUyxFQUFFLElBQUk7SUFDZixhQUFhLEVBQUUsY0FBYztJQUM3QixhQUFhLEVBQUUsY0FBYztJQUM3QixTQUFTLEVBQUUsVUFBVTtJQUNyQixVQUFVLEVBQUUsV0FBVztJQUN2QixpQkFBaUIsRUFBRSxrQkFBa0I7SUFDckMsV0FBVyxFQUFFLFlBQVk7SUFDekIsT0FBTyxFQUFFLFFBQVE7SUFDakIsS0FBSyxFQUFFLE1BQU07SUFDYixFQUFFLEVBQUUsR0FBRztJQUNQLFNBQVMsRUFBRSxVQUFVO0lBQ3JCLE9BQU8sRUFBRSxRQUFRO0lBQ2pCLE9BQU8sRUFBRSxRQUFRO0lBQ2pCLE9BQU8sRUFBRSxRQUFRO0lBQ2pCLE9BQU8sRUFBRSxRQUFRO0lBQ2pCLFNBQVMsRUFBRSxVQUFVO0lBQ3JCLFNBQVMsRUFBRSxVQUFVO0lBQ3JCLFNBQVMsRUFBRSxVQUFVO0lBQ3JCLFVBQVUsRUFBRSxXQUFXO0lBQ3ZCLE9BQU8sRUFBRSxRQUFRO0lBQ2pCLFlBQVksRUFBRSxhQUFhO0lBQzNCLE9BQU8sRUFBRSxRQUFRO0lBQ2pCLE1BQU0sRUFBRSxPQUFPO0lBQ2YsVUFBVSxFQUFFLFdBQVc7SUFDdkIsUUFBUSxFQUFFLFNBQVM7SUFDbkIsT0FBTyxFQUFFLFFBQVE7SUFDakIsUUFBUSxFQUFFLFNBQVM7SUFDbkIsSUFBSSxVQUFVLElBQUc7UUFDZixPQUFPLFdBQVcsQ0FBQztLQUNwQjtJQUNELFNBQVMsRUFBRSxVQUFVO0lBQ3JCLFFBQVEsRUFBRSxTQUFTO0lBQ25CLHFCQUFxQixFQUFFLHNCQUFzQjtJQUM3QyxlQUFlLEVBQUUsZ0JBQWdCO0lBQ2pDLFFBQVEsRUFBRSxTQUFTO0lBQ25CLFNBQVMsRUFBRSxVQUFVO0lBQ3JCLE1BQU0sRUFBRSxPQUFPO0lBQ2YsTUFBTSxFQUFFLE9BQU87SUFDZixXQUFXLEVBQUUsWUFBWTtJQUN6QixPQUFPLEVBQUUsUUFBUTtJQUNqQixVQUFVLEVBQUUsV0FBVztJQUN2QixPQUFPLEVBQUUsUUFBUTtJQUNqQixhQUFhLEVBQUUsY0FBYztJQUM3QixVQUFVLEVBQUUsV0FBVztJQUN2QixVQUFVLEVBQUUsV0FBVztJQUN2QixjQUFjLEVBQUUsV0FBVztJQUMzQixXQUFXLEVBQUUsWUFBWTtJQUN6QixXQUFXLEVBQUUsWUFBWTtJQUN6QixVQUFVLEVBQUUsV0FBVztJQUN2QixNQUFNLEVBQUUsT0FBTztJQUNmLE1BQU0sRUFBRSxPQUFPO0lBQ2YsTUFBTSxFQUFFLFFBQVE7SUFDaEIsU0FBUyxFQUFFLFFBQVE7SUFDbkIsSUFBSSxFQUFFLEtBQUs7SUFDWCxJQUFJLHFCQUFxQixJQUFHO1FBQzFCLE9BQU8sc0JBQXNCLENBQUM7S0FDL0I7SUFDRCxHQUFHLEVBQUUsUUFBUTtJQUNiLEtBQUssRUFBRSxVQUFVO0lBQ2pCLE1BQU0sRUFBRSxXQUFXO0lBQ25CLE9BQU8sRUFBRSxZQUFZO0lBQ3JCLElBQUksRUFBRSxTQUFTO0lBQ2Ysa0JBQWtCLEVBQUUsdUJBQXVCO0lBQzNDLE1BQU0sRUFBRSxZQUFZO0lBQ3BCLElBQUksRUFBRSxTQUFTO0lBQ2YsUUFBUSxFQUFFLGFBQWE7SUFDdkIsVUFBVSxFQUFFLGVBQWU7SUFDM0IsWUFBWSxFQUFFLGlCQUFpQjtJQUMvQixJQUFJLEVBQUUsU0FBUztJQUNmLE9BQU8sRUFBRSxZQUFZO0lBQ3JCLEdBQUcsRUFBRSxRQUFRO0lBQ2IsR0FBRyxFQUFFLFFBQVE7SUFDYixVQUFVLEVBQUUsZUFBZTtJQUMzQixLQUFLLEVBQUUsVUFBVTtJQUNqQixJQUFJLEVBQUUsU0FBUztJQUNmLFFBQVEsRUFBRSxhQUFhO0lBQ3ZCLE1BQU0sRUFBRSxXQUFXO0lBQ25CLE1BQU0sRUFBRSxXQUFXO0lBQ25CLFFBQVEsRUFBRSxTQUFTO0lBQ25CLE9BQU8sRUFBRSxRQUFRO0lBQ2pCLFFBQVEsRUFBRSxhQUFhO0lBQ3ZCLE9BQU8sRUFBRSxRQUFRO0lBQ2pCLFVBQVUsRUFBRSxlQUFlO0lBQzNCLE9BQU8sRUFBRSxZQUFZO0lBQ3JCLE1BQU0sRUFBRSxXQUFXO0lBQ25CLEdBQUcsRUFBRSxRQUFRO0lBQ2IsWUFBWSxFQUFFLGlCQUFpQjtJQUMvQixNQUFNLEVBQUUsV0FBVztJQUNuQixXQUFXLEVBQUUsWUFBWTtJQUN6QixLQUFLLEVBQUUsVUFBVTtJQUNqQixTQUFTLEVBQUUsY0FBYztJQUN6QixLQUFLLEVBQUUsVUFBVTtJQUNqQixPQUFPLEVBQUUsWUFBWTtJQUNyQixJQUFJLEVBQUUsU0FBUztJQUNmLFlBQVksRUFBRSxhQUFhO0lBQzNCLGFBQWEsRUFBRSxjQUFjO0lBQzdCLFFBQVEsRUFBRSxTQUFTO0lBQ25CLGVBQWUsRUFBRSxnQkFBZ0I7SUFDakMsSUFBSSxnQkFBZ0IsSUFBRztRQUNyQixPQUFPLGlCQUFpQixDQUFDO0tBQzFCO0lBQ0QsV0FBVyxFQUFFLFlBQVk7Q0FDMUIsQ0FBQyxBQUFDO0FBQ0gsSUFBSSxnQkFBZ0IsR0FBRyxJQUFJLFVBQVUsQ0FBQztBQUFDLEtBQUM7Q0FBQyxDQUFDLEFBQUM7QUFDM0MsSUFBSSxpQkFBaUIsR0FBRyxJQUFJLFVBQVUsQ0FBQztBQUFDLEtBQUM7Q0FBQyxDQUFDLEFBQUM7QUFDNUMsSUFBSSxtQkFBbUIsR0FBRztJQUN4QixRQUFRO0lBQ1IsUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0lBQ1IsWUFBWTtJQUNaLFVBQVU7SUFDVixVQUFVO0lBQ1YsVUFBVTtJQUNWLFVBQVU7Q0FDWCxBQUFDO0FBQ0YsSUFBSSxxQkFBcUIsOEJBQThCLEFBQUM7QUFDeEQsSUFBSSxjQUFjLHdCQUF3QixBQUFDO0FBQzNDLElBQUksVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxHQUFLLEdBQUcsQ0FBQyxNQUFNLElBQUksRUFBRSxJQUFJLEdBQUcsQ0FBQyxNQUFNLElBQUksRUFBRSxFQUFFO0lBQ2pHLE9BQU8sRUFBRSxzRUFBc0U7Q0FDaEYsQ0FBQyxBQUFDO0FBQ0gsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEdBQUssR0FBRyxDQUFDLE1BQU0sSUFBSSxJQUFJLEdBQUcsSUFBSSxFQUFFO0lBQ3ZGLE9BQU8sRUFBRSw0RUFBNEU7Q0FDdEYsQ0FBQyxBQUFDO0FBQ0gsSUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUMsQUFBQztBQUMxRyxJQUFJLG9CQUFvQixHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEdBQUssbUJBQW1CLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFO0lBQzFGLE9BQU8sRUFBRSxDQUFDLHNEQUFzRCxFQUFFLG1CQUFtQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0NBQ2xHLENBQUMsQUFBQztBQUNILElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQUFBQztBQUM5RCxJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQzVCLGVBQWUsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUM5QyxLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7Q0FDckMsQ0FBQyxBQUFDO0FBQ0gsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsQUFBQztBQUNuRCxJQUFJLGlCQUFpQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDakMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ2pDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMscUJBQXFCLENBQUM7Q0FDM0MsQ0FBQyxBQUFDO0FBQ0gsSUFBSSxvQkFBb0IsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDO0lBQ3RCLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDO0lBQ3RCLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDO0lBQ3RCLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDO0lBQ3RCLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDO0lBQzFCLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDO0lBQ3hCLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDO0lBQ3hCLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDO0lBQ3hCLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDO0NBQ3pCLENBQUMsQUFBQztBQUNILElBQUksWUFBWSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDN0IsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNwQyxDQUFDLEVBQUUsb0JBQW9CO0lBQ3ZCLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLGlCQUFpQixDQUFDO0NBQ2pDLENBQUMsQUFBQztBQUNILElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQUFBQztBQUNuRSxJQUFJLGdCQUFnQixHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDakMsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUU7SUFDbkIsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztJQUMzQyxFQUFFLEVBQUUsWUFBWTtDQUNqQixDQUFDLEFBQUM7QUFDSCxJQUFJLFVBQVUsR0FBRyxRQUFRLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEFBQUM7QUFDNUMsSUFBSSxxQkFBcUIsR0FBRyxRQUFRLENBQUMsc0JBQXNCLEVBQUUsRUFBRSxDQUFDLENBQUMsQUFBQztBQUNsRSxJQUFJLFlBQVksR0FBRyxRQUFRLENBQUMsYUFBYSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEFBQUM7QUFDaEQsSUFBSSxhQUFhLEdBQUcsUUFBUSxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQUMsQ0FBQyxBQUFDO0FBQ2xELElBQUksY0FBYyxHQUFHLFFBQVEsQ0FBQyxlQUFlLEVBQUUsRUFBRSxDQUFDLENBQUMsQUFBQztBQUNwRCxJQUFJLGFBQWEsR0FBRyxRQUFRLENBQUMsY0FBYyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEFBQUM7QUFDbEQsSUFBSSxhQUFhLEdBQUcsUUFBUSxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQUMsQ0FBQyxBQUFDO0FBQ2xELElBQUksaUJBQWlCLEdBQUcsUUFBUSxDQUFDLGtCQUFrQixFQUFFLEVBQUUsQ0FBQyxDQUFDLEFBQUM7QUFDMUQsSUFBSSxXQUFXLEdBQUcsUUFBUSxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsQ0FBQyxBQUFDO0FBQzlDLFNBQVMsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUU7SUFDckIsT0FBTyxBQUFDLENBQUEsQ0FBQyxFQUFFLHFCQUFxQixDQUFDLEtBQUssQ0FBQSxDQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztDQUMvQztBQUNELFNBQVMsTUFBTSxDQUFDLEdBQUcsTUFBTSxFQUFFO0lBQ3pCLE9BQU8sQUFBQyxDQUFBLENBQUMsRUFBRSxZQUFZLENBQUMsTUFBTSxDQUFBLElBQUssTUFBTSxDQUFDLENBQUM7Q0FDNUM7QUFDRCxTQUFTLFNBQVMsQ0FBQyxFQUFFLEVBQUU7SUFDckIsT0FBTyxBQUFDLENBQUEsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxNQUFNLENBQUEsQ0FBRSxFQUFFLENBQUMsQ0FBQztDQUNuQztBQUNELFNBQVMsU0FBUyxDQUFDLENBQUMsRUFBRTtJQUNwQixPQUFPLEFBQUMsQ0FBQSxDQUFDLEVBQUUsVUFBVSxDQUFDLE1BQU0sQ0FBQSxDQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztDQUN4QztBQUNELFNBQVMsVUFBVSxDQUFDLENBQUMsRUFBRTtJQUNyQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztDQUMvQjtBQUNELFNBQVMsTUFBTSxDQUFDLElBQUksRUFBRTtJQUNwQixPQUFPLEFBQUMsQ0FBQSxDQUFDLEVBQUUsYUFBYSxDQUFDLElBQUksQ0FBQSxDQUFFLElBQUksQ0FBQyxDQUFDO0NBQ3RDO0FBQ0QsU0FBUyxNQUFNLENBQUMsSUFBSSxFQUFFO0lBQ3BCLE9BQU8sQUFBQyxDQUFBLENBQUMsRUFBRSxjQUFjLENBQUMsSUFBSSxDQUFBLENBQUUsSUFBSSxDQUFDLENBQUM7Q0FDdkM7QUFDRCxTQUFTLE1BQU0sQ0FBQyxJQUFJLEVBQUU7SUFDcEIsT0FBTyxBQUFDLENBQUEsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUEsQ0FBRSxJQUFJLENBQUMsQ0FBQztDQUN0QztBQUNELFNBQVMsTUFBTSxDQUFDLElBQUksRUFBRTtJQUNwQixPQUFPLEFBQUMsQ0FBQSxDQUFDLEVBQUUsYUFBYSxDQUFDLElBQUksQ0FBQSxDQUFFLElBQUksQ0FBQyxDQUFDO0NBQ3RDO0FBQ0QsU0FBUyxVQUFVLENBQUMsSUFBSSxFQUFFO0lBQ3hCLE9BQU8sQUFBQyxDQUFBLENBQUMsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJLENBQUEsQ0FBRSxJQUFJLENBQUMsQ0FBQztDQUMxQztBQUNELFNBQVMsUUFBUSxDQUFDLElBQUksRUFBRTtJQUN0QixPQUFPLEFBQUMsQ0FBQSxDQUFDLEVBQUUsV0FBVyxDQUFDLE9BQU8sQ0FBQSxDQUFFLElBQUksQ0FBQyxDQUFDO0NBQ3ZDO0FBQ0QsU0FBUyxRQUFRLENBQUMsSUFBSSxFQUFFO0lBQ3RCLE9BQU8sQUFBQyxDQUFBLENBQUMsRUFBRSxXQUFXLENBQUMsT0FBTyxDQUFBLENBQUUsSUFBSSxDQUFDLENBQUM7Q0FDdkM7QUFDRCxTQUFTLFFBQVEsQ0FBQyxJQUFJLEVBQUU7SUFDdEIsT0FBTyxBQUFDLENBQUEsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxPQUFPLENBQUEsQ0FBRSxJQUFJLENBQUMsQ0FBQztDQUN2QztBQUNELFNBQVMsUUFBUSxDQUFDLElBQUksRUFBRTtJQUN0QixPQUFPLEFBQUMsQ0FBQSxDQUFDLEVBQUUsV0FBVyxDQUFDLE9BQU8sQ0FBQSxDQUFFLElBQUksQ0FBQyxDQUFDO0NBQ3ZDO0FBQ0QsU0FBUyxVQUFVLENBQUMsUUFBUSxFQUFFO0lBQzVCLFFBQVEsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDekIsTUFBTSxLQUFLLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQyxBQUFDO0lBQ2xDLFdBQVcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDekIsT0FBTyxLQUFLLENBQUM7Q0FDZDtBQUNELFNBQVMsYUFBYSxDQUFDLFFBQVEsRUFBRTtJQUMvQixZQUFZLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzdCLE1BQU0sMEJBQTBCLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxBQUFDO0lBQy9ELEtBQUssTUFBTSxLQUFLLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBRTtRQUM5QixJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxLQUFLLDBCQUEwQixFQUFFO1lBQ3RELE1BQU0sSUFBSSxLQUFLLENBQUMsaURBQWlELENBQUMsQ0FBQztTQUNwRTtLQUNGO0lBQ0QsTUFBTSxXQUFXLEdBQUcsUUFBUSxDQUFDLENBQUMsQUFBQztJQUMvQixNQUFNLEtBQUssR0FBRyxJQUFJLFVBQVUsQ0FBQyxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLDBCQUEwQixDQUFDLENBQUMsQUFBQztJQUNwRixJQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBRTtRQUMzQyxNQUFNLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsQUFBQztRQUNyQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLDBCQUEwQixDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDcEQsS0FBSyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLDBCQUEwQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7S0FDdEU7SUFDRCxXQUFXLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3pCLE9BQU8sS0FBSyxDQUFDO0NBQ2Q7QUFDRCxTQUFTLE1BQU0sQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUU7SUFDL0MsVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN2QixXQUFXLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3pCLFlBQVksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDakMsTUFBTSxjQUFjLEdBQUcsWUFBWSxDQUFDLElBQUksVUFBVSxDQUFDO0FBQUMsU0FBQztLQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQUFBQztJQUNoRSxJQUFJLE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDN0MsT0FBTyxJQUFJLENBQUM7S0FDYjtJQUNELElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxjQUFjLEVBQUU7UUFDbEMsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUNELE1BQU0sbUJBQW1CLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEFBQUM7SUFDNUMsSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLG1CQUFtQixLQUFLLENBQUMsRUFBRTtRQUM1QyxPQUFPLEtBQUssQ0FBQztLQUNkO0lBQ0QsSUFBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLG1CQUFtQixDQUFFO1FBQzFELE1BQU0sZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxtQkFBbUIsQ0FBQyxBQUFDO1FBQ3hFLE1BQU0sTUFBTSxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsZ0JBQWdCLEdBQUcsaUJBQWlCLEFBQUM7UUFDOUQsSUFBSSxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDakk7SUFDRCxPQUFPLE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7Q0FDNUI7QUFDRCxTQUFTLHlCQUF5QixDQUFDLElBQUksRUFBRSxNQUFNLEVBQUU7SUFDL0MsS0FBSyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUU7UUFDcEIsSUFBSSxDQUFDLENBQUMsTUFBTSxLQUFLLE1BQU0sRUFBRTtZQUN2QixNQUFNLElBQUksS0FBSyxDQUFDLHVGQUF1RixDQUFDLENBQUM7U0FDMUc7S0FDRjtDQUNGO0FBQ0QsU0FBUyxRQUFRLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRTtJQUNsQyxJQUFJLE9BQU8sRUFBRTtRQUNYLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDeEI7Q0FDRjtBQUNELFNBQVMsZUFBZSxDQUFDLFFBQVEsRUFBRTtJQUNqQyxJQUFJO1FBQ0Ysb0JBQW9CLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ3RDLENBQUMsT0FBTyxLQUFLLEVBQUU7UUFDZCxJQUFJLEtBQUssWUFBWSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2xDLE1BQU0sSUFBSSxLQUFLLENBQUMsQ0FBQyw2QkFBNkIsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUM5RDtLQUNGO0lBQ0QsSUFBSSxpQkFBaUIsQUFBQztJQUN0QixPQUFRLFFBQVE7UUFDZCxLQUFLLFFBQVE7WUFDWCxpQkFBaUIsR0FBRyxNQUFNLENBQUM7WUFDM0IsTUFBTTtRQUNSLEtBQUssUUFBUTtZQUNYLGlCQUFpQixHQUFHLE1BQU0sQ0FBQztZQUMzQixNQUFNO1FBQ1IsS0FBSyxRQUFRO1lBQ1gsaUJBQWlCLEdBQUcsTUFBTSxDQUFDO1lBQzNCLE1BQU07UUFDUixLQUFLLFFBQVE7WUFDWCxpQkFBaUIsR0FBRyxNQUFNLENBQUM7WUFDM0IsTUFBTTtRQUNSLEtBQUssWUFBWTtZQUNmLGlCQUFpQixHQUFHLFVBQVUsQ0FBQztZQUMvQixNQUFNO1FBQ1IsS0FBSyxVQUFVO1lBQ2IsaUJBQWlCLEdBQUcsUUFBUSxDQUFDO1lBQzdCLE1BQU07UUFDUixLQUFLLFVBQVU7WUFDYixpQkFBaUIsR0FBRyxRQUFRLENBQUM7WUFDN0IsTUFBTTtRQUNSLEtBQUssVUFBVTtZQUNiLGlCQUFpQixHQUFHLFFBQVEsQ0FBQztZQUM3QixNQUFNO1FBQ1IsS0FBSyxVQUFVO1lBQ2IsaUJBQWlCLEdBQUcsUUFBUSxDQUFDO1lBQzdCLE1BQU07UUFDUjtZQUNFLE1BQU0sSUFBSSxLQUFLLENBQUMsQ0FBQyw0QkFBNEIsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDOUQ7SUFDRCxZQUFZLENBQUMsS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDdEMsT0FBTyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUM7UUFDNUIsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUsaUJBQWlCLENBQUMsSUFBSSxVQUFVLENBQUM7QUFBQyxhQUFDO1NBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTTtRQUNyRCxFQUFFLEVBQUUsaUJBQWlCO0tBQ3RCLENBQUMsQ0FBQztDQUNKO0FBQ0QsSUFBSSxJQUFJLEdBQUc7SUFDVCxZQUFZLElBQUksRUFBRSxRQUFRLEdBQUcsUUFBUSxFQUFFLE9BQU8sR0FBRztRQUMvQyxlQUFlLEVBQUUsS0FBSztRQUN0QixLQUFLLEVBQUUsS0FBSztLQUNiLENBQUU7UUFDRCxhQUFhLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzVCLGFBQWEsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2hDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFDcEMsYUFBYSxDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQztRQUNoQyxhQUFhLENBQUMsSUFBSSxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQ2xDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDN0IsYUFBYSxDQUFDLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBQ3ZDLElBQUksRUFBRSxFQUFFLEVBQUUsQUFBQztRQUNYLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckIsV0FBVyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMzQixNQUFNLFlBQVksR0FBRyxlQUFlLENBQUMsUUFBUSxDQUFDLEFBQUM7UUFDL0MsSUFBSSxDQUFDLFFBQVEsR0FBRyxZQUFZLENBQUMsSUFBSSxDQUFDO1FBQ2xDLElBQUksQ0FBQyxVQUFVLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQztRQUN0QyxJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQyxFQUFFLENBQUM7UUFDcEMsSUFBSSxDQUFDLGVBQWUsR0FBRyxDQUFDLEVBQUUsR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLElBQUksSUFBSSxHQUFHLEVBQUUsR0FBRyxLQUFLLENBQUM7UUFDM0UsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLEVBQUUsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxHQUFHLEVBQUUsR0FBRyxLQUFLLENBQUM7UUFDdkQsSUFBSSxJQUFJLENBQUMsZUFBZSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUNwRCxNQUFNLElBQUksS0FBSyxDQUFDLHlGQUF5RixDQUFDLENBQUM7U0FDNUc7UUFDRCx5QkFBeUIsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3RCLFFBQVEsQ0FBQyxDQUFDLHFCQUFxQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN4RSxRQUFRLENBQUMsQ0FBQyw0QkFBNEIsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZGLFFBQVEsQ0FBQyxDQUFDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDeEU7SUFDRCxJQUFJLEdBQUc7UUFDTCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxBQUFDO1FBQ2hELE9BQU8sVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUMvQjtJQUNELE1BQU0sR0FBRztRQUNQLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0tBQzdCO0lBQ0QsS0FBSyxDQUFDLFFBQVEsRUFBRTtRQUNkLElBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBRTtZQUN6QyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxFQUFFO2dCQUNuQyxRQUFRLENBQUMsQ0FBQyxzQkFBc0IsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQzFFLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUM5QjtTQUNGO1FBQ0QsTUFBTSxJQUFJLEtBQUssQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO0tBQzdDO0lBQ0QsUUFBUSxDQUFDLFFBQVEsRUFBRTtRQUNqQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxBQUFDO1FBQ25DLE1BQU0sUUFBUSxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsQUFBQztRQUNsQyxPQUFPLFFBQVEsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDakM7SUFDRCxXQUFXLENBQUMsUUFBUSxFQUFFO1FBQ3BCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEFBQUM7UUFDbkMsTUFBTSxzQkFBc0IsR0FBRyxJQUFJLENBQUMsVUFBVSxHQUFHLENBQUMsQUFBQztRQUNuRCxNQUFNLFdBQVcsR0FBRyxLQUFLLENBQUMsVUFBVSxBQUFDO1FBQ3JDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQUFBQztRQUN2QixJQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsV0FBVyxFQUFFLENBQUMsSUFBSSxzQkFBc0IsQ0FBRTtZQUM1RCxNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEFBQUM7WUFDdkMsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxzQkFBc0IsQ0FBQyxBQUFDO1lBQy9ELFdBQVcsQ0FBQyxJQUFJLENBQUM7Z0JBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLENBQUM7Z0JBQUUsU0FBUyxDQUFDLElBQUksQ0FBQzthQUFDLENBQUMsQ0FBQztTQUNyRTtRQUNELE9BQU8sWUFBWSxDQUFDLEtBQUssQ0FBQztZQUN4QixDQUFDLEVBQUUsQ0FBQztZQUNKLENBQUMsRUFBRSxJQUFJLENBQUMsUUFBUTtZQUNoQixDQUFDLEVBQUUsV0FBVztTQUNmLENBQUMsQ0FBQztLQUNKO0lBQ0QsT0FBTyxNQUFNLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFO1FBQ3pDLE1BQU0sV0FBVyxHQUFHLFdBQVcsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEFBQUM7UUFDakQsSUFBSSxXQUFXLENBQUMsT0FBTyxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQ2IsTUFBTSxJQUFJLEtBQUssQ0FBQyxtR0FBbUcsQ0FBQyxDQUFDO2FBQ3RIO1lBQ0QsTUFBTSxZQUFZLEdBQUcsZUFBZSxDQUFDLFFBQVEsQ0FBQyxBQUFDO1lBQy9DLE9BQU8sTUFBTSxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDOUQ7UUFDRCxNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxBQUFDO1FBQzNDLElBQUksUUFBUSxDQUFDLE9BQU8sRUFBRTtZQUNwQixJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUNiLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0dBQWdHLENBQUMsQ0FBQzthQUNuSDtZQUNELE1BQU0sYUFBWSxHQUFHLGVBQWUsQ0FBQyxRQUFRLENBQUMsQUFBQztZQUMvQyxPQUFPLE1BQU0sQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsYUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ3ZFO1FBQ0QsTUFBTSxXQUFXLEdBQUcsWUFBWSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQUFBQztRQUNsRCxJQUFJLFdBQVcsQ0FBQyxPQUFPLEVBQUU7WUFDdkIsTUFBTSxhQUFZLEdBQUcsZUFBZSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEFBQUM7WUFDekQsT0FBTyxNQUFNLENBQUMsSUFBSSxFQUFFLGFBQWEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLGFBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUM3RTtRQUNELE1BQU0sSUFBSSxLQUFLLENBQUMscUNBQXFDLENBQUMsQ0FBQztLQUN4RDtJQUNELEtBQUssQ0FBQyxJQUFJLEVBQUUsTUFBTSxHQUFHLElBQUksRUFBRTtRQUN6QixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyQixJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUNuQixPQUFPO1FBQ1QsTUFBTSxRQUFRLEdBQUcsRUFBRSxBQUFDO1FBQ3BCLElBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUU7WUFDdkMsTUFBTSxNQUFNLEdBQUcsTUFBTSxHQUFHLGdCQUFnQixHQUFHLGlCQUFpQixBQUFDO1lBQzdELE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQUFBQztZQUNuQixNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsQUFBQztZQUM3QixRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2xFO1FBQ0QsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7S0FDN0I7SUFDRCxhQUFhLENBQUMsQ0FBQyxFQUFFO1FBQ2YsSUFBSSxFQUFFLEFBQUM7UUFDUCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLEFBQUM7UUFDN0IsSUFBSSxLQUFLLEdBQUcsQ0FBQyxBQUFDO1FBQ2QsSUFBSSxrQkFBa0IsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQUFBQztRQUMzQyxJQUFJLEtBQUssR0FBRyxDQUFDLEdBQUcsa0JBQWtCLEFBQUM7UUFDbkMsUUFBUSxDQUFDLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDLHNCQUFzQixFQUFFLGtCQUFrQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMxRyxNQUFNLEtBQUssR0FBRyxFQUFFLEFBQUM7UUFDakIsTUFBTyxLQUFLLEdBQUcsTUFBTSxDQUFFO1lBQ3JCLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQUFBQztZQUM1QyxRQUFRLENBQUMsQ0FBQyxxQ0FBcUMsRUFBRSxLQUFLLENBQUMscUJBQXFCLEVBQUUsa0JBQWtCLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2hJLE1BQU0sWUFBWSxHQUFHLGtCQUFrQixHQUFHLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLGtCQUFrQixDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksR0FBRyxFQUFFLEdBQUcsa0JBQWtCLENBQUMsS0FBSyxDQUFDLEFBQUM7WUFDcEosS0FBSyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1lBQy9CLEtBQUssTUFBTSxJQUFJLElBQUksWUFBWSxDQUFFO2dCQUMvQixLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ2xCO1lBQ0Qsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQy9DLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBRyxrQkFBa0IsQ0FBQztZQUNuRCxRQUFRLENBQUMsQ0FBQyxvQ0FBb0MsRUFBRSxLQUFLLENBQUMscUJBQXFCLEVBQUUsa0JBQWtCLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQy9ILEtBQUssRUFBRSxDQUFDO1NBQ1Q7UUFDRCxRQUFRLENBQUMsQ0FBQywyQkFBMkIsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUUsTUFBTSxlQUFlLEdBQUcsSUFBSSxVQUFVLENBQUMsS0FBSyxDQUFDLEFBQUM7UUFDOUMsT0FBTyxXQUFXLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0tBQzNDO0NBQ0YsQUFBQztBQUNGLElBQUksV0FBVyxHQUFHLE9BQU8sQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUMsQUFBQztBQUM3QyxJQUFJLGNBQWMsR0FBRyxPQUFPLENBQUMsY0FBYyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEFBQUM7QUFDbEQsSUFBSSxlQUFlLEdBQUcsT0FBTyxDQUFDLGVBQWUsRUFBRSxFQUFFLENBQUMsQ0FBQyxBQUFDO0FBQ3BELFNBQVMsUUFBUSxDQUFDLEdBQUcsRUFBRTtJQUNyQixPQUFPLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxHQUFHLEdBQUcsQ0FBQztDQUM3QjtBQUNELFNBQVMsUUFBUSxDQUFDLE1BQU0sRUFBRTtJQUN4QixJQUFJLE1BQU0sS0FBSyxJQUFJLElBQUksT0FBTyxNQUFNLEtBQUssV0FBVyxJQUFJLE9BQU8sTUFBTSxLQUFLLFNBQVMsSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRLElBQUksT0FBTyxNQUFNLEtBQUssUUFBUSxFQUFFO1FBQy9JLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUMvQjtJQUNELElBQUksT0FBTyxNQUFNLEtBQUssUUFBUSxFQUFFO1FBQzlCLE1BQU0sSUFBSSxTQUFTLENBQUMsMENBQTBDLENBQUMsQ0FBQztLQUNqRTtJQUNELElBQUksT0FBTyxNQUFNLEtBQUssVUFBVSxJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsRUFBRTtRQUM5RCxPQUFPLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0tBQ3pCO0lBQ0QsSUFBSSxNQUFNLENBQUMsTUFBTSxZQUFZLFFBQVEsRUFBRTtRQUNyQyxPQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztLQUNsQztJQUNELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUN6QixNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUs7WUFDM0MsTUFBTSxLQUFLLEdBQUcsRUFBRSxLQUFLLEtBQUssQ0FBQyxJQUFJLE9BQU8sRUFBRSxLQUFLLFFBQVEsSUFBSSxPQUFPLEVBQUUsS0FBSyxVQUFVLEdBQUcsSUFBSSxHQUFHLEVBQUUsQUFBQztZQUM5RixPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2hELEVBQUUsRUFBRSxDQUFDLEFBQUM7UUFDUCxPQUFPLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUN2QjtJQUNELE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBSztRQUMxRCxJQUFJLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxLQUFLLENBQUMsSUFBSSxPQUFPLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxRQUFRLElBQUksT0FBTyxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssVUFBVSxFQUFFO1lBQy9GLE9BQU8sQ0FBQyxDQUFDO1NBQ1Y7UUFDRCxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQzNFLEVBQUUsRUFBRSxDQUFDLEFBQUM7SUFDUCxPQUFPLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUN0QjtBQUNELElBQUksY0FBYyxHQUFHLE9BQU8sQ0FBQyxlQUFlLEVBQUUsRUFBRSxDQUFDLENBQUMsQUFBQztBQUNuRCxJQUFJLHFCQUFxQixHQUFHLE9BQU8sQ0FBQyxzQkFBc0IsRUFBRSxFQUFFLENBQUMsQ0FBQyxBQUFDO0FBQ2pFLElBQUksV0FBVyxHQUFHLE9BQU8sQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUMsQUFBQztBQUM3QyxJQUFJLGNBQWMsR0FBRyxPQUFPLENBQUMsY0FBYyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEFBQUM7QUFDbEQsSUFBSSxjQUFjLEdBQUcsT0FBTyxDQUFDLGVBQWUsRUFBRSxFQUFFLENBQUMsQ0FBQyxBQUFDO0FBQ25ELElBQUkseUJBQXlCLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixFQUFFLEVBQUUsQ0FBQyxDQUFDLEFBQUM7QUFDL0QsSUFBSSx1QkFBdUIsR0FBRywrQkFBK0IsQUFBQztBQUM5RCxJQUFJLG1CQUFtQixHQUFHLDRCQUE0QixBQUFDO0FBQ3ZELElBQUksa0JBQWtCLEdBQUc7SUFDdkI7UUFDRSxNQUFNLEVBQUUsVUFBVTtRQUNsQixJQUFJLEVBQUUsU0FBUztRQUNmLFNBQVMsRUFBRSw4Q0FBOEM7UUFDekQsV0FBVyxFQUFFLGFBQWE7UUFDMUIsT0FBTyxFQUFFLEtBQUs7UUFDZCxhQUFhLEVBQUUsMEZBQTBGO0tBQzFHO0lBQ0Q7UUFDRSxNQUFNLEVBQUUsVUFBVTtRQUNsQixJQUFJLEVBQUUsU0FBUztRQUNmLFNBQVMsRUFBRSw4Q0FBOEM7UUFDekQsV0FBVyxFQUFFLFNBQVM7UUFDdEIsT0FBTyxFQUFFLEtBQUs7UUFDZCxhQUFhLEVBQUUsMEZBQTBGO0tBQzFHO0lBQ0Q7UUFDRSxNQUFNLEVBQUUsVUFBVTtRQUNsQixJQUFJLEVBQUUsU0FBUztRQUNmLFNBQVMsRUFBRSw4Q0FBOEM7UUFDekQsV0FBVyxFQUFFLFlBQVk7UUFDekIsT0FBTyxFQUFFLEtBQUs7UUFDZCxhQUFhLEVBQUUsMEZBQTBGO0tBQzFHO0NBQ0YsQUFBQztBQUNGLGVBQWUsa0JBQWtCLENBQUMsSUFBSSxFQUFFO0lBQ3RDLElBQUk7UUFDRixNQUFNLFVBQVUsR0FBRyxDQUFDLEVBQUUsdUJBQXVCLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDLEFBQUM7UUFDN0QsTUFBTSxXQUFXLEdBQUcsTUFBTSxBQUFDLENBQUEsQ0FBQyxFQUFFLHlCQUF5QixDQUFDLE9BQU8sQ0FBQSxDQUFFLFVBQVUsQ0FBQyxBQUFDO1FBQzdFLElBQUksV0FBVyxDQUFDLEVBQUUsRUFBRTtZQUNsQixPQUFPLGVBQWUsQ0FBQyxLQUFLLENBQUMsTUFBTSxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztTQUN4RDtLQUNGLENBQUMsT0FBTyxLQUFLLEVBQUUsRUFDZjtJQUNELE9BQU8sS0FBSyxDQUFDLENBQUM7Q0FDZjtBQUNELFNBQVMsMEJBQTBCLENBQUMsU0FBUyxFQUFFO0lBQzdDLE1BQU0scUJBQXFCLEdBQUcsT0FBTyxTQUFTLEtBQUssUUFBUSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxTQUFTLEFBQUM7SUFDNUYsTUFBTSxxQkFBcUIsR0FBRyxNQUFNLENBQUMscUJBQXFCLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEFBQUM7SUFDMUUsT0FBTyxRQUFRLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO0NBQy9FO0FBQ0QsU0FBUyxxQkFBcUIsQ0FBQyxTQUFTLEVBQUU7SUFDeEMsT0FBTyxBQUFDLENBQUEsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxNQUFNLENBQUEsQ0FBRSxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0NBQzdFO0FBQ0QsZUFBZSxjQUFjLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRTtJQUMxQyxNQUFNLGlCQUFpQixHQUFHLFVBQVUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEFBQUM7SUFDckQsSUFBSSxpQkFBaUIsQ0FBQyxPQUFPLEVBQUU7UUFDN0IsT0FBTyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxHQUFLLEdBQUcsQ0FBQyxNQUFNLEtBQUssTUFBTSxDQUFDLENBQUM7S0FDcEU7SUFDRCxJQUFJO1FBQ0YsTUFBTSxRQUFRLEdBQUcsTUFBTSxLQUFLLENBQUMsQ0FBQyxFQUFFLG1CQUFtQixDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLEFBQUM7UUFDakUsSUFBSSxRQUFRLENBQUMsRUFBRSxFQUFFO1lBQ2YsT0FBTyxTQUFTLENBQUMsS0FBSyxDQUFDLE1BQU0sUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7U0FDL0M7UUFDRCxPQUFPLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsR0FBSyxHQUFHLENBQUMsTUFBTSxLQUFLLE1BQU0sQ0FBQyxDQUFDO0tBQ2hFLENBQUMsT0FBTyxLQUFLLEVBQUU7UUFDZCxPQUFPLEtBQUssQ0FBQyxDQUFDO0tBQ2Y7Q0FDRjtBQUNELGVBQWUsOEJBQThCLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRTtJQUM3RCxJQUFJO1FBQ0YsTUFBTSxNQUFNLEdBQUcscUJBQXFCLENBQUMsU0FBUyxDQUFDLEFBQUM7UUFDaEQsSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLEFBQUM7UUFDakIsR0FBRyxHQUFHLE1BQU0sY0FBYyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN6QyxJQUFJLEdBQUcsS0FBSyxLQUFLLENBQUMsRUFBRTtZQUNsQixPQUFPLEtBQUssQ0FBQztTQUNkO1FBQ0QsTUFBTSxjQUFjLEdBQUcsQUFBQyxDQUFBLENBQUMsRUFBRSxjQUFjLENBQUMsTUFBTSxDQUFBLENBQUUsR0FBRyxDQUFDLFNBQVMsQ0FBQyxBQUFDO1FBQ2pFLElBQUksQ0FBQyxBQUFDLENBQUEsQ0FBQyxFQUFFLHFCQUFxQixDQUFDLEtBQUssQ0FBQSxDQUFFLGNBQWMsRUFBRSxTQUFTLENBQUMsRUFBRTtZQUNoRSxPQUFPLEtBQUssQ0FBQztTQUNkO1FBQ0QsSUFBSSxNQUFNLEtBQUsscUJBQXFCLENBQUMsY0FBYyxDQUFDLElBQUksTUFBTSxLQUFLLEdBQUcsQ0FBQyxNQUFNLEVBQUU7WUFDN0UsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUNELE1BQU0scUJBQXFCLEdBQUcsQUFBQyxDQUFBLENBQUMsRUFBRSxjQUFjLENBQUMsTUFBTSxDQUFBLENBQUUsR0FBRyxDQUFDLGFBQWEsQ0FBQyxBQUFDO1FBQzVFLE1BQU0sV0FBVyxHQUFHO1lBQ2xCLFdBQVcsRUFBRSxHQUFHLENBQUMsV0FBVztZQUM1QixPQUFPLEVBQUUsR0FBRyxDQUFDLE9BQU87WUFDcEIsTUFBTSxFQUFFLEdBQUcsQ0FBQyxNQUFNO1lBQ2xCLFNBQVMsRUFBRSxHQUFHLENBQUMsU0FBUztZQUN4QixJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUk7U0FDZixBQUFDO1FBQ0YsTUFBTSwwQkFBMEIsR0FBRyx1QkFBdUIsQ0FBQyxXQUFXLENBQUMsQUFBQztRQUN4RSxNQUFNLDBCQUEwQixHQUFHLEFBQUMsQ0FBQSxDQUFDLEVBQUUsY0FBYyxDQUFDLE1BQU0sQ0FBQSxDQUFFLGNBQWMsRUFBRSwwQkFBMEIsQ0FBQyxJQUFJLEVBQUUscUJBQXFCLENBQUMsQUFBQztRQUN0SSxJQUFJLENBQUMsMEJBQTBCLEVBQUU7WUFDL0IsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUNELE9BQU8sSUFBSSxDQUFDO0tBQ2IsQ0FBQyxPQUFPLEtBQUssRUFBRTtRQUNkLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7Q0FDRjtBQUNELFNBQVMsdUJBQXVCLENBQUMsSUFBSSxFQUFFO0lBQ3JDLE1BQU0sYUFBYSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsQUFBQztJQUNyQyxNQUFNLHVCQUF1QixHQUFHLElBQUksV0FBVyxFQUFFLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxBQUFDO0lBQ3hFLE1BQU0sSUFBSSxHQUFHLEFBQUMsQ0FBQSxDQUFDLEVBQUUsY0FBYyxDQUFDLElBQUksQ0FBQSxDQUFFLHVCQUF1QixDQUFDLEFBQUM7SUFDL0QsTUFBTSxjQUFjLEdBQUcsSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLEFBQUM7SUFDNUMsTUFBTSxPQUFPLEdBQUcsQUFBQyxDQUFBLENBQUMsRUFBRSxXQUFXLENBQUMsTUFBTSxDQUFBLENBQUUsY0FBYyxFQUFFLElBQUksQ0FBQyxBQUFDO0lBQzlELE9BQU87UUFDTCxJQUFJLEVBQUUsY0FBYztRQUNwQixPQUFPO1FBQ1AsUUFBUSxFQUFFLFNBQVM7UUFDbkIsYUFBYTtLQUNkLENBQUM7Q0FDSDtBQUNELElBQUksV0FBVyxHQUFHLE9BQU8sQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUMsQUFBQztBQUM3QyxJQUFJLHFCQUFxQixHQUFHLE9BQU8sQ0FBQyxzQkFBc0IsRUFBRSxFQUFFLENBQUMsQ0FBQyxBQUFDO0FBQ2pFLElBQUksY0FBYyxHQUFHLE9BQU8sQ0FBQyxjQUFjLEVBQUUsRUFBRSxDQUFDLENBQUMsQUFBQztBQUNsRCxJQUFJLDBCQUEwQixHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLENBQUMsQ0FBQyxBQUFDO0FBQ2hFLElBQUksMEJBQTBCLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQztJQUMxQyxJQUFJLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssaUVBQWlFO0lBQ3pGLFNBQVMsRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFLLENBQUMsS0FBSyxNQUFNLEVBQUU7UUFBQyxPQUFPLEVBQUUsa0RBQWtEO0tBQUMsQ0FBQztJQUNsSCxNQUFNLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRTtJQUNwQixVQUFVLEVBQUUsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBSyxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQUMsT0FBTyxFQUFFLGdEQUFnRDtLQUFDLENBQUM7Q0FDakgsQ0FBQyxBQUFDO0FBQ0gsSUFBSSxxQkFBcUIsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDO0lBQ3JDLFNBQVMsRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFO0lBQ3ZCLFFBQVEsRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFO0NBQ3ZCLENBQUMsQUFBQztBQUNILGVBQWUsYUFBYSxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUU7SUFDN0MsTUFBTSxjQUFjLEdBQUcsT0FBTyxHQUFHLHFDQUFxQyxHQUFHLDZCQUE2QixBQUFDO0lBQ3ZHLE1BQU0sVUFBVSxHQUFHLENBQUMsRUFBRSxjQUFjLENBQUMsY0FBYyxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxBQUFDO0lBQ3BFLE1BQU0sV0FBVyxHQUFHLE1BQU0sQUFBQyxDQUFBLENBQUMsRUFBRSwwQkFBMEIsQ0FBQyxPQUFPLENBQUEsQ0FBRSxVQUFVLENBQUMsQUFBQztJQUM5RSxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsRUFBRTtRQUNuQixNQUFNLElBQUksS0FBSyxDQUFDLENBQUMsNENBQTRDLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsV0FBVyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUM1STtJQUNELE1BQU0sT0FBTyxHQUFHLE1BQU0sV0FBVyxDQUFDLElBQUksRUFBRSxBQUFDO0lBQ3pDLElBQUk7UUFDRiwwQkFBMEIsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDM0MsQ0FBQyxPQUFPLEtBQUssRUFBRTtRQUNkLElBQUksS0FBSyxZQUFZLEdBQUcsQ0FBQyxRQUFRLEVBQUU7WUFDakMsTUFBTSxZQUFZLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEdBQUs7Z0JBQy9DLE9BQU8sQ0FBQyxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQzthQUN4RSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxBQUFDO1lBQ2QsTUFBTSxJQUFJLEtBQUssQ0FBQyxDQUFDLDRDQUE0QyxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNuRyxNQUFNLElBQUksS0FBSyxZQUFZLEtBQUssRUFBRTtZQUNqQyxNQUFNLElBQUksS0FBSyxDQUFDLENBQUMsNENBQTRDLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNwRztLQUNGO0lBQ0QsTUFBTSxrQkFBa0IsR0FBRyxBQUFDLENBQUEsQ0FBQyxFQUFFLGNBQWMsQ0FBQyxNQUFNLENBQUEsQ0FBRSxPQUFPLENBQUMsSUFBSSxDQUFDLEFBQUM7SUFDcEUsSUFBSSxDQUFDLEFBQUMsQ0FBQSxDQUFDLEVBQUUscUJBQXFCLENBQUMsS0FBSyxDQUFBLENBQUUsa0JBQWtCLEVBQUUsQUFBQyxDQUFBLENBQUMsRUFBRSxXQUFXLENBQUMsTUFBTSxDQUFBLENBQUUsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUU7UUFDckcsTUFBTSxJQUFJLEtBQUssQ0FBQyxDQUFDLG1FQUFtRSxFQUFFLE9BQU8sQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsQUFBQyxDQUFBLENBQUMsRUFBRSxXQUFXLENBQUMsTUFBTSxDQUFBLENBQUUsa0JBQWtCLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyx3QkFBd0IsRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDaE87SUFDRCxJQUFJLE9BQU8sQ0FBQyxNQUFNLEtBQUssT0FBTyxDQUFDLE1BQU0sRUFBRTtRQUNyQyxNQUFNLElBQUksS0FBSyxDQUFDLENBQUMsOEZBQThGLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ25JO0lBQ0QsTUFBTSxVQUFVLEdBQUcsTUFBTSxBQUFDLENBQUEsQ0FBQyxFQUFFLDBCQUEwQixDQUFDLE9BQU8sQ0FBQSxDQUFFLENBQUMsRUFBRSxjQUFjLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEFBQUM7SUFDaEgsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLEVBQUU7UUFDbEIsTUFBTSxJQUFJLEtBQUssQ0FBQyxDQUFDLGtDQUFrQyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUN6RTtJQUNELE1BQU0sTUFBTSxHQUFHLE1BQU0sVUFBVSxDQUFDLElBQUksRUFBRSxBQUFDO0lBQ3ZDLElBQUk7UUFDRixxQkFBcUIsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDckMsQ0FBQyxPQUFPLE1BQUssRUFBRTtRQUNkLElBQUksTUFBSyxZQUFZLEdBQUcsQ0FBQyxRQUFRLEVBQUU7WUFDakMsTUFBTSxhQUFZLEdBQUcsTUFBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEdBQUs7Z0JBQy9DLE9BQU8sQ0FBQyxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQzthQUN4RSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxBQUFDO1lBQ2QsTUFBTSxJQUFJLEtBQUssQ0FBQyxDQUFDLGtDQUFrQyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLGFBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUMzRixNQUFNLElBQUksTUFBSyxZQUFZLEtBQUssRUFBRTtZQUNqQyxNQUFNLElBQUksS0FBSyxDQUFDLENBQUMsa0NBQWtDLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUM1RjtLQUNGO0lBQ0QsTUFBTSxZQUFZLEdBQUcsaUNBQWlDLEFBQUM7SUFDdkQsTUFBTSxXQUFXLEdBQUcsT0FBTyxHQUFHLFNBQVMsR0FBRyxRQUFRLEFBQUM7SUFDbkQsTUFBTSxRQUFRLEdBQUcsQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDLEVBQUUsV0FBVyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQUFBQztJQUNyRSxNQUFNLEVBQUUsR0FBRztRQUNULFFBQVEsRUFBRSxJQUFJO1FBQ2QsTUFBTSxFQUFFLFNBQVM7UUFDakIsV0FBVyxFQUFFLE9BQU87UUFDcEIsU0FBUyxFQUFFLE1BQU0sQ0FBQyxTQUFTO1FBQzNCLElBQUksRUFBRTtZQUNKLEtBQUssRUFBRTtnQkFBQyxRQUFRO2FBQUM7WUFDakIsT0FBTyxFQUFFO2dCQUFDLFVBQVU7YUFBQztTQUN0QjtLQUNGLEFBQUM7SUFDRixPQUFPLHVCQUF1QixDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztDQUMxQztBQUNELFNBQVMsaUNBQWlDLENBQUMsWUFBWSxFQUFFO0lBQ3ZELE9BQU87UUFDTCxRQUFRLEVBQUUsS0FBSztRQUNmLEtBQUssRUFBRSxDQUFDLHFCQUFxQixFQUFFLFlBQVksQ0FBQyxDQUFDO0tBQzlDLENBQUM7Q0FDSDtBQUNELGVBQWUsUUFBUSxDQUFDLFVBQVUsRUFBRSxJQUFJLEdBQUcsS0FBSyxDQUFDLEVBQUUsdUJBQXVCLEVBQUUsNkJBQTZCLEdBQUcsS0FBSyxFQUFFLG1DQUFtQyxHQUFHLEtBQUssRUFBRTtJQUM5SixJQUFJLEVBQUUsQUFBQztJQUNQLElBQUk7UUFDRixVQUFVLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzdCLE1BQU0sRUFBQyxjQUFjLENBQUEsRUFBRSx3QkFBd0IsQ0FBQSxFQUFDLEdBQUcsVUFBVSxBQUFDO1FBQzlELE1BQU0sRUFBQyxFQUFFLENBQUEsRUFBRSxRQUFRLENBQUEsRUFBRSxrQkFBa0IsQ0FBQSxFQUFFLFdBQVcsQ0FBQSxFQUFFLE1BQU0sQ0FBQSxFQUFFLFlBQVksQ0FBQSxFQUFDLEdBQUcsY0FBYyxBQUFDO1FBQzdGLE1BQU0sU0FBUyxHQUFHLGNBQWMsQ0FBQyxFQUFFLENBQUMsQUFBQztRQUNyQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2IsTUFBTSxJQUFJLEtBQUssQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO1NBQ3BEO1FBQ0QsTUFBTSxxQkFBcUIsR0FBRyx1QkFBdUIsQ0FBQyxRQUFRLENBQUMsQUFBQztRQUNoRSxJQUFJLENBQUMsNkJBQTZCLEVBQUU7WUFDbEMsS0FBSyxNQUFNLEdBQUcsSUFBSSxrQkFBa0IsSUFBSSxJQUFJLEdBQUcsa0JBQWtCLEdBQUcsRUFBRSxDQUFFO2dCQUN0RSxNQUFNLEVBQUMsU0FBUyxDQUFBLEVBQUUsU0FBUyxDQUFBLEVBQUMsR0FBRyxHQUFHLEFBQUM7Z0JBQ25DLE1BQU0sZ0JBQWdCLEdBQUcsQUFBQyxDQUFBLENBQUMsRUFBRSxjQUFjLENBQUMsTUFBTSxDQUFBLENBQUUsU0FBUyxDQUFDLEFBQUM7Z0JBQy9ELE1BQU0sbUJBQW1CLEdBQUcsQUFBQyxDQUFBLENBQUMsRUFBRSxlQUFlLENBQUMsTUFBTSxDQUFBLENBQUUsZ0JBQWdCLEVBQUUscUJBQXFCLENBQUMsSUFBSSxFQUFFLEFBQUMsQ0FBQSxDQUFDLEVBQUUsY0FBYyxDQUFDLE1BQU0sQ0FBQSxDQUFFLFNBQVMsQ0FBQyxDQUFDLEFBQUM7Z0JBQzdJLElBQUksQ0FBQyxtQkFBbUIsRUFBRTtvQkFDeEIsTUFBTSxJQUFJLEtBQUssQ0FBQyxDQUFDLHNEQUFzRCxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUN4RjthQUNGO1NBQ0Y7UUFDRCxNQUFNLGNBQWMsR0FBRyxFQUFFLEFBQUM7UUFDMUIsS0FBSyxNQUFNLE9BQU8sSUFBSSxRQUFRLElBQUksSUFBSSxHQUFHLFFBQVEsR0FBRyxFQUFFLENBQUU7WUFDdEQsTUFBTSxFQUFDLElBQUksQ0FBQSxFQUFFLFFBQVEsQ0FBQSxFQUFDLEdBQUcsT0FBTyxBQUFDO1lBQ2pDLElBQUksSUFBSSxLQUFLLEtBQUssQ0FBQyxFQUFFO2dCQUNuQixjQUFjLENBQUMsSUFBSSxDQUFDO29CQUFDLElBQUk7b0JBQUUsUUFBUTtpQkFBQyxDQUFDLENBQUM7YUFDdkM7U0FDRjtRQUNELE1BQU0sSUFBSSxHQUFHO1lBQ1gsUUFBUTtZQUNSLGtCQUFrQjtZQUNsQixXQUFXO1NBQ1osQUFBQztRQUNGLE1BQU0saUJBQWlCLEdBQUcsdUJBQXVCLENBQUMsSUFBSSxDQUFDLEFBQUM7UUFDeEQsSUFBSSwwQkFBMEIsR0FBRyxLQUFLLENBQUMsQUFBQztRQUN4QyxJQUFJLFdBQVcsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUcsV0FBVyxDQUFDLGlCQUFpQixFQUFFO1lBQ2hFLElBQUksT0FBTyxBQUFDO1lBQ1osSUFBSSx1QkFBdUIsRUFBRTtnQkFDM0IsT0FBTyxHQUFHLE1BQU0sdUJBQXVCLENBQUMsV0FBVyxJQUFJLElBQUksR0FBRyxLQUFLLENBQUMsR0FBRyxXQUFXLENBQUMsaUJBQWlCLENBQUMsQ0FBQzthQUN2RyxNQUFNO2dCQUNMLE9BQU8sR0FBRyxNQUFNLGtCQUFrQixDQUFDLFdBQVcsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUcsV0FBVyxDQUFDLGlCQUFpQixDQUFDLENBQUM7YUFDbEc7WUFDRCxJQUFJLE9BQU8sRUFBRTtnQkFDWCwwQkFBMEIsR0FBRyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7YUFDMUQ7U0FDRjtRQUNELE1BQU0sMkJBQTJCLEdBQUcsdUJBQXVCLENBQUMsY0FBYyxDQUFDLEFBQUM7UUFDNUUsSUFBSSxDQUFDLG1DQUFtQyxFQUFFO1lBQ3hDLEtBQUssTUFBTSxJQUFHLElBQUksd0JBQXdCLENBQUU7Z0JBQzFDLE1BQU0sRUFBQyxTQUFTLEVBQVQsVUFBUyxDQUFBLEVBQUUsU0FBUyxFQUFULFVBQVMsQ0FBQSxFQUFDLEdBQUcsSUFBRyxBQUFDO2dCQUNuQyxNQUFNLGlCQUFnQixHQUFHLEFBQUMsQ0FBQSxDQUFDLEVBQUUsY0FBYyxDQUFDLE1BQU0sQ0FBQSxDQUFFLFVBQVMsQ0FBQyxBQUFDO2dCQUMvRCxNQUFNLGlCQUFpQixHQUFHLEFBQUMsQ0FBQSxDQUFDLEVBQUUsZUFBZSxDQUFDLE1BQU0sQ0FBQSxDQUFFLGlCQUFnQixFQUFFLDJCQUEyQixDQUFDLElBQUksRUFBRSxBQUFDLENBQUEsQ0FBQyxFQUFFLGNBQWMsQ0FBQyxNQUFNLENBQUEsQ0FBRSxVQUFTLENBQUMsQ0FBQyxBQUFDO2dCQUNqSixJQUFJLENBQUMsaUJBQWlCLEVBQUU7b0JBQ3RCLE1BQU0sSUFBSSxLQUFLLENBQUMsQ0FBQyw2REFBNkQsRUFBRSxVQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDL0Y7Z0JBQ0QsTUFBTSxpQkFBaUIsR0FBRyxNQUFNLDhCQUE4QixDQUFDLGlCQUFnQixFQUFFLElBQUksQ0FBQyxBQUFDO2dCQUN2RixJQUFJLENBQUMsaUJBQWlCLEVBQUU7b0JBQ3RCLE1BQU0sSUFBSSxLQUFLLENBQUMsQ0FBQyx3RUFBd0UsRUFBRSxVQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDMUc7YUFDRjtTQUNGO1FBQ0QsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksTUFBTSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDNUQsTUFBTSxJQUFJLEtBQUssQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO1NBQ2pEO1FBQ0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLEFBQUM7UUFDOUIsSUFBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUU7WUFDdEMsV0FBVyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM3QixNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEFBQUM7WUFDeEIsTUFBTSxFQUFFLEdBQUc7Z0JBQ1QsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTO2dCQUMxQixVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVU7YUFDN0IsQUFBQztZQUNGLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDWCxJQUFJLEtBQUssQ0FBQyxTQUFTLEtBQUssaUJBQWlCLENBQUMsT0FBTyxFQUFFO29CQUNqRCxNQUFNLElBQUksS0FBSyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxzRUFBc0UsRUFBRSxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDbEs7YUFDRjtZQUNELElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDVixNQUFNLGtCQUFrQixHQUFHLENBQUMsR0FBRyxDQUFDLEFBQUM7Z0JBQ2pDLE1BQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxBQUFDO2dCQUNqRCxJQUFJLEtBQUssQ0FBQyxTQUFTLEtBQUssYUFBYSxDQUFDLFVBQVUsRUFBRTtvQkFDaEQsTUFBTSxJQUFJLEtBQUssQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsNkJBQTZCLEVBQUUsa0JBQWtCLENBQUMsY0FBYyxFQUFFLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDM0o7YUFDRjtZQUNELElBQUk7Z0JBQ0YsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxBQUFDLENBQUEsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxNQUFNLENBQUEsQ0FBRSxLQUFLLENBQUMsVUFBVSxDQUFDLEVBQUUsS0FBSyxDQUFDLGNBQWMsRUFBRSxBQUFDLENBQUEsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxNQUFNLENBQUEsQ0FBRSxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQUFBQztnQkFDOUksSUFBSSxDQUFDLGNBQWMsRUFBRTtvQkFDbkIsTUFBTSxJQUFJLEtBQUssQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsb0VBQW9FLENBQUMsQ0FBQyxDQUFDO2lCQUNwRzthQUNGLENBQUMsT0FBTyxLQUFLLEVBQUU7Z0JBQ2QsSUFBSSxLQUFLLFlBQVksS0FBSyxFQUFFO29CQUMxQixNQUFNLElBQUksS0FBSyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxxRUFBcUUsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUNySDthQUNGO1lBQ0Qsa0JBQWtCLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQzdCO1FBQ0QsTUFBTSxnQkFBZ0IsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxHQUFLO1lBQzdDLE9BQU8sS0FBSyxDQUFDLFVBQVUsQ0FBQztTQUN6QixDQUFDLEFBQUM7UUFDSCxJQUFJLENBQUMsZ0JBQWdCLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLElBQUksZ0JBQWdCLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUMxRixNQUFNLElBQUksS0FBSyxDQUFDLDJDQUEyQyxDQUFDLENBQUM7U0FDOUQ7UUFDRCxNQUFNLHdCQUF3QixHQUFHLEVBQUUsQUFBQztRQUNwQyxLQUFLLE1BQU0sVUFBVSxJQUFJLGdCQUFnQixDQUFFO1lBQ3pDLE1BQU0seUJBQXlCLEdBQUcsWUFBWSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQUFBQztZQUNqRSxJQUFLLElBQUksRUFBQyxHQUFHLENBQUMsRUFBRSxFQUFDLEdBQUcseUJBQXlCLENBQUMsTUFBTSxFQUFFLEVBQUMsRUFBRSxDQUFFO2dCQUN6RCxJQUFJO29CQUNGLE1BQU0sV0FBVyxHQUFHLHlCQUF5QixDQUFDLEVBQUMsQ0FBQyxBQUFDO29CQUNqRCxJQUFJLG1CQUFtQixBQUFDO29CQUN4QixPQUFRLFdBQVcsQ0FBQyxNQUFNO3dCQUN4QixLQUFLLFNBQVM7NEJBQ1osTUFBTTt3QkFDUixLQUFLLFVBQVU7NEJBQ2IsTUFBTTt3QkFDUixLQUFLLFNBQVM7NEJBQ1osbUJBQW1CLEdBQUcsTUFBTSxhQUFhLENBQUMsV0FBVyxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQzs0QkFDdkUsTUFBTTt3QkFDUixLQUFLLFNBQVM7NEJBQ1osTUFBTTt3QkFDUjs0QkFDRSxNQUFNLHdCQUF3QixHQUFHLFdBQVcsQUFBQzs0QkFDN0MsTUFBTSxJQUFJLEtBQUssQ0FBQyxDQUFDLGdDQUFnQyxDQUFDLENBQUMsQ0FBQztxQkFDdkQ7b0JBQ0Qsd0JBQXdCLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUM7aUJBQ25GLENBQUMsT0FBTyxNQUFLLEVBQUU7b0JBQ2QsSUFBSSxNQUFLLFlBQVksR0FBRyxDQUFDLFFBQVEsRUFBRTt3QkFDakMsTUFBTSxZQUFZLEdBQUcsTUFBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEdBQUs7NEJBQy9DLE9BQU8sQ0FBQyxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQzt5QkFDeEUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQUFBQzt3QkFDZCxNQUFNLENBQUMsR0FBRzs0QkFDUixRQUFRLEVBQUUsS0FBSzs0QkFDZixNQUFNLEVBQUUseUJBQXlCLENBQUMsRUFBQyxDQUFDLENBQUMsTUFBTTs0QkFDM0MsV0FBVyxFQUFFLHlCQUF5QixDQUFDLENBQUMsQ0FBQzs0QkFDekMsS0FBSyxFQUFFLENBQUMsOEJBQThCLEVBQUUseUJBQXlCLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRSx5QkFBeUIsQ0FBQyxFQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLFlBQVksQ0FBQyxDQUFDO3lCQUM5SixBQUFDO3dCQUNGLHdCQUF3QixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztxQkFDbEMsTUFBTSxJQUFJLE1BQUssWUFBWSxLQUFLLEVBQUU7d0JBQ2pDLE1BQU0sRUFBQyxHQUFHOzRCQUNSLFFBQVEsRUFBRSxLQUFLOzRCQUNmLE1BQU0sRUFBRSx5QkFBeUIsQ0FBQyxFQUFDLENBQUMsQ0FBQyxNQUFNOzRCQUMzQyxXQUFXLEVBQUUseUJBQXlCLENBQUMsQ0FBQyxDQUFDOzRCQUN6QyxLQUFLLEVBQUUsQ0FBQyw4QkFBOEIsRUFBRSx5QkFBeUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFLHlCQUF5QixDQUFDLEVBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsTUFBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO3lCQUMvSixBQUFDO3dCQUNGLHdCQUF3QixDQUFDLElBQUksQ0FBQyxFQUFDLENBQUMsQ0FBQztxQkFDbEM7aUJBQ0Y7YUFDRjtTQUNGO1FBQ0QsTUFBTSx1QkFBdUIsR0FBRyx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUs7WUFDbkUsT0FBTyxDQUFDLENBQUMsUUFBUSxLQUFLLElBQUksQ0FBQztTQUM1QixDQUFDLEFBQUM7UUFDSCxNQUFNLGdDQUFnQyxHQUFHLEVBQUUsQUFBQztRQUM1Qyx3QkFBd0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLEdBQUs7WUFDdkMsSUFBSSxFQUFFLENBQUMsUUFBUSxJQUFJLEVBQUUsQ0FBQyxTQUFTLEVBQUU7Z0JBQy9CLGdDQUFnQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7YUFDckQ7U0FDRixDQUFDLENBQUM7UUFDSCxNQUFNLHNDQUFzQyxHQUFHLGdDQUFnQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEFBQUM7UUFDNUgsTUFBTSxrQkFBa0IsR0FBRztZQUN6QixFQUFFO1lBQ0YsTUFBTSxFQUFFLFNBQVM7WUFDakIsUUFBUSxFQUFFLHVCQUF1QjtZQUNqQyxRQUFRLEVBQUU7Z0JBQ1IsSUFBSSxFQUFFLHFCQUFxQixDQUFDLE9BQU87Z0JBQ25DLFFBQVEsRUFBRSxxQkFBcUIsQ0FBQyxRQUFRO2dCQUN4QyxlQUFlLEVBQUUsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUMsTUFBTSxHQUFHLENBQUM7YUFDcEU7WUFDRCxJQUFJLEVBQUU7Z0JBQ0osSUFBSSxFQUFFLGlCQUFpQixDQUFDLE9BQU87Z0JBQy9CLFFBQVEsRUFBRSxTQUFTO2FBQ3BCO1lBQ0QsY0FBYyxFQUFFO2dCQUNkLElBQUksRUFBRSwyQkFBMkIsQ0FBQyxPQUFPO2dCQUN6QyxRQUFRLEVBQUUsU0FBUztnQkFDbkIsZUFBZSxFQUFFLHdCQUF3QixHQUFHLHdCQUF3QixDQUFDLE1BQU0sR0FBRyxDQUFDO2FBQ2hGO1lBQ0QsTUFBTSxFQUFFLGtCQUFrQjtZQUMxQixZQUFZLEVBQUUsd0JBQXdCO1NBQ3ZDLEFBQUM7UUFDRixJQUFJLHVCQUF1QixFQUFFO1lBQzNCLGtCQUFrQixDQUFDLFNBQVMsR0FBRztnQkFDN0IsTUFBTSxFQUFFLGNBQWM7Z0JBQ3RCLGlCQUFpQixFQUFFLDBCQUEwQixHQUFHLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixHQUFHLEtBQUssQ0FBQztnQkFDeEgsVUFBVSxFQUFFO29CQUNWLGNBQWMsRUFBRSwwQkFBMEIsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUcsMEJBQTBCLENBQUMsV0FBVyxFQUFFO29CQUN0RyxXQUFXLEVBQUUsMEJBQTBCLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQztvQkFDNUQsZUFBZSxFQUFFLHNDQUFzQztvQkFDdkQsd0JBQXdCLEVBQUUsMEJBQTBCLElBQUksc0NBQXNDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsMEJBQTBCLENBQUMsR0FBRyxLQUFLLENBQUM7aUJBQzFNO2FBQ0YsQ0FBQztTQUNIO1FBQ0QsT0FBTyxzQkFBc0IsQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQztLQUN6RCxDQUFDLE9BQU8sTUFBSyxFQUFFO1FBQ2QsSUFBSSxNQUFLLFlBQVksR0FBRyxDQUFDLFFBQVEsRUFBRTtZQUNqQyxNQUFNLGFBQVksR0FBRyxNQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssR0FBSztnQkFDL0MsT0FBTyxDQUFDLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2FBQ3hFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEFBQUM7WUFDZCxPQUFPLGlDQUFpQyxDQUFDLGFBQVksQ0FBQyxDQUFDO1NBQ3hELE1BQU0sSUFBSSxNQUFLLFlBQVksS0FBSyxFQUFFO1lBQ2pDLE9BQU8saUNBQWlDLENBQUMsTUFBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ3pELE1BQU07WUFDTCxPQUFPLGlDQUFpQyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1NBQzNEO0tBQ0Y7Q0FDRjtBQUNELGVBQWUsT0FBTyxDQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUU7SUFDMUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQUFBQztJQUNmLE9BQU8sTUFBTSxRQUFRLENBQUMsVUFBVSxFQUFFLENBQUMsRUFBRSxHQUFHLE9BQU8sSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLE9BQU8sSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxDQUFDLHVCQUF1QixFQUFFLENBQUMsRUFBRSxHQUFHLE9BQU8sSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxDQUFDLDZCQUE2QixDQUFDLElBQUksSUFBSSxHQUFHLEVBQUUsR0FBRyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEdBQUcsT0FBTyxJQUFJLElBQUksR0FBRyxLQUFLLENBQUMsR0FBRyxPQUFPLENBQUMsbUNBQW1DLENBQUMsSUFBSSxJQUFJLEdBQUcsRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDO0NBQ25XO0FBQ0QsZUFBZSxVQUFVLENBQUMsVUFBVSxFQUFFLE9BQU8sRUFBRTtJQUM3QyxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxBQUFDO0lBQ2YsSUFBSTtRQUNGLE1BQU0sWUFBWSxHQUFHLE1BQU0sUUFBUSxDQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUUsR0FBRyxPQUFPLElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxPQUFPLElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLE9BQU8sQ0FBQyx1QkFBdUIsRUFBRSxDQUFDLEVBQUUsR0FBRyxPQUFPLElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLE9BQU8sQ0FBQyw2QkFBNkIsQ0FBQyxJQUFJLElBQUksR0FBRyxFQUFFLEdBQUcsS0FBSyxFQUFFLENBQUMsRUFBRSxHQUFHLE9BQU8sSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxDQUFDLG1DQUFtQyxDQUFDLElBQUksSUFBSSxHQUFHLEVBQUUsR0FBRyxLQUFLLENBQUMsQUFBQztRQUNoWCxPQUFPLFlBQVksQ0FBQyxRQUFRLENBQUM7S0FDOUIsQ0FBQyxPQUFPLEtBQUssRUFBRTtRQUNkLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7Q0FDRjtBQUNELGVBQWUsY0FBYyxDQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUU7SUFDakQsSUFBSSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQUFBQztJQUNmLE1BQU0sWUFBWSxHQUFHLE1BQU0sUUFBUSxDQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUUsR0FBRyxPQUFPLElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxPQUFPLElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLE9BQU8sQ0FBQyx1QkFBdUIsRUFBRSxDQUFDLEVBQUUsR0FBRyxPQUFPLElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLE9BQU8sQ0FBQyw2QkFBNkIsQ0FBQyxJQUFJLElBQUksR0FBRyxFQUFFLEdBQUcsS0FBSyxFQUFFLENBQUMsRUFBRSxHQUFHLE9BQU8sSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUcsT0FBTyxDQUFDLG1DQUFtQyxDQUFDLElBQUksSUFBSSxHQUFHLEVBQUUsR0FBRyxLQUFLLENBQUMsQUFBQztJQUNoWCxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRTtRQUMxQixNQUFNLElBQUksS0FBSyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUNyQztDQUNGO0FBQ0Qsb0VBQW9FLENBQ3BFLFNBQVEsVUFBVSxFQUFFLHNCQUFzQixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFLFVBQVUsRUFBRSxPQUFPLElBQUksTUFBTSxHQUFFO0FBQ2xILGVBQWUsSUFBSSxDQUFDIn0=