export function ber_decode(bytes, from, to) {
    return ber_next(bytes);
}
function ber_sequence(bytes, from, length) {
    const end = from + length;
    let res = [];
    let ptr = from;
    while (ptr < end) {
        const next = ber_next(bytes, ptr);
        res.push(next);
        ptr += next.totalLength;
    }
    return res;
}
function ber_integer(bytes, from, length) {
    let n = 0n;
    for (const b of bytes.slice(from, from + length)) {
        n = (n << 8n) + BigInt(b);
    }
    return n;
}
function ber_oid(bytes, from, length) {
    const id = [(bytes[from] / 40) | 0, bytes[from] % 40];
    let value = 0;
    for (const b of bytes.slice(from + 1, from + length)) {
        if (b > 128)
            value += value * 127 + (b - 128);
        else {
            value = value * 128 + b;
            id.push(value);
            value = 0;
        }
    }
    return id.join(".");
}
function ber_unknown(bytes, from, length) {
    return bytes.slice(from, from + length);
}
export function ber_simple(n) {
    if (Array.isArray(n.value))
        return n.value.map((x) => ber_simple(x));
    return n.value;
}
function ber_next(bytes, from, to) {
    if (!from)
        from = 0;
    if (!to)
        to = bytes.length;
    let ptr = from;
    const type = bytes[ptr++];
    let size = bytes[ptr++];
    if ((size & 0x80) > 0) {
        let ext = size - 0x80;
        size = 0;
        while (--ext >= 0) {
            size = (size << 8) + bytes[ptr++];
        }
    }
    let value = null;
    if (type === 0x30) {
        value = ber_sequence(bytes, ptr, size);
    }
    else if (type === 0x2) {
        value = ber_integer(bytes, ptr, size);
    }
    else if (type === 0x3) {
        value = ber_sequence(bytes, ptr + 1, size - 1);
    }
    else if (type === 0x5) {
        value = null;
    }
    else if (type === 0x6) {
        value = ber_oid(bytes, ptr, size);
    }
    else {
        value = ber_unknown(bytes, ptr, size);
    }
    return {
        totalLength: ptr - from + size,
        type,
        length: size,
        value,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzaWNfZW5jb2RpbmdfcnVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImJhc2ljX2VuY29kaW5nX3J1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBc0JBLE1BQU0sVUFBVSxVQUFVLENBQ3hCLEtBQWlCLEVBQ2pCLElBQWEsRUFDYixFQUFXO0lBRVgsT0FBTyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDekIsQ0FBQztBQUVELFNBQVMsWUFBWSxDQUNuQixLQUFpQixFQUNqQixJQUFZLEVBQ1osTUFBYztJQUVkLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxNQUFNLENBQUM7SUFDMUIsSUFBSSxHQUFHLEdBQXdCLEVBQUUsQ0FBQztJQUNsQyxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUM7SUFFZixPQUFPLEdBQUcsR0FBRyxHQUFHLEVBQUU7UUFDaEIsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNsQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2YsR0FBRyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUM7S0FDekI7SUFFRCxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFFRCxTQUFTLFdBQVcsQ0FBQyxLQUFpQixFQUFFLElBQVksRUFBRSxNQUFjO0lBQ2xFLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUNYLEtBQUssTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxHQUFHLE1BQU0sQ0FBQyxFQUFFO1FBQ2hELENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDM0I7SUFDRCxPQUFPLENBQUMsQ0FBQztBQUNYLENBQUM7QUFFRCxTQUFTLE9BQU8sQ0FBQyxLQUFpQixFQUFFLElBQVksRUFBRSxNQUFjO0lBQzlELE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUN0RCxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7SUFFZCxLQUFLLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsTUFBTSxDQUFDLEVBQUU7UUFDcEQsSUFBSSxDQUFDLEdBQUcsR0FBRztZQUFFLEtBQUssSUFBSSxLQUFLLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO2FBQ3pDO1lBQ0gsS0FBSyxHQUFHLEtBQUssR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1lBQ3hCLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDZixLQUFLLEdBQUcsQ0FBQyxDQUFDO1NBQ1g7S0FDRjtJQUVELE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN0QixDQUFDO0FBRUQsU0FBUyxXQUFXLENBQ2xCLEtBQWlCLEVBQ2pCLElBQVksRUFDWixNQUFjO0lBRWQsT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLEdBQUcsTUFBTSxDQUFDLENBQUM7QUFDMUMsQ0FBQztBQUVELE1BQU0sVUFBVSxVQUFVLENBQUMsQ0FBb0I7SUFDN0MsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFBRSxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNyRSxPQUFPLENBQUMsQ0FBQyxLQUFpQyxDQUFDO0FBQzdDLENBQUM7QUFFRCxTQUFTLFFBQVEsQ0FDZixLQUFpQixFQUNqQixJQUFhLEVBQ2IsRUFBVztJQUVYLElBQUksQ0FBQyxJQUFJO1FBQUUsSUFBSSxHQUFHLENBQUMsQ0FBQztJQUNwQixJQUFJLENBQUMsRUFBRTtRQUFFLEVBQUUsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO0lBRTNCLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQztJQUVmLE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQzFCLElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBRXhCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ3JCLElBQUksR0FBRyxHQUFHLElBQUksR0FBRyxJQUFJLENBQUM7UUFDdEIsSUFBSSxHQUFHLENBQUMsQ0FBQztRQUVULE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFO1lBQ2pCLElBQUksR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztTQUNuQztLQUNGO0lBR0QsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDO0lBQ2pCLElBQUksSUFBSSxLQUFLLElBQUksRUFBRTtRQUNqQixLQUFLLEdBQUcsWUFBWSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDeEM7U0FBTSxJQUFJLElBQUksS0FBSyxHQUFHLEVBQUU7UUFDdkIsS0FBSyxHQUFHLFdBQVcsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQ3ZDO1NBQU0sSUFBSSxJQUFJLEtBQUssR0FBRyxFQUFFO1FBQ3ZCLEtBQUssR0FBRyxZQUFZLENBQUMsS0FBSyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDO0tBQ2hEO1NBQU0sSUFBSSxJQUFJLEtBQUssR0FBRyxFQUFFO1FBQ3ZCLEtBQUssR0FBRyxJQUFJLENBQUM7S0FDZDtTQUFNLElBQUksSUFBSSxLQUFLLEdBQUcsRUFBRTtRQUN2QixLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDbkM7U0FBTTtRQUNMLEtBQUssR0FBRyxXQUFXLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztLQUN2QztJQUVELE9BQU87UUFDTCxXQUFXLEVBQUUsR0FBRyxHQUFHLElBQUksR0FBRyxJQUFJO1FBQzlCLElBQUk7UUFDSixNQUFNLEVBQUUsSUFBSTtRQUNaLEtBQUs7S0FDTixDQUFDO0FBQ0osQ0FBQyJ9