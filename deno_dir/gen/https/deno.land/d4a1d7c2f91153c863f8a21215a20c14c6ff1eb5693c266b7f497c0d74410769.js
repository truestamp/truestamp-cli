import { Cell } from "./cell.ts";
import { stripColor } from "./deps.ts";
export function consumeWords(length, content) {
    let consumed = "";
    const words = content.split(/ /g);
    for (let i = 0; i < words.length; i++) {
        let word = words[i];
        const hasLineBreak = word.indexOf("\n") !== -1;
        if (hasLineBreak) {
            word = word.split("\n").shift();
        }
        if (consumed) {
            const nextLength = stripColor(word).length;
            const consumedLength = stripColor(consumed).length;
            if (consumedLength + nextLength >= length) {
                break;
            }
        }
        consumed += (i > 0 ? " " : "") + word;
        if (hasLineBreak) {
            break;
        }
    }
    return consumed;
}
export function longest(index, rows, maxWidth) {
    return Math.max(...rows.map((row) => (row[index] instanceof Cell && row[index].getColSpan() > 1
        ? ""
        : (row[index]?.toString() || ""))
        .split("\n")
        .map((r) => {
        const str = typeof maxWidth === "undefined"
            ? r
            : consumeWords(maxWidth, r);
        return stripColor(str).length || 0;
    })).flat());
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ1dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFNQSxPQUFPLEVBQUUsSUFBSSxFQUFTLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFdkMsTUFBTSxVQUFVLFlBQVksQ0FBQyxNQUFjLEVBQUUsT0FBZTtJQUMxRCxJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDbEIsTUFBTSxLQUFLLEdBQWEsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUU1QyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNyQyxJQUFJLElBQUksR0FBVyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUIsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUUvQyxJQUFJLFlBQVksRUFBRTtZQUNoQixJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQVksQ0FBQztTQUMzQztRQUdELElBQUksUUFBUSxFQUFFO1lBQ1osTUFBTSxVQUFVLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQztZQUMzQyxNQUFNLGNBQWMsR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxDQUFDO1lBQ25ELElBQUksY0FBYyxHQUFHLFVBQVUsSUFBSSxNQUFNLEVBQUU7Z0JBQ3pDLE1BQU07YUFDUDtTQUNGO1FBRUQsUUFBUSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUM7UUFFdEMsSUFBSSxZQUFZLEVBQUU7WUFDaEIsTUFBTTtTQUNQO0tBQ0Y7SUFFRCxPQUFPLFFBQVEsQ0FBQztBQUNsQixDQUFDO0FBS0QsTUFBTSxVQUFVLE9BQU8sQ0FDckIsS0FBYSxFQUNiLElBQWUsRUFDZixRQUFpQjtJQUVqQixPQUFPLElBQUksQ0FBQyxHQUFHLENBQ2IsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FDbEIsQ0FDRSxHQUFHLENBQUMsS0FBSyxDQUFDLFlBQVksSUFBSSxJQUFLLEdBQUcsQ0FBQyxLQUFLLENBQVUsQ0FBQyxVQUFVLEVBQUUsR0FBRyxDQUFDO1FBQ2pFLENBQUMsQ0FBQyxFQUFFO1FBQ0osQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUNuQztTQUNFLEtBQUssQ0FBQyxJQUFJLENBQUM7U0FDWCxHQUFHLENBQUMsQ0FBQyxDQUFTLEVBQUUsRUFBRTtRQUNqQixNQUFNLEdBQUcsR0FBRyxPQUFPLFFBQVEsS0FBSyxXQUFXO1lBQ3pDLENBQUMsQ0FBQyxDQUFDO1lBQ0gsQ0FBQyxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDOUIsT0FBTyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQztJQUNyQyxDQUFDLENBQUMsQ0FDTCxDQUFDLElBQUksRUFBRSxDQUNULENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBHZXQgbmV4dCB3b3JkcyBmcm9tIHRoZSBiZWdpbm5pbmcgb2YgW2NvbnRlbnRdIHVudGlsIGFsbCB3b3JkcyBoYXZlIGEgbGVuZ3RoIGxvd2VyIG9yIGVxdWFsIHRoZW4gW2xlbmd0aF0uXG4gKlxuICogQHBhcmFtIGxlbmd0aCAgICBNYXggbGVuZ3RoIG9mIGFsbCB3b3Jkcy5cbiAqIEBwYXJhbSBjb250ZW50ICAgVGhlIHRleHQgY29udGVudC5cbiAqL1xuaW1wb3J0IHsgQ2VsbCwgSUNlbGwgfSBmcm9tIFwiLi9jZWxsLnRzXCI7XG5pbXBvcnQgeyBzdHJpcENvbG9yIH0gZnJvbSBcIi4vZGVwcy50c1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gY29uc3VtZVdvcmRzKGxlbmd0aDogbnVtYmVyLCBjb250ZW50OiBzdHJpbmcpOiBzdHJpbmcge1xuICBsZXQgY29uc3VtZWQgPSBcIlwiO1xuICBjb25zdCB3b3Jkczogc3RyaW5nW10gPSBjb250ZW50LnNwbGl0KC8gL2cpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgd29yZHMubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgd29yZDogc3RyaW5nID0gd29yZHNbaV07XG4gICAgY29uc3QgaGFzTGluZUJyZWFrID0gd29yZC5pbmRleE9mKFwiXFxuXCIpICE9PSAtMTtcblxuICAgIGlmIChoYXNMaW5lQnJlYWspIHtcbiAgICAgIHdvcmQgPSB3b3JkLnNwbGl0KFwiXFxuXCIpLnNoaWZ0KCkgYXMgc3RyaW5nO1xuICAgIH1cblxuICAgIC8vIGNvbnN1bWUgbWluaW11bSBvbmUgd29yZFxuICAgIGlmIChjb25zdW1lZCkge1xuICAgICAgY29uc3QgbmV4dExlbmd0aCA9IHN0cmlwQ29sb3Iod29yZCkubGVuZ3RoO1xuICAgICAgY29uc3QgY29uc3VtZWRMZW5ndGggPSBzdHJpcENvbG9yKGNvbnN1bWVkKS5sZW5ndGg7XG4gICAgICBpZiAoY29uc3VtZWRMZW5ndGggKyBuZXh0TGVuZ3RoID49IGxlbmd0aCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdW1lZCArPSAoaSA+IDAgPyBcIiBcIiA6IFwiXCIpICsgd29yZDtcblxuICAgIGlmIChoYXNMaW5lQnJlYWspIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjb25zdW1lZDtcbn1cblxuLyoqXG4gKiBHZXQgbG9uZ2VzdCBjZWxsIGZyb20gZ2l2ZW4gcm93IGluZGV4LlxuICovXG5leHBvcnQgZnVuY3Rpb24gbG9uZ2VzdChcbiAgaW5kZXg6IG51bWJlcixcbiAgcm93czogSUNlbGxbXVtdLFxuICBtYXhXaWR0aD86IG51bWJlcixcbik6IG51bWJlciB7XG4gIHJldHVybiBNYXRoLm1heChcbiAgICAuLi5yb3dzLm1hcCgocm93KSA9PlxuICAgICAgKFxuICAgICAgICByb3dbaW5kZXhdIGluc3RhbmNlb2YgQ2VsbCAmJiAocm93W2luZGV4XSBhcyBDZWxsKS5nZXRDb2xTcGFuKCkgPiAxXG4gICAgICAgICAgPyBcIlwiXG4gICAgICAgICAgOiAocm93W2luZGV4XT8udG9TdHJpbmcoKSB8fCBcIlwiKVxuICAgICAgKVxuICAgICAgICAuc3BsaXQoXCJcXG5cIilcbiAgICAgICAgLm1hcCgocjogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgY29uc3Qgc3RyID0gdHlwZW9mIG1heFdpZHRoID09PSBcInVuZGVmaW5lZFwiXG4gICAgICAgICAgICA/IHJcbiAgICAgICAgICAgIDogY29uc3VtZVdvcmRzKG1heFdpZHRoLCByKTtcbiAgICAgICAgICByZXR1cm4gc3RyaXBDb2xvcihzdHIpLmxlbmd0aCB8fCAwO1xuICAgICAgICB9KVxuICAgICkuZmxhdCgpLFxuICApO1xufVxuIl19