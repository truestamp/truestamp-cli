import { WebCryptoRSA } from "./rsa_wc.ts";
import { PureRSA } from "./rsa_js.ts";
import { RawBinary } from "../binary.ts";
import { rsa_import_key } from "./import_key.ts";
import { RSAKey } from "./rsa_key.ts";
function computeMessage(m) {
    return typeof m === "string" ? new TextEncoder().encode(m) : m;
}
function computeOption(options) {
    return {
        hash: "sha1",
        padding: "oaep",
        ...options,
    };
}
export class RSA {
    key;
    constructor(key) {
        this.key = key;
    }
    async encrypt(m, options) {
        const computedOption = computeOption(options);
        const func = WebCryptoRSA.isSupported(computedOption)
            ? WebCryptoRSA.encrypt
            : PureRSA.encrypt;
        return new RawBinary(await func(this.key, computeMessage(m), computedOption));
    }
    async decrypt(m, options) {
        const computedOption = computeOption(options);
        const func = WebCryptoRSA.isSupported(computedOption)
            ? WebCryptoRSA.decrypt
            : PureRSA.decrypt;
        return new RawBinary(await func(this.key, m, computedOption));
    }
    async verify(signature, message, options) {
        const computedOption = {
            algorithm: "rsassa-pkcs1-v1_5",
            hash: "sha256",
            ...options,
        };
        return await PureRSA.verify(this.key, signature, computeMessage(message), computedOption);
    }
    async sign(message, options) {
        const computedOption = {
            algorithm: "rsassa-pkcs1-v1_5",
            hash: "sha256",
            ...options,
        };
        return await PureRSA.sign(this.key, computeMessage(message), computedOption);
    }
    static parseKey(key, format = "auto") {
        return this.importKey(key, format);
    }
    static importKey(key, format = "auto") {
        return new RSAKey(rsa_import_key(key, format));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibW9kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUN0QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRXRDLFNBQVMsY0FBYyxDQUFDLENBQXNCO0lBQzVDLE9BQU8sT0FBTyxDQUFDLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLFdBQVcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2pFLENBQUM7QUFFRCxTQUFTLGFBQWEsQ0FBQyxPQUE0QjtJQUNqRCxPQUFPO1FBQ0wsSUFBSSxFQUFFLE1BQU07UUFDWixPQUFPLEVBQUUsTUFBTTtRQUNmLEdBQUcsT0FBTztLQUNYLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxPQUFPLEdBQUc7SUFDSixHQUFHLENBQVM7SUFFdEIsWUFBWSxHQUFXO1FBQ3JCLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO0lBQ2pCLENBQUM7SUFFRCxLQUFLLENBQUMsT0FBTyxDQUFDLENBQXNCLEVBQUUsT0FBNEI7UUFDaEUsTUFBTSxjQUFjLEdBQUcsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRTlDLE1BQU0sSUFBSSxHQUFHLFlBQVksQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDO1lBQ25ELENBQUMsQ0FBQyxZQUFZLENBQUMsT0FBTztZQUN0QixDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQztRQUVwQixPQUFPLElBQUksU0FBUyxDQUNsQixNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxjQUFjLENBQUMsQ0FDeEQsQ0FBQztJQUNKLENBQUM7SUFFRCxLQUFLLENBQUMsT0FBTyxDQUFDLENBQWEsRUFBRSxPQUE0QjtRQUN2RCxNQUFNLGNBQWMsR0FBRyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFOUMsTUFBTSxJQUFJLEdBQUcsWUFBWSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUM7WUFDbkQsQ0FBQyxDQUFDLFlBQVksQ0FBQyxPQUFPO1lBQ3RCLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDO1FBRXBCLE9BQU8sSUFBSSxTQUFTLENBQUMsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQztJQUNoRSxDQUFDO0lBRUQsS0FBSyxDQUFDLE1BQU0sQ0FDVixTQUFxQixFQUNyQixPQUE0QixFQUM1QixPQUFnQztRQUVoQyxNQUFNLGNBQWMsR0FBa0I7WUFDcEMsU0FBUyxFQUFFLG1CQUFtQjtZQUM5QixJQUFJLEVBQUUsUUFBUTtZQUNkLEdBQUcsT0FBTztTQUNYLENBQUM7UUFFRixPQUFPLE1BQU0sT0FBTyxDQUFDLE1BQU0sQ0FDekIsSUFBSSxDQUFDLEdBQUcsRUFDUixTQUFTLEVBQ1QsY0FBYyxDQUFDLE9BQU8sQ0FBQyxFQUN2QixjQUFjLENBQ2YsQ0FBQztJQUNKLENBQUM7SUFFRCxLQUFLLENBQUMsSUFBSSxDQUNSLE9BQTRCLEVBQzVCLE9BQWdDO1FBRWhDLE1BQU0sY0FBYyxHQUFrQjtZQUNwQyxTQUFTLEVBQUUsbUJBQW1CO1lBQzlCLElBQUksRUFBRSxRQUFRO1lBQ2QsR0FBRyxPQUFPO1NBQ1gsQ0FBQztRQUVGLE9BQU8sTUFBTSxPQUFPLENBQUMsSUFBSSxDQUN2QixJQUFJLENBQUMsR0FBRyxFQUNSLGNBQWMsQ0FBQyxPQUFPLENBQUMsRUFDdkIsY0FBYyxDQUNmLENBQUM7SUFDSixDQUFDO0lBRUQsTUFBTSxDQUFDLFFBQVEsQ0FDYixHQUF3QixFQUN4QixTQUFpQyxNQUFNO1FBRXZDLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDckMsQ0FBQztJQVFELE1BQU0sQ0FBQyxTQUFTLENBQ2QsR0FBd0IsRUFDeEIsU0FBaUMsTUFBTTtRQUV2QyxPQUFPLElBQUksTUFBTSxDQUFDLGNBQWMsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNqRCxDQUFDO0NBQ0YifQ==