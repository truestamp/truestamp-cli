import { Command } from "../command.ts";
import { UnknownCompletionCommand } from "../_errors.ts";
export class CompleteCommand extends Command {
    constructor(cmd) {
        super();
        return this
            .description("Get completions for given action from given command.")
            .arguments("<action:string> [command...:string]")
            .action(async (_, action, commandNames) => {
            let parent;
            const completeCommand = commandNames
                ?.reduce((cmd, name) => {
                parent = cmd;
                const childCmd = cmd.getCommand(name, false);
                if (!childCmd) {
                    throw new UnknownCompletionCommand(name, cmd.getCommands());
                }
                return childCmd;
            }, cmd || this.getMainCommand()) ?? (cmd || this.getMainCommand());
            const completion = completeCommand
                .getCompletion(action);
            const result = await completion?.complete(completeCommand, parent) ?? [];
            if (result?.length) {
                Deno.stdout.writeSync(new TextEncoder().encode(result.join("\n")));
            }
        })
            .reset();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGxldGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb21wbGV0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hDLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUl6RCxNQUFNLE9BQU8sZUFBZ0IsU0FBUSxPQUtwQztJQUNDLFlBQW1CLEdBQWE7UUFDOUIsS0FBSyxFQUFFLENBQUM7UUFDUixPQUFPLElBQUk7YUFDUixXQUFXLENBQ1Ysc0RBQXNELENBQ3ZEO2FBQ0EsU0FBUyxDQUFDLHFDQUFxQyxDQUFDO2FBQ2hELE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLE1BQWMsRUFBRSxZQUE0QixFQUFFLEVBQUU7WUFDaEUsSUFBSSxNQUEyQixDQUFDO1lBQ2hDLE1BQU0sZUFBZSxHQUFZLFlBQVk7Z0JBQzNDLEVBQUUsTUFBTSxDQUFDLENBQUMsR0FBWSxFQUFFLElBQVksRUFBVyxFQUFFO2dCQUMvQyxNQUFNLEdBQUcsR0FBRyxDQUFDO2dCQUNiLE1BQU0sUUFBUSxHQUF3QixHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztnQkFDbEUsSUFBSSxDQUFDLFFBQVEsRUFBRTtvQkFDYixNQUFNLElBQUksd0JBQXdCLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO2lCQUM3RDtnQkFDRCxPQUFPLFFBQVEsQ0FBQztZQUNsQixDQUFDLEVBQUUsR0FBRyxJQUFJLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDO1lBRXJFLE1BQU0sVUFBVSxHQUE0QixlQUFlO2lCQUN4RCxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDekIsTUFBTSxNQUFNLEdBQ1YsTUFBTSxVQUFVLEVBQUUsUUFBUSxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7WUFFNUQsSUFBSSxNQUFNLEVBQUUsTUFBTSxFQUFFO2dCQUNsQixJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLFdBQVcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNwRTtRQUNILENBQUMsQ0FBQzthQUNELEtBQUssRUFBRSxDQUFDO0lBQ2IsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tbWFuZCB9IGZyb20gXCIuLi9jb21tYW5kLnRzXCI7XG5pbXBvcnQgeyBVbmtub3duQ29tcGxldGlvbkNvbW1hbmQgfSBmcm9tIFwiLi4vX2Vycm9ycy50c1wiO1xuaW1wb3J0IHR5cGUgeyBJQ29tcGxldGlvbiB9IGZyb20gXCIuLi90eXBlcy50c1wiO1xuXG4vKiogRXhlY3V0ZSBhdXRvIGNvbXBsZXRpb24gbWV0aG9kIG9mIGNvbW1hbmQgYW5kIGFjdGlvbi4gKi9cbmV4cG9ydCBjbGFzcyBDb21wbGV0ZUNvbW1hbmQgZXh0ZW5kcyBDb21tYW5kPFxuICB2b2lkLFxuICB2b2lkLFxuICB2b2lkLFxuICBbYWN0aW9uOiBzdHJpbmcsIGNvbW1hbmROYW1lcz86IEFycmF5PHN0cmluZz5dXG4+IHtcbiAgcHVibGljIGNvbnN0cnVjdG9yKGNtZD86IENvbW1hbmQpIHtcbiAgICBzdXBlcigpO1xuICAgIHJldHVybiB0aGlzXG4gICAgICAuZGVzY3JpcHRpb24oXG4gICAgICAgIFwiR2V0IGNvbXBsZXRpb25zIGZvciBnaXZlbiBhY3Rpb24gZnJvbSBnaXZlbiBjb21tYW5kLlwiLFxuICAgICAgKVxuICAgICAgLmFyZ3VtZW50cyhcIjxhY3Rpb246c3RyaW5nPiBbY29tbWFuZC4uLjpzdHJpbmddXCIpXG4gICAgICAuYWN0aW9uKGFzeW5jIChfLCBhY3Rpb246IHN0cmluZywgY29tbWFuZE5hbWVzPzogQXJyYXk8c3RyaW5nPikgPT4ge1xuICAgICAgICBsZXQgcGFyZW50OiBDb21tYW5kIHwgdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCBjb21wbGV0ZUNvbW1hbmQ6IENvbW1hbmQgPSBjb21tYW5kTmFtZXNcbiAgICAgICAgICA/LnJlZHVjZSgoY21kOiBDb21tYW5kLCBuYW1lOiBzdHJpbmcpOiBDb21tYW5kID0+IHtcbiAgICAgICAgICAgIHBhcmVudCA9IGNtZDtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkQ21kOiBDb21tYW5kIHwgdW5kZWZpbmVkID0gY21kLmdldENvbW1hbmQobmFtZSwgZmFsc2UpO1xuICAgICAgICAgICAgaWYgKCFjaGlsZENtZCkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5rbm93bkNvbXBsZXRpb25Db21tYW5kKG5hbWUsIGNtZC5nZXRDb21tYW5kcygpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjaGlsZENtZDtcbiAgICAgICAgICB9LCBjbWQgfHwgdGhpcy5nZXRNYWluQ29tbWFuZCgpKSA/PyAoY21kIHx8IHRoaXMuZ2V0TWFpbkNvbW1hbmQoKSk7XG5cbiAgICAgICAgY29uc3QgY29tcGxldGlvbjogSUNvbXBsZXRpb24gfCB1bmRlZmluZWQgPSBjb21wbGV0ZUNvbW1hbmRcbiAgICAgICAgICAuZ2V0Q29tcGxldGlvbihhY3Rpb24pO1xuICAgICAgICBjb25zdCByZXN1bHQ6IEFycmF5PHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW4+ID1cbiAgICAgICAgICBhd2FpdCBjb21wbGV0aW9uPy5jb21wbGV0ZShjb21wbGV0ZUNvbW1hbmQsIHBhcmVudCkgPz8gW107XG5cbiAgICAgICAgaWYgKHJlc3VsdD8ubGVuZ3RoKSB7XG4gICAgICAgICAgRGVuby5zdGRvdXQud3JpdGVTeW5jKG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShyZXN1bHQuam9pbihcIlxcblwiKSkpO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgLnJlc2V0KCk7XG4gIH1cbn1cbiJdfQ==