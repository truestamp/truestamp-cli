import { notImplemented } from "./_utils.ts";
import { validateIntegerRange } from "./_utils.ts";
import { EOL as fsEOL } from "../fs/eol.ts";
import process from "./process.ts";
const SEE_GITHUB_ISSUE = "See https://github.com/denoland/deno/issues/3802";
arch[Symbol.toPrimitive] = () => arch();
endianness[Symbol.toPrimitive] = () => endianness();
freemem[Symbol.toPrimitive] = () => freemem();
homedir[Symbol.toPrimitive] = () => homedir();
hostname[Symbol.toPrimitive] = () => hostname();
platform[Symbol.toPrimitive] = () => platform();
release[Symbol.toPrimitive] = () => release();
totalmem[Symbol.toPrimitive] = () => totalmem();
type[Symbol.toPrimitive] = () => type();
uptime[Symbol.toPrimitive] = () => uptime();
export function arch() {
    return Deno.build.arch;
}
export function cpus() {
    notImplemented(SEE_GITHUB_ISSUE);
}
export function endianness() {
    const buffer = new ArrayBuffer(2);
    new DataView(buffer).setInt16(0, 256, true);
    return new Int16Array(buffer)[0] === 256 ? "LE" : "BE";
}
export function freemem() {
    return Deno.systemMemoryInfo().free;
}
export function getPriority(pid = 0) {
    validateIntegerRange(pid, "pid");
    notImplemented(SEE_GITHUB_ISSUE);
}
export function homedir() {
    switch (Deno.build.os) {
        case "windows":
            return Deno.env.get("USERPROFILE") || null;
        case "linux":
        case "darwin":
            return Deno.env.get("HOME") || null;
        default:
            throw Error("unreachable");
    }
}
export function hostname() {
    notImplemented(SEE_GITHUB_ISSUE);
}
export function loadavg() {
    if (Deno.build.os === "windows") {
        return [0, 0, 0];
    }
    return Deno.loadavg();
}
export function networkInterfaces() {
    notImplemented(SEE_GITHUB_ISSUE);
}
export function platform() {
    return process.platform;
}
export function release() {
    return Deno.osRelease();
}
export function setPriority(pid, priority) {
    if (priority === undefined) {
        priority = pid;
        pid = 0;
    }
    validateIntegerRange(pid, "pid");
    validateIntegerRange(priority, "priority", -20, 19);
    notImplemented(SEE_GITHUB_ISSUE);
}
export function tmpdir() {
    notImplemented(SEE_GITHUB_ISSUE);
}
export function totalmem() {
    return Deno.systemMemoryInfo().total;
}
export function type() {
    switch (Deno.build.os) {
        case "windows":
            return "Windows_NT";
        case "linux":
            return "Linux";
        case "darwin":
            return "Darwin";
        default:
            throw Error("unreachable");
    }
}
export function uptime() {
    notImplemented(SEE_GITHUB_ISSUE);
}
export function userInfo(options = { encoding: "utf-8" }) {
    notImplemented(SEE_GITHUB_ISSUE);
}
export const constants = {
    dlopen: {},
    errno: {},
    signals: Deno.Signal,
    priority: {},
};
export const EOL = Deno.build.os == "windows" ? fsEOL.CRLF : fsEOL.LF;
export default {
    arch,
    cpus,
    endianness,
    freemem,
    getPriority,
    homedir,
    hostname,
    loadavg,
    networkInterfaces,
    platform,
    release,
    setPriority,
    tmpdir,
    totalmem,
    type,
    uptime,
    userInfo,
    constants,
    EOL,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJvcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFvQkEsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUM3QyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDbkQsT0FBTyxFQUFFLEdBQUcsSUFBSSxLQUFLLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDNUMsT0FBTyxPQUFPLE1BQU0sY0FBYyxDQUFDO0FBRW5DLE1BQU0sZ0JBQWdCLEdBQUcsa0RBQWtELENBQUM7QUFtRTNFLElBQVksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsR0FBVyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7QUFFeEQsVUFBa0IsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsR0FBVyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUM7QUFFcEUsT0FBZSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxHQUFXLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUU5RCxPQUFlLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEdBQWtCLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUVyRSxRQUFnQixDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxHQUFrQixFQUFFLENBQUMsUUFBUSxFQUFFLENBQUM7QUFFdkUsUUFBZ0IsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsR0FBVyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUM7QUFFaEUsT0FBZSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxHQUFXLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUU5RCxRQUFnQixDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxHQUFXLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUVoRSxJQUFZLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEdBQVcsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO0FBRXhELE1BQWMsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsR0FBVyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUM7QUFHN0QsTUFBTSxVQUFVLElBQUk7SUFDbEIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztBQUN6QixDQUFDO0FBR0QsTUFBTSxVQUFVLElBQUk7SUFDbEIsY0FBYyxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDbkMsQ0FBQztBQU9ELE1BQU0sVUFBVSxVQUFVO0lBRXhCLE1BQU0sTUFBTSxHQUFHLElBQUksV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xDLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBb0IsQ0FBQztJQUUvRCxPQUFPLElBQUksVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7QUFDekQsQ0FBQztBQUdELE1BQU0sVUFBVSxPQUFPO0lBQ3JCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUMsSUFBSSxDQUFDO0FBQ3RDLENBQUM7QUFHRCxNQUFNLFVBQVUsV0FBVyxDQUFDLEdBQUcsR0FBRyxDQUFDO0lBQ2pDLG9CQUFvQixDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNqQyxjQUFjLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUNuQyxDQUFDO0FBR0QsTUFBTSxVQUFVLE9BQU87SUFDckIsUUFBUSxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRTtRQUNyQixLQUFLLFNBQVM7WUFDWixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxJQUFJLElBQUksQ0FBQztRQUM3QyxLQUFLLE9BQU8sQ0FBQztRQUNiLEtBQUssUUFBUTtZQUNYLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDO1FBQ3RDO1lBQ0UsTUFBTSxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7S0FDOUI7QUFDSCxDQUFDO0FBR0QsTUFBTSxVQUFVLFFBQVE7SUFDdEIsY0FBYyxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDbkMsQ0FBQztBQUdELE1BQU0sVUFBVSxPQUFPO0lBQ3JCLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEtBQUssU0FBUyxFQUFFO1FBQy9CLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQ2xCO0lBQ0QsT0FBTyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDeEIsQ0FBQztBQUdELE1BQU0sVUFBVSxpQkFBaUI7SUFDL0IsY0FBYyxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDbkMsQ0FBQztBQUVELE1BQU0sVUFBVSxRQUFRO0lBQ3RCLE9BQU8sT0FBTyxDQUFDLFFBQVEsQ0FBQztBQUMxQixDQUFDO0FBR0QsTUFBTSxVQUFVLE9BQU87SUFDckIsT0FBTyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7QUFDMUIsQ0FBQztBQUdELE1BQU0sVUFBVSxXQUFXLENBQUMsR0FBVyxFQUFFLFFBQWlCO0lBR3hELElBQUksUUFBUSxLQUFLLFNBQVMsRUFBRTtRQUMxQixRQUFRLEdBQUcsR0FBRyxDQUFDO1FBQ2YsR0FBRyxHQUFHLENBQUMsQ0FBQztLQUNUO0lBQ0Qsb0JBQW9CLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2pDLG9CQUFvQixDQUFDLFFBQVEsRUFBRSxVQUFVLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFFcEQsY0FBYyxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDbkMsQ0FBQztBQUdELE1BQU0sVUFBVSxNQUFNO0lBQ3BCLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ25DLENBQUM7QUFHRCxNQUFNLFVBQVUsUUFBUTtJQUN0QixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLEtBQUssQ0FBQztBQUN2QyxDQUFDO0FBR0QsTUFBTSxVQUFVLElBQUk7SUFDbEIsUUFBUSxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRTtRQUNyQixLQUFLLFNBQVM7WUFDWixPQUFPLFlBQVksQ0FBQztRQUN0QixLQUFLLE9BQU87WUFDVixPQUFPLE9BQU8sQ0FBQztRQUNqQixLQUFLLFFBQVE7WUFDWCxPQUFPLFFBQVEsQ0FBQztRQUNsQjtZQUNFLE1BQU0sS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0tBQzlCO0FBQ0gsQ0FBQztBQUdELE1BQU0sVUFBVSxNQUFNO0lBQ3BCLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ25DLENBQUM7QUFHRCxNQUFNLFVBQVUsUUFBUSxDQUV0QixVQUEyQixFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUU7SUFFaEQsY0FBYyxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDbkMsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRztJQUV2QixNQUFNLEVBQUUsRUFFUDtJQUNELEtBQUssRUFBRSxFQUVOO0lBQ0QsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNO0lBQ3BCLFFBQVEsRUFBRSxFQUVUO0NBQ0YsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFFdEUsZUFBZTtJQUNiLElBQUk7SUFDSixJQUFJO0lBQ0osVUFBVTtJQUNWLE9BQU87SUFDUCxXQUFXO0lBQ1gsT0FBTztJQUNQLFFBQVE7SUFDUixPQUFPO0lBQ1AsaUJBQWlCO0lBQ2pCLFFBQVE7SUFDUixPQUFPO0lBQ1AsV0FBVztJQUNYLE1BQU07SUFDTixRQUFRO0lBQ1IsSUFBSTtJQUNKLE1BQU07SUFDTixRQUFRO0lBQ1IsU0FBUztJQUNULEdBQUc7Q0FDSixDQUFDIn0=