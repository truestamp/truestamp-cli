function createSizeBuffer(size) {
    if (size <= 127)
        return new Uint8Array([size]);
    const bytes = [];
    while (size > 0) {
        bytes.push(size & 0xff);
        size = size >> 8;
    }
    bytes.reverse();
    return new Uint8Array([0x80 + bytes.length, ...bytes]);
}
export class BER {
    static createSequence(children) {
        const size = children.reduce((accumlatedSize, child) => accumlatedSize + child.length, 0);
        return new Uint8Array([
            0x30,
            ...createSizeBuffer(size),
            ...children.reduce((buffer, child) => [...buffer, ...child], []),
        ]);
    }
    static createNull() {
        return new Uint8Array([0x05, 0x00]);
    }
    static createBoolean(value) {
        return new Uint8Array([0x01, 0x01, value ? 0x01 : 0x00]);
    }
    static createInteger(value) {
        if (typeof value === "number")
            return BER.createBigInteger(BigInt(value));
        return BER.createBigInteger(value);
    }
    static createBigInteger(value) {
        if (value === 0n)
            return new Uint8Array([0x02, 0x01, 0x00]);
        const isNegative = value < 0;
        const content = [];
        let n = isNegative ? -value : value;
        while (n > 0n) {
            content.push(Number(n & 255n));
            n = n >> 8n;
        }
        if (!isNegative) {
            if (content[content.length - 1] & 0x80)
                content.push(0x00);
        }
        else {
            for (let i = 0; i < content.length; i++)
                content[i] = 256 - content[i];
            if (!(content[content.length - 1] & 0x80))
                content.push(0xff);
        }
        content.reverse();
        return new Uint8Array([
            0x02,
            ...createSizeBuffer(content.length),
            ...content,
        ]);
    }
    static createBitString(value) {
        return new Uint8Array([
            0x03,
            ...createSizeBuffer(value.length + 1),
            0x00,
            ...value,
        ]);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNuMS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImFzbjEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsU0FBUyxnQkFBZ0IsQ0FBQyxJQUFZO0lBQ3BDLElBQUksSUFBSSxJQUFJLEdBQUc7UUFBRSxPQUFPLElBQUksVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUUvQyxNQUFNLEtBQUssR0FBRyxFQUFFLENBQUM7SUFDakIsT0FBTyxJQUFJLEdBQUcsQ0FBQyxFQUFFO1FBQ2YsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDeEIsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLENBQUM7S0FDbEI7SUFFRCxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDaEIsT0FBTyxJQUFJLFVBQVUsQ0FBQyxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUN6RCxDQUFDO0FBRUQsTUFBTSxPQUFPLEdBQUc7SUFDUCxNQUFNLENBQUMsY0FBYyxDQUFDLFFBQXNCO1FBRWpELE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQzFCLENBQUMsY0FBYyxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQ3hELENBQUMsQ0FDRixDQUFDO1FBRUYsT0FBTyxJQUFJLFVBQVUsQ0FBQztZQUNwQixJQUFJO1lBQ0osR0FBRyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUM7WUFDekIsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUNoQixDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxNQUFNLEVBQUUsR0FBRyxLQUFLLENBQUMsRUFDeEMsRUFBRSxDQUNIO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVNLE1BQU0sQ0FBQyxVQUFVO1FBQ3RCLE9BQU8sSUFBSSxVQUFV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