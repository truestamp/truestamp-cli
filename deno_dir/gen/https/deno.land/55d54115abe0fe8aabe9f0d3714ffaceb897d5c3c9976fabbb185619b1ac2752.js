import { encode } from "./../../src/utility/encode.ts";
import { BER } from "../utility/asn1.ts";
function add_line_break(base64_str) {
    const lines = [];
    for (let i = 0; i < base64_str.length; i += 64) {
        lines.push(base64_str.substr(i, 64));
    }
    return lines.join("\n");
}
export function rsa_export_pkcs8_public(key) {
    const content = BER.createSequence([
        BER.createSequence([
            new Uint8Array([
                0x06,
                0x09,
                0x2a,
                0x86,
                0x48,
                0x86,
                0xf7,
                0x0d,
                0x01,
                0x01,
                0x01,
            ]),
            BER.createNull(),
        ]),
        BER.createBitString(BER.createSequence([
            BER.createInteger(key.n),
            BER.createInteger(key.e || 0n),
        ])),
    ]);
    return ("-----BEGIN PUBLIC KEY-----\n" +
        add_line_break(encode.binary(content).base64()) +
        "\n-----END PUBLIC KEY-----\n");
}
export function rsa_export_pkcs8_private(key) {
    const content = BER.createSequence([
        BER.createInteger(0),
        BER.createInteger(key.n),
        BER.createInteger(key.e || 0n),
        BER.createInteger(key.d || 0n),
        BER.createInteger(key.p || 0n),
        BER.createInteger(key.q || 0n),
        BER.createInteger(key.dp || 0n),
        BER.createInteger(key.dq || 0n),
        BER.createInteger(key.qi || 0n),
    ]);
    const ber = encode.binary(content).base64();
    return ("-----BEGIN RSA PRIVATE KEY-----\n" +
        add_line_break(ber) +
        "\n-----END RSA PRIVATE KEY-----\n");
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwb3J0X2tleS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImV4cG9ydF9rZXkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUV6QyxTQUFTLGNBQWMsQ0FBQyxVQUFrQjtJQUN4QyxNQUFNLEtBQUssR0FBRyxFQUFFLENBQUM7SUFDakIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRTtRQUM5QyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDdEM7SUFFRCxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDMUIsQ0FBQztBQUVELE1BQU0sVUFBVSx1QkFBdUIsQ0FBQyxHQUFpQjtJQUN2RCxNQUFNLE9BQU8sR0FBRyxHQUFHLENBQUMsY0FBYyxDQUFDO1FBQ2pDLEdBQUcsQ0FBQyxjQUFjLENBQUM7WUFDakIsSUFBSSxVQUFVLENBQUM7Z0JBQ2IsSUFBSTtnQkFDSixJQUFJO2dCQUNKLElBQUk7Z0JBQ0osSUFBSTtnQkFDSixJQUFJO2dCQUNKLElBQUk7Z0JBQ0osSUFBSTtnQkFDSixJQUFJO2dCQUNKLElBQUk7Z0JBQ0osSUFBSTtnQkFDSixJQUFJO2FBQ0wsQ0FBQztZQUNGLEdBQUcsQ0FBQyxVQUFVLEVBQUU7U0FDakIsQ0FBQztRQUNGLEdBQUcsQ0FBQyxlQUFlLENBQ2pCLEdBQUcsQ0FBQyxjQUFjLENBQUM7WUFDakIsR0FBRyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ3hCLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDL0IsQ0FBQyxDQUNIO0tBQ0YsQ0FBQyxDQUFDO0lBRUgsT0FBTyxDQUNMLDhCQUE4QjtRQUM5QixjQUFjLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUMvQyw4QkFBOEIsQ0FDL0IsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLFVBQVUsd0JBQXdCLENBQUMsR0FBaUI7SUFDeEQsTUFBTSxPQUFPLEdBQUcsR0FBRyxDQUFDLGNBQWMsQ0FBQztRQUNqQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztRQUNwQixHQUFHLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDeEIsR0FBRyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUM5QixHQUFHLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzlCLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDOUIsR0FBRyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUM5QixHQUFHLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDO1FBQy9CLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUM7UUFDL0IsR0FBRyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQztLQUNoQyxDQUFDLENBQUM7SUFFSCxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBRTVDLE9BQU8sQ0FDTCxtQ0FBbUM7UUFDbkMsY0FBYyxDQUFDLEdBQUcsQ0FBQztRQUNuQixtQ0FBbUMsQ0FDcEMsQ0FBQztBQUNKLENBQUMifQ==