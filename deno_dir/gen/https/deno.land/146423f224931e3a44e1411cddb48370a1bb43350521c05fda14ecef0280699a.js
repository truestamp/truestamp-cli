import { Buffer } from "../buffer.ts";
import { kPaused } from "./symbols.ts";
import { ERR_STREAM_PUSH_AFTER_EOF, ERR_STREAM_UNSHIFT_AFTER_END_EVENT, } from "../_errors.ts";
export function _destroy(self, err, cb) {
    self._destroy(err || null, (err) => {
        const r = self._readableState;
        if (err) {
            err.stack;
            if (!r.errored) {
                r.errored = err;
            }
        }
        r.closed = true;
        if (typeof cb === "function") {
            cb(err);
        }
        if (err) {
            queueMicrotask(() => {
                if (!r.errorEmitted) {
                    r.errorEmitted = true;
                    self.emit("error", err);
                }
                r.closeEmitted = true;
                if (r.emitClose) {
                    self.emit("close");
                }
            });
        }
        else {
            queueMicrotask(() => {
                r.closeEmitted = true;
                if (r.emitClose) {
                    self.emit("close");
                }
            });
        }
    });
}
export function addChunk(stream, state, chunk, addToFront) {
    if (state.flowing && state.length === 0 && !state.sync) {
        if (state.multiAwaitDrain) {
            state.awaitDrainWriters.clear();
        }
        else {
            state.awaitDrainWriters = null;
        }
        stream.emit("data", chunk);
    }
    else {
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) {
            state.buffer.unshift(chunk);
        }
        else {
            state.buffer.push(chunk);
        }
        if (state.needReadable) {
            emitReadable(stream);
        }
    }
    maybeReadMore(stream, state);
}
const MAX_HWM = 0x40000000;
export function computeNewHighWaterMark(n) {
    if (n >= MAX_HWM) {
        n = MAX_HWM;
    }
    else {
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
    }
    return n;
}
export function emitReadable(stream) {
    const state = stream._readableState;
    state.needReadable = false;
    if (!state.emittedReadable) {
        state.emittedReadable = true;
        queueMicrotask(() => emitReadable_(stream));
    }
}
function emitReadable_(stream) {
    const state = stream._readableState;
    if (!state.destroyed && !state.errored && (state.length || state.ended)) {
        stream.emit("readable");
        state.emittedReadable = false;
    }
    state.needReadable = !state.flowing &&
        !state.ended &&
        state.length <= state.highWaterMark;
    flow(stream);
}
export function endReadable(stream) {
    const state = stream._readableState;
    if (!state.endEmitted) {
        state.ended = true;
        queueMicrotask(() => endReadableNT(state, stream));
    }
}
function endReadableNT(state, stream) {
    if (!state.errorEmitted && !state.closeEmitted &&
        !state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.emit("end");
        if (state.autoDestroy) {
            stream.destroy();
        }
    }
}
export function errorOrDestroy(stream, err, sync = false) {
    const r = stream._readableState;
    if (r.destroyed) {
        return stream;
    }
    if (r.autoDestroy) {
        stream.destroy(err);
    }
    else if (err) {
        err.stack;
        if (!r.errored) {
            r.errored = err;
        }
        if (sync) {
            queueMicrotask(() => {
                if (!r.errorEmitted) {
                    r.errorEmitted = true;
                    stream.emit("error", err);
                }
            });
        }
        else if (!r.errorEmitted) {
            r.errorEmitted = true;
            stream.emit("error", err);
        }
    }
}
function flow(stream) {
    const state = stream._readableState;
    while (state.flowing && stream.read() !== null)
        ;
}
export function fromList(n, state) {
    if (state.length === 0) {
        return null;
    }
    let ret;
    if (state.objectMode) {
        ret = state.buffer.shift();
    }
    else if (!n || n >= state.length) {
        if (state.decoder) {
            ret = state.buffer.join("");
        }
        else if (state.buffer.length === 1) {
            ret = state.buffer.first();
        }
        else {
            ret = state.buffer.concat(state.length);
        }
        state.buffer.clear();
    }
    else {
        ret = state.buffer.consume(n, !!state.decoder);
    }
    return ret;
}
export function howMuchToRead(n, state) {
    if (n <= 0 || (state.length === 0 && state.ended)) {
        return 0;
    }
    if (state.objectMode) {
        return 1;
    }
    if (Number.isNaN(n)) {
        if (state.flowing && state.length) {
            return state.buffer.first().length;
        }
        return state.length;
    }
    if (n <= state.length) {
        return n;
    }
    return state.ended ? state.length : 0;
}
export function maybeReadMore(stream, state) {
    if (!state.readingMore && state.constructed) {
        state.readingMore = true;
        queueMicrotask(() => maybeReadMore_(stream, state));
    }
}
function maybeReadMore_(stream, state) {
    while (!state.reading && !state.ended &&
        (state.length < state.highWaterMark ||
            (state.flowing && state.length === 0))) {
        const len = state.length;
        stream.read(0);
        if (len === state.length) {
            break;
        }
    }
    state.readingMore = false;
}
export function nReadingNextTick(self) {
    self.read(0);
}
export function onEofChunk(stream, state) {
    if (state.ended)
        return;
    if (state.decoder) {
        const chunk = state.decoder.end();
        if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
        }
    }
    state.ended = true;
    if (state.sync) {
        emitReadable(stream);
    }
    else {
        state.needReadable = false;
        state.emittedReadable = true;
        emitReadable_(stream);
    }
}
export function pipeOnDrain(src, dest) {
    return function pipeOnDrainFunctionResult() {
        const state = src._readableState;
        if (state.awaitDrainWriters === dest) {
            state.awaitDrainWriters = null;
        }
        else if (state.multiAwaitDrain) {
            state.awaitDrainWriters.delete(dest);
        }
        if ((!state.awaitDrainWriters ||
            state.awaitDrainWriters.size === 0) &&
            src.listenerCount("data")) {
            state.flowing = true;
            flow(src);
        }
    };
}
export function prependListener(emitter, event, fn) {
    if (typeof emitter.prependListener === "function") {
        return emitter.prependListener(event, fn);
    }
    if (emitter._events.get(event)?.length) {
        const listeners = [fn, ...emitter._events.get(event)];
        emitter._events.set(event, listeners);
    }
    else {
        emitter.on(event, fn);
    }
}
export function readableAddChunk(stream, chunk, encoding = undefined, addToFront) {
    const state = stream._readableState;
    let usedEncoding = encoding;
    let err;
    if (!state.objectMode) {
        if (typeof chunk === "string") {
            usedEncoding = encoding || state.defaultEncoding;
            if (state.encoding !== usedEncoding) {
                if (addToFront && state.encoding) {
                    chunk = Buffer.from(chunk, usedEncoding).toString(state.encoding);
                }
                else {
                    chunk = Buffer.from(chunk, usedEncoding);
                    usedEncoding = "";
                }
            }
        }
        else if (chunk instanceof Uint8Array) {
            chunk = Buffer.from(chunk);
        }
    }
    if (err) {
        errorOrDestroy(stream, err);
    }
    else if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
    }
    else if (state.objectMode || (chunk.length > 0)) {
        if (addToFront) {
            if (state.endEmitted) {
                errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
            }
            else {
                addChunk(stream, state, chunk, true);
            }
        }
        else if (state.ended) {
            errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
        }
        else if (state.destroyed || state.errored) {
            return false;
        }
        else {
            state.reading = false;
            if (state.decoder && !usedEncoding) {
                chunk = state.decoder.write(Buffer.from(chunk));
                if (state.objectMode || chunk.length !== 0) {
                    addChunk(stream, state, chunk, false);
                }
                else {
                    maybeReadMore(stream, state);
                }
            }
            else {
                addChunk(stream, state, chunk, false);
            }
        }
    }
    else if (!addToFront) {
        state.reading = false;
        maybeReadMore(stream, state);
    }
    return !state.ended &&
        (state.length < state.highWaterMark || state.length === 0);
}
export function resume(stream, state) {
    if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        queueMicrotask(() => resume_(stream, state));
    }
}
function resume_(stream, state) {
    if (!state.reading) {
        stream.read(0);
    }
    state.resumeScheduled = false;
    stream.emit("resume");
    flow(stream);
    if (state.flowing && !state.reading) {
        stream.read(0);
    }
}
export function updateReadableListening(self) {
    const state = self._readableState;
    state.readableListening = self.listenerCount("readable") > 0;
    if (state.resumeScheduled && state[kPaused] === false) {
        state.flowing = true;
    }
    else if (self.listenerCount("data") > 0) {
        self.resume();
    }
    else if (!state.readableListening) {
        state.flowing = null;
    }
}
//# sourceMappingURL=data:application/json;base64,