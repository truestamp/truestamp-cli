function big_base64(m) {
    if (m === undefined)
        return undefined;
    const bytes = [];
    while (m > 0n) {
        bytes.push(Number(m & 255n));
        m = m >> 8n;
    }
    bytes.reverse();
    let a = btoa(String.fromCharCode.apply(null, bytes)).replace(/=/g, "");
    a = a.replace(/\+/g, "-");
    a = a.replace(/\//g, "_");
    return a;
}
function getHashFunctionName(hash) {
    if (hash === "sha1")
        return "SHA-1";
    if (hash === "sha256")
        return "SHA-256";
    return "";
}
async function createWebCryptoKey(key, usage, options) {
    let jwk = {
        kty: "RSA",
        n: big_base64(key.n),
        ext: true,
    };
    if (usage === "encrypt") {
        jwk = { ...jwk, e: big_base64(key.e) };
    }
    else if (usage === "decrypt") {
        jwk = {
            ...jwk,
            d: big_base64(key.d),
            e: big_base64(key.e),
            p: big_base64(key.p),
            q: big_base64(key.q),
            dp: big_base64(key.dp),
            dq: big_base64(key.dq),
            qi: big_base64(key.qi),
        };
    }
    return await crypto.subtle.importKey("jwk", jwk, {
        name: "RSA-OAEP",
        hash: { name: getHashFunctionName(options.hash) },
    }, false, [usage]);
}
export class WebCryptoRSA {
    key;
    options;
    encryptedKey = null;
    decryptedKey = null;
    constructor(key, options) {
        this.key = key;
        this.options = options;
    }
    static isSupported(options) {
        if (!crypto.subtle)
            return false;
        if (options.padding !== "oaep")
            return false;
        return true;
    }
    static async encrypt(key, m, options) {
        return await crypto.subtle.encrypt({ name: "RSA-OAEP" }, await createWebCryptoKey(key, "encrypt", options), m);
    }
    static async decrypt(key, m, options) {
        return await crypto.subtle.decrypt({ name: "RSA-OAEP" }, await createWebCryptoKey(key, "decrypt", options), m);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnNhX3djLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicnNhX3djLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLFNBQVMsVUFBVSxDQUFDLENBQVU7SUFDNUIsSUFBSSxDQUFDLEtBQUssU0FBUztRQUFFLE9BQU8sU0FBUyxDQUFDO0lBRXRDLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQztJQUVqQixPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUU7UUFDYixLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUM3QixDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztLQUNiO0lBRUQsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2hCLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZFLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztJQUMxQixDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDMUIsT0FBTyxDQUFDLENBQUM7QUFDWCxDQUFDO0FBRUQsU0FBUyxtQkFBbUIsQ0FBQyxJQUFZO0lBQ3ZDLElBQUksSUFBSSxLQUFLLE1BQU07UUFBRSxPQUFPLE9BQU8sQ0FBQztJQUNwQyxJQUFJLElBQUksS0FBSyxRQUFRO1FBQUUsT0FBTyxTQUFTLENBQUM7SUFDeEMsT0FBTyxFQUFFLENBQUM7QUFDWixDQUFDO0FBRUQsS0FBSyxVQUFVLGtCQUFrQixDQUMvQixHQUFXLEVBQ1gsS0FBYSxFQUNiLE9BQWtCO0lBRWxCLElBQUksR0FBRyxHQUFRO1FBQ2IsR0FBRyxFQUFFLEtBQUs7UUFDVixDQUFDLEVB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