import { notImplemented } from "./_utils.ts";
import { validateIntegerRange } from "./_utils.ts";
import { EOL as fsEOL } from "../fs/eol.ts";
import process from "./process.ts";
const SEE_GITHUB_ISSUE = "See https://github.com/denoland/deno/issues/3802";
arch[Symbol.toPrimitive] = () => arch();
endianness[Symbol.toPrimitive] = () => endianness();
freemem[Symbol.toPrimitive] = () => freemem();
homedir[Symbol.toPrimitive] = () => homedir();
hostname[Symbol.toPrimitive] = () => hostname();
platform[Symbol.toPrimitive] = () => platform();
release[Symbol.toPrimitive] = () => release();
totalmem[Symbol.toPrimitive] = () => totalmem();
type[Symbol.toPrimitive] = () => type();
uptime[Symbol.toPrimitive] = () => uptime();
export function arch() {
    return Deno.build.arch;
}
export function cpus() {
    notImplemented(SEE_GITHUB_ISSUE);
}
export function endianness() {
    const buffer = new ArrayBuffer(2);
    new DataView(buffer).setInt16(0, 256, true);
    return new Int16Array(buffer)[0] === 256 ? "LE" : "BE";
}
export function freemem() {
    return Deno.systemMemoryInfo().free;
}
export function getPriority(pid = 0) {
    validateIntegerRange(pid, "pid");
    notImplemented(SEE_GITHUB_ISSUE);
}
export function homedir() {
    switch (Deno.build.os) {
        case "windows":
            return Deno.env.get("USERPROFILE") || null;
        case "linux":
        case "darwin":
            return Deno.env.get("HOME") || null;
        default:
            throw Error("unreachable");
    }
}
export function hostname() {
    notImplemented(SEE_GITHUB_ISSUE);
}
export function loadavg() {
    if (Deno.build.os === "windows") {
        return [0, 0, 0];
    }
    return Deno.loadavg();
}
export function networkInterfaces() {
    notImplemented(SEE_GITHUB_ISSUE);
}
export function platform() {
    return process.platform;
}
export function release() {
    return Deno.osRelease();
}
export function setPriority(pid, priority) {
    if (priority === undefined) {
        priority = pid;
        pid = 0;
    }
    validateIntegerRange(pid, "pid");
    validateIntegerRange(priority, "priority", -20, 19);
    notImplemented(SEE_GITHUB_ISSUE);
}
export function tmpdir() {
    notImplemented(SEE_GITHUB_ISSUE);
}
export function totalmem() {
    return Deno.systemMemoryInfo().total;
}
export function type() {
    switch (Deno.build.os) {
        case "windows":
            return "Windows_NT";
        case "linux":
            return "Linux";
        case "darwin":
            return "Darwin";
        default:
            throw Error("unreachable");
    }
}
export function uptime() {
    notImplemented(SEE_GITHUB_ISSUE);
}
export function userInfo(options = { encoding: "utf-8" }) {
    notImplemented(SEE_GITHUB_ISSUE);
}
export const constants = {
    dlopen: {},
    errno: {},
    signals: Deno.Signal,
    priority: {},
};
export const EOL = Deno.build.os == "windows" ? fsEOL.CRLF : fsEOL.LF;
export default {
    arch,
    cpus,
    endianness,
    freemem,
    getPriority,
    homedir,
    hostname,
    loadavg,
    networkInterfaces,
    platform,
    release,
    setPriority,
    tmpdir,
    totalmem,
    type,
    uptime,
    userInfo,
    constants,
    EOL,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJvcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFvQkEsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUM3QyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDbkQsT0FBTyxFQUFFLEdBQUcsSUFBSSxLQUFLLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDNUMsT0FBTyxPQUFPLE1BQU0sY0FBYyxDQUFDO0FBRW5DLE1BQU0sZ0JBQWdCLEdBQUcsa0RBQWtELENBQUM7QUFrRTVFLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsR0FBVyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDaEQsVUFBVSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxHQUFXLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQztBQUM1RCxPQUFPLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEdBQVcsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ3RELE9BQU8sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsR0FBa0IsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQzdELFFBQVEsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsR0FBa0IsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQy9ELFFBQVEsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsR0FBVyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDeEQsT0FBTyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxHQUFXLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUN0RCxRQUFRLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEdBQVcsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQ3hELElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsR0FBVyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDaEQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxHQUFXLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUdwRCxNQUFNLFVBQVUsSUFBSTtJQUNsQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO0FBQ3pCLENBQUM7QUFHRCxNQUFNLFVBQVUsSUFBSTtJQUNsQixjQUFjLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUNuQyxDQUFDO0FBT0QsTUFBTSxVQUFVLFVBQVU7SUFFeEIsTUFBTSxNQUFNLEdBQUcsSUFBSSxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEMsSUFBSSxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFvQixDQUFDO0lBRS9ELE9BQU8sSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztBQUN6RCxDQUFDO0FBR0QsTUFBTSxVQUFVLE9BQU87SUFDckIsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxJQUFJLENBQUM7QUFDdEMsQ0FBQztBQUdELE1BQU0sVUFBVSxXQUFXLENBQUMsR0FBRyxHQUFHLENBQUM7SUFDakMsb0JBQW9CLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2pDLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ25DLENBQUM7QUFHRCxNQUFNLFVBQVUsT0FBTztJQUNyQixRQUFRLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFO1FBQ3JCLEtBQUssU0FBUztZQUNaLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLElBQUksSUFBSSxDQUFDO1FBQzdDLEtBQUssT0FBTyxDQUFDO1FBQ2IsS0FBSyxRQUFRO1lBQ1gsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUM7UUFDdEM7WUFDRSxNQUFNLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQztLQUM5QjtBQUNILENBQUM7QUFHRCxNQUFNLFVBQVUsUUFBUTtJQUN0QixjQUFjLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUNuQyxDQUFDO0FBR0QsTUFBTSxVQUFVLE9BQU87SUFDckIsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsS0FBSyxTQUFTLEVBQUU7UUFDL0IsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDbEI7SUFDRCxPQUFPLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUN4QixDQUFDO0FBR0QsTUFBTSxVQUFVLGlCQUFpQjtJQUMvQixjQUFjLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUNuQyxDQUFDO0FBRUQsTUFBTSxVQUFVLFFBQVE7SUFDdEIsT0FBTyxPQUFPLENBQUMsUUFBUSxDQUFDO0FBQzFCLENBQUM7QUFHRCxNQUFNLFVBQVUsT0FBTztJQUNyQixPQUFPLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUMxQixDQUFDO0FBR0QsTUFBTSxVQUFVLFdBQVcsQ0FBQyxHQUFXLEVBQUUsUUFBaUI7SUFHeEQsSUFBSSxRQUFRLEtBQUssU0FBUyxFQUFFO1FBQzFCLFFBQVEsR0FBRyxHQUFHLENBQUM7UUFDZixHQUFHLEdBQUcsQ0FBQyxDQUFDO0tBQ1Q7SUFDRCxvQkFBb0IsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDakMsb0JBQW9CLENBQUMsUUFBUSxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUVwRCxjQUFjLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUNuQyxDQUFDO0FBR0QsTUFBTSxVQUFVLE1BQU07SUFDcEIsY0FBYyxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDbkMsQ0FBQztBQUdELE1BQU0sVUFBVSxRQUFRO0lBQ3RCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUMsS0FBSyxDQUFDO0FBQ3ZDLENBQUM7QUFHRCxNQUFNLFVBQVUsSUFBSTtJQUNsQixRQUFRLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFO1FBQ3JCLEtBQUssU0FBUztZQUNaLE9BQU8sWUFBWSxDQUFDO1FBQ3RCLEtBQUssT0FBTztZQUNWLE9BQU8sT0FBTyxDQUFDO1FBQ2pCLEtBQUssUUFBUTtZQUNYLE9BQU8sUUFBUSxDQUFDO1FBQ2xCO1lBQ0UsTUFBTSxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7S0FDOUI7QUFDSCxDQUFDO0FBR0QsTUFBTSxVQUFVLE1BQU07SUFDcEIsY0FBYyxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDbkMsQ0FBQztBQUdELE1BQU0sVUFBVSxRQUFRLENBRXRCLFVBQTJCLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRTtJQUVoRCxjQUFjLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUNuQyxDQUFDO0FBRUQsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHO0lBRXZCLE1BQU0sRUFBRSxFQUVQO0lBQ0QsS0FBSyxFQUFFLEVBRU47SUFDRCxPQUFPLEVBQUUsSUFBSSxDQUFDLE1BQU07SUFDcEIsUUFBUSxFQUFFLEVBRVQ7Q0FDRixDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztBQUV0RSxlQUFlO0lBQ2IsSUFBSTtJQUNKLElBQUk7SUFDSixVQUFVO0lBQ1YsT0FBTztJQUNQLFdBQVc7SUFDWCxPQUFPO0lBQ1AsUUFBUTtJQUNSLE9BQU87SUFDUCxpQkFBaUI7SUFDakIsUUFBUTtJQUNSLE9BQU87SUFDUCxXQUFXO0lBQ1gsTUFBTTtJQUNOLFFBQVE7SUFDUixJQUFJO0lBQ0osTUFBTTtJQUNOLFFBQVE7SUFDUixTQUFTO0lBQ1QsR0FBRztDQUNKLENBQUMifQ==