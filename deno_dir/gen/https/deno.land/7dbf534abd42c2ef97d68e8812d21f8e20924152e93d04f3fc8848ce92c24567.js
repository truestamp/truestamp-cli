import * as stdColors from "https://deno.land/std@0.130.0/fmt/colors.ts";
const proto = Object.create(null);
const methodNames = Object.keys(stdColors);
for (const name of methodNames) {
    if (name === "setColorEnabled" || name === "getColorEnabled") {
        continue;
    }
    Object.defineProperty(proto, name, {
        get() {
            return factory([...this._stack, name]);
        },
    });
}
export const colors = factory();
function factory(stack = []) {
    const colors = function (str, ...args) {
        if (str) {
            const lastIndex = stack.length - 1;
            return stack.reduce((str, name, index) => index === lastIndex
                ? stdColors[name](str, ...args)
                : stdColors[name](str), str);
        }
        const tmp = stack.slice();
        stack = [];
        return factory(tmp);
    };
    Object.setPrototypeOf(colors, proto);
    colors._stack = stack;
    return colors;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3JzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29sb3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxTQUFTLE1BQU0sNkNBQTZDLENBQUM7QUF3QnpFLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDbEMsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQXlCLENBQUM7QUFDbkUsS0FBSyxNQUFNLElBQUksSUFBSSxXQUFXLEVBQUU7SUFDOUIsSUFBSSxJQUFJLEtBQUssaUJBQWlCLElBQUksSUFBSSxLQUFLLGlCQUFpQixFQUFFO1FBQzVELFNBQVM7S0FDVjtJQUNELE1BQU0sQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRTtRQUNqQyxHQUFHO1lBQ0QsT0FBTyxPQUFPLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUN6QyxDQUFDO0tBQ0YsQ0FBQyxDQUFDO0NBQ0o7QUFFRCxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQVcsT0FBTyxFQUFFLENBQUM7QUFheEMsU0FBUyxPQUFPLENBQUMsUUFBNkIsRUFBRTtJQUM5QyxNQUFNLE1BQU0sR0FBVyxVQUVyQixHQUFZLEVBQ1osR0FBRyxJQUFvQjtRQUV2QixJQUFJLEdBQUcsRUFBRTtZQUNQLE1BQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1lBQ25DLE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FDakIsQ0FBQyxHQUFXLEVBQUUsSUFBbUIsRUFBRSxLQUFhLEVBQUUsRUFBRSxDQUNsRCxLQUFLLEtBQUssU0FBUztnQkFDakIsQ0FBQyxDQUFFLFNBQVMsQ0FBQyxJQUFJLENBQWlCLENBQUMsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDO2dCQUNoRCxDQUFDLENBQUUsU0FBUyxDQUFDLElBQUksQ0FBaUIsQ0FBQyxHQUFHLENBQUMsRUFDM0MsR0FBRyxDQUNKLENBQUM7U0FDSDtRQUNELE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUMxQixLQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ1gsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdEIsQ0FBVyxDQUFDO0lBRVosTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDckMsTUFBTSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7SUFDdEIsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHN0ZENvbG9ycyBmcm9tIFwiaHR0cHM6Ly9kZW5vLmxhbmQvc3RkQDAuMTMwLjAvZm10L2NvbG9ycy50c1wiO1xuXG50eXBlIEV4Y2x1ZGVkQ29sb3JNZXRob2RzID0gXCJzZXRDb2xvckVuYWJsZWRcIiB8IFwiZ2V0Q29sb3JFbmFibGVkXCI7XG50eXBlIFByb3BlcnR5TmFtZXMgPSBrZXlvZiB0eXBlb2Ygc3RkQ29sb3JzO1xudHlwZSBDb2xvck1ldGhvZCA9IChzdHI6IHN0cmluZywgLi4uYXJnczogQXJyYXk8dW5rbm93bj4pID0+IHN0cmluZztcbnR5cGUgQ29sb3JNZXRob2RzID0gRXhjbHVkZTxQcm9wZXJ0eU5hbWVzLCBFeGNsdWRlZENvbG9yTWV0aG9kcz47XG50eXBlIENoYWluYWJsZTxULCBFIGV4dGVuZHMga2V5b2YgVCB8IG51bGwgPSBudWxsPiA9IHtcbiAgW1AgaW4ga2V5b2YgVF06IFAgZXh0ZW5kcyBFID8gVFtQXSA6IENoYWluYWJsZTxULCBFPiAmIFRbUF07XG59O1xuXG4vKiogQ2hhaW5hYmxlIGNvbG9ycyBpbnN0YW5jZSByZXR1cm5lZCBieSBhbGwgYW5zaSBlc2NhcGUgcHJvcGVydGllcy4gKi9cbmV4cG9ydCB0eXBlIENvbG9yc0NoYWluID1cbiAgJiBDaGFpbmFibGU8dHlwZW9mIHN0ZENvbG9ycywgRXhjbHVkZWRDb2xvck1ldGhvZHM+XG4gICYgeyBfc3RhY2s6IEFycmF5PENvbG9yTWV0aG9kcz4gfTtcblxuLyoqIENyZWF0ZSBuZXcgYENvbG9yc2AgaW5zdGFuY2UuICovXG5leHBvcnQgdHlwZSBDb2xvcnNGYWN0b3J5ID0gKCkgPT4gQ29sb3JzO1xuXG4vKipcbiAqIENoYWluYWJsZSBjb2xvcnMgbW9kdWxlLlxuICogSWYgaW52b2tlZCBhcyBtZXRob2QsIGEgbmV3IGBDb2xvcnNgIGluc3RhbmNlIHdpbGwgYmUgcmV0dXJuZWQuXG4gKi9cbmV4cG9ydCB0eXBlIENvbG9ycyA9IENvbG9yc0ZhY3RvcnkgJiBDb2xvcnNDaGFpbjtcblxuY29uc3QgcHJvdG8gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuY29uc3QgbWV0aG9kTmFtZXMgPSBPYmplY3Qua2V5cyhzdGRDb2xvcnMpIGFzIEFycmF5PFByb3BlcnR5TmFtZXM+O1xuZm9yIChjb25zdCBuYW1lIG9mIG1ldGhvZE5hbWVzKSB7XG4gIGlmIChuYW1lID09PSBcInNldENvbG9yRW5hYmxlZFwiIHx8IG5hbWUgPT09IFwiZ2V0Q29sb3JFbmFibGVkXCIpIHtcbiAgICBjb250aW51ZTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG8sIG5hbWUsIHtcbiAgICBnZXQodGhpczogQ29sb3JzQ2hhaW4pIHtcbiAgICAgIHJldHVybiBmYWN0b3J5KFsuLi50aGlzLl9zdGFjaywgbmFtZV0pO1xuICAgIH0sXG4gIH0pO1xufVxuXG5leHBvcnQgY29uc3QgY29sb3JzOiBDb2xvcnMgPSBmYWN0b3J5KCk7XG5cbi8qKlxuICogQ2hhaW5hYmxlIGNvbG9ycyBtb2R1bGUuXG4gKiBgYGBcbiAqIGNvbnNvbGUubG9nKGNvbG9ycy5ibHVlLmJnUmVkLmJvbGQoJ1dlbGNvbWUgdG8gRGVuby5MYW5kIScpKTtcbiAqIGBgYFxuICogSWYgaW52b2tlZCBhcyBtZXRob2QsIGEgbmV3IEFuc2kgaW5zdGFuY2Ugd2lsbCBiZSByZXR1cm5lZC5cbiAqIGBgYFxuICogY29uc3QgbXlDb2xvcnM6IENvbG9ycyA9IGNvbG9ycygpO1xuICogY29uc29sZS5sb2cobXlDb2xvcnMuYmx1ZS5iZ1JlZC5ib2xkKCdXZWxjb21lIHRvIERlbm8uTGFuZCEnKSk7XG4gKiBgYGBcbiAqL1xuZnVuY3Rpb24gZmFjdG9yeShzdGFjazogQXJyYXk8Q29sb3JNZXRob2RzPiA9IFtdKTogQ29sb3JzIHtcbiAgY29uc3QgY29sb3JzOiBDb2xvcnMgPSBmdW5jdGlvbiAoXG4gICAgdGhpczogQ29sb3JzQ2hhaW4gfCB1bmRlZmluZWQsXG4gICAgc3RyPzogc3RyaW5nLFxuICAgIC4uLmFyZ3M6IEFycmF5PHVua25vd24+XG4gICk6IHN0cmluZyB8IENvbG9yc0NoYWluIHtcbiAgICBpZiAoc3RyKSB7XG4gICAgICBjb25zdCBsYXN0SW5kZXggPSBzdGFjay5sZW5ndGggLSAxO1xuICAgICAgcmV0dXJuIHN0YWNrLnJlZHVjZShcbiAgICAgICAgKHN0cjogc3RyaW5nLCBuYW1lOiBQcm9wZXJ0eU5hbWVzLCBpbmRleDogbnVtYmVyKSA9PlxuICAgICAgICAgIGluZGV4ID09PSBsYXN0SW5kZXhcbiAgICAgICAgICAgID8gKHN0ZENvbG9yc1tuYW1lXSBhcyBDb2xvck1ldGhvZCkoc3RyLCAuLi5hcmdzKVxuICAgICAgICAgICAgOiAoc3RkQ29sb3JzW25hbWVdIGFzIENvbG9yTWV0aG9kKShzdHIpLFxuICAgICAgICBzdHIsXG4gICAgICApO1xuICAgIH1cbiAgICBjb25zdCB0bXAgPSBzdGFjay5zbGljZSgpO1xuICAgIHN0YWNrID0gW107XG4gICAgcmV0dXJuIGZhY3RvcnkodG1wKTtcbiAgfSBhcyBDb2xvcnM7XG5cbiAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGNvbG9ycywgcHJvdG8pO1xuICBjb2xvcnMuX3N0YWNrID0gc3RhY2s7XG4gIHJldHVybiBjb2xvcnM7XG59XG4iXX0=