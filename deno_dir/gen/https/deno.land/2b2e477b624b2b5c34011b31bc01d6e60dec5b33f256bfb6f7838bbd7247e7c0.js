import { notImplemented } from "../_utils.ts";
import { fromFileUrl } from "../path.ts";
import { Buffer } from "../buffer.ts";
import { writeAll, writeAllSync } from "../../io/util.ts";
import { checkEncoding, getEncoding, getOpenOptions, isFileOptions, } from "./_fs_common.ts";
export function writeFile(pathOrRid, data, optOrCallback, callback) {
    const callbackFn = optOrCallback instanceof Function ? optOrCallback : callback;
    const options = optOrCallback instanceof Function ? undefined : optOrCallback;
    if (!callbackFn) {
        throw new TypeError("Callback must be a function.");
    }
    pathOrRid = pathOrRid instanceof URL ? fromFileUrl(pathOrRid) : pathOrRid;
    const flag = isFileOptions(options)
        ? options.flag
        : undefined;
    const mode = isFileOptions(options)
        ? options.mode
        : undefined;
    const encoding = checkEncoding(getEncoding(options)) || "utf8";
    const openOptions = getOpenOptions(flag || "w");
    if (typeof data === "string")
        data = Buffer.from(data, encoding);
    const isRid = typeof pathOrRid === "number";
    let file;
    let error = null;
    (async () => {
        try {
            file = isRid
                ? new Deno.File(pathOrRid)
                : await Deno.open(pathOrRid, openOptions);
            if (!isRid && mode) {
                if (Deno.build.os === "windows")
                    notImplemented(`"mode" on Windows`);
                await Deno.chmod(pathOrRid, mode);
            }
            await writeAll(file, data);
        }
        catch (e) {
            error = e;
        }
        finally {
            if (!isRid && file)
                file.close();
            callbackFn(error);
        }
    })();
}
export function writeFileSync(pathOrRid, data, options) {
    pathOrRid = pathOrRid instanceof URL ? fromFileUrl(pathOrRid) : pathOrRid;
    const flag = isFileOptions(options)
        ? options.flag
        : undefined;
    const mode = isFileOptions(options)
        ? options.mode
        : undefined;
    const encoding = checkEncoding(getEncoding(options)) || "utf8";
    const openOptions = getOpenOptions(flag || "w");
    if (typeof data === "string")
        data = Buffer.from(data, encoding);
    const isRid = typeof pathOrRid === "number";
    let file;
    let error = null;
    try {
        file = isRid
            ? new Deno.File(pathOrRid)
            : Deno.openSync(pathOrRid, openOptions);
        if (!isRid && mode) {
            if (Deno.build.os === "windows")
                notImplemented(`"mode" on Windows`);
            Deno.chmodSync(pathOrRid, mode);
        }
        writeAllSync(file, data);
    }
    catch (e) {
        error = e;
    }
    finally {
        if (!isRid && file)
            file.close();
    }
    if (error)
        throw error;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2ZzX3dyaXRlRmlsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIl9mc193cml0ZUZpbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFhLGNBQWMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUN6RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDdEMsT0FBTyxFQUFFLFFBQVEsRUFBRSxZQUFZLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUMxRCxPQUFPLEVBRUwsYUFBYSxFQUNiLFdBQVcsRUFDWCxjQUFjLEVBQ2QsYUFBYSxHQUVkLE1BQU0saUJBQWlCLENBQUM7QUFFekIsTUFBTSxVQUFVLFNBQVMsQ0FDdkIsU0FBZ0MsRUFDaEMsSUFBeUIsRUFDekIsYUFBMkUsRUFDM0UsUUFBNEI7SUFFNUIsTUFBTSxVQUFVLEdBQ2QsYUFBYSxZQUFZLFFBQVEsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7SUFDL0QsTUFBTSxPQUFPLEdBQ1gsYUFBYSxZQUFZLFFBQVEsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUM7SUFFaEUsSUFBSSxDQUFDLFVBQVUsRUFBRTtRQUNmLE1BQU0sSUFBSSxTQUFTLENBQUMsOEJBQThCLENBQUMsQ0FBQztLQUNyRDtJQUVELFNBQVMsR0FBRyxTQUFTLFlBQVksR0FBRyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztJQUUxRSxNQUFNLElBQUksR0FBdUIsYUFBYSxDQUFDLE9BQU8sQ0FBQztRQUNyRCxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUk7UUFDZCxDQUFDLENBQUMsU0FBUyxDQUFDO0lBRWQsTUFBTSxJQUFJLEdBQXVCLGFBQWEsQ0FBQyxPQUFPLENBQUM7UUFDckQsQ0FB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