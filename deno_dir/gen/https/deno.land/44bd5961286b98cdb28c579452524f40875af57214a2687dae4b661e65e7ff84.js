import { base64url } from "./deps.ts";
import { create as createSignature, verify as verifySignature, } from "./signature.ts";
import { verify as verifyAlgorithm } from "./algorithm.ts";
export const encoder = new TextEncoder();
export const decoder = new TextDecoder();
function isExpired(exp, leeway = 0) {
    return exp + leeway < Date.now() / 1000;
}
function isTooEarly(nbf, leeway = 0) {
    return nbf - leeway > Date.now() / 1000;
}
function isObject(obj) {
    return (obj !== null && typeof obj === "object" && Array.isArray(obj) === false);
}
function is3Tuple(arr) {
    return arr.length === 3;
}
function hasInvalidTimingClaims(...claimValues) {
    return claimValues.some((claimValue) => claimValue !== undefined ? typeof claimValue !== "number" : false);
}
export function decode(jwt) {
    try {
        const arr = jwt
            .split(".")
            .map(base64url.decode)
            .map((uint8Array, index) => index === 0 || index === 1
            ? JSON.parse(decoder.decode(uint8Array))
            : uint8Array);
        if (is3Tuple(arr))
            return arr;
        else
            throw new Error();
    }
    catch {
        throw Error("The serialization of the jwt is invalid.");
    }
}
export function validate([header, payload, signature]) {
    if (typeof header?.alg !== "string") {
        throw new Error(`The jwt's alg header parameter value must be a string.`);
    }
    if (isObject(payload)) {
        if (hasInvalidTimingClaims(payload.exp, payload.nbf)) {
            throw new Error(`The jwt has an invalid 'exp' or 'nbf' claim.`);
        }
        if (typeof payload.exp === "number" && isExpired(payload.exp, 1)) {
            throw RangeError("The jwt is expired.");
        }
        if (typeof payload.nbf === "number" && isTooEarly(payload.nbf, 1)) {
            throw RangeError("The jwt is used too early.");
        }
        return {
            header,
            payload,
            signature,
        };
    }
    else {
        throw new Error(`The jwt claims set is not a JSON object.`);
    }
}
export async function verify(jwt, key) {
    const { header, payload, signature } = validate(decode(jwt));
    if (verifyAlgorithm(header.alg, key)) {
        if (!(await verifySignature(signature, key, header.alg, jwt.slice(0, jwt.lastIndexOf("."))))) {
            throw new Error("The jwt's signature does not match the verification signature.");
        }
        return payload;
    }
    else {
        throw new Error(`The jwt's alg '${header.alg}' does not match the key's algorithm.`);
    }
}
function createSigningInput(header, payload) {
    return `${base64url.encode(encoder.encode(JSON.stringify(header)))}.${base64url.encode(encoder.encode(JSON.stringify(payload)))}`;
}
export async function create(header, payload, key) {
    if (verifyAlgorithm(header.alg, key)) {
        const signingInput = createSigningInput(header, payload);
        const signature = await createSignature(header.alg, key, signingInput);
        return `${signingInput}.${signature}`;
    }
    else {
        throw new Error(`The jwt's alg '${header.alg}' does not match the key's algorithm.`);
    }
}
export function getNumericDate(exp) {
    return Math.round((exp instanceof Date ? exp.getTime() : Date.now() + exp * 1000) / 1000);
}
//# sourceMappingURL=data:application/json;base64,