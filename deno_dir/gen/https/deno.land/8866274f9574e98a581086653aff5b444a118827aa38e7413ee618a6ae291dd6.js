import { power_mod } from "./../math.ts";
import { eme_oaep_decode, eme_oaep_encode } from "./eme_oaep.ts";
import { i2osp, os2ip } from "./primitives.ts";
import { concat, random_bytes } from "./../helper.ts";
import { ber_decode, ber_simple } from "./basic_encoding_rule.ts";
import { RawBinary } from "../binary.ts";
export function rsaep(n, e, m) {
    return power_mod(m, e, n);
}
export function rsadp(key, c) {
    if (!key.d)
        throw "Invalid RSA key";
    if (key.dp && key.dq && key.qi && key.q && key.p) {
        const m1 = power_mod(c % key.p, key.dp, key.p);
        const m2 = power_mod(c % key.q, key.dq, key.q);
        let h = 0n;
        if (m1 >= m2) {
            h = (key.qi * (m1 - m2)) % key.p;
        }
        else {
            h = (key.qi * (m1 - m2 + key.p * (key.p / key.q))) % key.p;
        }
        return (m2 + h * key.q) % (key.q * key.p);
    }
    else {
        return power_mod(c, key.d, key.n);
    }
}
export function rsa_oaep_encrypt(bytes, n, e, m, algorithm) {
    const em = eme_oaep_encode(new Uint8Array(0), m, bytes, algorithm);
    const msg = os2ip(em);
    const c = rsaep(n, e, msg);
    return i2osp(c, bytes);
}
export function rsa_oaep_decrypt(key, c, algorithm) {
    const em = rsadp(key, os2ip(c));
    const m = eme_oaep_decode(new Uint8Array(0), i2osp(em, key.length), key.length, algorithm);
    return m;
}
export function rsa_pkcs1_encrypt(bytes, n, e, m) {
    const p = concat([0x00, 0x02], random_bytes(bytes - m.length - 3), [0x00], m);
    const msg = os2ip(p);
    const c = rsaep(n, e, msg);
    return i2osp(c, bytes);
}
export function rsa_pkcs1_decrypt(key, c) {
    const em = i2osp(rsadp(key, os2ip(c)), key.length);
    if (em[0] !== 0)
        throw "Decryption error";
    if (em[1] !== 0x02)
        throw "Decryption error";
    let psCursor = 2;
    for (; psCursor < em.length; psCursor++) {
        if (em[psCursor] === 0x00)
            break;
    }
    if (psCursor < 10)
        throw "Decryption error";
    return em.slice(psCursor + 1);
}
export function rsa_pkcs1_verify(key, s, m) {
    if (!key.e)
        throw "Invalid RSA key";
    let em = i2osp(rsaep(key.n, key.e, os2ip(s)), key.length);
    if (em[0] !== 0)
        throw "Decryption error";
    if (em[1] !== 0x01)
        throw "Decryption error";
    let psCursor = 2;
    for (; psCursor < em.length; psCursor++) {
        if (em[psCursor] === 0x00)
            break;
    }
    if (psCursor < 10)
        throw "Decryption error";
    em = em.slice(psCursor + 1);
    const ber = ber_simple(ber_decode(em));
    const decryptedMessage = ber[1];
    if (decryptedMessage.length !== m.length)
        return false;
    for (let i = 0; i < decryptedMessage.length; i++) {
        if (decryptedMessage[i] !== m[i])
            return false;
    }
    return true;
}
export function rsa_pkcs1_sign(bytes, n, d, message, algorithm) {
    const oid = [
        0x30,
        0x0d,
        0x06,
        0x09,
        0x60,
        0x86,
        0x48,
        0x01,
        0x65,
        0x03,
        0x04,
        0x02,
        algorithm === "sha512" ? 0x03 : 0x01,
        0x05,
        0x00,
    ];
    const der = [
        0x30,
        message.length + 2 + oid.length,
        ...oid,
        0x04,
        message.length,
        ...message,
    ];
    const ps = new Array(bytes - 3 - der.length).fill(0xff);
    const em = new Uint8Array([0x00, 0x01, ...ps, 0x00, ...der]);
    const msg = os2ip(em);
    const c = rsaep(n, d, msg);
    return new RawBinary(i2osp(c, bytes));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnNhX2ludGVybmFsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicnNhX2ludGVybmFsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDekMsT0FBTyxFQUFFLGVBQWUsRUFBRSxlQUFlLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDbEUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQVN6QyxNQUFNLFVBQVUsS0FBSyxDQUFDLENBQVMsRUFBRSxDQUFTLEVBQUUsQ0FBUztJQUNuRCxPQUFPLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzVCLENBQUM7QUFPRCxNQUFNLFVBQVUsS0FBSyxDQUFDLEdBQVcsRUFBRSxDQUFTO0lBQzFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUFFLE1BQU0saUJBQWlCLENBQUM7SUFFcEMsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQUU7UUFFaEQsTUFBTSxFQUFFLEdBQUcsU0FBUyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9DLE1BQU0sRUFBRSxHQUFHLFNBQVMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsRUFB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