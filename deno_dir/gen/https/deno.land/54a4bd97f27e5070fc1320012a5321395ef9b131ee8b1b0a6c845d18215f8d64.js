import { getFlag } from "../../flags/_utils.ts";
import { Table } from "../../table/table.ts";
import { dedent, getDescription, parseArgumentsDefinition } from "../_utils.ts";
import { blue, bold, dim, getColorEnabled, green, italic, magenta, red, setColorEnabled, yellow } from "../deps.ts";
import { Type } from "../type.ts";
/** Help text generator. */ export class HelpGenerator {
    indent;
    options;
    /** Generate help text for given command. */ static generate(cmd, options) {
        return new HelpGenerator(cmd, options).generate();
    }
    constructor(cmd, options = {}){
        this.cmd = cmd;
        this.indent = 2;
        this.options = {
            types: false,
            hints: true,
            colors: true,
            long: false,
            ...options
        };
    }
    generate() {
        const areColorsEnabled = getColorEnabled();
        setColorEnabled(this.options.colors);
        const result = this.generateHeader() + this.generateMeta() + this.generateDescription() + this.generateOptions() + this.generateCommands() + this.generateEnvironmentVariables() + this.generateExamples();
        setColorEnabled(areColorsEnabled);
        return result;
    }
    generateHeader() {
        const usage = this.cmd.getUsage();
        const rows = [
            [
                bold("Usage:"),
                magenta(this.cmd.getPath() + (usage ? " " + highlightArguments(usage, this.options.types) : "")), 
            ], 
        ];
        const version = this.cmd.getVersion();
        if (version) {
            rows.push([
                bold("Version:"),
                yellow(`${this.cmd.getVersion()}`)
            ]);
        }
        return "\n" + Table.from(rows).indent(this.indent).padding(1).toString() + "\n";
    }
    generateMeta() {
        const meta = Object.entries(this.cmd.getMeta());
        if (!meta.length) {
            return "";
        }
        const rows = [];
        for (const [name, value] of meta){
            rows.push([
                bold(`${name}: `) + value
            ]);
        }
        return "\n" + Table.from(rows).indent(this.indent).padding(1).toString() + "\n";
    }
    generateDescription() {
        if (!this.cmd.getDescription()) {
            return "";
        }
        return this.label("Description") + Table.from([
            [
                dedent(this.cmd.getDescription())
            ], 
        ]).indent(this.indent * 2).maxColWidth(140).padding(1).toString() + "\n";
    }
    generateOptions() {
        const options = this.cmd.getOptions(false);
        if (!options.length) {
            return "";
        }
        let groups = [];
        const hasGroups = options.some((option)=>option.groupName);
        if (hasGroups) {
            for (const option of options){
                let group1 = groups.find((group)=>group.name === option.groupName);
                if (!group1) {
                    group1 = {
                        name: option.groupName,
                        options: []
                    };
                    groups.push(group1);
                }
                group1.options.push(option);
            }
        } else {
            groups = [
                {
                    name: "Options",
                    options
                }
            ];
        }
        let result = "";
        for (const group of groups){
            result += this.generateOptionGroup(group);
        }
        return result;
    }
    generateOptionGroup(group) {
        if (!group.options.length) {
            return "";
        }
        const hasTypeDefinitions = !!group.options.find((option)=>!!option.typeDefinition);
        if (hasTypeDefinitions) {
            return this.label(group.name ?? "Options") + Table.from([
                ...group.options.map((option)=>[
                        option.flags.map((flag)=>blue(flag)).join(", "),
                        highlightArguments(option.typeDefinition || "", this.options.types),
                        red(bold("-")),
                        getDescription(option.description, !this.options.long),
                        this.generateHints(option), 
                    ]), 
            ]).padding([
                2,
                2,
                1,
                2
            ]).indent(this.indent * 2).maxColWidth([
                60,
                60,
                1,
                80,
                60
            ]).toString() + "\n";
        }
        return this.label(group.name ?? "Options") + Table.from([
            ...group.options.map((option)=>[
                    option.flags.map((flag)=>blue(flag)).join(", "),
                    red(bold("-")),
                    getDescription(option.description, !this.options.long),
                    this.generateHints(option), 
                ]), 
        ]).indent(this.indent * 2).maxColWidth([
            60,
            1,
            80,
            60
        ]).padding([
            2,
            1,
            2
        ]).toString() + "\n";
    }
    generateCommands() {
        const commands = this.cmd.getCommands(false);
        if (!commands.length) {
            return "";
        }
        const hasTypeDefinitions = !!commands.find((command)=>!!command.getArgsDefinition());
        if (hasTypeDefinitions) {
            return this.label("Commands") + Table.from([
                ...commands.map((command)=>[
                        [
                            command.getName(),
                            ...command.getAliases()
                        ].map((name)=>blue(name)).join(", "),
                        highlightArguments(command.getArgsDefinition() || "", this.options.types),
                        red(bold("-")),
                        command.getShortDescription(), 
                    ]), 
            ]).indent(this.indent * 2).maxColWidth([
                60,
                60,
                1,
                80
            ]).padding([
                2,
                2,
                1,
                2
            ]).toString() + "\n";
        }
        return this.label("Commands") + Table.from([
            ...commands.map((command)=>[
                    [
                        command.getName(),
                        ...command.getAliases()
                    ].map((name)=>blue(name)).join(", "),
                    red(bold("-")),
                    command.getShortDescription(), 
                ]), 
        ]).maxColWidth([
            60,
            1,
            80
        ]).padding([
            2,
            1,
            2
        ]).indent(this.indent * 2).toString() + "\n";
    }
    generateEnvironmentVariables() {
        const envVars = this.cmd.getEnvVars(false);
        if (!envVars.length) {
            return "";
        }
        return this.label("Environment variables") + Table.from([
            ...envVars.map((envVar)=>[
                    envVar.names.map((name)=>blue(name)).join(", "),
                    highlightArgumentDetails(envVar.details, this.options.types),
                    red(bold("-")),
                    this.options.long ? dedent(envVar.description) : envVar.description.trim().split("\n", 1)[0], 
                ]), 
        ]).padding([
            2,
            2,
            1
        ]).indent(this.indent * 2).maxColWidth([
            60,
            60,
            1,
            80
        ]).toString() + "\n";
    }
    generateExamples() {
        const examples = this.cmd.getExamples();
        if (!examples.length) {
            return "";
        }
        return this.label("Examples") + Table.from(examples.map((example)=>[
                dim(bold(`${capitalize(example.name)}:`)),
                dedent(example.description), 
            ])).padding(1).indent(this.indent * 2).maxColWidth(150).toString() + "\n";
    }
    generateHints(option) {
        if (!this.options.hints) {
            return "";
        }
        const hints = [];
        option.required && hints.push(yellow(`required`));
        typeof option.default !== "undefined" && hints.push(bold(`Default: `) + inspect(option.default, this.options.colors));
        option.depends?.length && hints.push(yellow(bold(`Depends: `)) + italic(option.depends.map(getFlag).join(", ")));
        option.conflicts?.length && hints.push(red(bold(`Conflicts: `)) + italic(option.conflicts.map(getFlag).join(", ")));
        const type = this.cmd.getType(option.args[0]?.type)?.handler;
        if (type instanceof Type) {
            const possibleValues = type.values?.(this.cmd, this.cmd.getParent());
            if (possibleValues?.length) {
                hints.push(bold(`Values: `) + possibleValues.map((value)=>inspect(value, this.options.colors)).join(", "));
            }
        }
        if (hints.length) {
            return `(${hints.join(", ")})`;
        }
        return "";
    }
    label(label) {
        return "\n" + " ".repeat(this.indent) + bold(`${label}:`) + "\n\n";
    }
    cmd;
}
function capitalize(string) {
    return (string?.charAt(0).toUpperCase() + string.slice(1)) ?? "";
}
function inspect(value, colors) {
    return Deno.inspect(value, // deno < 1.4.3 doesn't support the colors property.
    {
        depth: 1,
        colors,
        trailingComma: false
    });
}
/**
 * Colorize arguments string.
 * @param argsDefinition Arguments definition: `<color1:string> <color2:string>`
 * @param types Show types.
 */ function highlightArguments(argsDefinition, types = true) {
    if (!argsDefinition) {
        return "";
    }
    return parseArgumentsDefinition(argsDefinition, false, true).map((arg)=>typeof arg === "string" ? arg : highlightArgumentDetails(arg, types)).join(" ");
}
/**
 * Colorize argument string.
 * @param arg Argument details.
 * @param types Show types.
 */ function highlightArgumentDetails(arg, types = true) {
    let str = "";
    str += yellow(arg.optionalValue ? "[" : "<");
    let name = "";
    name += arg.name;
    if (arg.variadic) {
        name += "...";
    }
    name = magenta(name);
    str += name;
    if (types) {
        str += yellow(":");
        str += red(arg.type);
        if (arg.list) {
            str += green("[]");
        }
    }
    str += yellow(arg.optionalValue ? "]" : ">");
    return str;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvY2xpZmZ5QHYwLjI0LjIvY29tbWFuZC9oZWxwL19oZWxwX2dlbmVyYXRvci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRGbGFnIH0gZnJvbSBcIi4uLy4uL2ZsYWdzL191dGlscy50c1wiO1xuaW1wb3J0IHsgVGFibGUgfSBmcm9tIFwiLi4vLi4vdGFibGUvdGFibGUudHNcIjtcbmltcG9ydCB7IGRlZGVudCwgZ2V0RGVzY3JpcHRpb24sIHBhcnNlQXJndW1lbnRzRGVmaW5pdGlvbiB9IGZyb20gXCIuLi9fdXRpbHMudHNcIjtcbmltcG9ydCB0eXBlIHsgQ29tbWFuZCB9IGZyb20gXCIuLi9jb21tYW5kLnRzXCI7XG5pbXBvcnQge1xuICBibHVlLFxuICBib2xkLFxuICBkaW0sXG4gIGdldENvbG9yRW5hYmxlZCxcbiAgZ3JlZW4sXG4gIGl0YWxpYyxcbiAgbWFnZW50YSxcbiAgcmVkLFxuICBzZXRDb2xvckVuYWJsZWQsXG4gIHllbGxvdyxcbn0gZnJvbSBcIi4uL2RlcHMudHNcIjtcbmltcG9ydCB7IFR5cGUgfSBmcm9tIFwiLi4vdHlwZS50c1wiO1xuaW1wb3J0IHR5cGUgeyBJQXJndW1lbnQsIElFbnZWYXIsIElFeGFtcGxlLCBJT3B0aW9uIH0gZnJvbSBcIi4uL3R5cGVzLnRzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSGVscE9wdGlvbnMge1xuICB0eXBlcz86IGJvb2xlYW47XG4gIGhpbnRzPzogYm9vbGVhbjtcbiAgY29sb3JzPzogYm9vbGVhbjtcbiAgbG9uZz86IGJvb2xlYW47XG59XG5cbmludGVyZmFjZSBPcHRpb25Hcm91cCB7XG4gIG5hbWU/OiBzdHJpbmc7XG4gIG9wdGlvbnM6IEFycmF5PElPcHRpb24+O1xufVxuXG4vKiogSGVscCB0ZXh0IGdlbmVyYXRvci4gKi9cbmV4cG9ydCBjbGFzcyBIZWxwR2VuZXJhdG9yIHtcbiAgcHJpdmF0ZSBpbmRlbnQgPSAyO1xuICBwcml2YXRlIG9wdGlvbnM6IFJlcXVpcmVkPEhlbHBPcHRpb25zPjtcblxuICAvKiogR2VuZXJhdGUgaGVscCB0ZXh0IGZvciBnaXZlbiBjb21tYW5kLiAqL1xuICBwdWJsaWMgc3RhdGljIGdlbmVyYXRlKGNtZDogQ29tbWFuZCwgb3B0aW9ucz86IEhlbHBPcHRpb25zKTogc3RyaW5nIHtcbiAgICByZXR1cm4gbmV3IEhlbHBHZW5lcmF0b3IoY21kLCBvcHRpb25zKS5nZW5lcmF0ZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGNtZDogQ29tbWFuZCxcbiAgICBvcHRpb25zOiBIZWxwT3B0aW9ucyA9IHt9LFxuICApIHtcbiAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICB0eXBlczogZmFsc2UsXG4gICAgICBoaW50czogdHJ1ZSxcbiAgICAgIGNvbG9yczogdHJ1ZSxcbiAgICAgIGxvbmc6IGZhbHNlLFxuICAgICAgLi4ub3B0aW9ucyxcbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBnZW5lcmF0ZSgpOiBzdHJpbmcge1xuICAgIGNvbnN0IGFyZUNvbG9yc0VuYWJsZWQgPSBnZXRDb2xvckVuYWJsZWQoKTtcbiAgICBzZXRDb2xvckVuYWJsZWQodGhpcy5vcHRpb25zLmNvbG9ycyk7XG5cbiAgICBjb25zdCByZXN1bHQgPSB0aGlzLmdlbmVyYXRlSGVhZGVyKCkgK1xuICAgICAgdGhpcy5nZW5lcmF0ZU1ldGEoKSArXG4gICAgICB0aGlzLmdlbmVyYXRlRGVzY3JpcHRpb24oKSArXG4gICAgICB0aGlzLmdlbmVyYXRlT3B0aW9ucygpICtcbiAgICAgIHRoaXMuZ2VuZXJhdGVDb21tYW5kcygpICtcbiAgICAgIHRoaXMuZ2VuZXJhdGVFbnZpcm9ubWVudFZhcmlhYmxlcygpICtcbiAgICAgIHRoaXMuZ2VuZXJhdGVFeGFtcGxlcygpO1xuXG4gICAgc2V0Q29sb3JFbmFibGVkKGFyZUNvbG9yc0VuYWJsZWQpO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHByaXZhdGUgZ2VuZXJhdGVIZWFkZXIoKTogc3RyaW5nIHtcbiAgICBjb25zdCB1c2FnZSA9IHRoaXMuY21kLmdldFVzYWdlKCk7XG4gICAgY29uc3Qgcm93cyA9IFtcbiAgICAgIFtcbiAgICAgICAgYm9sZChcIlVzYWdlOlwiKSxcbiAgICAgICAgbWFnZW50YShcbiAgICAgICAgICB0aGlzLmNtZC5nZXRQYXRoKCkgK1xuICAgICAgICAgICAgKHVzYWdlID8gXCIgXCIgKyBoaWdobGlnaHRBcmd1bWVudHModXNhZ2UsIHRoaXMub3B0aW9ucy50eXBlcykgOiBcIlwiKSxcbiAgICAgICAgKSxcbiAgICAgIF0sXG4gICAgXTtcbiAgICBjb25zdCB2ZXJzaW9uOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB0aGlzLmNtZC5nZXRWZXJzaW9uKCk7XG4gICAgaWYgKHZlcnNpb24pIHtcbiAgICAgIHJvd3MucHVzaChbYm9sZChcIlZlcnNpb246XCIpLCB5ZWxsb3coYCR7dGhpcy5jbWQuZ2V0VmVyc2lvbigpfWApXSk7XG4gICAgfVxuICAgIHJldHVybiBcIlxcblwiICtcbiAgICAgIFRhYmxlLmZyb20ocm93cylcbiAgICAgICAgLmluZGVudCh0aGlzLmluZGVudClcbiAgICAgICAgLnBhZGRpbmcoMSlcbiAgICAgICAgLnRvU3RyaW5nKCkgK1xuICAgICAgXCJcXG5cIjtcbiAgfVxuXG4gIHByaXZhdGUgZ2VuZXJhdGVNZXRhKCk6IHN0cmluZyB7XG4gICAgY29uc3QgbWV0YSA9IE9iamVjdC5lbnRyaWVzKHRoaXMuY21kLmdldE1ldGEoKSk7XG4gICAgaWYgKCFtZXRhLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuXG4gICAgY29uc3Qgcm93cyA9IFtdO1xuICAgIGZvciAoY29uc3QgW25hbWUsIHZhbHVlXSBvZiBtZXRhKSB7XG4gICAgICByb3dzLnB1c2goW2JvbGQoYCR7bmFtZX06IGApICsgdmFsdWVdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gXCJcXG5cIiArXG4gICAgICBUYWJsZS5mcm9tKHJvd3MpXG4gICAgICAgIC5pbmRlbnQodGhpcy5pbmRlbnQpXG4gICAgICAgIC5wYWRkaW5nKDEpXG4gICAgICAgIC50b1N0cmluZygpICtcbiAgICAgIFwiXFxuXCI7XG4gIH1cblxuICBwcml2YXRlIGdlbmVyYXRlRGVzY3JpcHRpb24oKTogc3RyaW5nIHtcbiAgICBpZiAoIXRoaXMuY21kLmdldERlc2NyaXB0aW9uKCkpIHtcbiAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5sYWJlbChcIkRlc2NyaXB0aW9uXCIpICtcbiAgICAgIFRhYmxlLmZyb20oW1xuICAgICAgICBbZGVkZW50KHRoaXMuY21kLmdldERlc2NyaXB0aW9uKCkpXSxcbiAgICAgIF0pXG4gICAgICAgIC5pbmRlbnQodGhpcy5pbmRlbnQgKiAyKVxuICAgICAgICAubWF4Q29sV2lkdGgoMTQwKVxuICAgICAgICAucGFkZGluZygxKVxuICAgICAgICAudG9TdHJpbmcoKSArXG4gICAgICBcIlxcblwiO1xuICB9XG5cbiAgcHJpdmF0ZSBnZW5lcmF0ZU9wdGlvbnMoKTogc3RyaW5nIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5jbWQuZ2V0T3B0aW9ucyhmYWxzZSk7XG4gICAgaWYgKCFvcHRpb25zLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuXG4gICAgbGV0IGdyb3VwczogQXJyYXk8T3B0aW9uR3JvdXA+ID0gW107XG4gICAgY29uc3QgaGFzR3JvdXBzID0gb3B0aW9ucy5zb21lKChvcHRpb24pID0+IG9wdGlvbi5ncm91cE5hbWUpO1xuICAgIGlmIChoYXNHcm91cHMpIHtcbiAgICAgIGZvciAoY29uc3Qgb3B0aW9uIG9mIG9wdGlvbnMpIHtcbiAgICAgICAgbGV0IGdyb3VwID0gZ3JvdXBzLmZpbmQoKGdyb3VwKSA9PiBncm91cC5uYW1lID09PSBvcHRpb24uZ3JvdXBOYW1lKTtcbiAgICAgICAgaWYgKCFncm91cCkge1xuICAgICAgICAgIGdyb3VwID0ge1xuICAgICAgICAgICAgbmFtZTogb3B0aW9uLmdyb3VwTmFtZSxcbiAgICAgICAgICAgIG9wdGlvbnM6IFtdLFxuICAgICAgICAgIH07XG4gICAgICAgICAgZ3JvdXBzLnB1c2goZ3JvdXApO1xuICAgICAgICB9XG4gICAgICAgIGdyb3VwLm9wdGlvbnMucHVzaChvcHRpb24pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBncm91cHMgPSBbe1xuICAgICAgICBuYW1lOiBcIk9wdGlvbnNcIixcbiAgICAgICAgb3B0aW9ucyxcbiAgICAgIH1dO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSBcIlwiO1xuICAgIGZvciAoY29uc3QgZ3JvdXAgb2YgZ3JvdXBzKSB7XG4gICAgICByZXN1bHQgKz0gdGhpcy5nZW5lcmF0ZU9wdGlvbkdyb3VwKGdyb3VwKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcHJpdmF0ZSBnZW5lcmF0ZU9wdGlvbkdyb3VwKGdyb3VwOiBPcHRpb25Hcm91cCk6IHN0cmluZyB7XG4gICAgaWYgKCFncm91cC5vcHRpb25zLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuICAgIGNvbnN0IGhhc1R5cGVEZWZpbml0aW9ucyA9ICEhZ3JvdXAub3B0aW9ucy5maW5kKChvcHRpb24pID0+XG4gICAgICAhIW9wdGlvbi50eXBlRGVmaW5pdGlvblxuICAgICk7XG5cbiAgICBpZiAoaGFzVHlwZURlZmluaXRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5sYWJlbChncm91cC5uYW1lID8/IFwiT3B0aW9uc1wiKSArXG4gICAgICAgIFRhYmxlLmZyb20oW1xuICAgICAgICAgIC4uLmdyb3VwLm9wdGlvbnMubWFwKChvcHRpb246IElPcHRpb24pID0+IFtcbiAgICAgICAgICAgIG9wdGlvbi5mbGFncy5tYXAoKGZsYWcpID0+IGJsdWUoZmxhZykpLmpvaW4oXCIsIFwiKSxcbiAgICAgICAgICAgIGhpZ2hsaWdodEFyZ3VtZW50cyhcbiAgICAgICAgICAgICAgb3B0aW9uLnR5cGVEZWZpbml0aW9uIHx8IFwiXCIsXG4gICAgICAgICAgICAgIHRoaXMub3B0aW9ucy50eXBlcyxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICByZWQoYm9sZChcIi1cIikpLFxuICAgICAgICAgICAgZ2V0RGVzY3JpcHRpb24ob3B0aW9uLmRlc2NyaXB0aW9uLCAhdGhpcy5vcHRpb25zLmxvbmcpLFxuICAgICAgICAgICAgdGhpcy5nZW5lcmF0ZUhpbnRzKG9wdGlvbiksXG4gICAgICAgICAgXSksXG4gICAgICAgIF0pXG4gICAgICAgICAgLnBhZGRpbmcoWzIsIDIsIDEsIDJdKVxuICAgICAgICAgIC5pbmRlbnQodGhpcy5pbmRlbnQgKiAyKVxuICAgICAgICAgIC5tYXhDb2xXaWR0aChbNjAsIDYwLCAxLCA4MCwgNjBdKVxuICAgICAgICAgIC50b1N0cmluZygpICtcbiAgICAgICAgXCJcXG5cIjtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5sYWJlbChncm91cC5uYW1lID8/IFwiT3B0aW9uc1wiKSArXG4gICAgICBUYWJsZS5mcm9tKFtcbiAgICAgICAgLi4uZ3JvdXAub3B0aW9ucy5tYXAoKG9wdGlvbjogSU9wdGlvbikgPT4gW1xuICAgICAgICAgIG9wdGlvbi5mbGFncy5tYXAoKGZsYWcpID0+IGJsdWUoZmxhZykpLmpvaW4oXCIsIFwiKSxcbiAgICAgICAgICByZWQoYm9sZChcIi1cIikpLFxuICAgICAgICAgIGdldERlc2NyaXB0aW9uKG9wdGlvbi5kZXNjcmlwdGlvbiwgIXRoaXMub3B0aW9ucy5sb25nKSxcbiAgICAgICAgICB0aGlzLmdlbmVyYXRlSGludHMob3B0aW9uKSxcbiAgICAgICAgXSksXG4gICAgICBdKVxuICAgICAgICAuaW5kZW50KHRoaXMuaW5kZW50ICogMilcbiAgICAgICAgLm1heENvbFdpZHRoKFs2MCwgMSwgODAsIDYwXSlcbiAgICAgICAgLnBhZGRpbmcoWzIsIDEsIDJdKVxuICAgICAgICAudG9TdHJpbmcoKSArXG4gICAgICBcIlxcblwiO1xuICB9XG5cbiAgcHJpdmF0ZSBnZW5lcmF0ZUNvbW1hbmRzKCk6IHN0cmluZyB7XG4gICAgY29uc3QgY29tbWFuZHMgPSB0aGlzLmNtZC5nZXRDb21tYW5kcyhmYWxzZSk7XG4gICAgaWYgKCFjb21tYW5kcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cblxuICAgIGNvbnN0IGhhc1R5cGVEZWZpbml0aW9ucyA9ICEhY29tbWFuZHMuZmluZCgoY29tbWFuZCkgPT5cbiAgICAgICEhY29tbWFuZC5nZXRBcmdzRGVmaW5pdGlvbigpXG4gICAgKTtcblxuICAgIGlmIChoYXNUeXBlRGVmaW5pdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLmxhYmVsKFwiQ29tbWFuZHNcIikgK1xuICAgICAgICBUYWJsZS5mcm9tKFtcbiAgICAgICAgICAuLi5jb21tYW5kcy5tYXAoKGNvbW1hbmQ6IENvbW1hbmQpID0+IFtcbiAgICAgICAgICAgIFtjb21tYW5kLmdldE5hbWUoKSwgLi4uY29tbWFuZC5nZXRBbGlhc2VzKCldLm1hcCgobmFtZSkgPT5cbiAgICAgICAgICAgICAgYmx1ZShuYW1lKVxuICAgICAgICAgICAgKS5qb2luKFwiLCBcIiksXG4gICAgICAgICAgICBoaWdobGlnaHRBcmd1bWVudHMoXG4gICAgICAgICAgICAgIGNvbW1hbmQuZ2V0QXJnc0RlZmluaXRpb24oKSB8fCBcIlwiLFxuICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMudHlwZXMsXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgcmVkKGJvbGQoXCItXCIpKSxcbiAgICAgICAgICAgIGNvbW1hbmQuZ2V0U2hvcnREZXNjcmlwdGlvbigpLFxuICAgICAgICAgIF0pLFxuICAgICAgICBdKVxuICAgICAgICAgIC5pbmRlbnQodGhpcy5pbmRlbnQgKiAyKVxuICAgICAgICAgIC5tYXhDb2xXaWR0aChbNjAsIDYwLCAxLCA4MF0pXG4gICAgICAgICAgLnBhZGRpbmcoWzIsIDIsIDEsIDJdKVxuICAgICAgICAgIC50b1N0cmluZygpICtcbiAgICAgICAgXCJcXG5cIjtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5sYWJlbChcIkNvbW1hbmRzXCIpICtcbiAgICAgIFRhYmxlLmZyb20oW1xuICAgICAgICAuLi5jb21tYW5kcy5tYXAoKGNvbW1hbmQ6IENvbW1hbmQpID0+IFtcbiAgICAgICAgICBbY29tbWFuZC5nZXROYW1lKCksIC4uLmNvbW1hbmQuZ2V0QWxpYXNlcygpXS5tYXAoKG5hbWUpID0+IGJsdWUobmFtZSkpXG4gICAgICAgICAgICAuam9pbihcIiwgXCIpLFxuICAgICAgICAgIHJlZChib2xkKFwiLVwiKSksXG4gICAgICAgICAgY29tbWFuZC5nZXRTaG9ydERlc2NyaXB0aW9uKCksXG4gICAgICAgIF0pLFxuICAgICAgXSlcbiAgICAgICAgLm1heENvbFdpZHRoKFs2MCwgMSwgODBdKVxuICAgICAgICAucGFkZGluZyhbMiwgMSwgMl0pXG4gICAgICAgIC5pbmRlbnQodGhpcy5pbmRlbnQgKiAyKVxuICAgICAgICAudG9TdHJpbmcoKSArXG4gICAgICBcIlxcblwiO1xuICB9XG5cbiAgcHJpdmF0ZSBnZW5lcmF0ZUVudmlyb25tZW50VmFyaWFibGVzKCk6IHN0cmluZyB7XG4gICAgY29uc3QgZW52VmFycyA9IHRoaXMuY21kLmdldEVudlZhcnMoZmFsc2UpO1xuICAgIGlmICghZW52VmFycy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5sYWJlbChcIkVudmlyb25tZW50IHZhcmlhYmxlc1wiKSArXG4gICAgICBUYWJsZS5mcm9tKFtcbiAgICAgICAgLi4uZW52VmFycy5tYXAoKGVudlZhcjogSUVudlZhcikgPT4gW1xuICAgICAgICAgIGVudlZhci5uYW1lcy5tYXAoKG5hbWU6IHN0cmluZykgPT4gYmx1ZShuYW1lKSkuam9pbihcIiwgXCIpLFxuICAgICAgICAgIGhpZ2hsaWdodEFyZ3VtZW50RGV0YWlscyhcbiAgICAgICAgICAgIGVudlZhci5kZXRhaWxzLFxuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnR5cGVzLFxuICAgICAgICAgICksXG4gICAgICAgICAgcmVkKGJvbGQoXCItXCIpKSxcbiAgICAgICAgICB0aGlzLm9wdGlvbnMubG9uZ1xuICAgICAgICAgICAgPyBkZWRlbnQoZW52VmFyLmRlc2NyaXB0aW9uKVxuICAgICAgICAgICAgOiBlbnZWYXIuZGVzY3JpcHRpb24udHJpbSgpLnNwbGl0KFwiXFxuXCIsIDEpWzBdLFxuICAgICAgICBdKSxcbiAgICAgIF0pXG4gICAgICAgIC5wYWRkaW5nKFsyLCAyLCAxXSlcbiAgICAgICAgLmluZGVudCh0aGlzLmluZGVudCAqIDIpXG4gICAgICAgIC5tYXhDb2xXaWR0aChbNjAsIDYwLCAxLCA4MF0pXG4gICAgICAgIC50b1N0cmluZygpICtcbiAgICAgIFwiXFxuXCI7XG4gIH1cblxuICBwcml2YXRlIGdlbmVyYXRlRXhhbXBsZXMoKTogc3RyaW5nIHtcbiAgICBjb25zdCBleGFtcGxlcyA9IHRoaXMuY21kLmdldEV4YW1wbGVzKCk7XG4gICAgaWYgKCFleGFtcGxlcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5sYWJlbChcIkV4YW1wbGVzXCIpICtcbiAgICAgIFRhYmxlLmZyb20oZXhhbXBsZXMubWFwKChleGFtcGxlOiBJRXhhbXBsZSkgPT4gW1xuICAgICAgICBkaW0oYm9sZChgJHtjYXBpdGFsaXplKGV4YW1wbGUubmFtZSl9OmApKSxcbiAgICAgICAgZGVkZW50KGV4YW1wbGUuZGVzY3JpcHRpb24pLFxuICAgICAgXSkpXG4gICAgICAgIC5wYWRkaW5nKDEpXG4gICAgICAgIC5pbmRlbnQodGhpcy5pbmRlbnQgKiAyKVxuICAgICAgICAubWF4Q29sV2lkdGgoMTUwKVxuICAgICAgICAudG9TdHJpbmcoKSArXG4gICAgICBcIlxcblwiO1xuICB9XG5cbiAgcHJpdmF0ZSBnZW5lcmF0ZUhpbnRzKG9wdGlvbjogSU9wdGlvbik6IHN0cmluZyB7XG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuaGludHMpIHtcbiAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbiAgICBjb25zdCBoaW50cyA9IFtdO1xuXG4gICAgb3B0aW9uLnJlcXVpcmVkICYmIGhpbnRzLnB1c2goeWVsbG93KGByZXF1aXJlZGApKTtcbiAgICB0eXBlb2Ygb3B0aW9uLmRlZmF1bHQgIT09IFwidW5kZWZpbmVkXCIgJiYgaGludHMucHVzaChcbiAgICAgIGJvbGQoYERlZmF1bHQ6IGApICsgaW5zcGVjdChvcHRpb24uZGVmYXVsdCwgdGhpcy5vcHRpb25zLmNvbG9ycyksXG4gICAgKTtcbiAgICBvcHRpb24uZGVwZW5kcz8ubGVuZ3RoICYmIGhpbnRzLnB1c2goXG4gICAgICB5ZWxsb3coYm9sZChgRGVwZW5kczogYCkpICtcbiAgICAgICAgaXRhbGljKG9wdGlvbi5kZXBlbmRzLm1hcChnZXRGbGFnKS5qb2luKFwiLCBcIikpLFxuICAgICk7XG4gICAgb3B0aW9uLmNvbmZsaWN0cz8ubGVuZ3RoICYmIGhpbnRzLnB1c2goXG4gICAgICByZWQoYm9sZChgQ29uZmxpY3RzOiBgKSkgK1xuICAgICAgICBpdGFsaWMob3B0aW9uLmNvbmZsaWN0cy5tYXAoZ2V0RmxhZykuam9pbihcIiwgXCIpKSxcbiAgICApO1xuXG4gICAgY29uc3QgdHlwZSA9IHRoaXMuY21kLmdldFR5cGUob3B0aW9uLmFyZ3NbMF0/LnR5cGUpPy5oYW5kbGVyO1xuICAgIGlmICh0eXBlIGluc3RhbmNlb2YgVHlwZSkge1xuICAgICAgY29uc3QgcG9zc2libGVWYWx1ZXMgPSB0eXBlLnZhbHVlcz8uKHRoaXMuY21kLCB0aGlzLmNtZC5nZXRQYXJlbnQoKSk7XG4gICAgICBpZiAocG9zc2libGVWYWx1ZXM/Lmxlbmd0aCkge1xuICAgICAgICBoaW50cy5wdXNoKFxuICAgICAgICAgIGJvbGQoYFZhbHVlczogYCkgK1xuICAgICAgICAgICAgcG9zc2libGVWYWx1ZXMubWFwKCh2YWx1ZTogdW5rbm93bikgPT5cbiAgICAgICAgICAgICAgaW5zcGVjdCh2YWx1ZSwgdGhpcy5vcHRpb25zLmNvbG9ycylcbiAgICAgICAgICAgICkuam9pbihcIiwgXCIpLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChoaW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBgKCR7aGludHMuam9pbihcIiwgXCIpfSlgO1xuICAgIH1cblxuICAgIHJldHVybiBcIlwiO1xuICB9XG5cbiAgcHJpdmF0ZSBsYWJlbChsYWJlbDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIFwiXFxuXCIgK1xuICAgICAgXCIgXCIucmVwZWF0KHRoaXMuaW5kZW50KSArIGJvbGQoYCR7bGFiZWx9OmApICtcbiAgICAgIFwiXFxuXFxuXCI7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHJpbmc6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiBzdHJpbmc/LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyaW5nLnNsaWNlKDEpID8/IFwiXCI7XG59XG5cbmZ1bmN0aW9uIGluc3BlY3QodmFsdWU6IHVua25vd24sIGNvbG9yczogYm9vbGVhbik6IHN0cmluZyB7XG4gIHJldHVybiBEZW5vLmluc3BlY3QoXG4gICAgdmFsdWUsXG4gICAgLy8gZGVubyA8IDEuNC4zIGRvZXNuJ3Qgc3VwcG9ydCB0aGUgY29sb3JzIHByb3BlcnR5LlxuICAgIHsgZGVwdGg6IDEsIGNvbG9ycywgdHJhaWxpbmdDb21tYTogZmFsc2UgfSBhcyBEZW5vLkluc3BlY3RPcHRpb25zLFxuICApO1xufVxuXG4vKipcbiAqIENvbG9yaXplIGFyZ3VtZW50cyBzdHJpbmcuXG4gKiBAcGFyYW0gYXJnc0RlZmluaXRpb24gQXJndW1lbnRzIGRlZmluaXRpb246IGA8Y29sb3IxOnN0cmluZz4gPGNvbG9yMjpzdHJpbmc+YFxuICogQHBhcmFtIHR5cGVzIFNob3cgdHlwZXMuXG4gKi9cbmZ1bmN0aW9uIGhpZ2hsaWdodEFyZ3VtZW50cyhhcmdzRGVmaW5pdGlvbjogc3RyaW5nLCB0eXBlcyA9IHRydWUpIHtcbiAgaWYgKCFhcmdzRGVmaW5pdGlvbikge1xuICAgIHJldHVybiBcIlwiO1xuICB9XG5cbiAgcmV0dXJuIHBhcnNlQXJndW1lbnRzRGVmaW5pdGlvbihhcmdzRGVmaW5pdGlvbiwgZmFsc2UsIHRydWUpXG4gICAgLm1hcCgoYXJnOiBJQXJndW1lbnQgfCBzdHJpbmcpID0+XG4gICAgICB0eXBlb2YgYXJnID09PSBcInN0cmluZ1wiID8gYXJnIDogaGlnaGxpZ2h0QXJndW1lbnREZXRhaWxzKGFyZywgdHlwZXMpXG4gICAgKVxuICAgIC5qb2luKFwiIFwiKTtcbn1cblxuLyoqXG4gKiBDb2xvcml6ZSBhcmd1bWVudCBzdHJpbmcuXG4gKiBAcGFyYW0gYXJnIEFyZ3VtZW50IGRldGFpbHMuXG4gKiBAcGFyYW0gdHlwZXMgU2hvdyB0eXBlcy5cbiAqL1xuZnVuY3Rpb24gaGlnaGxpZ2h0QXJndW1lbnREZXRhaWxzKFxuICBhcmc6IElBcmd1bWVudCxcbiAgdHlwZXMgPSB0cnVlLFxuKTogc3RyaW5nIHtcbiAgbGV0IHN0ciA9IFwiXCI7XG5cbiAgc3RyICs9IHllbGxvdyhhcmcub3B0aW9uYWxWYWx1ZSA/IFwiW1wiIDogXCI8XCIpO1xuXG4gIGxldCBuYW1lID0gXCJcIjtcbiAgbmFtZSArPSBhcmcubmFtZTtcbiAgaWYgKGFyZy52YXJpYWRpYykge1xuICAgIG5hbWUgKz0gXCIuLi5cIjtcbiAgfVxuICBuYW1lID0gbWFnZW50YShuYW1lKTtcblxuICBzdHIgKz0gbmFtZTtcblxuICBpZiAodHlwZXMpIHtcbiAgICBzdHIgKz0geWVsbG93KFwiOlwiKTtcbiAgICBzdHIgKz0gcmVkKGFyZy50eXBlKTtcbiAgICBpZiAoYXJnLmxpc3QpIHtcbiAgICAgIHN0ciArPSBncmVlbihcIltdXCIpO1xuICAgIH1cbiAgfVxuXG4gIHN0ciArPSB5ZWxsb3coYXJnLm9wdGlvbmFsVmFsdWUgPyBcIl1cIiA6IFwiPlwiKTtcblxu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