import { getFlag } from "../../flags/_utils.ts";
import { Table } from "../../table/table.ts";
import { dedent, getDescription, parseArgumentsDefinition } from "../_utils.ts";
import { blue, bold, dim, getColorEnabled, green, italic, magenta, red, setColorEnabled, yellow, } from "../deps.ts";
import { Type } from "../type.ts";
export class HelpGenerator {
    cmd;
    indent = 2;
    options;
    static generate(cmd, options) {
        return new HelpGenerator(cmd, options).generate();
    }
    constructor(cmd, options = {}) {
        this.cmd = cmd;
        this.options = {
            types: false,
            hints: true,
            colors: true,
            long: false,
            ...options,
        };
    }
    generate() {
        const areColorsEnabled = getColorEnabled();
        setColorEnabled(this.options.colors);
        const result = this.generateHeader() +
            this.generateMeta() +
            this.generateDescription() +
            this.generateOptions() +
            this.generateCommands() +
            this.generateEnvironmentVariables() +
            this.generateExamples();
        setColorEnabled(areColorsEnabled);
        return result;
    }
    generateHeader() {
        const usage = this.cmd.getUsage();
        const rows = [
            [
                bold("Usage:"),
                magenta(this.cmd.getPath() +
                    (usage ? " " + highlightArguments(usage, this.options.types) : "")),
            ],
        ];
        const version = this.cmd.getVersion();
        if (version) {
            rows.push([bold("Version:"), yellow(`${this.cmd.getVersion()}`)]);
        }
        return "\n" +
            Table.from(rows)
                .indent(this.indent)
                .padding(1)
                .toString() +
            "\n";
    }
    generateMeta() {
        const meta = Object.entries(this.cmd.getMeta());
        if (!meta.length) {
            return "";
        }
        const rows = [];
        for (const [name, value] of meta) {
            rows.push([bold(`${name}: `) + value]);
        }
        return "\n" +
            Table.from(rows)
                .indent(this.indent)
                .padding(1)
                .toString() +
            "\n";
    }
    generateDescription() {
        if (!this.cmd.getDescription()) {
            return "";
        }
        return this.label("Description") +
            Table.from([
                [dedent(this.cmd.getDescription())],
            ])
                .indent(this.indent * 2)
                .maxColWidth(140)
                .padding(1)
                .toString() +
            "\n";
    }
    generateOptions() {
        const options = this.cmd.getOptions(false);
        if (!options.length) {
            return "";
        }
        let groups = [];
        const hasGroups = options.some((option) => option.groupName);
        if (hasGroups) {
            for (const option of options) {
                let group = groups.find((group) => group.name === option.groupName);
                if (!group) {
                    group = {
                        name: option.groupName,
                        options: [],
                    };
                    groups.push(group);
                }
                group.options.push(option);
            }
        }
        else {
            groups = [{
                    name: "Options",
                    options,
                }];
        }
        let result = "";
        for (const group of groups) {
            result += this.generateOptionGroup(group);
        }
        return result;
    }
    generateOptionGroup(group) {
        if (!group.options.length) {
            return "";
        }
        const hasTypeDefinitions = !!group.options.find((option) => !!option.typeDefinition);
        if (hasTypeDefinitions) {
            return this.label(group.name ?? "Options") +
                Table.from([
                    ...group.options.map((option) => [
                        option.flags.map((flag) => blue(flag)).join(", "),
                        highlightArguments(option.typeDefinition || "", this.options.types),
                        red(bold("-")),
                        getDescription(option.description, !this.options.long),
                        this.generateHints(option),
                    ]),
                ])
                    .padding([2, 2, 1, 2])
                    .indent(this.indent * 2)
                    .maxColWidth([60, 60, 1, 80, 60])
                    .toString() +
                "\n";
        }
        return this.label(group.name ?? "Options") +
            Table.from([
                ...group.options.map((option) => [
                    option.flags.map((flag) => blue(flag)).join(", "),
                    red(bold("-")),
                    getDescription(option.description, !this.options.long),
                    this.generateHints(option),
                ]),
            ])
                .indent(this.indent * 2)
                .maxColWidth([60, 1, 80, 60])
                .padding([2, 1, 2])
                .toString() +
            "\n";
    }
    generateCommands() {
        const commands = this.cmd.getCommands(false);
        if (!commands.length) {
            return "";
        }
        const hasTypeDefinitions = !!commands.find((command) => !!command.getArgsDefinition());
        if (hasTypeDefinitions) {
            return this.label("Commands") +
                Table.from([
                    ...commands.map((command) => [
                        [command.getName(), ...command.getAliases()].map((name) => blue(name)).join(", "),
                        highlightArguments(command.getArgsDefinition() || "", this.options.types),
                        red(bold("-")),
                        command.getShortDescription(),
                    ]),
                ])
                    .indent(this.indent * 2)
                    .maxColWidth([60, 60, 1, 80])
                    .padding([2, 2, 1, 2])
                    .toString() +
                "\n";
        }
        return this.label("Commands") +
            Table.from([
                ...commands.map((command) => [
                    [command.getName(), ...command.getAliases()].map((name) => blue(name))
                        .join(", "),
                    red(bold("-")),
                    command.getShortDescription(),
                ]),
            ])
                .maxColWidth([60, 1, 80])
                .padding([2, 1, 2])
                .indent(this.indent * 2)
                .toString() +
            "\n";
    }
    generateEnvironmentVariables() {
        const envVars = this.cmd.getEnvVars(false);
        if (!envVars.length) {
            return "";
        }
        return this.label("Environment variables") +
            Table.from([
                ...envVars.map((envVar) => [
                    envVar.names.map((name) => blue(name)).join(", "),
                    highlightArgumentDetails(envVar.details, this.options.types),
                    red(bold("-")),
                    this.options.long
                        ? dedent(envVar.description)
                        : envVar.description.trim().split("\n", 1)[0],
                ]),
            ])
                .padding([2, 2, 1])
                .indent(this.indent * 2)
                .maxColWidth([60, 60, 1, 80])
                .toString() +
            "\n";
    }
    generateExamples() {
        const examples = this.cmd.getExamples();
        if (!examples.length) {
            return "";
        }
        return this.label("Examples") +
            Table.from(examples.map((example) => [
                dim(bold(`${capitalize(example.name)}:`)),
                dedent(example.description),
            ]))
                .padding(1)
                .indent(this.indent * 2)
                .maxColWidth(150)
                .toString() +
            "\n";
    }
    generateHints(option) {
        if (!this.options.hints) {
            return "";
        }
        const hints = [];
        option.required && hints.push(yellow(`required`));
        typeof option.default !== "undefined" && hints.push(bold(`Default: `) + inspect(option.default, this.options.colors));
        option.depends?.length && hints.push(yellow(bold(`Depends: `)) +
            italic(option.depends.map(getFlag).join(", ")));
        option.conflicts?.length && hints.push(red(bold(`Conflicts: `)) +
            italic(option.conflicts.map(getFlag).join(", ")));
        const type = this.cmd.getType(option.args[0]?.type)?.handler;
        if (type instanceof Type) {
            const possibleValues = type.values?.(this.cmd, this.cmd.getParent());
            if (possibleValues?.length) {
                hints.push(bold(`Values: `) +
                    possibleValues.map((value) => inspect(value, this.options.colors)).join(", "));
            }
        }
        if (hints.length) {
            return `(${hints.join(", ")})`;
        }
        return "";
    }
    label(label) {
        return "\n" +
            " ".repeat(this.indent) + bold(`${label}:`) +
            "\n\n";
    }
}
function capitalize(string) {
    return string?.charAt(0).toUpperCase() + string.slice(1) ?? "";
}
function inspect(value, colors) {
    return Deno.inspect(value, { depth: 1, colors, trailingComma: false });
}
function highlightArguments(argsDefinition, types = true) {
    if (!argsDefinition) {
        return "";
    }
    return parseArgumentsDefinition(argsDefinition, false, true)
        .map((arg) => typeof arg === "string" ? arg : highlightArgumentDetails(arg, types))
        .join(" ");
}
function highlightArgumentDetails(arg, types = true) {
    let str = "";
    str += yellow(arg.optionalValue ? "[" : "<");
    let name = "";
    name += arg.name;
    if (arg.variadic) {
        name += "...";
    }
    name = magenta(name);
    str += name;
    if (types) {
        str += yellow(":");
        str += red(arg.type);
        if (arg.list) {
            str += green("[]");
        }
    }
    str += yellow(arg.optionalValue ? "]" : ">");
    return str;
}
//# sourceMappingURL=data:application/json;base64,