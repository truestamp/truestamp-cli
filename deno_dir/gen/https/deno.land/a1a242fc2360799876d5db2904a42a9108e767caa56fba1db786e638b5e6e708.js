import { base64url, convertHexToUint8Array, HmacSha256, HmacSha512, RSA, } from "./deps.ts";
function assertNever(alg, message) {
    throw new RangeError(message);
}
export function convertHexToBase64url(input) {
    return base64url.encode(convertHexToUint8Array(input));
}
function safeCompare(a, b) {
    const strA = String(a);
    const lenA = strA.length;
    let strB = String(b);
    let result = 0;
    if (lenA !== strB.length) {
        strB = strA;
        result = 1;
    }
    for (let i = 0; i < lenA; i++) {
        result |= (strA.charCodeAt(i) ^ strB.charCodeAt(i));
    }
    return result === 0;
}
async function encrypt(algorithm, key, message) {
    switch (algorithm) {
        case "none":
            return "";
        case "HS256":
            return new HmacSha256(key).update(message).toString();
        case "HS512":
            return new HmacSha512(key).update(message).toString();
        case "RS256":
            return (await new RSA(RSA.parseKey(key)).sign(message, { algorithm: "rsassa-pkcs1-v1_5", hash: "sha256" })).hex();
        case "RS512":
            return (await new RSA(RSA.parseKey(key)).sign(message, { algorithm: "rsassa-pkcs1-v1_5", hash: "sha512" })).hex();
        case "PS256":
            return (await new RSA(RSA.parseKey(key)).sign(message, { algorithm: "rsassa-pss", hash: "sha256" })).hex();
        case "PS512":
            return (await new RSA(RSA.parseKey(key)).sign(message, { algorithm: "rsassa-pss", hash: "sha512" })).hex();
        default:
            assertNever(algorithm, "no matching crypto algorithm in the header: " + algorithm);
    }
}
export async function create(algorithm, key, input) {
    return convertHexToBase64url(await encrypt(algorithm, key, input));
}
export async function verify({ signature, key, algorithm, signingInput, }) {
    try {
        switch (algorithm) {
            case "none":
            case "HS256":
            case "HS512": {
                return safeCompare(signature, (await encrypt(algorithm, key, signingInput)));
            }
            case "RS256": {
                return await new RSA(RSA.parseKey(key)).verify(convertHexToUint8Array(signature), signingInput, { algorithm: "rsassa-pkcs1-v1_5", hash: "sha256" });
            }
            case "RS512": {
                return await new RSA(RSA.parseKey(key)).verify(convertHexToUint8Array(signature), signingInput, { algorithm: "rsassa-pkcs1-v1_5", hash: "sha512" });
            }
            case "PS256": {
                return await new RSA(RSA.parseKey(key)).verify(convertHexToUint8Array(signature), signingInput, { algorithm: "rsassa-pss", hash: "sha256" });
            }
            case "PS512": {
                return await new RSA(RSA.parseKey(key)).verify(convertHexToUint8Array(signature), signingInput, { algorithm: "rsassa-pss", hash: "sha512" });
            }
            default:
                assertNever(algorithm, "no matching crypto algorithm in the header: " + algorithm);
        }
    }
    catch (err) {
        throw err instanceof Error ? err : new Error(err);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lnbmF0dXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2lnbmF0dXJlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFDTCxTQUFTLEVBQ1Qsc0JBQXNCLEVBQ3RCLFVBQVUsRUFDVixVQUFVLEVBQ1YsR0FBRyxHQUNKLE1BQU0sV0FBVyxDQUFDO0FBRW5CLFNBQVMsV0FBVyxDQUFDLEdBQVUsRUFBRSxPQUFlO0lBQzlDLE1BQU0sSUFBSSxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDaEMsQ0FBQztBQUVELE1BQU0sVUFBVSxxQkFBcUIsQ0FBQyxLQUFhO0lBQ2pELE9BQU8sU0FBUyxDQUFDLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ3pELENBQUM7QUFRRCxTQUFTLFdBQVcsQ0FBQyxDQUFTLEVBQUUsQ0FBUztJQUN2QyxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdkIsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN6QixJQUFJLElBQUksR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDckIsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBRWYsSUFBSSxJQUFJLEtBQUssSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUN4QixJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ1osTUFBTSxHQUFHLENBQUMsQ0FBQztLQUNaO0lBRUQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUM3QixNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNyRDtJQUVELE9BQU8sTUFBTSxLQUFLLENBQUMsQ0FBQztBQUN0QixDQUFDO0FBRUQsS0FBSyxVQUFV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