import { defaultErrorMap, overrideErrorMap } from "../ZodError.ts";
export const makeIssue = (params)=>{
    const { data , path , errorMaps , issueData  } = params;
    const fullPath = [
        ...path,
        ...issueData.path || []
    ];
    const fullIssue = {
        ...issueData,
        path: fullPath
    };
    let errorMessage = "";
    const maps = errorMaps.filter((m)=>!!m).slice().reverse();
    for (const map of maps){
        errorMessage = map(fullIssue, {
            data,
            defaultError: errorMessage
        }).message;
    }
    return {
        ...issueData,
        path: fullPath,
        message: issueData.message || errorMessage
    };
};
export const EMPTY_PATH = [];
export function addIssueToContext(ctx, issueData) {
    const issue = makeIssue({
        issueData: issueData,
        data: ctx.data,
        path: ctx.path,
        errorMaps: [
            ctx.common.contextualErrorMap,
            ctx.schemaErrorMap,
            overrideErrorMap,
            defaultErrorMap
        ].filter((x)=>!!x)
    });
    ctx.common.issues.push(issue);
}
export class ParseStatus {
    value = "valid";
    dirty() {
        if (this.value === "valid") this.value = "dirty";
    }
    abort() {
        if (this.value !== "aborted") this.value = "aborted";
    }
    static mergeArray(status, results) {
        const arrayValue = [];
        for (const s of results){
            if (s.status === "aborted") return INVALID;
            if (s.status === "dirty") status.dirty();
            arrayValue.push(s.value);
        }
        return {
            status: status.value,
            value: arrayValue
        };
    }
    static async mergeObjectAsync(status, pairs) {
        const syncPairs = [];
        for (const pair of pairs){
            syncPairs.push({
                key: await pair.key,
                value: await pair.value
            });
        }
        return ParseStatus.mergeObjectSync(status, syncPairs);
    }
    static mergeObjectSync(status, pairs) {
        const finalObject = {};
        for (const pair of pairs){
            const { key , value  } = pair;
            if (key.status === "aborted") return INVALID;
            if (value.status === "aborted") return INVALID;
            if (key.status === "dirty") status.dirty();
            if (value.status === "dirty") status.dirty();
            if (typeof value.value !== "undefined" || pair.alwaysSet) {
                finalObject[key.value] = value.value;
            }
        }
        return {
            status: status.value,
            value: finalObject
        };
    }
}
export const INVALID = Object.freeze({
    status: "aborted"
});
export const DIRTY = (value)=>({
        status: "dirty",
        value
    });
export const OK = (value)=>({
        status: "valid",
        value
    });
export const isAborted = (x)=>x.status === "aborted";
export const isDirty = (x)=>x.status === "dirty";
export const isValid = (x)=>x.status === "valid";
export const isAsync = (x)=>typeof Promise !== undefined && x instanceof Promise;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvem9kQHYzLjE3LjMvaGVscGVycy9wYXJzZVV0aWwudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBJc3N1ZURhdGEsIFpvZEVycm9yTWFwLCBab2RJc3N1ZSB9IGZyb20gXCIuLi9ab2RFcnJvci50c1wiO1xuaW1wb3J0IHsgZGVmYXVsdEVycm9yTWFwLCBvdmVycmlkZUVycm9yTWFwIH0gZnJvbSBcIi4uL1pvZEVycm9yLnRzXCI7XG5pbXBvcnQgdHlwZSB7IFpvZFBhcnNlZFR5cGUgfSBmcm9tIFwiLi91dGlsLnRzXCI7XG5cbmV4cG9ydCBjb25zdCBtYWtlSXNzdWUgPSAocGFyYW1zOiB7XG4gIGRhdGE6IGFueTtcbiAgcGF0aDogKHN0cmluZyB8IG51bWJlcilbXTtcbiAgZXJyb3JNYXBzOiBab2RFcnJvck1hcFtdO1xuICBpc3N1ZURhdGE6IElzc3VlRGF0YTtcbn0pOiBab2RJc3N1ZSA9PiB7XG4gIGNvbnN0IHsgZGF0YSwgcGF0aCwgZXJyb3JNYXBzLCBpc3N1ZURhdGEgfSA9IHBhcmFtcztcbiAgY29uc3QgZnVsbFBhdGggPSBbLi4ucGF0aCwgLi4uKGlzc3VlRGF0YS5wYXRoIHx8IFtdKV07XG4gIGNvbnN0IGZ1bGxJc3N1ZSA9IHtcbiAgICAuLi5pc3N1ZURhdGEsXG4gICAgcGF0aDogZnVsbFBhdGgsXG4gIH07XG5cbiAgbGV0IGVycm9yTWVzc2FnZSA9IFwiXCI7XG4gIGNvbnN0IG1hcHMgPSBlcnJvck1hcHNcbiAgICAuZmlsdGVyKChtKSA9PiAhIW0pXG4gICAgLnNsaWNlKClcbiAgICAucmV2ZXJzZSgpIGFzIFpvZEVycm9yTWFwW107XG4gIGZvciAoY29uc3QgbWFwIG9mIG1hcHMpIHtcbiAgICBlcnJvck1lc3NhZ2UgPSBtYXAoZnVsbElzc3VlLCB7IGRhdGEsIGRlZmF1bHRFcnJvcjogZXJyb3JNZXNzYWdlIH0pLm1lc3NhZ2U7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIC4uLmlzc3VlRGF0YSxcbiAgICBwYXRoOiBmdWxsUGF0aCxcbiAgICBtZXNzYWdlOiBpc3N1ZURhdGEubWVzc2FnZSB8fCBlcnJvck1lc3NhZ2UsXG4gIH07XG59O1xuXG5leHBvcnQgdHlwZSBQYXJzZVBhcmFtcyA9IHtcbiAgcGF0aDogKHN0cmluZyB8IG51bWJlcilbXTtcbiAgZXJyb3JNYXA6IFpvZEVycm9yTWFwO1xuICBhc3luYzogYm9vbGVhbjtcbn07XG5cbmV4cG9ydCB0eXBlIFBhcnNlUGF0aENvbXBvbmVudCA9IHN0cmluZyB8IG51bWJlcjtcbmV4cG9ydCB0eXBlIFBhcnNlUGF0aCA9IFBhcnNlUGF0aENvbXBvbmVudFtdO1xuZXhwb3J0IGNvbnN0IEVNUFRZX1BBVEg6IFBhcnNlUGF0aCA9IFtdO1xuXG5leHBvcnQgaW50ZXJmYWNlIFBhcnNlQ29udGV4dCB7XG4gIHJlYWRvbmx5IGNvbW1vbjoge1xuICAgIHJlYWRvbmx5IGlzc3VlczogWm9kSXNzdWVbXTtcbiAgICByZWFkb25seSBjb250ZXh0dWFsRXJyb3JNYXA/OiBab2RFcnJvck1hcDtcbiAgICByZWFkb25seSBhc3luYzogYm9vbGVhbjtcbiAgfTtcbiAgcmVhZG9ubHkgcGF0aDogUGFyc2VQYXRoO1xuICByZWFkb25seSBzY2hlbWFFcnJvck1hcD86IFpvZEVycm9yTWFwO1xuICByZWFkb25seSBwYXJlbnQ6IFBhcnNlQ29udGV4dCB8IG51bGw7XG4gIHJlYWRvbmx5IGRhdGE6IGFueTtcbiAgcmVhZG9ubHkgcGFyc2VkVHlwZTogWm9kUGFyc2VkVHlwZTtcbn1cblxuZXhwb3J0IHR5cGUgUGFyc2VJbnB1dCA9IHtcbiAgZGF0YTogYW55O1xuICBwYXRoOiAoc3RyaW5nIHwgbnVtYmVyKVtdO1xuICBwYXJlbnQ6IFBhcnNlQ29udGV4dDtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRJc3N1ZVRvQ29udGV4dChcbiAgY3R4OiBQYXJzZUNvbnRleHQsXG4gIGlzc3VlRGF0YTogSXNzdWVEYXRhXG4pOiB2b2lkIHtcbiAgY29uc3QgaXNzdWUgPSBtYWtlSXNzdWUoe1xuICAgIGlzc3VlRGF0YTogaXNzdWVEYXRhLFxuICAgIGRhdGE6IGN0eC5kYXRhLFxuICAgIHBhdGg6IGN0eC5wYXRoLFxuICAgIGVycm9yTWFwczogW1xuICAgICAgY3R4LmNvbW1vbi5jb250ZXh0dWFsRXJyb3JNYXAsIC8vIGNvbnRleHR1YWwgZXJyb3IgbWFwIGlzIGZpcnN0IHByaW9yaXR5XG4gICAgICBjdHguc2NoZW1hRXJyb3JNYXAsIC8vIHRoZW4gc2NoZW1hLWJvdW5kIG1hcCBpZiBhdmFpbGFibGVcbiAgICAgIG92ZXJyaWRlRXJyb3JNYXAsIC8vIHRoZW4gZ2xvYmFsIG92ZXJyaWRlIG1hcFxuICAgICAgZGVmYXVsdEVycm9yTWFwLCAvLyB0aGVuIGdsb2JhbCBkZWZhdWx0IG1hcFxuICAgIF0uZmlsdGVyKCh4KSA9PiAhIXgpIGFzIFpvZEVycm9yTWFwW10sXG4gIH0pO1xuICBjdHguY29tbW9uLmlzc3Vlcy5wdXNoKGlzc3VlKTtcbn1cblxuZXhwb3J0IHR5cGUgT2JqZWN0UGFpciA9IHtcbiAga2V5OiBTeW5jUGFyc2VSZXR1cm5UeXBlPGFueT47XG4gIHZhbHVlOiBTeW5jUGFyc2VSZXR1cm5UeXBlPGFueT47XG59O1xuZXhwb3J0IGNsYXNzIFBhcnNlU3RhdHVzIHtcbiAgdmFsdWU6IFwiYWJvcnRlZFwiIHwgXCJkaXJ0eVwiIHwgXCJ2YWxpZFwiID0gXCJ2YWxpZFwiO1xuICBkaXJ0eSgpIHtcbiAgICBpZiAodGhpcy52YWx1ZSA9PT0gXCJ2YWxpZFwiKSB0aGlzLnZhbHVlID0gXCJkaXJ0eVwiO1xuICB9XG4gIGFib3J0KCkge1xuICAgIGlmICh0aGlzLnZhbHVlICE9PSBcImFib3J0ZWRcIikgdGhpcy52YWx1ZSA9IFwiYWJvcnRlZFwiO1xuICB9XG5cbiAgc3RhdGljIG1lcmdlQXJyYXkoXG4gICAgc3RhdHVzOiBQYXJzZVN0YXR1cyxcbiAgICByZXN1bHRzOiBTeW5jUGFyc2VSZXR1cm5UeXBlPGFueT5bXVxuICApOiBTeW5jUGFyc2VSZXR1cm5UeXBlIHtcbiAgICBjb25zdCBhcnJheVZhbHVlOiBhbnlbXSA9IFtdO1xuICAgIGZvciAoY29uc3QgcyBvZiByZXN1bHRzKSB7XG4gICAgICBpZiAocy5zdGF0dXMgPT09IFwiYWJvcnRlZFwiKSByZXR1cm4gSU5WQUxJRDtcbiAgICAgIGlmIChzLnN0YXR1cyA9PT0gXCJkaXJ0eVwiKSBzdGF0dXMuZGlydHkoKTtcbiAgICAgIGFycmF5VmFsdWUucHVzaChzLnZhbHVlKTtcbiAgICB9XG5cbiAgICByZXR1cm4geyBzdGF0dXM6IHN0YXR1cy52YWx1ZSwgdmFsdWU6IGFycmF5VmFsdWUgfTtcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBtZXJnZU9iamVjdEFzeW5jKFxuICAgIHN0YXR1czogUGFyc2VTdGF0dXMsXG4gICAgcGFpcnM6IHsga2V5OiBQYXJzZVJldHVyblR5cGU8YW55PjsgdmFsdWU6IFBhcnNlUmV0dXJuVHlwZTxhbnk+IH1bXVxuICApOiBQcm9taXNlPFN5bmNQYXJzZVJldHVyblR5cGU8YW55Pj4ge1xuICAgIGNvbnN0IHN5bmNQYWlyczogT2JqZWN0UGFpcltdID0gW107XG4gICAgZm9yIChjb25zdCBwYWlyIG9mIHBhaXJzKSB7XG4gICAgICBzeW5jUGFpcnMucHVzaCh7XG4gICAgICAgIGtleTogYXdhaXQgcGFpci5rZXksXG4gICAgICAgIHZhbHVlOiBhd2FpdCBwYWlyLnZhbHVlLFxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBQYXJzZVN0YXR1cy5tZXJnZU9iamVjdFN5bmMoc3RhdHVzLCBzeW5jUGFpcnMpO1xuICB9XG5cbiAgc3RhdGljIG1lcmdlT2JqZWN0U3luYyhcbiAgICBzdGF0dXM6IFBhcnNlU3RhdHVzLFxuICAgIHBhaXJzOiB7XG4gICAgICBrZXk6IFN5bmNQYXJzZVJldHVyblR5cGU8YW55PjtcbiAgICAgIHZhbHVlOiBTeW5jUGFyc2VSZXR1cm5UeXBlPGFueT47XG4gICAgICBhbHdheXNTZXQ/OiBib29sZWFuO1xuICAgIH1bXVxuICApOiBTeW5jUGFyc2VSZXR1cm5UeXBlIHtcbiAgICBjb25zdCBmaW5hbE9iamVjdDogYW55ID0ge307XG4gICAgZm9yIChjb25zdCBwYWlyIG9mIHBhaXJzKSB7XG4gICAgICBjb25zdCB7IGtleSwgdmFsdWUgfSA9IHBhaXI7XG4gICAgICBpZiAoa2V5LnN0YXR1cyA9PT0gXCJhYm9ydGVkXCIpIHJldHVybiBJTlZBTElEO1xuICAgICAgaWYgKHZhbHVlLnN0YXR1cyA9PT0gXCJhYm9ydGVkXCIpIHJldHVybiBJTlZBTElEO1xuICAgICAgaWYgKGtleS5zdGF0dXMgPT09IFwiZGlydHlcIikgc3RhdHVzLmRpcnR5KCk7XG4gICAgICBpZiAodmFsdWUuc3RhdHVzID09PSBcImRpcnR5XCIpIHN0YXR1cy5kaXJ0eSgpO1xuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlLnZhbHVlICE9PSBcInVuZGVmaW5lZFwiIHx8IHBhaXIuYWx3YXlzU2V0KSB7XG4gICAgICAgIGZpbmFsT2JqZWN0W2tleS52YWx1ZV0gPSB2YWx1ZS52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4geyBzdGF0dXM6IHN0YXR1cy52YWx1ZSwgdmFsdWU6IGZpbmFsT2JqZWN0IH07XG4gIH1cbn1cbmV4cG9ydCBpbnRlcmZhY2UgUGFyc2VSZXN1bHQge1xuICBzdGF0dXM6IFwiYWJvcnRlZFwiIHwgXCJkaXJ0eVwiIHwgXCJ2YWxpZFwiO1xuICBkYXRhOiBhbnk7XG59XG5cbmV4cG9ydCB0eXBlIElOVkFMSUQgPSB7IHN0YXR1czogXCJhYm9ydGVkXCIgfTtcbmV4cG9ydCBjb25zdCBJTlZBTElEOiBJTlZBTElEID0gT2JqZWN0LmZyZWV6ZSh7XG4gIHN0YXR1czogXCJhYm9ydGVkXCIsXG59KTtcblxuZXhwb3J0IHR5cGUgRElSVFk8VD4gPSB7IHN0YXR1czogXCJkaXJ0eVwiOyB2YWx1ZTogVCB9O1xuZXhwb3J0IGNvbnN0IERJUlRZID0gPFQ+KHZhbHVlOiBUKTogRElSVFk8VD4gPT4gKHsgc3RhdHVzOiBcImRpcnR5XCIsIHZhbHVlIH0pO1xuXG5leHBvcnQgdHlwZSBPSzxUPiA9IHsgc3RhdHVzOiBcInZhbGlkXCI7IHZhbHVlOiBUIH07XG5leHBvcnQgY29uc3QgT0sgPSA8VD4odmFsdWU6IFQpOiBPSzxUPiA9PiAoeyBzdGF0dXM6IFwidmFsaWRcIiwgdmFsdWUgfSk7XG5cbmV4cG9ydCB0eXBlIFN5bmNQYXJzZVJldHVyblR5cGU8VCA9IGFueT4gPSBPSzxUPiB8IERJUlRZPFQ+IHwgSU5WQUxJRDtcbmV4cG9ydCB0eXBlIEFzeW5jUGFyc2VSZXR1cm5UeXBlPFQ+ID0gUHJvbWlzZTxTeW5jUGFyc2VSZXR1cm5UeXBlPFQ+PjtcbmV4cG9ydCB0eXBlIFBhcnNlUmV0dXJuVHlwZTxUPiA9XG4gIHwgU3luY1BhcnNlUmV0dXJuVHlwZTxUPlxuICB8IEFzeW5jUGFyc2VSZXR1cm5UeXBlPFQ+O1xuXG5leHBvcnQgY29uc3QgaXNBYm9ydGVkID0gKHg6IFBhcnNlUmV0dXJuVHlwZTxhbnk+KTogeCBpcyBJTlZBTElEID0+XG4gICh4IGFzIGFueSkuc3RhdHVzID09PSBcImFib3J0ZWRcIjtcbmV4cG9ydCBjb25zdCBpc0RpcnR5ID0gPFQ+KHg6IFBhcnNlUmV0dXJuVHlwZTxUPik6IHggaXMgT0s8VD4gfCBESVJUWTxUPiA9PlxuICAoeCBhcyBhbnkpLnN0YXR1cyA9PT0gXCJkaXJ0eVwiO1xuZXhwb3J0IGNvbnN0IGlzVmFsaWQgPSA8VD4oeDogUGFyc2VSZXR1cm5UeXBlPFQ+KTogeCBpcyBPSzxUPiB8IERJUlRZPFQ+ID0+XG4gICh4IGFzIGFueSkuc3RhdHVzID09PSBcInZhbGlkXCI7XG5leHBvcnQgY29uc3QgaXNBc3luYyA9IDxUPihcbiAgeDogUGFyc2VSZXR1cm5UeXBlPFQ+XG4pOiB4IGlzIEFzeW5jUGFyc2VSZXR1cm5UeXBlPFQ+ID0+XG4gIHR5cGVvZiBQcm9taXNlICE9PSB1bmRlZmluZWQgJiYgeCBpbnN0YW5jZW9mIFByb21pc2U7XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsU0FB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