import { distance } from "../_utils/distance.ts";
export function paramCaseToCamelCase(str) {
    return str.replace(/-([a-z])/g, (g) => g[1].toUpperCase());
}
export function underscoreToCamelCase(str) {
    return str
        .replace(/([a-z])([A-Z])/g, "$1_$2")
        .toLowerCase()
        .replace(/_([a-z])/g, (g) => g[1].toUpperCase());
}
export function getOption(flags, name) {
    while (name[0] === "-") {
        name = name.slice(1);
    }
    for (const flag of flags) {
        if (isOption(flag, name)) {
            return flag;
        }
    }
    return;
}
export function didYouMeanOption(option, options) {
    const optionNames = options
        .map((option) => [option.name, ...(option.aliases ?? [])])
        .flat()
        .map((option) => getFlag(option));
    return didYouMean(" Did you mean option", getFlag(option), optionNames);
}
export function didYouMeanType(type, types) {
    return didYouMean(" Did you mean type", type, types);
}
export function didYouMean(message, type, types) {
    const match = closest(type, types);
    return match ? `${message} "${match}"?` : "";
}
export function getFlag(name) {
    if (name.startsWith("-")) {
        return name;
    }
    if (name.length > 1) {
        return `--${name}`;
    }
    return `-${name}`;
}
function isOption(option, name) {
    return option.name === name ||
        (option.aliases && option.aliases.indexOf(name) !== -1);
}
function closest(str, arr) {
    let minDistance = Infinity;
    let minIndex = 0;
    for (let i = 0; i < arr.length; i++) {
        const dist = distance(str, arr[i]);
        if (dist < minDistance) {
            minDistance = dist;
            minIndex = i;
        }
    }
    return arr[minIndex];
}
export function getDefaultValue(option) {
    return typeof option.default === "function"
        ? option.default()
        : option.default;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3V0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiX3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUdqRCxNQUFNLFVBQVUsb0JBQW9CLENBQUMsR0FBVztJQUM5QyxPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQ2hCLFdBQVcsRUFDWCxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUMxQixDQUFDO0FBQ0osQ0FBQztBQUdELE1BQU0sVUFBVSxxQkFBcUIsQ0FBQyxHQUFXO0lBQy9DLE9BQU8sR0FBRztTQUNQLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxPQUFPLENBQUM7U0FDbkMsV0FBVyxFQUFFO1NBQ2IsT0FBTyxDQUNOLFdBQVcsRUFDWCxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUMxQixDQUFDO0FBQ04sQ0FBQztBQVFELE1BQU0sVUFBVSxTQUFTLENBQ3ZCLEtBQWUsRUFDZixJQUFZO0lBRVosT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxFQUFFO1FBQ3RCLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3RCO0lBRUQsS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLEVBQUU7UUFDeEIsSUFBSSxRQUFRLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFO1lBQ3hCLE9BQU8sSUFBSSxDQUFDO1NBQ2I7S0FDRjtJQUVELE9BQU87QUFDVCxDQUFDO0FBRUQsTUFBTSxVQUFVLGdCQUFnQixDQUM5QixNQUFjLEVBQ2QsT0FBNEI7SUFFNUIsTUFBTSxXQUFXLEdBQUcsT0FBTztTQUN4QixHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ3pELElBQUksRUFBRTtTQUNOLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDcEMsT0FBTyxVQUFVLENBQUMsc0JBQXNCLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0FBQzFFLENBQUM7QUFFRCxNQUFNLFVBQVUsY0FBYyxDQUFDLElBQVksRUFBRSxLQUFvQjtJQUMvRCxPQUFPLFVBQVUsQ0FBQyxvQkFBb0IsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDdkQsQ0FBQztBQUVELE1BQU0sVUFBVSxVQUFVLENBQ3hCLE9BQWUsRUFDZixJQUFZLEVBQ1osS0FBb0I7SUFFcEIsTUFBTSxLQUFLLEdBQXVCLE9BQU8sQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDdkQsT0FBTyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxLQUFLLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFDL0MsQ0FBQztBQUVELE1BQU0sVUFBVSxPQUFPLENBQUMsSUFBWTtJQUNsQyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDeEIsT0FBTyxJQUFJLENBQUM7S0FDYjtJQUNELElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDbkIsT0FBTyxLQUFLLElBQUksRUFBRSxDQUFDO0tBQ3BCO0lBQ0QsT0FBTyxJQUFJLElBQUksRUFBRSxDQUFDO0FBQ3BCLENBQUM7QUFRRCxTQUFTLFFBQVEsQ0FBQyxNQUFvQixFQUFFLElBQVk7SUFDbEQsT0FBTyxNQUFNLENBQUMsSUFBSSxLQUFLLElBQUk7UUFDekIsQ0FBQyxNQUFNLENBQUMsT0FBTyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDNUQsQ0FBQztBQUVELFNBQVMsT0FBTyxDQUFDLEdBQVcsRUFBRSxHQUFhO0lBQ3pDLElBQUksV0FBVyxHQUFHLFFBQVEsQ0FBQztJQUMzQixJQUFJLFFBQVEsR0FBRyxDQUFDLENBQUM7SUFDakIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDbkMsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuQyxJQUFJLElBQUksR0FBRyxXQUFXLEVBQUU7WUFDdEIsV0FBVyxHQUFHLElBQUksQ0FBQztZQUNuQixRQUFRLEdBQUcsQ0FBQyxDQUFDO1NBQ2Q7S0FDRjtJQUNELE9BQU8sR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3ZCLENBQUM7QUFFRCxNQUFNLFVBQVUsZUFBZSxDQUFDLE1BQW9CO0lBQ2xELE9BQU8sT0FBTyxNQUFNLENBQUMsT0FBTyxLQUFLLFVBQVU7UUFDekMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUU7UUFDbEIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7QUFDckIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgSUZsYWdPcHRpb25zIH0gZnJvbSBcIi4vdHlwZXMudHNcIjtcbmltcG9ydCB7IGRpc3RhbmNlIH0gZnJvbSBcIi4uL191dGlscy9kaXN0YW5jZS50c1wiO1xuXG4vKiogQ29udmVydCBwYXJhbSBjYXNlIHN0cmluZyB0byBjYW1lbCBjYXNlLiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcmFtQ2FzZVRvQ2FtZWxDYXNlKHN0cjogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKFxuICAgIC8tKFthLXpdKS9nLFxuICAgIChnKSA9PiBnWzFdLnRvVXBwZXJDYXNlKCksXG4gICk7XG59XG5cbi8qKiBDb252ZXJ0IHVuZGVyc2NvcmUgY2FzZSBzdHJpbmcgdG8gY2FtZWwgY2FzZS4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1bmRlcnNjb3JlVG9DYW1lbENhc2Uoc3RyOiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gc3RyXG4gICAgLnJlcGxhY2UoLyhbYS16XSkoW0EtWl0pL2csIFwiJDFfJDJcIilcbiAgICAudG9Mb3dlckNhc2UoKVxuICAgIC5yZXBsYWNlKFxuICAgICAgL18oW2Etel0pL2csXG4gICAgICAoZykgPT4gZ1sxXS50b1VwcGVyQ2FzZSgpLFxuICAgICk7XG59XG5cbi8qKlxuICogRmluZCBvcHRpb24gYnkgZmxhZywgbmFtZSBvciBhbGlhcy5cbiAqXG4gKiBAcGFyYW0gZmxhZ3MgU291cmNlIG9wdGlvbidzIGFycmF5LlxuICogQHBhcmFtIG5hbWUgIE5hbWUgb2YgdGhlIG9wdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldE9wdGlvbjxPIGV4dGVuZHMgSUZsYWdPcHRpb25zPihcbiAgZmxhZ3M6IEFycmF5PE8+LFxuICBuYW1lOiBzdHJpbmcsXG4pOiBPIHwgdW5kZWZpbmVkIHtcbiAgd2hpbGUgKG5hbWVbMF0gPT09IFwiLVwiKSB7XG4gICAgbmFtZSA9IG5hbWUuc2xpY2UoMSk7XG4gIH1cblxuICBmb3IgKGNvbnN0IGZsYWcgb2YgZmxhZ3MpIHtcbiAgICBpZiAoaXNPcHRpb24oZmxhZywgbmFtZSkpIHtcbiAgICAgIHJldHVybiBmbGFnO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRpZFlvdU1lYW5PcHRpb24oXG4gIG9wdGlvbjogc3RyaW5nLFxuICBvcHRpb25zOiBBcnJheTxJRmxhZ09wdGlvbnM+LFxuKTogc3RyaW5nIHtcbiAgY29uc3Qgb3B0aW9uTmFtZXMgPSBvcHRpb25zXG4gICAgLm1hcCgob3B0aW9uKSA9PiBbb3B0aW9uLm5hbWUsIC4uLihvcHRpb24uYWxpYXNlcyA/PyBbXSldKVxuICAgIC5mbGF0KClcbiAgICAubWFwKChvcHRpb24pID0+IGdldEZsYWcob3B0aW9uKSk7XG4gIHJldHVybiBkaWRZb3VNZWFuKFwiIERpZCB5b3UgbWVhbiBvcHRpb25cIiwgZ2V0RmxhZyhvcHRpb24pLCBvcHRpb25OYW1lcyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkaWRZb3VNZWFuVHlwZSh0eXBlOiBzdHJpbmcsIHR5cGVzOiBBcnJheTxzdHJpbmc+KTogc3RyaW5nIHtcbiAgcmV0dXJuIGRpZFlvdU1lYW4oXCIgRGlkIHlvdSBtZWFuIHR5cGVcIiwgdHlwZSwgdHlwZXMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGlkWW91TWVhbihcbiAgbWVzc2FnZTogc3RyaW5nLFxuICB0eXBlOiBzdHJpbmcsXG4gIHR5cGVzOiBBcnJheTxzdHJpbmc+LFxuKTogc3RyaW5nIHtcbiAgY29uc3QgbWF0Y2g6IHN0cmluZyB8IHVuZGVmaW5lZCA9IGNsb3Nlc3QodHlwZSwgdHlwZXMpO1xuICByZXR1cm4gbWF0Y2ggPyBgJHttZXNzYWdlfSBcIiR7bWF0Y2h9XCI/YCA6IFwiXCI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGbGFnKG5hbWU6IHN0cmluZykge1xuICBpZiAobmFtZS5zdGFydHNXaXRoKFwiLVwiKSkge1xuICAgIHJldHVybiBuYW1lO1xuICB9XG4gIGlmIChuYW1lLmxlbmd0aCA+IDEpIHtcbiAgICByZXR1cm4gYC0tJHtuYW1lfWA7XG4gIH1cbiAgcmV0dXJuIGAtJHtuYW1lfWA7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgb3B0aW9uIGhhcyBuYW1lIG9yIGFsaWFzLlxuICpcbiAqIEBwYXJhbSBvcHRpb24gICAgVGhlIG9wdGlvbiB0byBjaGVjay5cbiAqIEBwYXJhbSBuYW1lICAgICAgVGhlIG9wdGlvbiBuYW1lIG9yIGFsaWFzLlxuICovXG5mdW5jdGlvbiBpc09wdGlvbihvcHRpb246IElGbGFnT3B0aW9ucywgbmFtZTogc3RyaW5nKSB7XG4gIHJldHVybiBvcHRpb24ubmFtZSA9PT0gbmFtZSB8fFxuICAgIChvcHRpb24uYWxpYXNlcyAmJiBvcHRpb24uYWxpYXNlcy5pbmRleE9mKG5hbWUpICE9PSAtMSk7XG59XG5cbmZ1bmN0aW9uIGNsb3Nlc3Qoc3RyOiBzdHJpbmcsIGFycjogc3RyaW5nW10pOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICBsZXQgbWluRGlzdGFuY2UgPSBJbmZpbml0eTtcbiAgbGV0IG1pbkluZGV4ID0gMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBkaXN0ID0gZGlzdGFuY2Uoc3RyLCBhcnJbaV0pO1xuICAgIGlmIChkaXN0IDwgbWluRGlzdGFuY2UpIHtcbiAgICAgIG1pbkRpc3RhbmNlID0gZGlzdDtcbiAgICAgIG1pbkluZGV4ID0gaTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFyclttaW5JbmRleF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREZWZhdWx0VmFsdWUob3B0aW9uOiBJRmxhZ09wdGlvbnMpOiB1bmtub3duIHtcbiAgcmV0dXJuIHR5cGVvZiBvcHRpb24uZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiXG4gICAgPyBvcHRpb24uZGVmYXVsdCgpXG4gICAgOiBvcHRpb24uZGVmYXVsdDtcbn1cbiJdfQ==