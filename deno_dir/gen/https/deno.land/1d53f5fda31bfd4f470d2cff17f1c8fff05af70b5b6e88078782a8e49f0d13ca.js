import { didYouMean } from "../flags/_utils.ts";
import { ArgumentFollowsVariadicArgument, RequiredArgumentFollowsOptionalArgument, } from "../flags/_errors.ts";
import { OptionType } from "../flags/types.ts";
export function didYouMeanCommand(command, commands, excludes = []) {
    const commandNames = commands
        .map((command) => command.getName())
        .filter((command) => !excludes.includes(command));
    return didYouMean(" Did you mean command", command, commandNames);
}
const ARGUMENT_REGEX = /^[<\[].+[\]>]$/;
const ARGUMENT_DETAILS_REGEX = /[<\[:>\]]/;
export function splitArguments(args) {
    const parts = args.trim().split(/[, =] */g);
    const typeParts = [];
    while (parts[parts.length - 1] &&
        ARGUMENT_REGEX.test(parts[parts.length - 1])) {
        typeParts.unshift(parts.pop());
    }
    const typeDefinition = typeParts.join(" ");
    return { flags: parts, typeDefinition };
}
export function parseArgumentsDefinition(argsDefinition, validate = true, all) {
    const argumentDetails = [];
    let hasOptional = false;
    let hasVariadic = false;
    const parts = argsDefinition.split(/ +/);
    for (const arg of parts) {
        if (validate && hasVariadic) {
            throw new ArgumentFollowsVariadicArgument(arg);
        }
        const parts = arg.split(ARGUMENT_DETAILS_REGEX);
        if (!parts[1]) {
            if (all) {
                argumentDetails.push(parts[0]);
            }
            continue;
        }
        const type = parts[2] || OptionType.STRING;
        const details = {
            optionalValue: arg[0] === "[",
            requiredValue: arg[0] === "<",
            name: parts[1],
            action: parts[3] || type,
            variadic: false,
            list: type ? arg.indexOf(type + "[]") !== -1 : false,
            type,
        };
        if (validate && !details.optionalValue && hasOptional) {
            throw new RequiredArgumentFollowsOptionalArgument(details.name);
        }
        if (arg[0] === "[") {
            hasOptional = true;
        }
        if (details.name.length > 3) {
            const istVariadicLeft = details.name.slice(0, 3) === "...";
            const istVariadicRight = details.name.slice(-3) === "...";
            hasVariadic = details.variadic = istVariadicLeft || istVariadicRight;
            if (istVariadicLeft) {
                details.name = details.name.slice(3);
            }
            else if (istVariadicRight) {
                details.name = details.name.slice(0, -3);
            }
        }
        argumentDetails.push(details);
    }
    return argumentDetails;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX3V0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiX3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNoRCxPQUFPLEVBQ0wsK0JBQStCLEVBQy9CLHVDQUF1QyxHQUN4QyxNQUFNLHFCQUFxQixDQUFDO0FBQzdCLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUkvQyxNQUFNLFVBQVUsaUJBQWlCLENBQy9CLE9BQWUsRUFDZixRQUF3QixFQUN4QixXQUEwQixFQUFFO0lBRTVCLE1BQU0sWUFBWSxHQUFHLFFBQVE7U0FDMUIsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDbkMsTUFBTSxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUNwRCxPQUFPLFVBQVUsQ0FBQyx1QkFBdUIsRUFBRSxPQUFPLEVBQUUsWUFBWSxDQUFDLENBQUM7QUFDcEUsQ0FBQztBQUVELE1BQU0sY0FBYyxHQUFHLGdCQUFnQixDQUFDO0FBQ3hDLE1BQU0sc0JBQXNCLEdBQUcsV0FBVyxDQUFDO0FBZ0IzQyxNQUFNLFVBQVUsY0FBYyxDQUM1QixJQUFZO0lBRVosTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM1QyxNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUM7SUFFckIsT0FDRSxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFDdkIsY0FBYyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUM1QztRQUNBLFNBQVMsQ0FBQyxPQUFPLENBQUMs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QUFDLE9BQU8sQ0FBQyxDQUFDO0tBQy9CO0lBRUQsT0FBTyxlQUVOLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGlkWW91TWVhbiB9IGZyb20gXCIuLi9mbGFncy9fdXRpbHMudHNcIjtcbmltcG9ydCB7XG4gIEFyZ3VtZW50Rm9sbG93c1ZhcmlhZGljQXJndW1lbnQsXG4gIFJlcXVpcmVkQXJndW1lbnRGb2xsb3dzT3B0aW9uYWxBcmd1bWVudCxcbn0gZnJvbSBcIi4uL2ZsYWdzL19lcnJvcnMudHNcIjtcbmltcG9ydCB7IE9wdGlvblR5cGUgfSBmcm9tIFwiLi4vZmxhZ3MvdHlwZXMudHNcIjtcbmltcG9ydCB0eXBlIHsgQ29tbWFuZCB9IGZyb20gXCIuL2NvbW1hbmQudHNcIjtcbmltcG9ydCB0eXBlIHsgSUFyZ3VtZW50IH0gZnJvbSBcIi4vdHlwZXMudHNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGRpZFlvdU1lYW5Db21tYW5kKFxuICBjb21tYW5kOiBzdHJpbmcsXG4gIGNvbW1hbmRzOiBBcnJheTxDb21tYW5kPixcbiAgZXhjbHVkZXM6IEFycmF5PHN0cmluZz4gPSBbXSxcbik6IHN0cmluZyB7XG4gIGNvbnN0IGNvbW1hbmROYW1lcyA9IGNvbW1hbmRzXG4gICAgLm1hcCgoY29tbWFuZCkgPT4gY29tbWFuZC5nZXROYW1lKCkpXG4gICAgLmZpbHRlcigoY29tbWFuZCkgPT4gIWV4Y2x1ZGVzLmluY2x1ZGVzKGNvbW1hbmQpKTtcbiAgcmV0dXJuIGRpZFlvdU1lYW4oXCIgRGlkIHlvdSBtZWFuIGNvbW1hbmRcIiwgY29tbWFuZCwgY29tbWFuZE5hbWVzKTtcbn1cblxuY29uc3QgQVJHVU1FTlRfUkVHRVggPSAvXls8XFxbXS4rW1xcXT5dJC87XG5jb25zdCBBUkdVTUVOVF9ERVRBSUxTX1JFR0VYID0gL1s8XFxbOj5cXF1dLztcblxuLyoqXG4gKiBTcGxpdCBvcHRpb25zIGFuZCBhcmd1bWVudHMuXG4gKiBAcGFyYW0gYXJncyBBcmd1bWVudHMgZGVmaW5pdGlvbjogYC0tY29sb3IsIC1jIDxjb2xvcjE6c3RyaW5nPiA8Y29sb3IyOnN0cmluZz5gXG4gKlxuICogRm9yIGV4YW1wbGU6IGAtYywgLS1jb2xvciA8Y29sb3IxOnN0cmluZz4gPGNvbG9yMjpzdHJpbmc+YFxuICpcbiAqIFdpbGwgcmVzdWx0IGluOlxuICogYGBgXG4gKiB7XG4gKiAgIGZsYWdzOiBbIFwiLWNcIiwgXCItLWNvbG9yXCIgXSxcbiAqICAgdHlwZURlZmluaXRpb246IFwiPGNvbG9yMTpzdHJpbmc+IDxjb2xvcjI6c3RyaW5nPlwiXG4gKiB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNwbGl0QXJndW1lbnRzKFxuICBhcmdzOiBzdHJpbmcsXG4pOiB7IGZsYWdzOiBzdHJpbmdbXTsgdHlwZURlZmluaXRpb246IHN0cmluZyB9IHtcbiAgY29uc3QgcGFydHMgPSBhcmdzLnRyaW0oKS5zcGxpdCgvWywgPV0gKi9nKTtcbiAgY29uc3QgdHlwZVBhcnRzID0gW107XG5cbiAgd2hpbGUgKFxuICAgIHBhcnRzW3BhcnRzLmxlbmd0aCAtIDFdICYmXG4gICAgQVJHVU1FTlRfUkVHRVgudGVzdChwYXJ0c1twYXJ0cy5sZW5ndGggLSAxXSlcbiAgKSB7XG4gICAgdHlwZVBhcnRzLnVuc2hpZnQocGFydHMucG9wKCkpO1xuICB9XG5cbiAgY29uc3QgdHlwZURlZmluaXRpb246IHN0cmluZyA9IHR5cGVQYXJ0cy5qb2luKFwiIFwiKTtcblxuICByZXR1cm4geyBmbGFnczogcGFydHMsIHR5cGVEZWZpbml0aW9uIH07XG59XG5cbi8qKlxuICogUGFyc2UgYXJndW1lbnRzIHN0cmluZy5cbiAqIEBwYXJhbSBhcmdzRGVmaW5pdGlvbiBBcmd1bWVudHMgZGVmaW5pdGlvbjogYDxjb2xvcjE6c3RyaW5nPiA8Y29sb3IyOnN0cmluZz5gXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUFyZ3VtZW50c0RlZmluaXRpb248VCBleHRlbmRzIGJvb2xlYW4+KFxuICBhcmdzRGVmaW5pdGlvbjogc3RyaW5nLFxuICB2YWxpZGF0ZTogYm9vbGVhbixcbiAgYWxsOiB0cnVlLFxuKTogQXJyYXk8SUFyZ3VtZW50IHwgc3RyaW5nPjtcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUFyZ3VtZW50c0RlZmluaXRpb248VCBleHRlbmRzIGJvb2xlYW4+KFxuICBhcmdzRGVmaW5pdGlvbjogc3RyaW5nLFxuICB2YWxpZGF0ZT86IGJvb2xlYW4sXG4gIGFsbD86IGZhbHNlLFxuKTogQXJyYXk8SUFyZ3VtZW50PjtcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUFyZ3VtZW50c0RlZmluaXRpb248VCBleHRlbmRzIGJvb2xlYW4+KFxuICBhcmdzRGVmaW5pdGlvbjogc3RyaW5nLFxuICB2YWxpZGF0ZSA9IHRydWUsXG4gIGFsbD86IFQsXG4pOiBUIGV4dGVuZHMgdHJ1ZSA/IEFycmF5PElBcmd1bWVudCB8IHN0cmluZz4gOiBBcnJheTxJQXJndW1lbnQ+IHtcbiAgY29uc3QgYXJndW1lbnREZXRhaWxzOiBBcnJheTxJQXJndW1lbnQgfCBzdHJpbmc+ID0gW107XG5cbiAgbGV0IGhhc09wdGlvbmFsID0gZmFsc2U7XG4gIGxldCBoYXNWYXJpYWRpYyA9IGZhbHNlO1xuICBjb25zdCBwYXJ0czogc3RyaW5nW10gPSBhcmdzRGVmaW5pdGlvbi5zcGxpdCgvICsvKTtcblxuICBmb3IgKGNvbnN0IGFyZyBvZiBwYXJ0cykge1xuICAgIGlmICh2YWxpZGF0ZSAmJiBoYXNWYXJpYWRpYykge1xuICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50Rm9sbG93c1ZhcmlhZGljQXJndW1lbnQoYXJnKTtcbiAgICB9XG4gICAgY29uc3QgcGFydHM6IHN0cmluZ1tdID0gYXJnLnNwbGl0KEFSR1VNRU5UX0RFVEFJTFNfUkVHRVgpO1xuXG4gICAgaWYgKCFwYXJ0c1sxXSkge1xuICAgICAgaWYgKGFsbCkge1xuICAgICAgICBhcmd1bWVudERldGFpbHMucHVzaChwYXJ0c1swXSk7XG4gICAgICB9XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgY29uc3QgdHlwZTogc3RyaW5nIHwgdW5kZWZpbmVkID0gcGFydHNbMl0gfHwgT3B0aW9uVHlwZS5TVFJJTkc7XG5cbiAgICBjb25zdCBkZXRhaWxzOiBJQXJndW1lbnQgPSB7XG4gICAgICBvcHRpb25hbFZhbHVlOiBhcmdbMF0gPT09IFwiW1wiLFxuICAgICAgcmVxdWlyZWRWYWx1ZTogYXJnWzBdID09PSBcIjxcIixcbiAgICAgIG5hbWU6IHBhcnRzWzFdLFxuICAgICAgYWN0aW9uOiBwYXJ0c1szXSB8fCB0eXBlLFxuICAgICAgdmFyaWFkaWM6IGZhbHNlLFxuICAgICAgbGlzdDogdHlwZSA/IGFyZy5pbmRleE9mKHR5cGUgKyBcIltdXCIpICE9PSAtMSA6IGZhbHNlLFxuICAgICAgdHlwZSxcbiAgICB9O1xuXG4gICAgaWYgKHZhbGlkYXRlICYmICFkZXRhaWxzLm9wdGlvbmFsVmFsdWUgJiYgaGFzT3B0aW9uYWwpIHtcbiAgICAgIHRocm93IG5ldyBSZXF1aXJlZEFyZ3VtZW50Rm9sbG93c09wdGlvbmFsQXJndW1lbnQoZGV0YWlscy5uYW1lKTtcbiAgICB9XG5cbiAgICBpZiAoYXJnWzBdID09PSBcIltcIikge1xuICAgICAgaGFzT3B0aW9uYWwgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChkZXRhaWxzLm5hbWUubGVuZ3RoID4gMykge1xuICAgICAgY29uc3QgaXN0VmFyaWFkaWNMZWZ0ID0gZGV0YWlscy5uYW1lLnNsaWNlKDAsIDMpID09PSBcIi4uLlwiO1xuICAgICAgY29uc3QgaXN0VmFyaWFkaWNSaWdodCA9IGRldGFpbHMubmFtZS5zbGljZSgtMykgPT09IFwiLi4uXCI7XG5cbiAgICAgIGhhc1ZhcmlhZGljID0gZGV0YWlscy52YXJpYWRpYyA9IGlzdFZhcmlhZGljTGVmdCB8fCBpc3RWYXJpYWRpY1JpZ2h0O1xuXG4gICAgICBpZiAoaXN0VmFyaWFkaWNMZWZ0KSB7XG4gICAgICAgIGRldGFpbHMubmFtZSA9IGRldGFpbHMubmFtZS5zbGljZSgzKTtcbiAgICAgIH0gZWxzZSBpZiAoaXN0VmFyaWFkaWNSaWdodCkge1xuICAgICAgICBkZXRhaWxzLm5hbWUgPSBkZXRhaWxzLm5hbWUuc2xpY2UoMCwgLTMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGFyZ3VtZW50RGV0YWlscy5wdXNoKGRldGFpbHMpO1xuICB9XG5cbiAgcmV0dXJuIGFyZ3VtZW50RGV0YWlscyBhcyAoXG4gICAgVCBleHRlbmRzIHRydWUgPyBBcnJheTxJQXJndW1lbnQgfCBzdHJpbmc+IDogQXJyYXk8SUFyZ3VtZW50PlxuICApO1xufVxuIl19