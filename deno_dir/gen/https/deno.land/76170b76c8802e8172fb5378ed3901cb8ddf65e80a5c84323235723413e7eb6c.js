import { Command } from "../command.ts";
import { UnknownCompletionCommand } from "../_errors.ts";
export class CompleteCommand extends Command {
    constructor(cmd) {
        super();
        this.description("Get completions for given action from given command.")
            .arguments("<action:string> [command...:string]")
            .action(async (_, action, commandNames) => {
            let parent;
            const completeCommand = commandNames
                ?.reduce((cmd, name) => {
                parent = cmd;
                const childCmd = cmd.getCommand(name, false);
                if (!childCmd) {
                    throw new UnknownCompletionCommand(name, cmd.getCommands());
                }
                return childCmd;
            }, cmd || this.getMainCommand()) ?? (cmd || this.getMainCommand());
            const completion = completeCommand
                .getCompletion(action);
            const result = await completion?.complete(completeCommand, parent) ?? [];
            if (result?.length) {
                Deno.stdout.writeSync(new TextEncoder().encode(result.join("\n")));
            }
        })
            .reset();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGxldGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjb21wbGV0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hDLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUl6RCxNQUFNLE9BQU8sZUFDWCxTQUFRLE9BQTZEO0lBQ3JFLFlBQW1CLEdBQWE7UUFDOUIsS0FBSyxFQUFFLENBQUM7UUFDUixJQUFJLENBQUMsV0FBVyxDQUFDLHNEQUFzRCxDQUFDO2FBQ3JFLFNBQVMsQ0FBQyxxQ0FBcUMsQ0FBQzthQUNoRCxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxNQUFjLEVBQUUsWUFBNEIsRUFBRSxFQUFFO1lBQ2hFLElBQUksTUFBMkIsQ0FBQztZQUNoQyxNQUFNLGVBQWUsR0FBWSxZQUFZO2dCQUMzQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLEdBQVksRUFBRSxJQUFZLEVBQVcsRUFBRTtnQkFDL0MsTUFBTSxHQUFHLEdBQUcsQ0FBQztnQkFDYixNQUFNLFFBQVEsR0FBd0IsR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7Z0JBQ2xFLElBQUksQ0FBQyxRQUFRLEVBQUU7b0JBQ2IsTUFBTSxJQUFJLHdCQUF3QixDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztpQkFDN0Q7Z0JBQ0QsT0FBTyxRQUFRLENBQUM7WUFDbEIsQ0FBQyxFQUFFLEdBQUcsSUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQztZQUVyRSxNQUFNLFVBQVUsR0FBNEIsZUFBZTtpQkFDeEQsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3pCLE1BQU0sTUFBTSxHQUNWLE1BQU0sVUFBVSxFQUFFLFFBQVEsQ0FBQyxlQUFlLEVBQUUsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO1lBRTVELElBQUksTUFBTSxFQUFFLE1BQU0sRUFBRTtnQkFDbEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxXQUFXLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDcEU7UUFDSCxDQUFDLENBQUM7YUFDRCxLQUFLLEVBQUUsQ0FBQztJQUNiLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbW1hbmQgfSBmcm9tIFwiLi4vY29tbWFuZC50c1wiO1xuaW1wb3J0IHsgVW5rbm93bkNvbXBsZXRpb25Db21tYW5kIH0gZnJvbSBcIi4uL19lcnJvcnMudHNcIjtcbmltcG9ydCB0eXBlIHsgSUNvbXBsZXRpb24gfSBmcm9tIFwiLi4vdHlwZXMudHNcIjtcblxuLyoqIEV4ZWN1dGUgYXV0byBjb21wbGV0aW9uIG1ldGhvZCBvZiBjb21tYW5kIGFuZCBhY3Rpb24uICovXG5leHBvcnQgY2xhc3MgQ29tcGxldGVDb21tYW5kXG4gIGV4dGVuZHMgQ29tbWFuZDx2b2lkLCBbYWN0aW9uOiBzdHJpbmcsIGNvbW1hbmROYW1lcz86IEFycmF5PHN0cmluZz5dPiB7XG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihjbWQ/OiBDb21tYW5kKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmRlc2NyaXB0aW9uKFwiR2V0IGNvbXBsZXRpb25zIGZvciBnaXZlbiBhY3Rpb24gZnJvbSBnaXZlbiBjb21tYW5kLlwiKVxuICAgICAgLmFyZ3VtZW50cyhcIjxhY3Rpb246c3RyaW5nPiBbY29tbWFuZC4uLjpzdHJpbmddXCIpXG4gICAgICAuYWN0aW9uKGFzeW5jIChfLCBhY3Rpb246IHN0cmluZywgY29tbWFuZE5hbWVzPzogQXJyYXk8c3RyaW5nPikgPT4ge1xuICAgICAgICBsZXQgcGFyZW50OiBDb21tYW5kIHwgdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCBjb21wbGV0ZUNvbW1hbmQ6IENvbW1hbmQgPSBjb21tYW5kTmFtZXNcbiAgICAgICAgICA/LnJlZHVjZSgoY21kOiBDb21tYW5kLCBuYW1lOiBzdHJpbmcpOiBDb21tYW5kID0+IHtcbiAgICAgICAgICAgIHBhcmVudCA9IGNtZDtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkQ21kOiBDb21tYW5kIHwgdW5kZWZpbmVkID0gY21kLmdldENvbW1hbmQobmFtZSwgZmFsc2UpO1xuICAgICAgICAgICAgaWYgKCFjaGlsZENtZCkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5rbm93bkNvbXBsZXRpb25Db21tYW5kKG5hbWUsIGNtZC5nZXRDb21tYW5kcygpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjaGlsZENtZDtcbiAgICAgICAgICB9LCBjbWQgfHwgdGhpcy5nZXRNYWluQ29tbWFuZCgpKSA/PyAoY21kIHx8IHRoaXMuZ2V0TWFpbkNvbW1hbmQoKSk7XG5cbiAgICAgICAgY29uc3QgY29tcGxldGlvbjogSUNvbXBsZXRpb24gfCB1bmRlZmluZWQgPSBjb21wbGV0ZUNvbW1hbmRcbiAgICAgICAgICAuZ2V0Q29tcGxldGlvbihhY3Rpb24pO1xuICAgICAgICBjb25zdCByZXN1bHQ6IEFycmF5PHN0cmluZyB8IG51bWJlcj4gPVxuICAgICAgICAgIGF3YWl0IGNvbXBsZXRpb24/LmNvbXBsZXRlKGNvbXBsZXRlQ29tbWFuZCwgcGFyZW50KSA/PyBbXTtcblxuICAgICAgICBpZiAocmVzdWx0Py5sZW5ndGgpIHtcbiAgICAgICAgICBEZW5vLnN0ZG91dC53cml0ZVN5bmMobmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKHJlc3VsdC5qb2luKFwiXFxuXCIpKSk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAucmVzZXQoKTtcbiAgfVxufVxuIl19