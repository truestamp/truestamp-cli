import { SqliteError } from "./error.ts";
// Move string to C
export function setStr(wasm, str, closure) {
    const bytes = new TextEncoder().encode(str);
    const ptr = wasm.malloc(bytes.length + 1);
    if (ptr === 0) {
        throw new SqliteError("Out of memory.");
    }
    const mem = new Uint8Array(wasm.memory.buffer, ptr, bytes.length + 1);
    mem.set(bytes);
    mem[bytes.length] = 0; // \0 terminator
    try {
        const result = closure(ptr);
        wasm.free(ptr);
        return result;
    } catch (error) {
        wasm.free(ptr);
        throw error;
    }
}
// Move Uint8Array to C
export function setArr(wasm, arr, closure) {
    const ptr = wasm.malloc(arr.length);
    if (ptr === 0) {
        throw new SqliteError("Out of memory.");
    }
    const mem = new Uint8Array(wasm.memory.buffer, ptr, arr.length);
    mem.set(arr);
    try {
        const result = closure(ptr);
        wasm.free(ptr);
        return result;
    } catch (error) {
        wasm.free(ptr);
        throw error;
    }
}
// Read string from C
export function getStr(wasm, ptr) {
    const len = wasm.str_len(ptr);
    const bytes = new Uint8Array(wasm.memory.buffer, ptr, len);
    if (len > 16) {
        return new TextDecoder().decode(bytes);
    } else {
        // This optimization is lifted from EMSCRIPTEN's glue code
        let str = "";
        let idx = 0;
        while(idx < len){
            let u0 = bytes[idx++];
            if (!(u0 & 0x80)) {
                str += String.fromCharCode(u0);
                continue;
            }
            const u1 = bytes[idx++] & 63;
            if ((u0 & 0xE0) == 0xC0) {
                str += String.fromCharCode((u0 & 31) << 6 | u1);
                continue;
            }
            const u2 = bytes[idx++] & 63;
            if ((u0 & 0xF0) == 0xE0) {
                u0 = (u0 & 15) << 12 | u1 << 6 | u2;
            } else {
                // cut warning
                u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | bytes[idx++] & 63;
            }
            if (u0 < 0x10000) {
                str += String.fromCharCode(u0);
            } else {
                const ch = u0 - 0x10000;
                str += String.fromCharCode(0xD800 | ch >> 10, 0xDC00 | ch & 0x3FF);
            }
        }
        return str;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvc3FsaXRlQHYzLjQuMS9zcmMvd2FzbS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBXYXNtIH0gZnJvbSBcIi4uL2J1aWxkL3NxbGl0ZS5qc1wiO1xuaW1wb3J0IHsgU3FsaXRlRXJyb3IgfSBmcm9tIFwiLi9lcnJvci50c1wiO1xuXG4vLyBNb3ZlIHN0cmluZyB0byBDXG5leHBvcnQgZnVuY3Rpb24gc2V0U3RyPFQ+KFxuICB3YXNtOiBXYXNtLFxuICBzdHI6IHN0cmluZyxcbiAgY2xvc3VyZTogKHB0cjogbnVtYmVyKSA9PiBULFxuKTogVCB7XG4gIGNvbnN0IGJ5dGVzID0gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKHN0cik7XG4gIGNvbnN0IHB0ciA9IHdhc20ubWFsbG9jKGJ5dGVzLmxlbmd0aCArIDEpO1xuICBpZiAocHRyID09PSAwKSB7XG4gICAgdGhyb3cgbmV3IFNxbGl0ZUVycm9yKFwiT3V0IG9mIG1lbW9yeS5cIik7XG4gIH1cbiAgY29uc3QgbWVtID0gbmV3IFVpbnQ4QXJyYXkod2FzbS5tZW1vcnkuYnVmZmVyLCBwdHIsIGJ5dGVzLmxlbmd0aCArIDEpO1xuICBtZW0uc2V0KGJ5dGVzKTtcbiAgbWVtW2J5dGVzLmxlbmd0aF0gPSAwOyAvLyBcXDAgdGVybWluYXRvclxuICB0cnkge1xuICAgIGNvbnN0IHJlc3VsdCA9IGNsb3N1cmUocHRyKTtcbiAgICB3YXNtLmZyZWUocHRyKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHdhc20uZnJlZShwdHIpO1xuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5cbi8vIE1vdmUgVWludDhBcnJheSB0byBDXG5leHBvcnQgZnVuY3Rpb24gc2V0QXJyPFQ+KFxuICB3YXNtOiBXYXNtLFxuICBhcnI6IFVpbnQ4QXJyYXksXG4gIGNsb3N1cmU6IChwdHI6IG51bWJlcikgPT4gVCxcbik6IFQge1xuICBjb25zdCBwdHIgPSB3YXNtLm1hbGxvYyhhcnIubGVuZ3RoKTtcbiAgaWYgKHB0ciA9PT0gMCkge1xuICAgIHRocm93IG5ldyBTcWxpdGVFcnJvcihcIk91dCBvZiBtZW1vcnkuXCIpO1xuICB9XG4gIGNvbnN0IG1lbSA9IG5ldyBVaW50OEFycmF5KHdhc20ubWVtb3J5LmJ1ZmZlciwgcHRyLCBhcnIubGVuZ3RoKTtcbiAgbWVtLnNldChhcnIpO1xuICB0cnkge1xuICAgIGNvbnN0IHJlc3VsdCA9IGNsb3N1cmUocHRyKTtcbiAgICB3YXNtLmZyZWUocHRyKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHdhc20uZnJlZShwdHIpO1xuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5cbi8vIFJlYWQgc3RyaW5nIGZyb20gQ1xuZXhwb3J0IGZ1bmN0aW9uIGdldFN0cih3YXNtOiBXYXNtLCBwdHI6IG51bWJlcik6IHN0cmluZyB7XG4gIGNvbnN0IGxlbiA9IHdhc20uc3RyX2xlbihwdHIpO1xuICBjb25zdCBieXRlcyA9IG5ldyBVaW50OEFycmF5KHdhc20ubWVtb3J5LmJ1ZmZlciwgcHRyLCBsZW4pO1xuICBpZiAobGVuID4gMTYpIHtcbiAgICByZXR1cm4gbmV3IFRleHREZWNvZGVyKCkuZGVjb2RlKGJ5dGVzKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBUaGlzIG9wdGltaXphdGlvbiBpcyBsaWZ0ZWQgZnJvbSBFTVNDUklQVEVOJ3MgZ2x1ZSBjb2RlXG4gICAgbGV0IHN0ciA9IFwiXCI7XG4gICAgbGV0IGlkeCA9IDA7XG4gICAgd2hpbGUgKGlkeCA8IGxlbikge1xuICAgICAgbGV0IHUwID0gYnl0ZXNbaWR4KytdO1xuICAgICAgaWYgKCEodTAgJiAweDgwKSkge1xuICAgICAgICBzdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSh1MCk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgY29uc3QgdTEgPSBieXRlc1tpZHgrK10gJiA2MztcbiAgICAgIGlmICgodTAgJiAweEUwKSA9PSAweEMwKSB7XG4gICAgICAgIHN0ciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKCgodTAgJiAzMSkgPDwgNikgfCB1MSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgY29uc3QgdTIgPSBieXRlc1tpZHgrK10gJiA2MztcbiAgICAgIGlmICgodTAgJiAweEYwKSA9PSAweEUwKSB7XG4gICAgICAgIHUwID0gKCh1MCAmIDE1KSA8PCAxMikgfCAodTEgPDwgNikgfCB1MjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGN1dCB3YXJuaW5nXG4gICAgICAgIHUwID0gKCh1MCAmIDcpIDw8IDE4KSB8ICh1MSA8PCAxMikgfCAodTIgPDwgNikgfCAoYnl0ZXNbaWR4KytdICYgNjMpO1xuICAgICAgfVxuICAgICAgaWYgKHUwIDwgMHgxMDAwMCkge1xuICAgICAgICBzdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSh1MCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBjaCA9IHUwIC0gMHgxMDAwMDtcbiAgICAgICAgc3RyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhEODAwIHwgKGNoID4+IDEwKSwgMHhEQzAwIHwgKGNoICYgMHgzRkYpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLFNBQVMsV0FBVyxRQUFRLFlBQVksQ0FBQztBQUV6QyxtQkFBbUI7QUFDbkIsT0FBTyxTQUFTLE1BQU0sQ0FDcEIsSUFBVSxFQUNWLEdBQVcsRUFDWCxPQUEyQixFQUN4QjtJQUNILE1BQU0sS0FBSyxHQUFHLElBQUksV0FBVyxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxBQUFDO0lBQzVDLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQUFBQztJQUMxQyxJQUFJLEdBQUcsS0FBSyxDQUFDLEVBQUU7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